{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0","program":"/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","scale_info","--edition=2018","/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"bitvec\"","--cfg","feature=\"decode\"","--cfg","feature=\"derive\"","--cfg","feature=\"scale-info-derive\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=66e73dd6b9eeddb1","-C","extra-filename=-66e73dd6b9eeddb1","--out-dir","/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","-L","dependency=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","--extern","bitvec=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libbitvec-adf1e13af4df6d8a.rmeta","--extern","cfg_if=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libcfg_if-a0e5287b6b4574e0.rmeta","--extern","derive_more=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libderive_more-b47a699816c56e02.dylib","--extern","scale=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libparity_scale_codec-48d05d2fb449a544.rmeta","--extern","scale_info_derive=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libscale_info_derive-c29d7b7c5358cf6e.dylib","--extern","serde=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libserde-6f8217b9748a5cc4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libscale_info-66e73dd6b9eeddb1.rmeta"},"prelude":{"crate_id":{"name":"scale_info","disambiguator":[15088973142150946651,0]},"crate_root":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src","external_crates":[{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","num":18,"id":{"name":"cfg_if","disambiguator":[13037983282529128945,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","num":19,"id":{"name":"serde","disambiguator":[9544137782352177236,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","num":20,"id":{"name":"serde_derive","disambiguator":[17621009518653333156,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","num":21,"id":{"name":"parity_scale_codec","disambiguator":[11025389664727138833,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","num":22,"id":{"name":"parity_scale_codec_derive","disambiguator":[13567950630339581430,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","num":23,"id":{"name":"arrayvec","disambiguator":[4765445384651765470,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","num":24,"id":{"name":"byte_slice_cast","disambiguator":[1450742829568187162,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","num":25,"id":{"name":"impl_trait_for_tuples","disambiguator":[1199501065919261664,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","num":26,"id":{"name":"derive_more","disambiguator":[8707368253099479613,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","num":27,"id":{"name":"scale_info_derive","disambiguator":[7230802250740732360,0]}}],"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":612,"byte_end":13031,"line_start":15,"line_end":377,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":3737},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13918,"byte_end":13921,"line_start":27,"line_end":27,"column_start":13,"column_end":16},"alias_span":null,"name":"any","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":624},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13935,"byte_end":13941,"line_start":28,"line_end":28,"column_start":13,"column_end":19},"alias_span":null,"name":"borrow","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":191},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13955,"byte_end":13960,"line_start":29,"line_end":29,"column_start":13,"column_end":18},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":2673},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13974,"byte_end":13977,"line_start":30,"line_end":30,"column_start":13,"column_end":16},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":1099},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13991,"byte_end":14002,"line_start":31,"line_end":31,"column_start":13,"column_end":24},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":4445},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14016,"byte_end":14019,"line_start":32,"line_end":32,"column_start":13,"column_end":16},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":6},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14033,"byte_end":14039,"line_start":33,"line_end":33,"column_start":13,"column_end":19},"alias_span":null,"name":"format","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":9747},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14053,"byte_end":14057,"line_start":34,"line_end":34,"column_start":13,"column_end":17},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":3008},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14071,"byte_end":14077,"line_start":35,"line_end":35,"column_start":13,"column_end":19},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":1832},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14091,"byte_end":14094,"line_start":36,"line_end":36,"column_start":13,"column_end":16},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":5555},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14108,"byte_end":14111,"line_start":37,"line_end":37,"column_start":13,"column_end":16},"alias_span":null,"name":"num","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":2,"index":3089},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14125,"byte_end":14128,"line_start":38,"line_end":38,"column_start":13,"column_end":16},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":5446},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14142,"byte_end":14148,"line_start":39,"line_end":39,"column_start":13,"column_end":19},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":6303},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14162,"byte_end":14165,"line_start":40,"line_end":40,"column_start":13,"column_end":16},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":14162,"byte_end":14165,"line_start":40,"line_end":40,"column_start":13,"column_end":16},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":6}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65432,"byte_end":65433,"line_start":47,"line_end":47,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"TypeDefComposite","parent":{"krate":0,"index":544}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65447,"byte_end":65448,"line_start":48,"line_end":48,"column_start":13,"column_end":14},"alias_span":null,"name":"*","value":"Field","parent":{"krate":0,"index":544}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65460,"byte_end":65461,"line_start":49,"line_end":49,"column_start":11,"column_end":12},"alias_span":null,"name":"*","value":"Path","parent":{"krate":0,"index":544}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65476,"byte_end":65477,"line_start":50,"line_end":50,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"TypeDefVariant, Variant","parent":{"krate":0,"index":544}},{"kind":"Use","ref_id":{"krate":21,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11609,"byte_end":11614,"line_start":330,"line_end":330,"column_start":9,"column_end":14},"alias_span":null,"name":"scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1480},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11648,"byte_end":11656,"line_start":333,"line_end":333,"column_start":16,"column_end":24},"alias_span":null,"name":"MetaType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11682,"byte_end":11694,"line_start":335,"line_end":335,"column_start":9,"column_end":21},"alias_span":null,"name":"IntoPortable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2978},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11704,"byte_end":11720,"line_start":336,"line_end":336,"column_start":9,"column_end":25},"alias_span":null,"name":"PortableRegistry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3000},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11730,"byte_end":11738,"line_start":337,"line_end":337,"column_start":9,"column_end":17},"alias_span":null,"name":"Registry","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11755,"byte_end":11756,"line_start":339,"line_end":339,"column_start":9,"column_end":10},"alias_span":null,"name":"*","value":"Type, TypeDefComposite, TypeDefPrimitive, TypeDefVariant, Field, TypeDefArray, TypeDefSequence, Path, Variant, TypeDef, TypeDefCompact, TypeDefTuple, TypeParameter","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":261},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11816,"byte_end":11824,"line_start":343,"line_end":343,"column_start":28,"column_end":36},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":612,"byte_end":13031,"line_start":15,"line_end":377,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":167},{"krate":0,"index":191},{"krate":0,"index":384},{"krate":0,"index":424},{"krate":0,"index":477},{"krate":0,"index":544},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":938}],"decl_id":null,"docs":" Efficient and space-efficient serialization of Rust types.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":655,"byte_end":677,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ Efficient and space-efficient serialization of Rust types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":679,"byte_end":741,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":742,"byte_end":745,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This library provides structures to easily retrieve compile-time type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":746,"byte_end":819,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ information at runtime and also to serialize this information in a","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":820,"byte_end":890,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ space-efficient form, aka `PortableForm`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":891,"byte_end":936,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":937,"byte_end":940,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Registry","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":941,"byte_end":955,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":956,"byte_end":959,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ At the heart of its functionality is the [`Registry`](`crate::Registry`)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":960,"byte_end":1036,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ that acts as a cache for known types in order to efficiently deduplicate","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1037,"byte_end":1113,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ types and ensure a space-efficient serialization.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1114,"byte_end":1167,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1168,"byte_end":1171,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Type Information","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1172,"byte_end":1194,"line_start":30,"line_end":30,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1195,"byte_end":1198,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Information about types is provided via the [`TypeInfo`](`crate::TypeInfo`)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1199,"byte_end":1278,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ trait.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1279,"byte_end":1289,"line_start":33,"line_end":33,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1290,"byte_end":1293,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This trait should be implemented for all types that are serializable.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1294,"byte_end":1367,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ `scale-info` provides implementations for all commonly used Rust standard","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1368,"byte_end":1445,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ types and a derive macro for implementing of custom types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1446,"byte_end":1508,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1509,"byte_end":1512,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Deriving `TypeInfo`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1513,"byte_end":1539,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1540,"byte_end":1543,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Enable the `derive` feature of this crate:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1544,"byte_end":1590,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1591,"byte_end":1594,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1595,"byte_end":1606,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ scale-info = { version = \"0.6.0\", features = [\"derive\"] }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1607,"byte_end":1668,"line_start":44,"line_end":44,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1669,"byte_end":1676,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1677,"byte_end":1680,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1681,"byte_end":1694,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ use scale_info::TypeInfo;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1695,"byte_end":1724,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1725,"byte_end":1728,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1729,"byte_end":1752,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ struct MyStruct {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1753,"byte_end":1774,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/     a: u32,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1775,"byte_end":1790,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/     b: MyEnum,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1791,"byte_end":1809,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1810,"byte_end":1815,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1816,"byte_end":1819,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1820,"byte_end":1843,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1844,"byte_end":1861,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"/     A(bool),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1862,"byte_end":1878,"line_start":58,"line_end":58,"column_start":1,"column_end":17}},{"value":"/     B { f: Vec<u8> },","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1879,"byte_end":1904,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"/     C,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1905,"byte_end":1915,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1916,"byte_end":1921,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1922,"byte_end":1929,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1930,"byte_end":1933,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Attributes","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1934,"byte_end":1952,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1953,"byte_end":1956,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(bounds(..))]`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1957,"byte_end":1993,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1994,"byte_end":1997,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Replace the auto-generated `where` clause bounds for the derived `TypeInfo` implementation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":1998,"byte_end":2093,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2094,"byte_end":2097,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2098,"byte_end":2111,"line_start":70,"line_end":70,"column_start":1,"column_end":14}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2112,"byte_end":2135,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(bounds(T: TypeInfo + 'static))]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2136,"byte_end":2184,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ struct MyStruct<T> {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2185,"byte_end":2209,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     a: Vec<T>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2210,"byte_end":2228,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2229,"byte_end":2234,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2235,"byte_end":2242,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2243,"byte_end":2246,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ The derive macro automatically adds `TypeInfo` bounds for all type parameters, and all field","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2247,"byte_end":2343,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"/ types containing type parameters or associated types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2344,"byte_end":2401,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2402,"byte_end":2405,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This is naive and sometimes adds unnecessary bounds, since on a syntactical level there is no","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2406,"byte_end":2503,"line_start":81,"line_end":81,"column_start":1,"column_end":98}},{"value":"/ way to differentiate between a generic type constructor and a type alias with a generic argument","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2504,"byte_end":2604,"line_start":82,"line_end":82,"column_start":1,"column_end":101}},{"value":"/ e.g.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2605,"byte_end":2613,"line_start":83,"line_end":83,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2614,"byte_end":2617,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2618,"byte_end":2631,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/ trait MyTrait {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2632,"byte_end":2651,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"/     type A;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2652,"byte_end":2667,"line_start":87,"line_end":87,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2668,"byte_end":2673,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2674,"byte_end":2677,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ type MyAlias<T> = <T as MyTrait>::A;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2678,"byte_end":2718,"line_start":90,"line_end":90,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2719,"byte_end":2722,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2723,"byte_end":2746,"line_start":92,"line_end":92,"column_start":1,"column_end":24}},{"value":"/ struct MyStruct<T> {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2747,"byte_end":2771,"line_start":93,"line_end":93,"column_start":1,"column_end":25}},{"value":"/     a: MyAlias<T>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2772,"byte_end":2794,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/     b: Vec<T>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2795,"byte_end":2813,"line_start":95,"line_end":95,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2814,"byte_end":2819,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2820,"byte_end":2827,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2828,"byte_end":2831,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ So for the above, since a `MyAlias<T>: TypeInfo` bound is required, and we can't distinguish","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2832,"byte_end":2928,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ between `MyAlias<T>` and `Vec<T>`, then the `TypeInfo` bound is simply added for all","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":2929,"byte_end":3017,"line_start":100,"line_end":100,"column_start":1,"column_end":89}},{"value":"/ fields which contain any type param. In this case the redundant `Vec<T>: TypeInfo`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3018,"byte_end":3104,"line_start":101,"line_end":101,"column_start":1,"column_end":87}},{"value":"/ would be added.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3105,"byte_end":3124,"line_start":102,"line_end":102,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3125,"byte_end":3128,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This is usually okay, but in some circumstances can cause problems, for example with the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3129,"byte_end":3221,"line_start":104,"line_end":104,"column_start":1,"column_end":93}},{"value":"/ [`overflow evaluating the requirement`] error [here](https://github.com/paritytech/scale-info/blob/master/test_suite/tests/ui/pass_custom_bounds_fix_overflow.rs).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3222,"byte_end":3388,"line_start":105,"line_end":105,"column_start":1,"column_end":167}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3389,"byte_end":3392,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ The `bounds` attribute provides an [\"escape hatch\"](https://serde.rs/attr-bound.html) to allow","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3393,"byte_end":3491,"line_start":107,"line_end":107,"column_start":1,"column_end":99}},{"value":"/ the programmer control of the `where` clause on the generated `impl`, to solve this and other","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3492,"byte_end":3589,"line_start":108,"line_end":108,"column_start":1,"column_end":98}},{"value":"/ issues that can't be foreseen by the auto-generated bounds heuristic.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3590,"byte_end":3663,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3664,"byte_end":3667,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(skip_type_params(..))]`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3668,"byte_end":3714,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3715,"byte_end":3718,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ Remove the requirement for the specified type params to implement `TypeInfo`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3719,"byte_end":3800,"line_start":113,"line_end":113,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3801,"byte_end":3804,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Consider a simple example of a type parameter which is used for associated types, but the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3805,"byte_end":3903,"line_start":115,"line_end":115,"column_start":1,"column_end":99}},{"value":"/ itself does not carry any type information. Consider this common pattern:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3904,"byte_end":3981,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3982,"byte_end":3985,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":3986,"byte_end":3999,"line_start":118,"line_end":118,"column_start":1,"column_end":14}},{"value":"/ trait Config {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4000,"byte_end":4018,"line_start":119,"line_end":119,"column_start":1,"column_end":19}},{"value":"/     type Balance;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4019,"byte_end":4040,"line_start":120,"line_end":120,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4041,"byte_end":4046,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4047,"byte_end":4050,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ struct Runtime; // doesn't implement `TypeInfo`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4051,"byte_end":4102,"line_start":123,"line_end":123,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4103,"byte_end":4106,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ impl Config for Runtime {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4107,"byte_end":4136,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/     type Balance = u64;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4137,"byte_end":4164,"line_start":126,"line_end":126,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4165,"byte_end":4170,"line_start":127,"line_end":127,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4171,"byte_end":4174,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ #[allow(unused)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4175,"byte_end":4195,"line_start":129,"line_end":129,"column_start":1,"column_end":21}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4196,"byte_end":4219,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(skip_type_params(T))]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4220,"byte_end":4258,"line_start":131,"line_end":131,"column_start":1,"column_end":39}},{"value":"/ struct A<T: Config> {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4259,"byte_end":4284,"line_start":132,"line_end":132,"column_start":1,"column_end":26}},{"value":"/     balance: T::Balance,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4285,"byte_end":4313,"line_start":133,"line_end":133,"column_start":1,"column_end":29}},{"value":"/     marker: core::marker::PhantomData<T>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4314,"byte_end":4359,"line_start":134,"line_end":134,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4360,"byte_end":4365,"line_start":135,"line_end":135,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4366,"byte_end":4369,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ fn assert_type_info<T: scale_info::TypeInfo + 'static>() {}","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4370,"byte_end":4433,"line_start":137,"line_end":137,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4434,"byte_end":4437,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4438,"byte_end":4453,"line_start":139,"line_end":139,"column_start":1,"column_end":16}},{"value":"/     // without the `skip_type_params` attribute this will fail.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4454,"byte_end":4521,"line_start":140,"line_end":140,"column_start":1,"column_end":68}},{"value":"/     assert_type_info::<A<Runtime>>();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4522,"byte_end":4563,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4564,"byte_end":4569,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4570,"byte_end":4577,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4578,"byte_end":4581,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ By default, the derived `TypeInfo` implementation will add the type of all type parameters to","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4582,"byte_end":4679,"line_start":145,"line_end":145,"column_start":1,"column_end":98}},{"value":"/ the `TypeParameter` specification e.g.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4680,"byte_end":4722,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4723,"byte_end":4726,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ `type_params(vec![TypeParameter::new(\"T\", Some(MetaType::new::<T>()))])`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4727,"byte_end":4803,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4804,"byte_end":4807,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ In the example above, this will cause a compiler error because `Runtime` is the concrete tyoe","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4808,"byte_end":4905,"line_start":150,"line_end":150,"column_start":1,"column_end":98}},{"value":"/ for `T`, which does not satisfy the `TypeInfo` requirement of `MetaType::new::<T>()`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4906,"byte_end":4995,"line_start":151,"line_end":151,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":4996,"byte_end":4999,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Simply adding a `TypeInfo` derive to `Runtime` is one way of solving this, but that could be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5000,"byte_end":5096,"line_start":153,"line_end":153,"column_start":1,"column_end":97}},{"value":"/ misleading (why does it need `TypeInfo` if a value of that type is never encoded?), and can","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5097,"byte_end":5192,"line_start":154,"line_end":154,"column_start":1,"column_end":96}},{"value":"/ sometimes require adding `TypeInfo` bounds in other impl blocks.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5193,"byte_end":5261,"line_start":155,"line_end":155,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5262,"byte_end":5265,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ The `skip_type_params` attribute solves this, providing an additional \"escape hatch\" which","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5266,"byte_end":5360,"line_start":157,"line_end":157,"column_start":1,"column_end":95}},{"value":"/ prevents the given type parameter's type information being required:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5361,"byte_end":5433,"line_start":158,"line_end":158,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ `type_params(vec![TypeParameter::new(\"T\", None)])`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5438,"byte_end":5492,"line_start":160,"line_end":160,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5493,"byte_end":5496,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The generated type params do not now require `T` to implement `TypeInfo`, so the auto-generated","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5497,"byte_end":5596,"line_start":162,"line_end":162,"column_start":1,"column_end":100}},{"value":"/ bound is not added to the generated `TypeInfo` `where` clause.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5597,"byte_end":5663,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5664,"byte_end":5667,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ #### Combining `bounds` and `skip_type_params`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5668,"byte_end":5718,"line_start":165,"line_end":165,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5719,"byte_end":5722,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ These two attributes can complement one another, particularly in the case where using `bounds`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5723,"byte_end":5821,"line_start":167,"line_end":167,"column_start":1,"column_end":99}},{"value":"/ would still require manually adding a `TypeInfo` bound for the type parameter:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5822,"byte_end":5904,"line_start":168,"line_end":168,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5905,"byte_end":5908,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5909,"byte_end":5922,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/ #[derive(TypeInfo)]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5923,"byte_end":5946,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ #[scale_info(bounds(), skip_type_params(T))]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5947,"byte_end":5995,"line_start":172,"line_end":172,"column_start":1,"column_end":49}},{"value":"/ struct A<T> {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":5996,"byte_end":6013,"line_start":173,"line_end":173,"column_start":1,"column_end":18}},{"value":"/     marker: core::marker::PhantomData<T>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6014,"byte_end":6059,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6060,"byte_end":6065,"line_start":175,"line_end":175,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6066,"byte_end":6073,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6074,"byte_end":6077,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Without `skip_type_params` in the example above, it would require the `TypeInfo` bounds for `T`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6078,"byte_end":6177,"line_start":178,"line_end":178,"column_start":1,"column_end":100}},{"value":"/ to be added manually e.g. `#[scale_info(bounds(T: TypeInfo + 'static))]`. Since the intention of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6178,"byte_end":6278,"line_start":179,"line_end":179,"column_start":1,"column_end":101}},{"value":"/ the empty bounds is to **remove** all type bounds, then the addition of `skip_type_params`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6279,"byte_end":6373,"line_start":180,"line_end":180,"column_start":1,"column_end":95}},{"value":"/ allows this to compile successfully.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6374,"byte_end":6414,"line_start":181,"line_end":181,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6415,"byte_end":6418,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ ##### Precedence","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6419,"byte_end":6439,"line_start":183,"line_end":183,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6440,"byte_end":6443,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ When used independently, both attributes modify the `where` clause of the derived `TypeInfo`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6444,"byte_end":6540,"line_start":185,"line_end":185,"column_start":1,"column_end":97}},{"value":"/ impl. When used together, the predicates supplied in the `bounds` attribute replaces *all*","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6541,"byte_end":6635,"line_start":186,"line_end":186,"column_start":1,"column_end":95}},{"value":"/ auto-generated bounds, and `skip_type_params` will have no effect on the resulting `where`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6636,"byte_end":6730,"line_start":187,"line_end":187,"column_start":1,"column_end":95}},{"value":"/ clause.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6731,"byte_end":6742,"line_start":188,"line_end":188,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6743,"byte_end":6746,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ **Note:** When using `bounds` without `skip_type_params`, it is therefore required to manually","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6747,"byte_end":6845,"line_start":190,"line_end":190,"column_start":1,"column_end":99}},{"value":"/ add a `TypeInfo` bound for any non skipped type parameters. The compiler will let you know.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6846,"byte_end":6941,"line_start":191,"line_end":191,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6942,"byte_end":6945,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ #### `#[scale_info(capture_docs = \"default|always|never\")]`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":6946,"byte_end":7009,"line_start":193,"line_end":193,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7010,"byte_end":7013,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Docs for types, fields and variants can all be captured by the `docs` feature being enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7014,"byte_end":7110,"line_start":195,"line_end":195,"column_start":1,"column_end":97}},{"value":"/ This can be overridden using the `capture_docs` attribute:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7111,"byte_end":7173,"line_start":196,"line_end":196,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7174,"byte_end":7177,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"default\")]` will capture docs iff the `docs` feature is enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7178,"byte_end":7276,"line_start":198,"line_end":198,"column_start":1,"column_end":99}},{"value":"/ This is the default if `capture_docs` is not specified.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7277,"byte_end":7336,"line_start":199,"line_end":199,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7337,"byte_end":7340,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"always\")]` will capture docs for the annotated type even if the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7341,"byte_end":7438,"line_start":201,"line_end":201,"column_start":1,"column_end":98}},{"value":"/ `docs` feature is *not* enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7439,"byte_end":7475,"line_start":202,"line_end":202,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7476,"byte_end":7479,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ `#[scale_info(capture_docs = \"never\")]` will *not* capture docs for the annotated type even if","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7480,"byte_end":7578,"line_start":204,"line_end":204,"column_start":1,"column_end":99}},{"value":"/ the `docs` is enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7579,"byte_end":7605,"line_start":205,"line_end":205,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7606,"byte_end":7609,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This is useful e.g. when compiling metadata into a Wasm blob, and it is desirable to keep the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7610,"byte_end":7707,"line_start":207,"line_end":207,"column_start":1,"column_end":98}},{"value":"/ binary size as small as possible, so the `docs` feature would be disabled. In case the docs for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7708,"byte_end":7807,"line_start":208,"line_end":208,"column_start":1,"column_end":100}},{"value":"/ some types is necessary they could be enabled on a per-type basis with the above attribute.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7808,"byte_end":7903,"line_start":209,"line_end":209,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7904,"byte_end":7907,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ # Forms","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7908,"byte_end":7919,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7920,"byte_end":7923,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ To bridge between compile-time type information and runtime the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7924,"byte_end":7991,"line_start":213,"line_end":213,"column_start":1,"column_end":68}},{"value":"/ [`MetaForm`](`crate::form::MetaForm`) is used to easily retrieve all","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":7992,"byte_end":8064,"line_start":214,"line_end":214,"column_start":1,"column_end":73}},{"value":"/ information needed to uniquely identify types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8065,"byte_end":8115,"line_start":215,"line_end":215,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8116,"byte_end":8119,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ The `MetaForm` and its associated `Registry` can be transformed into the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8120,"byte_end":8196,"line_start":217,"line_end":217,"column_start":1,"column_end":77}},{"value":"/ space-efficient form by the [`IntoPortable`](`crate::IntoPortable`) trait; it is","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8197,"byte_end":8281,"line_start":218,"line_end":218,"column_start":1,"column_end":85}},{"value":"/ used internally by the [`Registry`](`crate::Registry`) in order to convert","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8282,"byte_end":8360,"line_start":219,"line_end":219,"column_start":1,"column_end":79}},{"value":"/ the expanded types into their space-efficient form.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8361,"byte_end":8416,"line_start":220,"line_end":220,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8417,"byte_end":8420,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Symbols and Namespaces","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8421,"byte_end":8449,"line_start":222,"line_end":222,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8450,"byte_end":8453,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ To differentiate two types sharing the same name, namespaces are used.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8454,"byte_end":8528,"line_start":224,"line_end":224,"column_start":1,"column_end":75}},{"value":"/ Commonly the namespace is equal to the one where the type has been defined","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8529,"byte_end":8607,"line_start":225,"line_end":225,"column_start":1,"column_end":79}},{"value":"/ in. For Rust prelude types such as [`Option`](`std::option::Option`) and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8608,"byte_end":8684,"line_start":226,"line_end":226,"column_start":1,"column_end":77}},{"value":"/ [`Result`](`std::result::Result`) the root namespace (empty namespace) is","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8685,"byte_end":8762,"line_start":227,"line_end":227,"column_start":1,"column_end":78}},{"value":"/ used.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8763,"byte_end":8772,"line_start":228,"line_end":228,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8773,"byte_end":8776,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ To use this library simply use the [`MetaForm`](`crate::form::MetaForm`)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8777,"byte_end":8853,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ initially with your own data structures; make them generic over the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8854,"byte_end":8925,"line_start":231,"line_end":231,"column_start":1,"column_end":72}},{"value":"/ [`Form`](`crate::form::Form`) trait just as has been done in this crate with","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":8926,"byte_end":9006,"line_start":232,"line_end":232,"column_start":1,"column_end":81}},{"value":"/ [`TypeInfo`](`crate::TypeInfo`) in order to get a simple implementation of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9007,"byte_end":9085,"line_start":233,"line_end":233,"column_start":1,"column_end":79}},{"value":"/ [`IntoPortable`](`crate::IntoPortable`). Use a single instance of the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9086,"byte_end":9159,"line_start":234,"line_end":234,"column_start":1,"column_end":74}},{"value":"/ [`Registry`](`crate::Registry`) for compaction and provide this registry","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9160,"byte_end":9236,"line_start":235,"line_end":235,"column_start":1,"column_end":77}},{"value":"/ instance upon serialization.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9237,"byte_end":9269,"line_start":236,"line_end":236,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9270,"byte_end":9273,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ A usage example can be found in ink! here:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9274,"byte_end":9320,"line_start":238,"line_end":238,"column_start":1,"column_end":47}},{"value":"/ https://github.com/paritytech/ink/blob/master/abi/src/specs.rs","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":9321,"byte_end":9387,"line_start":239,"line_end":239,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":981}],"decl_id":null,"docs":" Exports from `std`, `core` and `alloc` crates.","sig":null,"attributes":[{"value":"/ Exports from `std`, `core` and `alloc` crates.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13645,"byte_end":13695,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13696,"byte_end":13699,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Guarantees a stable interface between `std` and `no_std` modes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/prelude.rs","byte_start":13700,"byte_end":13767,"line_start":17,"line_end":17,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"build","qualname":"::build","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":129},{"krate":0,"index":135},{"krate":0,"index":983},{"krate":0,"index":985},{"krate":0,"index":138},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":165}],"decl_id":null,"docs":" Builders for defining metadata for variant types (enums), and composite types (structs).\n They are designed to allow only construction of valid definitions.","sig":null,"attributes":[{"value":"/ Builders for defining metadata for variant types (enums), and composite types (structs).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15145,"byte_end":15237,"line_start":15,"line_end":15,"column_start":1,"column_end":93}},{"value":"/ They are designed to allow only construction of valid definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15238,"byte_end":15308,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15309,"byte_end":15312,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ In most cases we recommend using the `scale-info-derive` crate to auto generate the builder","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15313,"byte_end":15408,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ constructions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15409,"byte_end":15427,"line_start":19,"line_end":19,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15428,"byte_end":15431,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15432,"byte_end":15446,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15447,"byte_end":15450,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Generic struct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15451,"byte_end":15472,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15473,"byte_end":15480,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::Fields, type_params, MetaType, Path, Type, TypeInfo};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15481,"byte_end":15564,"line_start":25,"line_end":25,"column_start":1,"column_end":84}},{"value":"/ struct Foo<T> {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15565,"byte_end":15584,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"/     bar: T,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15585,"byte_end":15600,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     data: u64,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15601,"byte_end":15619,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15620,"byte_end":15625,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15626,"byte_end":15629,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ impl<T> TypeInfo for Foo<T>","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15630,"byte_end":15661,"line_start":31,"line_end":31,"column_start":1,"column_end":32}},{"value":"/ where","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15662,"byte_end":15671,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"/     T: TypeInfo + 'static,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15672,"byte_end":15702,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15703,"byte_end":15708,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/     type Identity = Self;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15709,"byte_end":15738,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15739,"byte_end":15742,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15743,"byte_end":15775,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15776,"byte_end":15803,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15804,"byte_end":15859,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/             .type_params(type_params!(T))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15860,"byte_end":15905,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/             .composite(Fields::named()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15906,"byte_end":15948,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/                 .field(|f| f.ty::<T>().name(\"bar\").type_name(\"T\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":15949,"byte_end":16019,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/                 .field(|f| f.ty::<u64>().name(\"data\").type_name(\"u64\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16020,"byte_end":16095,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/             )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16096,"byte_end":16113,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16114,"byte_end":16123,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16124,"byte_end":16129,"line_start":46,"line_end":46,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16130,"byte_end":16137,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ ## Tuple struct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16138,"byte_end":16157,"line_start":48,"line_end":48,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16158,"byte_end":16165,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::Fields, MetaType, Path, Type, TypeInfo};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16166,"byte_end":16236,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ struct Foo(u32, bool);","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16237,"byte_end":16263,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16264,"byte_end":16267,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ impl TypeInfo for Foo {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16268,"byte_end":16295,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/     type Identity = Self;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16296,"byte_end":16325,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16326,"byte_end":16329,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16330,"byte_end":16362,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16363,"byte_end":16390,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16391,"byte_end":16446,"line_start":58,"line_end":58,"column_start":1,"column_end":56}},{"value":"/             .composite(Fields::unnamed()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16447,"byte_end":16491,"line_start":59,"line_end":59,"column_start":1,"column_end":45}},{"value":"/                 .field(|f| f.ty::<u32>().type_name(\"u32\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16492,"byte_end":16554,"line_start":60,"line_end":60,"column_start":1,"column_end":63}},{"value":"/                 .field(|f| f.ty::<bool>().type_name(\"bool\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16555,"byte_end":16619,"line_start":61,"line_end":61,"column_start":1,"column_end":65}},{"value":"/             )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16620,"byte_end":16637,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16638,"byte_end":16647,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16648,"byte_end":16653,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16654,"byte_end":16661,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ ## Enum with fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16662,"byte_end":16685,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16686,"byte_end":16693,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::{Fields, Variants}, type_params, MetaType, Path, Type, TypeInfo, Variant};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16694,"byte_end":16798,"line_start":68,"line_end":68,"column_start":1,"column_end":105}},{"value":"/ enum Foo<T>{","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16799,"byte_end":16815,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"/     A(T),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16816,"byte_end":16829,"line_start":70,"line_end":70,"column_start":1,"column_end":14}},{"value":"/     B { f: u32 },","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16830,"byte_end":16851,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/     C,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16852,"byte_end":16862,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16863,"byte_end":16868,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16869,"byte_end":16872,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ impl<T> TypeInfo for Foo<T>","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16873,"byte_end":16904,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"/ where","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16905,"byte_end":16914,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/     T: TypeInfo + 'static,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16915,"byte_end":16945,"line_start":77,"line_end":77,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16946,"byte_end":16951,"line_start":78,"line_end":78,"column_start":1,"column_end":6}},{"value":"/     type Identity = Self;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16952,"byte_end":16981,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16982,"byte_end":16985,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":16986,"byte_end":17018,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17019,"byte_end":17046,"line_start":82,"line_end":82,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17047,"byte_end":17102,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"/                .type_params(type_params!(T))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17103,"byte_end":17151,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/             .variant(","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17152,"byte_end":17177,"line_start":85,"line_end":85,"column_start":1,"column_end":26}},{"value":"/                 Variants::new()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17178,"byte_end":17213,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/                     .variant(\"A\", |v| v","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17214,"byte_end":17257,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/                         .index(0)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17258,"byte_end":17295,"line_start":88,"line_end":88,"column_start":1,"column_end":38}},{"value":"/                         .fields(Fields::unnamed().field(|f| f.ty::<T>().type_name(\"T\")))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17296,"byte_end":17388,"line_start":89,"line_end":89,"column_start":1,"column_end":93}},{"value":"/                     )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17389,"byte_end":17414,"line_start":90,"line_end":90,"column_start":1,"column_end":26}},{"value":"/                     .variant(\"B\", |v| v","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17415,"byte_end":17458,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/                         .index(1)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17459,"byte_end":17496,"line_start":92,"line_end":92,"column_start":1,"column_end":38}},{"value":"/                         .fields(Fields::named().field(|f| f.ty::<u32>().name(\"f\").type_name(\"u32\")))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17497,"byte_end":17601,"line_start":93,"line_end":93,"column_start":1,"column_end":105}},{"value":"/                     )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17602,"byte_end":17627,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/                     .variant_unit(\"A\", 2)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17628,"byte_end":17673,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"/             )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17674,"byte_end":17691,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17692,"byte_end":17701,"line_start":97,"line_end":97,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17702,"byte_end":17707,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17708,"byte_end":17715,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ## Enum without fields, aka C-style enums.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17716,"byte_end":17762,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17763,"byte_end":17770,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ # use scale_info::{build::{Fields, Variants}, MetaType, Path, Type, TypeInfo, Variant};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17771,"byte_end":17862,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ enum Foo {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17863,"byte_end":17877,"line_start":103,"line_end":103,"column_start":1,"column_end":15}},{"value":"/     A,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17878,"byte_end":17888,"line_start":104,"line_end":104,"column_start":1,"column_end":11}},{"value":"/     B,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17889,"byte_end":17899,"line_start":105,"line_end":105,"column_start":1,"column_end":11}},{"value":"/     C = 33,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17900,"byte_end":17915,"line_start":106,"line_end":106,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17916,"byte_end":17921,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17922,"byte_end":17925,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ impl TypeInfo for Foo {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17926,"byte_end":17953,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/     type Identity = Self;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17954,"byte_end":17983,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17984,"byte_end":17987,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     fn type_info() -> Type {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":17988,"byte_end":18020,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/         Type::builder()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18021,"byte_end":18048,"line_start":113,"line_end":113,"column_start":1,"column_end":28}},{"value":"/             .path(Path::new(\"Foo\", module_path!()))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18049,"byte_end":18104,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/             .variant(","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18105,"byte_end":18130,"line_start":115,"line_end":115,"column_start":1,"column_end":26}},{"value":"/                 Variants::new()","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18131,"byte_end":18166,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/                     .variant(\"A\", |v| v.index(1))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18167,"byte_end":18220,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/                     .variant(\"B\", |v| v.index(2))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18221,"byte_end":18274,"line_start":118,"line_end":118,"column_start":1,"column_end":54}},{"value":"/                     .variant(\"C\", |v| v.index(33))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18275,"byte_end":18329,"line_start":119,"line_end":119,"column_start":1,"column_end":55}},{"value":"/             )","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18330,"byte_end":18347,"line_start":120,"line_end":120,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18348,"byte_end":18357,"line_start":121,"line_end":121,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18358,"byte_end":18363,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18364,"byte_end":18371,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18685,"byte_end":18690,"line_start":145,"line_end":145,"column_start":9,"column_end":14},"name":"state","qualname":"::build::state","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" State types for type builders which require a Path.\n","sig":null,"attributes":[{"value":"/ State types for type builders which require a Path.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18621,"byte_end":18676,"line_start":144,"line_end":144,"column_start":1,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":53},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18774,"byte_end":18789,"line_start":147,"line_end":147,"column_start":14,"column_end":29},"name":"PathNotAssigned","qualname":"::build::state::PathNotAssigned","value":"pub enum PathNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has not assigned a Path to the type\n","sig":null,"attributes":[{"value":"/ State where the builder has not assigned a Path to the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18697,"byte_end":18760,"line_start":146,"line_end":146,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":54},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18870,"byte_end":18882,"line_start":149,"line_end":149,"column_start":14,"column_end":26},"name":"PathAssigned","qualname":"::build::state::PathAssigned","value":"pub enum PathAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has assigned a Path to the type\n","sig":null,"attributes":[{"value":"/ State where the builder has assigned a Path to the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18797,"byte_end":18856,"line_start":148,"line_end":148,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18937,"byte_end":18948,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"TypeBuilder","qualname":"::build::TypeBuilder","value":"TypeBuilder {  }","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"decl_id":null,"docs":" Builds a [`Type`](`crate::Type`)\n","sig":null,"attributes":[{"value":"/ Builds a [`Type`](`crate::Type`)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":18889,"byte_end":18925,"line_start":152,"line_end":152,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19462,"byte_end":19466,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"path","qualname":"<TypeBuilder<state::PathNotAssigned>>::path","value":"pub fn path(Self, Path) -> TypeBuilder<state::PathAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Set the Path for the type\n","sig":null,"attributes":[{"value":"/ Set the Path for the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19421,"byte_end":19450,"line_start":172,"line_end":172,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20019,"byte_end":20026,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"variant","qualname":"<TypeBuilder<state::PathAssigned>>::variant","value":"pub fn variant(Self, Variants) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a \"variant\" type i.e an `enum`\n","sig":null,"attributes":[{"value":"/ Construct a \"variant\" type i.e an `enum`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19963,"byte_end":20007,"line_start":192,"line_end":192,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20172,"byte_end":20181,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"composite","qualname":"<TypeBuilder<state::PathAssigned>>::composite","value":"pub fn composite<F>(Self, FieldsBuilder<F>) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a \"composite\" type i.e. a `struct`\n","sig":null,"attributes":[{"value":"/ Construct a \"composite\" type i.e. a `struct`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20112,"byte_end":20160,"line_start":197,"line_end":197,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20388,"byte_end":20399,"line_start":205,"line_end":205,"column_start":12,"column_end":23},"name":"type_params","qualname":"<TypeBuilder<S>>::type_params","value":"pub fn type_params<I>(Self, I) -> Self where I: IntoIterator<Item =\nTypeParameter>","parent":null,"children":[],"decl_id":null,"docs":" Set the type parameters if it's a generic type\n","sig":null,"attributes":[{"value":"/ Set the type parameters if it's a generic type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20326,"byte_end":20376,"line_start":204,"line_end":204,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20897,"byte_end":20901,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"docs","qualname":"<TypeBuilder<S>>::docs","value":"pub fn docs(Self, &'static [&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20764,"byte_end":20793,"line_start":220,"line_end":220,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20798,"byte_end":20807,"line_start":221,"line_end":221,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20812,"byte_end":20885,"line_start":222,"line_end":222,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21076,"byte_end":21087,"line_start":228,"line_end":228,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<TypeBuilder<S>>::docs_always","value":"pub fn docs_always(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the type documentation, always captured even if the \"docs\" feature is not enabled.\n","sig":null,"attributes":[{"value":"/ Set the type documentation, always captured even if the \"docs\" feature is not enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20974,"byte_end":21064,"line_start":227,"line_end":227,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":78},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21253,"byte_end":21261,"line_start":235,"line_end":235,"column_start":10,"column_end":18},"name":"NoFields","qualname":"::build::NoFields","value":"pub enum NoFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder has no fields (e.g. a unit struct)\n","sig":null,"attributes":[{"value":"/ A fields builder has no fields (e.g. a unit struct)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21188,"byte_end":21243,"line_start":234,"line_end":234,"column_start":1,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":79},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21336,"byte_end":21347,"line_start":237,"line_end":237,"column_start":10,"column_end":21},"name":"NamedFields","qualname":"::build::NamedFields","value":"pub enum NamedFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder only allows named fields (e.g. a struct)\n","sig":null,"attributes":[{"value":"/ A fields builder only allows named fields (e.g. a struct)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21265,"byte_end":21326,"line_start":236,"line_end":236,"column_start":1,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":80},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21423,"byte_end":21436,"line_start":239,"line_end":239,"column_start":10,"column_end":23},"name":"UnnamedFields","qualname":"::build::UnnamedFields","value":"pub enum UnnamedFields { }","parent":null,"children":[],"decl_id":null,"docs":" A fields builder only allows unnamed fields (e.g. a tuple)\n","sig":null,"attributes":[{"value":"/ A fields builder only allows unnamed fields (e.g. a tuple)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21351,"byte_end":21413,"line_start":238,"line_end":238,"column_start":1,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":81},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21490,"byte_end":21496,"line_start":242,"line_end":242,"column_start":10,"column_end":16},"name":"Fields","qualname":"::build::Fields","value":"pub enum Fields { }","parent":null,"children":[],"decl_id":null,"docs":" Provides FieldsBuilder constructors\n","sig":null,"attributes":[{"value":"/ Provides FieldsBuilder constructors","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21441,"byte_end":21480,"line_start":241,"line_end":241,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21567,"byte_end":21571,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"unit","qualname":"<Fields>::unit","value":"pub fn unit() -> FieldsBuilder<NoFields>","parent":null,"children":[],"decl_id":null,"docs":" The type construct has no fields\n","sig":null,"attributes":[{"value":"/ The type construct has no fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21519,"byte_end":21555,"line_start":245,"line_end":245,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21720,"byte_end":21725,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"named","qualname":"<Fields>::named","value":"pub fn named() -> FieldsBuilder<NamedFields>","parent":null,"children":[],"decl_id":null,"docs":" Fields for a type construct with named fields\n","sig":null,"attributes":[{"value":"/ Fields for a type construct with named fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21659,"byte_end":21708,"line_start":250,"line_end":250,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21867,"byte_end":21874,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"unnamed","qualname":"<Fields>::unnamed","value":"pub fn unnamed() -> FieldsBuilder<UnnamedFields>","parent":null,"children":[],"decl_id":null,"docs":" Fields for a type construct with unnamed fields\n","sig":null,"attributes":[{"value":"/ Fields for a type construct with unnamed fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21804,"byte_end":21855,"line_start":255,"line_end":255,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22061,"byte_end":22074,"line_start":262,"line_end":262,"column_start":12,"column_end":25},"name":"FieldsBuilder","qualname":"::build::FieldsBuilder","value":"FieldsBuilder {  }","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"decl_id":null,"docs":" Build a set of either all named (e.g. for a struct) or all unnamed (e.g. for a tuple struct)\n","sig":null,"attributes":[{"value":"/ Build a set of either all named (e.g. for a struct) or all unnamed (e.g. for a tuple struct)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21953,"byte_end":22049,"line_start":261,"line_end":261,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22408,"byte_end":22416,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"finalize","qualname":"<FieldsBuilder<T>>::finalize","value":"pub fn finalize(Self) -> Vec<Field<MetaForm>>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and return the set of fields\n","sig":null,"attributes":[{"value":"/ Complete building and return the set of fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22346,"byte_end":22396,"line_start":277,"line_end":277,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22781,"byte_end":22786,"line_start":293,"line_end":293,"column_start":12,"column_end":17},"name":"field","qualname":"<FieldsBuilder<NamedFields>>::field","value":"pub fn field<F>(Self, F) -> Self where F: Fn(FieldBuilder) ->\nFieldBuilder<field_state::NameAssigned, field_state::TypeAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add a named field constructed using the builder.\n","sig":null,"attributes":[{"value":"/ Add a named field constructed using the builder.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22717,"byte_end":22769,"line_start":292,"line_end":292,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23178,"byte_end":23183,"line_start":307,"line_end":307,"column_start":12,"column_end":17},"name":"field","qualname":"<FieldsBuilder<UnnamedFields>>::field","value":"pub fn field<F>(Self, F) -> Self where F: Fn(FieldBuilder) ->\nFieldBuilder<field_state::NameNotAssigned, field_state::TypeAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add an unnamed field constructed using the builder.\n","sig":null,"attributes":[{"value":"/ Add an unnamed field constructed using the builder.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23111,"byte_end":23166,"line_start":306,"line_end":306,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":103},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23517,"byte_end":23528,"line_start":320,"line_end":320,"column_start":9,"column_end":20},"name":"field_state","qualname":"::build::field_state","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"decl_id":null,"docs":" Type states for building a field.\n","sig":null,"attributes":[{"value":"/ Type states for building a field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23471,"byte_end":23508,"line_start":319,"line_end":319,"column_start":1,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":104},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23595,"byte_end":23610,"line_start":322,"line_end":322,"column_start":14,"column_end":29},"name":"NameNotAssigned","qualname":"::build::field_state::NameNotAssigned","value":"pub enum NameNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A name has not been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A name has not been assigned to the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23535,"byte_end":23581,"line_start":321,"line_end":321,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":105},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23674,"byte_end":23686,"line_start":324,"line_end":324,"column_start":14,"column_end":26},"name":"NameAssigned","qualname":"::build::field_state::NameAssigned","value":"pub enum NameAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A name has been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A name has been assigned to the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23618,"byte_end":23660,"line_start":323,"line_end":323,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":106},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23754,"byte_end":23769,"line_start":326,"line_end":326,"column_start":14,"column_end":29},"name":"TypeNotAssigned","qualname":"::build::field_state::TypeNotAssigned","value":"pub enum TypeNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A type has not been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A type has not been assigned to the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23694,"byte_end":23740,"line_start":325,"line_end":325,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":107},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23833,"byte_end":23845,"line_start":328,"line_end":328,"column_start":14,"column_end":26},"name":"TypeAssigned","qualname":"::build::field_state::TypeAssigned","value":"pub enum TypeAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" A type has been assigned to the field.\n","sig":null,"attributes":[{"value":"/ A type has been assigned to the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23777,"byte_end":23819,"line_start":327,"line_end":327,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23896,"byte_end":23908,"line_start":332,"line_end":332,"column_start":12,"column_end":24},"name":"FieldBuilder","qualname":"::build::FieldBuilder","value":"FieldBuilder {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Construct a valid [`Field`].\n","sig":null,"attributes":[{"value":"/ Construct a valid [`Field`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23852,"byte_end":23884,"line_start":331,"line_end":331,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24526,"byte_end":24529,"line_start":357,"line_end":357,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new FieldBuilder.\n","sig":null,"attributes":[{"value":"/ Create a new FieldBuilder.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24484,"byte_end":24514,"line_start":356,"line_end":356,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24680,"byte_end":24684,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"name","qualname":"<FieldBuilder<field_state::NameNotAssigned, T>>::name","value":"pub fn name(Self, &'static str) -> FieldBuilder<field_state::NameAssigned, T>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the field name.\n","sig":null,"attributes":[{"value":"/ Initialize the field name.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24638,"byte_end":24668,"line_start":363,"line_end":363,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25066,"byte_end":25068,"line_start":377,"line_end":377,"column_start":12,"column_end":14},"name":"ty","qualname":"<FieldBuilder<N, field_state::TypeNotAssigned>>::ty","value":"pub fn ty<TY>(Self) -> FieldBuilder<N, field_state::TypeAssigned> where\nTY: TypeInfo + 'static + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Initialize the type of the field.\n","sig":null,"attributes":[{"value":"/ Initialize the type of the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25017,"byte_end":25054,"line_start":376,"line_end":376,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25469,"byte_end":25476,"line_start":391,"line_end":391,"column_start":12,"column_end":19},"name":"compact","qualname":"<FieldBuilder<N, field_state::TypeNotAssigned>>::compact","value":"pub fn compact<TY>(Self) -> FieldBuilder<N, field_state::TypeAssigned> where\nTY: scale::HasCompact + TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Initializes the type of the field as a compact type.\n","sig":null,"attributes":[{"value":"/ Initializes the type of the field as a compact type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25401,"byte_end":25457,"line_start":390,"line_end":390,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25933,"byte_end":25942,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"type_name","qualname":"<FieldBuilder<N, T>>::type_name","value":"pub fn type_name(Self, &'static str) -> FieldBuilder<N, T>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the type name of a field (optional).\n","sig":null,"attributes":[{"value":"/ Initialize the type name of a field (optional).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25870,"byte_end":25921,"line_start":406,"line_end":406,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26681,"byte_end":26685,"line_start":432,"line_end":432,"column_start":12,"column_end":16},"name":"docs","qualname":"<FieldBuilder<N, T>>::docs","value":"pub fn docs(Self, &'static [&'static str]) -> FieldBuilder<N, T>","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26548,"byte_end":26577,"line_start":429,"line_end":429,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26582,"byte_end":26591,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26596,"byte_end":26669,"line_start":431,"line_end":431,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26895,"byte_end":26906,"line_start":438,"line_end":438,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<FieldBuilder<N, T>>::docs_always","value":"pub fn docs_always(Self, &'static [&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the documentation of a field, always captured even if the \"docs\" feature is not\n enabled.\n","sig":null,"attributes":[{"value":"/ Initialize the documentation of a field, always captured even if the \"docs\" feature is not","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26772,"byte_end":26866,"line_start":436,"line_end":436,"column_start":5,"column_end":99}},{"value":"/ enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":26871,"byte_end":26883,"line_start":437,"line_end":437,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27258,"byte_end":27266,"line_start":451,"line_end":451,"column_start":12,"column_end":20},"name":"finalize","qualname":"<FieldBuilder<N, field_state::TypeAssigned>>::finalize","value":"pub fn finalize(Self) -> Field<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and return a new [`Field`].\n","sig":null,"attributes":[{"value":"/ Complete building and return a new [`Field`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27197,"byte_end":27246,"line_start":450,"line_end":450,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27554,"byte_end":27562,"line_start":463,"line_end":463,"column_start":12,"column_end":20},"name":"Variants","qualname":"::build::Variants","value":"Variants {  }","parent":null,"children":[{"krate":0,"index":984}],"decl_id":null,"docs":" Builds a definition of a variant type i.e an `enum`\n","sig":null,"attributes":[{"value":"/ Builds a definition of a variant type i.e an `enum`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27468,"byte_end":27523,"line_start":461,"line_end":461,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27665,"byte_end":27668,"line_start":469,"line_end":469,"column_start":12,"column_end":15},"name":"new","qualname":"<Variants>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`VariantsBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`VariantsBuilder`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27616,"byte_end":27653,"line_start":468,"line_end":468,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27784,"byte_end":27791,"line_start":476,"line_end":476,"column_start":12,"column_end":19},"name":"variant","qualname":"<Variants>::variant","value":"pub fn variant<F>(Self, &'static str, F) -> Self where F: Fn(VariantBuilder)\n-> VariantBuilder<variant_state::IndexAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Add a variant\n","sig":null,"attributes":[{"value":"/ Add a variant","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27755,"byte_end":27772,"line_start":475,"line_end":475,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28122,"byte_end":28134,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"name":"variant_unit","qualname":"<Variants>::variant_unit","value":"pub fn variant_unit(Self, &'static str, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add a unit variant (without fields).\n","sig":null,"attributes":[{"value":"/ Add a unit variant (without fields).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28070,"byte_end":28110,"line_start":485,"line_end":485,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28409,"byte_end":28417,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Variants>::finalize","value":"pub fn finalize(Self) -> TypeDefVariant","parent":null,"children":[],"decl_id":null,"docs":" Construct a new [`TypeDefVariant`] from the initialized builder variants.\n","sig":null,"attributes":[{"value":"/ Construct a new [`TypeDefVariant`] from the initialized builder variants.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28320,"byte_end":28397,"line_start":492,"line_end":492,"column_start":5,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28570,"byte_end":28583,"line_start":499,"line_end":499,"column_start":9,"column_end":22},"name":"variant_state","qualname":"::build::variant_state","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"decl_id":null,"docs":" State types for the `VariantBuilder` which requires an index.\n","sig":null,"attributes":[{"value":"/ State types for the `VariantBuilder` which requires an index.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28496,"byte_end":28561,"line_start":498,"line_end":498,"column_start":1,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":145},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28671,"byte_end":28687,"line_start":501,"line_end":501,"column_start":14,"column_end":30},"name":"IndexNotAssigned","qualname":"::build::variant_state::IndexNotAssigned","value":"pub enum IndexNotAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has not assigned an index to a variant.\n","sig":null,"attributes":[{"value":"/ State where the builder has not assigned an index to a variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28590,"byte_end":28657,"line_start":500,"line_end":500,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":146},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28772,"byte_end":28785,"line_start":503,"line_end":503,"column_start":14,"column_end":27},"name":"IndexAssigned","qualname":"::build::variant_state::IndexAssigned","value":"pub enum IndexAssigned { }","parent":null,"children":[],"decl_id":null,"docs":" State where the builder has assigned an index to a variant.\n","sig":null,"attributes":[{"value":"/ State where the builder has assigned an index to a variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28695,"byte_end":28758,"line_start":502,"line_end":502,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":147},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28828,"byte_end":28842,"line_start":507,"line_end":507,"column_start":12,"column_end":26},"name":"VariantBuilder","qualname":"::build::VariantBuilder","value":"VariantBuilder {  }","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"decl_id":null,"docs":" Build a [`Variant`].\n","sig":null,"attributes":[{"value":"/ Build a [`Variant`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":28792,"byte_end":28816,"line_start":506,"line_end":506,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29161,"byte_end":29164,"line_start":518,"line_end":518,"column_start":12,"column_end":15},"name":"new","qualname":"<VariantBuilder<variant_state::IndexNotAssigned>>::new","value":"pub fn new(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`VariantBuilder`].\n","sig":null,"attributes":[{"value":"/ Create a new [`VariantBuilder`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29113,"byte_end":29149,"line_start":517,"line_end":517,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29454,"byte_end":29459,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"index","qualname":"<VariantBuilder<variant_state::IndexNotAssigned>>::index","value":"pub fn index(Self, u8) -> VariantBuilder<variant_state::IndexAssigned>","parent":null,"children":[],"decl_id":null,"docs":" Set the variant's codec index.\n","sig":null,"attributes":[{"value":"/ Set the variant's codec index.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29408,"byte_end":29442,"line_start":529,"line_end":529,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29858,"byte_end":29870,"line_start":544,"line_end":544,"column_start":12,"column_end":24},"name":"discriminant","qualname":"<VariantBuilder<S>>::discriminant","value":"pub fn discriminant(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the variant's discriminant.\n","sig":null,"attributes":[{"value":"/ Set the variant's discriminant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29811,"byte_end":29846,"line_start":543,"line_end":543,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30030,"byte_end":30036,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"fields","qualname":"<VariantBuilder<S>>::fields","value":"pub fn fields<F>(Self, FieldsBuilder<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the variant's fields.\n","sig":null,"attributes":[{"value":"/ Initialize the variant's fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29982,"byte_end":30018,"line_start":549,"line_end":549,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30491,"byte_end":30495,"line_start":565,"line_end":565,"column_start":12,"column_end":16},"name":"docs","qualname":"<VariantBuilder<S>>::docs","value":"pub fn docs(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Doc capture is not enabled via the \"docs\" feature so this is a no-op.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"docs\"))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30358,"byte_end":30387,"line_start":562,"line_end":562,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30392,"byte_end":30401,"line_start":563,"line_end":563,"column_start":5,"column_end":14}},{"value":"/ Doc capture is not enabled via the \"docs\" feature so this is a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30406,"byte_end":30479,"line_start":564,"line_end":564,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30682,"byte_end":30693,"line_start":571,"line_end":571,"column_start":12,"column_end":23},"name":"docs_always","qualname":"<VariantBuilder<S>>::docs_always","value":"pub fn docs_always(Self, &[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the variant's documentation, always captured even if the \"docs\" feature is not\n enabled.\n","sig":null,"attributes":[{"value":"/ Initialize the variant's documentation, always captured even if the \"docs\" feature is not","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30560,"byte_end":30653,"line_start":569,"line_end":569,"column_start":5,"column_end":98}},{"value":"/ enabled.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30658,"byte_end":30670,"line_start":570,"line_end":570,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30922,"byte_end":30930,"line_start":579,"line_end":579,"column_start":12,"column_end":20},"name":"finalize","qualname":"<VariantBuilder<variant_state::IndexAssigned>>::finalize","value":"pub fn finalize(Self) -> Variant<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Complete building and create final [`Variant`] instance.\n","sig":null,"attributes":[{"value":"/ Complete building and create final [`Variant`] instance.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30850,"byte_end":30910,"line_start":578,"line_end":578,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":167},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"form","qualname":"::form","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3035},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":987},{"krate":0,"index":188},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3019},{"krate":0,"index":3021},{"krate":0,"index":3023},{"krate":0,"index":3025},{"krate":0,"index":3026},{"krate":0,"index":993},{"krate":0,"index":999}],"decl_id":null,"docs":" Provides form definitions.","sig":null,"attributes":[{"value":"/ Provides form definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31758,"byte_end":31788,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31789,"byte_end":31792,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The forms provided here are used to generically communicate the mode a type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31793,"byte_end":31872,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ identifier, type definition or structure is using.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31873,"byte_end":31927,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31928,"byte_end":31931,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The default form is the `MetaForm`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31932,"byte_end":31971,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/ It uses `MetaType` for communicating type identifiers and thus acts as","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":31972,"byte_end":32046,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ a bridge from runtime to compile time type information.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32047,"byte_end":32106,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32107,"byte_end":32110,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The `PortableForm` is a space-efficient representation","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32111,"byte_end":32169,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ that no longer has any connections to the interning registry and thus","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32170,"byte_end":32243,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ can no longer be used to retrieve information from the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32244,"byte_end":32302,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/ original registry. Its sole purpose is for space-efficient serialization.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32303,"byte_end":32380,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32381,"byte_end":32384,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Other forms, such as a portable form that is still bound to the registry","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32385,"byte_end":32461,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ (also via lifetime tracking) are possible but current not needed.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32462,"byte_end":32531,"line_start":30,"line_end":30,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":185},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32976,"byte_end":32980,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"Form","qualname":"::form::Form","value":"Form","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":" Trait to control the internal structures of type definitions.","sig":null,"attributes":[{"value":"/ Trait to control the internal structures of type definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32714,"byte_end":32779,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32780,"byte_end":32783,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This allows for type-level separation between free forms that can be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32784,"byte_end":32856,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ instantiated out of the flux and portable forms that require some sort of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32857,"byte_end":32934,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ interning data structures.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32935,"byte_end":32965,"line_start":49,"line_end":49,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33032,"byte_end":33036,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Type","qualname":"::form::Form::Type","value":"type Type: PartialEq + Eq + PartialOrd + Ord + Clone + Debug;","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" The type representing the type.\n","sig":null,"attributes":[{"value":"/ The type representing the type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":32987,"byte_end":33022,"line_start":51,"line_end":51,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":187},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33123,"byte_end":33129,"line_start":54,"line_end":54,"column_start":10,"column_end":16},"name":"String","qualname":"::form::Form::String","value":"type String: AsRef<str> + PartialEq + Eq + PartialOrd + Ord + Clone + Debug;","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" The string type.\n","sig":null,"attributes":[{"value":"/ The string type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33093,"byte_end":33113,"line_start":53,"line_end":53,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":3028},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33456,"byte_end":33464,"line_start":63,"line_end":63,"column_start":10,"column_end":18},"name":"MetaForm","qualname":"::form::MetaForm","value":"pub enum MetaForm { }","parent":null,"children":[],"decl_id":null,"docs":" A meta meta-type.","sig":null,"attributes":[{"value":"/ A meta meta-type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33198,"byte_end":33219,"line_start":57,"line_end":57,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33220,"byte_end":33223,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Allows to be converted into other forms such as portable form","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33224,"byte_end":33289,"line_start":59,"line_end":59,"column_start":1,"column_end":66}},{"value":"/ through the registry and `IntoPortable`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33290,"byte_end":33334,"line_start":60,"line_end":60,"column_start":1,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":3012},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33954,"byte_end":33966,"line_start":79,"line_end":79,"column_start":10,"column_end":22},"name":"PortableForm","qualname":"::form::PortableForm","value":"pub enum PortableForm { }","parent":null,"children":[],"decl_id":null,"docs":" Portable form that has its lifetime untracked in association to its interner.","sig":null,"attributes":[{"value":"/ Portable form that has its lifetime untracked in association to its interner.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33555,"byte_end":33636,"line_start":70,"line_end":70,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33637,"byte_end":33640,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33641,"byte_end":33651,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33652,"byte_end":33655,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ This resolves some lifetime issues with self-referential structs (such as","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33656,"byte_end":33733,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ the registry itself) but can no longer be used to resolve to the original","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33734,"byte_end":33811,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ underlying data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33812,"byte_end":33832,"line_start":76,"line_end":76,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":384},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interner","qualname":"::interner","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":1404},{"krate":0,"index":1388},{"krate":0,"index":1395},{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1376},{"krate":0,"index":1383},{"krate":0,"index":406},{"krate":0,"index":1450},{"krate":0,"index":1442},{"krate":0,"index":1408},{"krate":0,"index":1412},{"krate":0,"index":1415},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1434},{"krate":0,"index":1438},{"krate":0,"index":409},{"krate":0,"index":1476},{"krate":0,"index":1469},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418}],"decl_id":null,"docs":" Interning data structure and associated symbol definitions.","sig":null,"attributes":[{"value":"/ Interning data structure and associated symbol definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45325,"byte_end":45388,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45389,"byte_end":45392,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The interner is used by the registry in order to deduplicate strings and type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45393,"byte_end":45474,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ definitions. Strings are uniquely identified by their contents while types","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45475,"byte_end":45553,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ are uniquely identified by their respective type identifiers.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45554,"byte_end":45619,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45620,"byte_end":45623,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The interners provide a strict ordered sequence of cached (interned)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45624,"byte_end":45696,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ elements and is later used for space-efficient serialization within the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45697,"byte_end":45772,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ registry.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45773,"byte_end":45786,"line_start":23,"line_end":23,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46368,"byte_end":46383,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"UntrackedSymbol","qualname":"::interner::UntrackedSymbol","value":"UntrackedSymbol {  }","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407}],"decl_id":null,"docs":" A symbol that is not lifetime tracked.","sig":null,"attributes":[{"value":"/ A symbol that is not lifetime tracked.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":45998,"byte_end":46040,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46041,"byte_end":46044,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This can be used by self-referential types but","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46045,"byte_end":46095,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"/ can no longer be used to resolve instances.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46096,"byte_end":46143,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"serde(transparent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46336,"byte_end":46354,"line_start":48,"line_end":48,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46669,"byte_end":46671,"line_start":59,"line_end":59,"column_start":12,"column_end":14},"name":"id","qualname":"<UntrackedSymbol<T>>::id","value":"pub fn id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the index to the symbol in the interner table.\n","sig":null,"attributes":[{"value":"/ Returns the index to the symbol in the interner table.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46599,"byte_end":46657,"line_start":58,"line_end":58,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46977,"byte_end":46983,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"Symbol","qualname":"::interner::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454}],"decl_id":null,"docs":" A symbol from an interner.","sig":null,"attributes":[{"value":"/ A symbol from an interner.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46713,"byte_end":46743,"line_start":64,"line_end":64,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46744,"byte_end":46747,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Can be used to resolve to the associated instance.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46748,"byte_end":46802,"line_start":66,"line_end":66,"column_start":1,"column_end":55}},{"value":"serde(transparent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46945,"byte_end":46963,"line_start":69,"line_end":69,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47777,"byte_end":47791,"line_start":92,"line_end":92,"column_start":12,"column_end":26},"name":"into_untracked","qualname":"<Symbol>::into_untracked","value":"pub fn into_untracked(Self) -> UntrackedSymbol<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the lifetime tracking for this symbol.","sig":null,"attributes":[{"value":"/ Removes the lifetime tracking for this symbol.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47125,"byte_end":47175,"line_start":77,"line_end":77,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47180,"byte_end":47183,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47188,"byte_end":47198,"line_start":79,"line_end":79,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47203,"byte_end":47206,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ - This can be useful in situations where a data structure owns all","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47211,"byte_end":47281,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/   symbols and interners and can verify accesses by itself.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47286,"byte_end":47348,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/ - For further safety reasons an untracked symbol can no longer be used","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47353,"byte_end":47427,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/   to resolve from an interner. It is still useful for serialization","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47432,"byte_end":47503,"line_start":84,"line_end":84,"column_start":5,"column_end":76}},{"value":"/   purposes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47508,"byte_end":47523,"line_start":85,"line_end":85,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47528,"byte_end":47531,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47536,"byte_end":47548,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47553,"byte_end":47556,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Although removing lifetime constraints this operation can be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47561,"byte_end":47625,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ considered to be safe since untracked symbols can no longer be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47630,"byte_end":47696,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ used to resolve their associated instance from the interner.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47701,"byte_end":47765,"line_start":91,"line_end":91,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48392,"byte_end":48400,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"Interner","qualname":"::interner::Interner","value":"Interner {  }","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1478}],"decl_id":null,"docs":" Interning data structure generic over the element type.","sig":null,"attributes":[{"value":"/ Interning data structure generic over the element type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47925,"byte_end":47984,"line_start":100,"line_end":100,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47985,"byte_end":47988,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ For the sake of simplicity and correctness we are using a rather naive","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47989,"byte_end":48063,"line_start":102,"line_end":102,"column_start":1,"column_end":75}},{"value":"/ implementation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48064,"byte_end":48083,"line_start":103,"line_end":103,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48084,"byte_end":48087,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48088,"byte_end":48099,"line_start":105,"line_end":105,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48100,"byte_end":48103,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This is used in order to quite efficiently cache strings and type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48104,"byte_end":48173,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/ definitions uniquely identified by their associated type identifiers.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48174,"byte_end":48247,"line_start":108,"line_end":108,"column_start":1,"column_end":74}},{"value":"serde(transparent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48360,"byte_end":48378,"line_start":111,"line_end":111,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49079,"byte_end":49082,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"new","qualname":"<Interner<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty interner.\n","sig":null,"attributes":[{"value":"/ Creates a new empty interner.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49034,"byte_end":49067,"line_start":132,"line_end":132,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49454,"byte_end":49467,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"intern_or_get","qualname":"<Interner<T>>::intern_or_get","value":"pub fn intern_or_get(&mut Self, T) -> (bool, Symbol<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Interns the given element or returns its associated symbol if it has\n already been interned.\n","sig":null,"attributes":[{"value":"/ Interns the given element or returns its associated symbol if it has","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49339,"byte_end":49411,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ already been interned.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49416,"byte_end":49442,"line_start":152,"line_end":152,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50120,"byte_end":50123,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"get","qualname":"<Interner<T>>::get","value":"pub fn get(&Self, &T) -> Option<Symbol<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the symbol of the given element or `None` if it hasn't been\n interned already.\n","sig":null,"attributes":[{"value":"/ Returns the symbol of the given element or `None` if it hasn't been","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50011,"byte_end":50082,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/ interned already.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50087,"byte_end":50108,"line_start":173,"line_end":173,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50458,"byte_end":50465,"line_start":185,"line_end":185,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Interner<T>>::resolve","value":"pub fn resolve(&Self, Symbol<, T>) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Resolves the original element given its associated symbol or\n returns `None` if it has not been interned yet.\n","sig":null,"attributes":[{"value":"/ Resolves the original element given its associated symbol or","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50326,"byte_end":50390,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/ returns `None` if it has not been interned yet.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":50395,"byte_end":50446,"line_start":184,"line_end":184,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52959,"byte_end":52967,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"MetaType","qualname":"::meta_type::MetaType","value":"MetaType {  }","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" A metatype abstraction.","sig":null,"attributes":[{"value":"/ A metatype abstraction.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52662,"byte_end":52689,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52690,"byte_end":52693,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Allows to store compile-time type information at runtime.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52694,"byte_end":52755,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ This again allows to derive type ID and type definition from it.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52756,"byte_end":52824,"line_start":38,"line_end":38,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52825,"byte_end":52828,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ This needs a conversion to another representation of types","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52829,"byte_end":52891,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"/ in order to be serializable.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":52892,"byte_end":52924,"line_start":41,"line_end":41,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":54035,"byte_end":54038,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<MetaType>::new","value":"pub fn new<T>() -> Self where T: TypeInfo + ?Sized + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new meta type from the given compile-time known type.\n","sig":null,"attributes":[{"value":"/ Creates a new meta type from the given compile-time known type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53956,"byte_end":54023,"line_start":88,"line_end":88,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":54298,"byte_end":54307,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"type_info","qualname":"<MetaType>::type_info","value":"pub fn type_info(&Self) -> Type<MetaForm>","parent":null,"children":[],"decl_id":null,"docs":" Returns the meta type information.\n","sig":null,"attributes":[{"value":"/ Returns the meta type information.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":54248,"byte_end":54286,"line_start":99,"line_end":99,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":54444,"byte_end":54451,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"type_id","qualname":"<MetaType>::type_id","value":"pub fn type_id(&Self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Returns the type identifier provided by `core::any`.\n","sig":null,"attributes":[{"value":"/ Returns the type identifier provided by `core::any`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":54376,"byte_end":54432,"line_start":104,"line_end":104,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":515},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56250,"byte_end":56262,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"IntoPortable","qualname":"::registry::IntoPortable","value":"IntoPortable","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"decl_id":null,"docs":" Convert the type definition into the portable form using a registry.\n","sig":null,"attributes":[{"value":"/ Convert the type definition into the portable form using a registry.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56167,"byte_end":56239,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56314,"byte_end":56320,"line_start":50,"line_end":50,"column_start":10,"column_end":16},"name":"Output","qualname":"::registry::IntoPortable::Output","value":"type Output;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" The portable version of `Self`.\n","sig":null,"attributes":[{"value":"/ The portable version of `Self`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56269,"byte_end":56304,"line_start":49,"line_end":49,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56409,"byte_end":56422,"line_start":53,"line_end":53,"column_start":8,"column_end":21},"name":"into_portable","qualname":"::registry::IntoPortable::into_portable","value":"pub fn into_portable(Self, &mut Registry) -> Self::Output","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Convert `self` to the portable form by using the registry for caching.\n","sig":null,"attributes":[{"value":"/ Convert `self` to the portable form by using the registry for caching.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56327,"byte_end":56401,"line_start":52,"line_end":52,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3000},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57244,"byte_end":57252,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"Registry","qualname":"::registry::Registry","value":"Registry {  }","parent":null,"children":[{"krate":0,"index":3001},{"krate":0,"index":3002}],"decl_id":null,"docs":" The registry for space-efficient storage of type identifiers and\n definitions.","sig":null,"attributes":[{"value":"/ The registry for space-efficient storage of type identifiers and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56662,"byte_end":56730,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/ definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56731,"byte_end":56747,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56748,"byte_end":56751,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The registry consists of a cache for type identifiers and definitions.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56752,"byte_end":56826,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56827,"byte_end":56830,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ When adding a type to  the registry, all of its sub-types are registered","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56831,"byte_end":56907,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/ recursively as well. A type is considered a sub-type of another type if it","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56908,"byte_end":56986,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ is used by its identifier or structure.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":56987,"byte_end":57030,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57031,"byte_end":57034,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57035,"byte_end":57045,"line_start":73,"line_end":73,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57046,"byte_end":57049,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ A type can be a sub-type of itself. In this case the registry has a builtin","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57050,"byte_end":57129,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ mechanism to stop recursion and avoid going into an infinite loop.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57130,"byte_end":57200,"line_start":76,"line_end":76,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57796,"byte_end":57799,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Registry>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty registry.\n","sig":null,"attributes":[{"value":"/ Creates a new empty registry.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57751,"byte_end":57784,"line_start":97,"line_end":97,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58927,"byte_end":58940,"line_start":129,"line_end":129,"column_start":12,"column_end":25},"name":"register_type","qualname":"<Registry>::register_type","value":"pub fn register_type(&mut Self, &MetaType) -> UntrackedSymbol<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Registers the given type into the registry and returns\n its associated type ID symbol.","sig":null,"attributes":[{"value":"/ Registers the given type into the registry and returns","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58513,"byte_end":58571,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/ its associated type ID symbol.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58576,"byte_end":58610,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58615,"byte_end":58618,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58623,"byte_end":58633,"line_start":123,"line_end":123,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58638,"byte_end":58641,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Due to safety requirements the returns type ID symbol cannot","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58646,"byte_end":58710,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"/ be used later to resolve back to the associated type definition.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58715,"byte_end":58783,"line_start":126,"line_end":126,"column_start":5,"column_end":73}},{"value":"/ However, since this facility is going to be used for serialization","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58788,"byte_end":58858,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"/ purposes this functionality isn't needed anyway.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":58863,"byte_end":58915,"line_start":128,"line_end":128,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59318,"byte_end":59332,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"register_types","qualname":"<Registry>::register_types","value":"pub fn register_types<I>(&mut Self, I) -> Vec<UntrackedSymbol<TypeId>> where\nI: IntoIterator<Item = MetaType>","parent":null,"children":[],"decl_id":null,"docs":" Calls `register_type` for each `MetaType` in the given `iter`.\n","sig":null,"attributes":[{"value":"/ Calls `register_type` for each `MetaType` in the given `iter`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59240,"byte_end":59306,"line_start":138,"line_end":138,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59659,"byte_end":59676,"line_start":150,"line_end":150,"column_start":12,"column_end":29},"name":"map_into_portable","qualname":"<Registry>::map_into_portable","value":"pub fn map_into_portable<I, T>(&mut Self, I) -> Vec<T::Output> where\nI: IntoIterator<Item = T>, T: IntoPortable","parent":null,"children":[],"decl_id":null,"docs":" Converts an iterator into a Vec of the equivalent portable\n representations.\n","sig":null,"attributes":[{"value":"/ Converts an iterator into a Vec of the equivalent portable","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59560,"byte_end":59622,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ representations.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59627,"byte_end":59647,"line_start":149,"line_end":149,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2978},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60268,"byte_end":60284,"line_start":166,"line_end":166,"column_start":12,"column_end":28},"name":"PortableRegistry","qualname":"::registry::PortableRegistry","value":"PortableRegistry {  }","parent":null,"children":[{"krate":0,"index":2979}],"decl_id":null,"docs":" A read-only registry containing types in their portable form for serialization.\n","sig":null,"attributes":[{"value":"/ A read-only registry containing types in their portable form for serialization.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":59908,"byte_end":59991,"line_start":161,"line_end":161,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60881,"byte_end":60888,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"resolve","qualname":"<PortableRegistry>::resolve","value":"pub fn resolve(&Self, u32) -> Option<&Type<PortableForm>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the type definition for the given identifier, `None` if no type found for that ID.\n","sig":null,"attributes":[{"value":"/ Returns the type definition for the given identifier, `None` if no type found for that ID.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60775,"byte_end":60869,"line_start":188,"line_end":188,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61071,"byte_end":61076,"line_start":194,"line_end":194,"column_start":12,"column_end":17},"name":"types","qualname":"<PortableRegistry>::types","value":"pub fn types(&Self) -> &[PortableType]","parent":null,"children":[],"decl_id":null,"docs":" Returns all types with their associated identifiers.\n","sig":null,"attributes":[{"value":"/ Returns all types with their associated identifiers.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61003,"byte_end":61059,"line_start":193,"line_end":193,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2959},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61410,"byte_end":61422,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"PortableType","qualname":"::registry::PortableType","value":"PortableType {  }","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61632,"byte_end":61634,"line_start":212,"line_end":212,"column_start":12,"column_end":14},"name":"id","qualname":"<PortableType>::id","value":"pub fn id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the [`PortableType`].\n","sig":null,"attributes":[{"value":"/ Returns the index of the [`PortableType`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61574,"byte_end":61620,"line_start":211,"line_end":211,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61735,"byte_end":61737,"line_start":217,"line_end":217,"column_start":12,"column_end":14},"name":"ty","qualname":"<PortableType>::ty","value":"pub fn ty(&Self) -> &Type<PortableForm>","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the [`PortableType`].\n","sig":null,"attributes":[{"value":"/ Returns the type of the [`PortableType`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61678,"byte_end":61723,"line_start":216,"line_end":216,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83009,"byte_end":83025,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"TypeDefComposite","qualname":"::ty::composite::TypeDefComposite","value":"TypeDefComposite {  }","parent":null,"children":[{"krate":0,"index":1685}],"decl_id":null,"docs":" A composite type, consisting of either named (struct) or unnamed (tuple\n struct) fields","sig":null,"attributes":[{"value":"/ A composite type, consisting of either named (struct) or unnamed (tuple","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82060,"byte_end":82135,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ struct) fields","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82136,"byte_end":82154,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82155,"byte_end":82158,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82159,"byte_end":82173,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82174,"byte_end":82177,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ## A Rust struct with named fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82178,"byte_end":82217,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82218,"byte_end":82221,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82222,"byte_end":82229,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ struct Person {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82230,"byte_end":82249,"line_start":44,"line_end":44,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82250,"byte_end":82271,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/     age_in_years: u8,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82272,"byte_end":82297,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/     friends: Vec<Person>,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82298,"byte_end":82327,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82328,"byte_end":82333,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82334,"byte_end":82341,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82342,"byte_end":82345,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ## A tuple struct with unnamed fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82346,"byte_end":82388,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82389,"byte_end":82392,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82393,"byte_end":82400,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ struct Color(u8, u8, u8);","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82401,"byte_end":82430,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82431,"byte_end":82438,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82439,"byte_end":82442,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## A so-called unit struct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82443,"byte_end":82473,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82474,"byte_end":82477,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82478,"byte_end":82485,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ struct JustAMarker;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82486,"byte_end":82509,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82510,"byte_end":82517,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82620,"byte_end":82783,"line_start":65,"line_end":68,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":82817,"byte_end":82848,"line_start":70,"line_end":70,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83877,"byte_end":83883,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"fields","qualname":"<TypeDefComposite<T>>::fields","value":"pub fn fields(&Self) -> &[Field<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the fields of the composite type.\n","sig":null,"attributes":[{"value":"/ Returns the fields of the composite type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83820,"byte_end":83865,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86732,"byte_end":86737,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"Field","qualname":"::ty::fields::Field","value":"Field {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783}],"decl_id":null,"docs":" A field of a struct-like data type.","sig":null,"attributes":[{"value":"/ A field of a struct-like data type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":84853,"byte_end":84892,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":84893,"byte_end":84896,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Name is optional so it can represent both named and unnamed fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":84897,"byte_end":84968,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":84969,"byte_end":84972,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This can be a named field of a struct type or an enum struct variant, or an","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":84973,"byte_end":85052,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ unnamed field of a tuple struct.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85053,"byte_end":85089,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85090,"byte_end":85093,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Type name","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85094,"byte_end":85109,"line_start":42,"line_end":42,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85110,"byte_end":85113,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The `type_name` field contains a string which is the name of the type of the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85114,"byte_end":85194,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ field as it appears in the source code. The exact contents and format of the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85195,"byte_end":85275,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/ type name are not specified, but in practice will be the name of any valid","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85276,"byte_end":85354,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ type for a field e.g.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85355,"byte_end":85380,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85381,"byte_end":85384,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   - Concrete types e.g `\"u32\"`, `\"bool\"`, `\"Foo\"` etc.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85385,"byte_end":85443,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/   - Type parameters e.g `\"T\"`, `\"U\"`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85444,"byte_end":85484,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   - Generic types e.g `\"Vec<u32>\"`, `\"Vec<T>\"`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85485,"byte_end":85535,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/   - Associated types e.g. `\"T::MyType\"`, `\"<T as MyTrait>::MyType\"`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85536,"byte_end":85607,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/   - Type aliases e.g. `\"MyTypeAlias\"`, `\"MyTypeAlias<T>\"`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85608,"byte_end":85669,"line_start":53,"line_end":53,"column_start":1,"column_end":62}},{"value":"/   - Other built in Rust types e.g. arrays, references etc.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85670,"byte_end":85732,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85733,"byte_end":85736,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Note that the type name doesn't correspond to the underlying type of the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85737,"byte_end":85813,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ field, unless using a concrete type directly. Any given type may be referred","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85814,"byte_end":85894,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ to by multiple field type names, when using generic type parameters and type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85895,"byte_end":85975,"line_start":58,"line_end":58,"column_start":1,"column_end":81}},{"value":"/ aliases.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85976,"byte_end":85988,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85989,"byte_end":85992,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This is intended for informational and diagnostic purposes only. Although it","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":85993,"byte_end":86073,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ is possible to infer certain properties e.g. whether a type name is a type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86074,"byte_end":86152,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ alias, there are no guarantees provided, and the type name representation","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86153,"byte_end":86230,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ may change.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86231,"byte_end":86246,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86349,"byte_end":86512,"line_start":68,"line_end":71,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":86546,"byte_end":86577,"line_start":73,"line_end":73,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87970,"byte_end":87977,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"builder","qualname":"<Field>::builder","value":"pub fn builder() -> FieldBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [`FieldBuilder`] for constructing a field.\n","sig":null,"attributes":[{"value":"/ Returns a new [`FieldBuilder`] for constructing a field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87898,"byte_end":87958,"line_start":114,"line_end":114,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88161,"byte_end":88164,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<Field>::new","value":"pub fn new(Option<&'static str>, MetaType, Option<&'static str>,\n&[&'static str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new field.","sig":null,"attributes":[{"value":"/ Creates a new field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88037,"byte_end":88061,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88066,"byte_end":88069,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given meta type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88074,"byte_end":88149,"line_start":121,"line_end":121,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88549,"byte_end":88553,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"name","qualname":"<Field<T>>::name","value":"pub fn name(&Self) -> Option<&T::String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the field. None for unnamed fields.\n","sig":null,"attributes":[{"value":"/ Returns the name of the field. None for unnamed fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88478,"byte_end":88537,"line_start":141,"line_end":141,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88669,"byte_end":88671,"line_start":147,"line_end":147,"column_start":12,"column_end":14},"name":"ty","qualname":"<Field<T>>::ty","value":"pub fn ty(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the field.\n","sig":null,"attributes":[{"value":"/ Returns the type of the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88623,"byte_end":88657,"line_start":146,"line_end":146,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":89057,"byte_end":89066,"line_start":156,"line_end":156,"column_start":12,"column_end":21},"name":"type_name","qualname":"<Field<T>>::type_name","value":"pub fn type_name(&Self) -> Option<&T::String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a string which is the name of the type of the field as it\n appears in the source code. The exact contents and format of the type\n name are not specified, but in practice will be the name of any valid\n type for a field. This is intended for informational and diagnostic\n purposes only.\n","sig":null,"attributes":[{"value":"/ Returns a string which is the name of the type of the field as it","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88721,"byte_end":88790,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ appears in the source code. The exact contents and format of the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88795,"byte_end":88868,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ name are not specified, but in practice will be the name of any valid","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88873,"byte_end":88946,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ type for a field. This is intended for informational and diagnostic","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88951,"byte_end":89022,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ purposes only.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":89027,"byte_end":89045,"line_start":155,"line_end":155,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":89196,"byte_end":89200,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"docs","qualname":"<Field<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the field.\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the field.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":89141,"byte_end":89184,"line_start":160,"line_end":160,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91037,"byte_end":91041,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"Path","qualname":"::ty::path::Path","value":"Path {  }","parent":null,"children":[{"krate":0,"index":1807}],"decl_id":null,"docs":" Represents the path of a type definition.","sig":null,"attributes":[{"value":"/ Represents the path of a type definition.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90268,"byte_end":90313,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90314,"byte_end":90317,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This consists of several segments that each have to be a valid Rust","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90318,"byte_end":90389,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/ identifier. The first segment represents the crate name in which the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90390,"byte_end":90467,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ has been defined. The last","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90468,"byte_end":90498,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90499,"byte_end":90502,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Rust prelude type may have an empty namespace definition.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90503,"byte_end":90564,"line_start":49,"line_end":49,"column_start":1,"column_end":62}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90667,"byte_end":90830,"line_start":53,"line_end":56,"column_start":5,"column_end":7}},{"value":"serde(transparent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":90864,"byte_end":90882,"line_start":58,"line_end":58,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91844,"byte_end":91847,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<Path>::new","value":"pub fn new(&'static str, &'static str) -> Path","parent":null,"children":[],"decl_id":null,"docs":" Create a new Path","sig":null,"attributes":[{"value":"/ Create a new Path","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91697,"byte_end":91718,"line_start":94,"line_end":94,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91723,"byte_end":91726,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91731,"byte_end":91743,"line_start":96,"line_end":96,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91748,"byte_end":91751,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - If the type identifier or module path contain invalid Rust identifiers","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91756,"byte_end":91832,"line_start":98,"line_end":98,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92849,"byte_end":92862,"line_start":130,"line_end":130,"column_start":12,"column_end":25},"name":"from_segments","qualname":"<Path>::from_segments","value":"pub fn from_segments<I>(I) -> Result<Path, PathError> where\nI: IntoIterator<Item = &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Create a Path from the given segments","sig":null,"attributes":[{"value":"/ Create a Path from the given segments","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92663,"byte_end":92704,"line_start":124,"line_end":124,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92709,"byte_end":92712,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92717,"byte_end":92729,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92734,"byte_end":92737,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ - If no segments are supplied","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92742,"byte_end":92775,"line_start":128,"line_end":128,"column_start":5,"column_end":38}},{"value":"/ - If any of the segments are invalid Rust identifiers","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":92780,"byte_end":92837,"line_start":129,"line_end":129,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93427,"byte_end":93435,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"segments","qualname":"<Path<T>>::segments","value":"pub fn segments(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the segments of the Path\n","sig":null,"attributes":[{"value":"/ Returns the segments of the Path","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93379,"byte_end":93415,"line_start":149,"line_end":149,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93546,"byte_end":93554,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Path<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the path is empty\n","sig":null,"attributes":[{"value":"/ Returns `true` if the path is empty","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93495,"byte_end":93534,"line_start":154,"line_end":154,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93665,"byte_end":93670,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"ident","qualname":"<Path<T>>::ident","value":"pub fn ident(&Self) -> Option<T::String>","parent":null,"children":[],"decl_id":null,"docs":" Get the ident segment of the Path\n","sig":null,"attributes":[{"value":"/ Get the ident segment of the Path","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93616,"byte_end":93653,"line_start":159,"line_end":159,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93811,"byte_end":93820,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"namespace","qualname":"<Path<T>>::namespace","value":"pub fn namespace(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Get the namespace segments of the Path\n","sig":null,"attributes":[{"value":"/ Get the namespace segments of the Path","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93757,"byte_end":93799,"line_start":164,"line_end":164,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":94110,"byte_end":94125,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"MissingSegments","qualname":"::ty::path::PathError::MissingSegments","value":"PathError::MissingSegments","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" If the module path does not at least have one segment.\n","sig":null,"attributes":[{"value":"/ If the module path does not at least have one segment.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":94047,"byte_end":94105,"line_start":173,"line_end":173,"column_start":5,"column_end":63}}]},{"kind":"StructVariant","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":94206,"byte_end":94223,"line_start":176,"line_end":176,"column_start":5,"column_end":22},"name":"InvalidIdentifier","qualname":"::ty::path::PathError::InvalidIdentifier","value":"PathError::InvalidIdentifier { segment }","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" If a segment within a module path is not a proper Rust identifier.\n","sig":null,"attributes":[{"value":"/ If a segment within a module path is not a proper Rust identifier.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":94131,"byte_end":94201,"line_start":175,"line_end":175,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":94031,"byte_end":94040,"line_start":172,"line_end":172,"column_start":10,"column_end":19},"name":"PathError","qualname":"::ty::path::PathError","value":"pub enum PathError {\n    MissingSegments,\n    InvalidIdentifier {\n            segment: usize,\n        },\n}","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1845}],"decl_id":null,"docs":" An error that may be encountered upon constructing namespaces.\n","sig":null,"attributes":[{"value":"/ An error that may be encountered upon constructing namespaces.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93923,"byte_end":93989,"line_start":170,"line_end":170,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1912},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98504,"byte_end":98518,"line_start":85,"line_end":85,"column_start":12,"column_end":26},"name":"TypeDefVariant","qualname":"::ty::variant::TypeDefVariant","value":"TypeDefVariant {  }","parent":null,"children":[{"krate":0,"index":1951}],"decl_id":null,"docs":" A Enum type (consisting of variants).","sig":null,"attributes":[{"value":"/ A Enum type (consisting of variants).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97295,"byte_end":97336,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97337,"byte_end":97340,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97341,"byte_end":97355,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97356,"byte_end":97359,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## A Rust enum, aka tagged union.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97360,"byte_end":97397,"line_start":40,"line_end":40,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97398,"byte_end":97401,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97402,"byte_end":97409,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97410,"byte_end":97427,"line_start":43,"line_end":43,"column_start":1,"column_end":18}},{"value":"/     RustAllowsForClikeVariants,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97428,"byte_end":97463,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     AndAlsoForTupleStructs(i32, bool),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97464,"byte_end":97506,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/     OrStructs {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97507,"byte_end":97526,"line_start":46,"line_end":46,"column_start":1,"column_end":20}},{"value":"/         with: i32,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97527,"byte_end":97549,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/         named: bool,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97550,"byte_end":97574,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/         fields: [u8; 32],","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97575,"byte_end":97604,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/     },","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97605,"byte_end":97615,"line_start":50,"line_end":50,"column_start":1,"column_end":11}},{"value":"/     ItIsntPossibleToSetADiscriminantThough,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97616,"byte_end":97663,"line_start":51,"line_end":51,"column_start":1,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97664,"byte_end":97669,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97670,"byte_end":97677,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97678,"byte_end":97681,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## A C-like enum type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97682,"byte_end":97708,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97709,"byte_end":97712,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97713,"byte_end":97720,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ enum Days {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97721,"byte_end":97736,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"/     Monday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97737,"byte_end":97752,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     Tuesday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97753,"byte_end":97769,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/     Wednesday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97770,"byte_end":97788,"line_start":61,"line_end":61,"column_start":1,"column_end":19}},{"value":"/     Thursday = 42, // Allows setting the discriminant explicitly","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97789,"byte_end":97857,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/     Friday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97858,"byte_end":97873,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/     Saturday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97874,"byte_end":97891,"line_start":64,"line_end":64,"column_start":1,"column_end":18}},{"value":"/     Sunday,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97892,"byte_end":97907,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97908,"byte_end":97913,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97914,"byte_end":97921,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97922,"byte_end":97925,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## An empty enum (for marker purposes)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97926,"byte_end":97968,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97969,"byte_end":97972,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97973,"byte_end":97980,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ enum JustAMarker {}","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":97981,"byte_end":98004,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98005,"byte_end":98012,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98115,"byte_end":98278,"line_start":77,"line_end":80,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98312,"byte_end":98343,"line_start":82,"line_end":82,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99088,"byte_end":99091,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefVariant>::new","value":"pub fn new<I>(I) -> Self where I: IntoIterator<Item = Variant>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TypeDefVariant` with the given variants\n","sig":null,"attributes":[{"value":"/ Create a new `TypeDefVariant` with the given variants","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99019,"byte_end":99076,"line_start":105,"line_end":105,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99366,"byte_end":99374,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"variants","qualname":"<TypeDefVariant<T>>::variants","value":"pub fn variants(&Self) -> &[Variant<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the variants of a variant type\n","sig":null,"attributes":[{"value":"/ Returns the variants of a variant type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99312,"byte_end":99354,"line_start":120,"line_end":120,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":100243,"byte_end":100250,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"Variant","qualname":"::ty::variant::Variant","value":"Variant {  }","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2048},{"krate":0,"index":2017},{"krate":0,"index":2049}],"decl_id":null,"docs":" A struct enum variant with either named (struct) or unnamed (tuple struct)\n fields.","sig":null,"attributes":[{"value":"/ A struct enum variant with either named (struct) or unnamed (tuple struct)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99433,"byte_end":99511,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99512,"byte_end":99523,"line_start":127,"line_end":127,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99524,"byte_end":99527,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99528,"byte_end":99541,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99542,"byte_end":99545,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99546,"byte_end":99553,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ enum Operation {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99554,"byte_end":99574,"line_start":132,"line_end":132,"column_start":1,"column_end":21}},{"value":"/     Zero,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99575,"byte_end":99588,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/ //  ^^^^ this is a unit struct enum variant","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99589,"byte_end":99636,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/     Add(i32, i32),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99637,"byte_end":99659,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/ //  ^^^^^^^^^^^^^ this is a tuple-struct enum variant","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99660,"byte_end":99717,"line_start":136,"line_end":136,"column_start":1,"column_end":58}},{"value":"/     Minus { source: i32 }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99718,"byte_end":99747,"line_start":137,"line_end":137,"column_start":1,"column_end":30}},{"value":"/ //  ^^^^^^^^^^^^^^^^^^^^^ this is a struct enum variant","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99748,"byte_end":99807,"line_start":138,"line_end":138,"column_start":1,"column_end":60}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99808,"byte_end":99813,"line_start":139,"line_end":139,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99814,"byte_end":99821,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99924,"byte_end":100087,"line_start":144,"line_end":147,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101766,"byte_end":101770,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"name","qualname":"<Variant<T>>::name","value":"pub fn name(&Self) -> &T::String","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the name of the variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101718,"byte_end":101754,"line_start":208,"line_end":208,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101881,"byte_end":101887,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"fields","qualname":"<Variant<T>>::fields","value":"pub fn fields(&Self) -> &[Field<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the fields of the struct variant.\n","sig":null,"attributes":[{"value":"/ Returns the fields of the struct variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101824,"byte_end":101869,"line_start":213,"line_end":213,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101993,"byte_end":101998,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"index","qualname":"<Variant<T>>::index","value":"pub fn index(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the index of the variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101944,"byte_end":101981,"line_start":218,"line_end":218,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":102101,"byte_end":102105,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"docs","qualname":"<Variant<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the variant.\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the variant.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":102044,"byte_end":102089,"line_start":223,"line_end":223,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":66024,"byte_end":66028,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"Type","qualname":"::ty::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150}],"decl_id":null,"docs":" A [`Type`] definition with optional metadata.\n","sig":null,"attributes":[{"value":"/ A [`Type`] definition with optional metadata.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65483,"byte_end":65532,"line_start":53,"line_end":53,"column_start":1,"column_end":50}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65635,"byte_end":65798,"line_start":57,"line_end":60,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":65832,"byte_end":65863,"line_start":62,"line_end":62,"column_start":31,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":67751,"byte_end":67758,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"builder","qualname":"<Type>::builder","value":"pub fn builder() -> TypeBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a [`TypeBuilder`](`crate::build::TypeBuilder`) the public API for constructing a [`Type`]\n","sig":null,"attributes":[{"value":"/ Create a [`TypeBuilder`](`crate::build::TypeBuilder`) the public API for constructing a [`Type`]","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":67639,"byte_end":67739,"line_start":122,"line_end":122,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68300,"byte_end":68304,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"path","qualname":"<Type<T>>::path","value":"pub fn path(&Self) -> &Path<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the path of the type\n","sig":null,"attributes":[{"value":"/ Returns the path of the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68256,"byte_end":68288,"line_start":150,"line_end":150,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68419,"byte_end":68430,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"type_params","qualname":"<Type<T>>::type_params","value":"pub fn type_params(&Self) -> &[TypeParameter<T>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the generic type parameters of the type\n","sig":null,"attributes":[{"value":"/ Returns the generic type parameters of the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68356,"byte_end":68407,"line_start":155,"line_end":155,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68550,"byte_end":68558,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"type_def","qualname":"<Type<T>>::type_def","value":"pub fn type_def(&Self) -> &TypeDef<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the definition of the type\n","sig":null,"attributes":[{"value":"/ Returns the definition of the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68500,"byte_end":68538,"line_start":160,"line_end":160,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68670,"byte_end":68674,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"docs","qualname":"<Type<T>>::docs","value":"pub fn docs(&Self) -> &[T::String]","parent":null,"children":[],"decl_id":null,"docs":" Returns the documentation of the type\n","sig":null,"attributes":[{"value":"/ Returns the documentation of the type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68617,"byte_end":68658,"line_start":165,"line_end":165,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2221},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69185,"byte_end":69198,"line_start":182,"line_end":182,"column_start":12,"column_end":25},"name":"TypeParameter","qualname":"::ty::TypeParameter","value":"TypeParameter {  }","parent":null,"children":[{"krate":0,"index":2223},{"krate":0,"index":2257}],"decl_id":null,"docs":" A generic type parameter.\n","sig":null,"attributes":[{"value":"/ A generic type parameter.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68728,"byte_end":68757,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68860,"byte_end":69023,"line_start":175,"line_end":178,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69905,"byte_end":69908,"line_start":208,"line_end":208,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeParameter<T>>::new","value":"pub fn new(T::String, Option<T::Type>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`TypeParameter`].\n","sig":null,"attributes":[{"value":"/ Create a new [`TypeParameter`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69858,"byte_end":69893,"line_start":207,"line_end":207,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70092,"byte_end":70094,"line_start":215,"line_end":215,"column_start":12,"column_end":14},"name":"ty","qualname":"<TypeParameter<T>>::ty","value":"pub fn ty(&Self) -> Option<&T::Type>","parent":null,"children":[],"decl_id":null,"docs":" Get the type of the parameter.","sig":null,"attributes":[{"value":"/ Get the type of the parameter.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69994,"byte_end":70028,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70033,"byte_end":70036,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ `None` if the parameter is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70041,"byte_end":70080,"line_start":214,"line_end":214,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70206,"byte_end":70210,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"name","qualname":"<TypeParameter<T>>::name","value":"pub fn name(&Self) -> &T::String","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the parameter.\n","sig":null,"attributes":[{"value":"/ Get the name of the parameter.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70160,"byte_end":70194,"line_start":219,"line_end":219,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2381},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71320,"byte_end":71329,"line_start":250,"line_end":250,"column_start":5,"column_end":14},"name":"Composite","qualname":"::ty::TypeDef::Composite","value":"TypeDef::Composite(TypeDefComposite<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A composite type (e.g. a struct or a tuple)\n","sig":null,"attributes":[{"value":"/ A composite type (e.g. a struct or a tuple)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71244,"byte_end":71291,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"codec(index = 0)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71296,"byte_end":71315,"line_start":249,"line_end":249,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2384},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71418,"byte_end":71425,"line_start":253,"line_end":253,"column_start":5,"column_end":12},"name":"Variant","qualname":"::ty::TypeDef::Variant","value":"TypeDef::Variant(TypeDefVariant<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A variant type (e.g. an enum)\n","sig":null,"attributes":[{"value":"/ A variant type (e.g. an enum)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71356,"byte_end":71389,"line_start":251,"line_end":251,"column_start":5,"column_end":38}},{"value":"codec(index = 1)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71394,"byte_end":71413,"line_start":252,"line_end":252,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2387},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71525,"byte_end":71533,"line_start":256,"line_end":256,"column_start":5,"column_end":13},"name":"Sequence","qualname":"::ty::TypeDef::Sequence","value":"TypeDef::Sequence(TypeDefSequence<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A sequence type with runtime known length.\n","sig":null,"attributes":[{"value":"/ A sequence type with runtime known length.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71450,"byte_end":71496,"line_start":254,"line_end":254,"column_start":5,"column_end":51}},{"value":"codec(index = 2)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71501,"byte_end":71520,"line_start":255,"line_end":255,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2390},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71637,"byte_end":71642,"line_start":259,"line_end":259,"column_start":5,"column_end":10},"name":"Array","qualname":"::ty::TypeDef::Array","value":"TypeDef::Array(TypeDefArray<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" An array type with compile-time known length.\n","sig":null,"attributes":[{"value":"/ An array type with compile-time known length.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71559,"byte_end":71608,"line_start":257,"line_end":257,"column_start":5,"column_end":54}},{"value":"codec(index = 3)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71613,"byte_end":71632,"line_start":258,"line_end":258,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71711,"byte_end":71716,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::ty::TypeDef::Tuple","value":"TypeDef::Tuple(TypeDefTuple<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A tuple type.\n","sig":null,"attributes":[{"value":"/ A tuple type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71665,"byte_end":71682,"line_start":260,"line_end":260,"column_start":5,"column_end":22}},{"value":"codec(index = 4)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71687,"byte_end":71706,"line_start":261,"line_end":261,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2396},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71794,"byte_end":71803,"line_start":265,"line_end":265,"column_start":5,"column_end":14},"name":"Primitive","qualname":"::ty::TypeDef::Primitive","value":"TypeDef::Primitive(TypeDefPrimitive)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A Rust primitive type.\n","sig":null,"attributes":[{"value":"/ A Rust primitive type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71739,"byte_end":71765,"line_start":263,"line_end":263,"column_start":5,"column_end":31}},{"value":"codec(index = 5)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71770,"byte_end":71789,"line_start":264,"line_end":264,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71897,"byte_end":71904,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Compact","qualname":"::ty::TypeDef::Compact","value":"TypeDef::Compact(TypeDefCompact<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A type using the [`Compact`] encoding\n","sig":null,"attributes":[{"value":"/ A type using the [`Compact`] encoding","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71827,"byte_end":71868,"line_start":266,"line_end":266,"column_start":5,"column_end":46}},{"value":"codec(index = 6)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71873,"byte_end":71892,"line_start":267,"line_end":267,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2402},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72001,"byte_end":72012,"line_start":271,"line_end":271,"column_start":5,"column_end":16},"name":"BitSequence","qualname":"::ty::TypeDef::BitSequence","value":"TypeDef::BitSequence(TypeDefBitSequence<T>)","parent":{"krate":0,"index":2325},"children":[],"decl_id":null,"docs":" A type representing a sequence of bits.\n","sig":null,"attributes":[{"value":"/ A type representing a sequence of bits.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71929,"byte_end":71972,"line_start":269,"line_end":269,"column_start":5,"column_end":48}},{"value":"codec(index = 7)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71977,"byte_end":71996,"line_start":270,"line_end":270,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":2325},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71210,"byte_end":71217,"line_start":247,"line_end":247,"column_start":10,"column_end":17},"name":"TypeDef","qualname":"::ty::TypeDef","value":"pub enum TypeDef<T: Form = MetaForm> {\n    Composite(TypeDefComposite<T>),\n    Variant(TypeDefVariant<T>),\n    Sequence(TypeDefSequence<T>),\n    Array(TypeDefArray<T>),\n    Tuple(TypeDefTuple<T>),\n    Primitive(TypeDefPrimitive),\n    Compact(TypeDefCompact<T>),\n    BitSequence(TypeDefBitSequence<T>),\n}","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2387},{"krate":0,"index":2390},{"krate":0,"index":2393},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402}],"decl_id":null,"docs":" The possible types a SCALE encodable Rust value could have.","sig":null,"attributes":[{"value":"/ The possible types a SCALE encodable Rust value could have.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70262,"byte_end":70325,"line_start":225,"line_end":225,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70326,"byte_end":70329,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70330,"byte_end":70340,"line_start":227,"line_end":227,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70341,"byte_end":70344,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ In order to preserve backwards compatibility, variant indices are explicitly specified instead","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70345,"byte_end":70443,"line_start":229,"line_end":229,"column_start":1,"column_end":99}},{"value":"/ of depending on the default implicit ordering.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70444,"byte_end":70494,"line_start":230,"line_end":230,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70495,"byte_end":70498,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ When adding a new variant, it must be added at the end with an incremented index.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70499,"byte_end":70584,"line_start":232,"line_end":232,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70585,"byte_end":70588,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ When removing an existing variant, the rest of variant indices remain the same, and the removed","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70589,"byte_end":70688,"line_start":234,"line_end":234,"column_start":1,"column_end":100}},{"value":"/ index should not be reused.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70689,"byte_end":70720,"line_start":235,"line_end":235,"column_start":1,"column_end":32}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":70823,"byte_end":70986,"line_start":239,"line_end":242,"column_start":5,"column_end":7}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":71020,"byte_end":71051,"line_start":244,"line_end":244,"column_start":31,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2501},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73332,"byte_end":73336,"line_start":303,"line_end":303,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ty::TypeDefPrimitive::Bool","value":"TypeDefPrimitive::Bool","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `bool` type\n","sig":null,"attributes":[{"value":"/ `bool` type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73288,"byte_end":73303,"line_start":301,"line_end":301,"column_start":5,"column_end":20}},{"value":"codec(index = 0)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73308,"byte_end":73327,"line_start":302,"line_end":302,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2503},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73386,"byte_end":73390,"line_start":306,"line_end":306,"column_start":5,"column_end":9},"name":"Char","qualname":"::ty::TypeDefPrimitive::Char","value":"TypeDefPrimitive::Char","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `char` type\n","sig":null,"attributes":[{"value":"/ `char` type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73342,"byte_end":73357,"line_start":304,"line_end":304,"column_start":5,"column_end":20}},{"value":"codec(index = 1)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73362,"byte_end":73381,"line_start":305,"line_end":305,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2505},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73439,"byte_end":73442,"line_start":309,"line_end":309,"column_start":5,"column_end":8},"name":"Str","qualname":"::ty::TypeDefPrimitive::Str","value":"TypeDefPrimitive::Str","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `str` type\n","sig":null,"attributes":[{"value":"/ `str` type","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73396,"byte_end":73410,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"codec(index = 2)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73415,"byte_end":73434,"line_start":308,"line_end":308,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73485,"byte_end":73487,"line_start":312,"line_end":312,"column_start":5,"column_end":7},"name":"U8","qualname":"::ty::TypeDefPrimitive::U8","value":"TypeDefPrimitive::U8","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `u8`\n","sig":null,"attributes":[{"value":"/ `u8`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73448,"byte_end":73456,"line_start":310,"line_end":310,"column_start":5,"column_end":13}},{"value":"codec(index = 3)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73461,"byte_end":73480,"line_start":311,"line_end":311,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2509},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73531,"byte_end":73534,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"U16","qualname":"::ty::TypeDefPrimitive::U16","value":"TypeDefPrimitive::U16","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `u16`\n","sig":null,"attributes":[{"value":"/ `u16`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73493,"byte_end":73502,"line_start":313,"line_end":313,"column_start":5,"column_end":14}},{"value":"codec(index = 4)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73507,"byte_end":73526,"line_start":314,"line_end":314,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2511},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73578,"byte_end":73581,"line_start":318,"line_end":318,"column_start":5,"column_end":8},"name":"U32","qualname":"::ty::TypeDefPrimitive::U32","value":"TypeDefPrimitive::U32","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `u32`\n","sig":null,"attributes":[{"value":"/ `u32`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73540,"byte_end":73549,"line_start":316,"line_end":316,"column_start":5,"column_end":14}},{"value":"codec(index = 5)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73554,"byte_end":73573,"line_start":317,"line_end":317,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2513},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73625,"byte_end":73628,"line_start":321,"line_end":321,"column_start":5,"column_end":8},"name":"U64","qualname":"::ty::TypeDefPrimitive::U64","value":"TypeDefPrimitive::U64","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `u64`\n","sig":null,"attributes":[{"value":"/ `u64`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73587,"byte_end":73596,"line_start":319,"line_end":319,"column_start":5,"column_end":14}},{"value":"codec(index = 6)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73601,"byte_end":73620,"line_start":320,"line_end":320,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2515},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73673,"byte_end":73677,"line_start":324,"line_end":324,"column_start":5,"column_end":9},"name":"U128","qualname":"::ty::TypeDefPrimitive::U128","value":"TypeDefPrimitive::U128","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `u128`\n","sig":null,"attributes":[{"value":"/ `u128`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73634,"byte_end":73644,"line_start":322,"line_end":322,"column_start":5,"column_end":15}},{"value":"codec(index = 7)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73649,"byte_end":73668,"line_start":323,"line_end":323,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73758,"byte_end":73762,"line_start":327,"line_end":327,"column_start":5,"column_end":9},"name":"U256","qualname":"::ty::TypeDefPrimitive::U256","value":"TypeDefPrimitive::U256","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" 256 bits unsigned int (no rust equivalent)\n","sig":null,"attributes":[{"value":"/ 256 bits unsigned int (no rust equivalent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73683,"byte_end":73729,"line_start":325,"line_end":325,"column_start":5,"column_end":51}},{"value":"codec(index = 8)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73734,"byte_end":73753,"line_start":326,"line_end":326,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73805,"byte_end":73807,"line_start":330,"line_end":330,"column_start":5,"column_end":7},"name":"I8","qualname":"::ty::TypeDefPrimitive::I8","value":"TypeDefPrimitive::I8","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `i8`\n","sig":null,"attributes":[{"value":"/ `i8`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73768,"byte_end":73776,"line_start":328,"line_end":328,"column_start":5,"column_end":13}},{"value":"codec(index = 9)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73781,"byte_end":73800,"line_start":329,"line_end":329,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73852,"byte_end":73855,"line_start":333,"line_end":333,"column_start":5,"column_end":8},"name":"I16","qualname":"::ty::TypeDefPrimitive::I16","value":"TypeDefPrimitive::I16","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `i16`\n","sig":null,"attributes":[{"value":"/ `i16`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73813,"byte_end":73822,"line_start":331,"line_end":331,"column_start":5,"column_end":14}},{"value":"codec(index = 10)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73827,"byte_end":73847,"line_start":332,"line_end":332,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73900,"byte_end":73903,"line_start":336,"line_end":336,"column_start":5,"column_end":8},"name":"I32","qualname":"::ty::TypeDefPrimitive::I32","value":"TypeDefPrimitive::I32","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `i32`\n","sig":null,"attributes":[{"value":"/ `i32`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73861,"byte_end":73870,"line_start":334,"line_end":334,"column_start":5,"column_end":14}},{"value":"codec(index = 11)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73875,"byte_end":73895,"line_start":335,"line_end":335,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73948,"byte_end":73951,"line_start":339,"line_end":339,"column_start":5,"column_end":8},"name":"I64","qualname":"::ty::TypeDefPrimitive::I64","value":"TypeDefPrimitive::I64","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `i64`\n","sig":null,"attributes":[{"value":"/ `i64`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73909,"byte_end":73918,"line_start":337,"line_end":337,"column_start":5,"column_end":14}},{"value":"codec(index = 12)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73923,"byte_end":73943,"line_start":338,"line_end":338,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73997,"byte_end":74001,"line_start":342,"line_end":342,"column_start":5,"column_end":9},"name":"I128","qualname":"::ty::TypeDefPrimitive::I128","value":"TypeDefPrimitive::I128","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" `i128`\n","sig":null,"attributes":[{"value":"/ `i128`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73957,"byte_end":73967,"line_start":340,"line_end":340,"column_start":5,"column_end":15}},{"value":"codec(index = 13)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73972,"byte_end":73992,"line_start":341,"line_end":341,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74081,"byte_end":74085,"line_start":345,"line_end":345,"column_start":5,"column_end":9},"name":"I256","qualname":"::ty::TypeDefPrimitive::I256","value":"TypeDefPrimitive::I256","parent":{"krate":0,"index":2481},"children":[],"decl_id":null,"docs":" 256 bits signed int (no rust equivalent)\n","sig":null,"attributes":[{"value":"/ 256 bits signed int (no rust equivalent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74007,"byte_end":74051,"line_start":343,"line_end":343,"column_start":5,"column_end":49}},{"value":"codec(index = 14)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74056,"byte_end":74076,"line_start":344,"line_end":344,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2481},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73265,"byte_end":73281,"line_start":300,"line_end":300,"column_start":10,"column_end":26},"name":"TypeDefPrimitive","qualname":"::ty::TypeDefPrimitive","value":"pub enum TypeDefPrimitive {\n    Bool,\n    Char,\n    Str,\n    U8,\n    U16,\n    U32,\n    U64,\n    U128,\n    U256,\n    I8,\n    I16,\n    I32,\n    I64,\n    I128,\n    I256,\n}","parent":null,"children":[{"krate":0,"index":2501},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2529}],"decl_id":null,"docs":" A primitive Rust type.","sig":null,"attributes":[{"value":"/ A primitive Rust type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72853,"byte_end":72879,"line_start":291,"line_end":291,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72880,"byte_end":72883,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72884,"byte_end":72894,"line_start":293,"line_end":293,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72895,"byte_end":72898,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ Explicit codec indices specified to ensure backwards compatibility. See [`TypeDef`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72899,"byte_end":72987,"line_start":295,"line_end":295,"column_start":1,"column_end":89}},{"value":"serde(rename_all = \"lowercase\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":73081,"byte_end":73112,"line_start":297,"line_end":297,"column_start":31,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2589},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74324,"byte_end":74336,"line_start":352,"line_end":352,"column_start":12,"column_end":24},"name":"TypeDefArray","qualname":"::ty::TypeDefArray","value":"TypeDefArray {  }","parent":null,"children":[{"krate":0,"index":2591},{"krate":0,"index":2622}],"decl_id":null,"docs":" An array type.\n","sig":null,"attributes":[{"value":"/ An array type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74090,"byte_end":74108,"line_start":348,"line_end":348,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74896,"byte_end":74899,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefArray>::new","value":"pub fn new(u32, MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array type.\n","sig":null,"attributes":[{"value":"/ Creates a new array type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74855,"byte_end":74884,"line_start":372,"line_end":372,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75125,"byte_end":75128,"line_start":384,"line_end":384,"column_start":12,"column_end":15},"name":"len","qualname":"<TypeDefArray<T>>::len","value":"pub fn len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the array type.\n","sig":null,"attributes":[{"value":"/ Returns the length of the array type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75072,"byte_end":75113,"line_start":383,"line_end":383,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75232,"byte_end":75242,"line_start":389,"line_end":389,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefArray<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the element type of the array type.\n","sig":null,"attributes":[{"value":"/ Returns the element type of the array type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75173,"byte_end":75220,"line_start":388,"line_end":388,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":2644},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75806,"byte_end":75818,"line_start":406,"line_end":406,"column_start":12,"column_end":24},"name":"TypeDefTuple","qualname":"::ty::TypeDefTuple","value":"TypeDefTuple {  }","parent":null,"children":[{"krate":0,"index":2646}],"decl_id":null,"docs":" A type to refer to tuple types.\n","sig":null,"attributes":[{"value":"/ A type to refer to tuple types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75298,"byte_end":75333,"line_start":394,"line_end":394,"column_start":1,"column_end":36}},{"value":"serde(bound(serialize = \"T::Type: Serialize, T::String: Serialize\",\ndeserialize = \"T::Type: DeserializeOwned, T::String: DeserializeOwned\",))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75436,"byte_end":75599,"line_start":398,"line_end":401,"column_start":5,"column_end":7}},{"value":"serde(transparent)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75633,"byte_end":75651,"line_start":403,"line_end":403,"column_start":31,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76260,"byte_end":76263,"line_start":423,"line_end":423,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefTuple>::new","value":"pub fn new<T>(T) -> Self where T: IntoIterator<Item = MetaType>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new tuple type definition from the given types.\n","sig":null,"attributes":[{"value":"/ Creates a new tuple type definition from the given types.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76187,"byte_end":76248,"line_start":422,"line_end":422,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76595,"byte_end":76599,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"unit","qualname":"<TypeDefTuple>::unit","value":"pub fn unit() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit tuple to represent the unit type, `()`.\n","sig":null,"attributes":[{"value":"/ Creates a new unit tuple to represent the unit type, `()`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76521,"byte_end":76583,"line_start":435,"line_end":435,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76750,"byte_end":76756,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"fields","qualname":"<TypeDefTuple<T>>::fields","value":"pub fn fields(&Self) -> &[T::Type]","parent":null,"children":[],"decl_id":null,"docs":" Returns the types of the tuple fields.\n","sig":null,"attributes":[{"value":"/ Returns the types of the tuple fields.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76696,"byte_end":76738,"line_start":445,"line_end":445,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2737},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77089,"byte_end":77104,"line_start":455,"line_end":455,"column_start":12,"column_end":27},"name":"TypeDefSequence","qualname":"::ty::TypeDefSequence","value":"TypeDefSequence {  }","parent":null,"children":[{"krate":0,"index":2773}],"decl_id":null,"docs":" A type to refer to a sequence of elements of the same type.\n","sig":null,"attributes":[{"value":"/ A type to refer to a sequence of elements of the same type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76810,"byte_end":76873,"line_start":451,"line_end":451,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77691,"byte_end":77694,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefSequence>::new","value":"pub fn new(MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sequence type.","sig":null,"attributes":[{"value":"/ Creates a new sequence type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77559,"byte_end":77591,"line_start":472,"line_end":472,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77596,"byte_end":77599,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given meta type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77604,"byte_end":77679,"line_start":474,"line_end":474,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77914,"byte_end":77916,"line_start":483,"line_end":483,"column_start":12,"column_end":14},"name":"of","qualname":"<TypeDefSequence>::of","value":"pub fn of<T>() -> Self where T: TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sequence type.","sig":null,"attributes":[{"value":"/ Creates a new sequence type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77766,"byte_end":77798,"line_start":479,"line_end":479,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77803,"byte_end":77806,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Use this constructor if you want to instantiate from a given","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77811,"byte_end":77875,"line_start":481,"line_end":481,"column_start":5,"column_end":69}},{"value":"/ compile-time type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77880,"byte_end":77902,"line_start":482,"line_end":482,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78140,"byte_end":78150,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefSequence<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the element type of the sequence type.\n","sig":null,"attributes":[{"value":"/ Returns the element type of the sequence type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78078,"byte_end":78128,"line_start":495,"line_end":495,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2830},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78456,"byte_end":78470,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"TypeDefCompact","qualname":"::ty::TypeDefCompact","value":"TypeDefCompact {  }","parent":null,"children":[{"krate":0,"index":2866}],"decl_id":null,"docs":" A type wrapped in [`Compact`].\n","sig":null,"attributes":[{"value":"/ A type wrapped in [`Compact`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78206,"byte_end":78240,"line_start":501,"line_end":501,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79003,"byte_end":79006,"line_start":523,"line_end":523,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeDefCompact>::new","value":"pub fn new(MetaType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new type wrapped in [`Compact`].\n","sig":null,"attributes":[{"value":"/ Creates a new type wrapped in [`Compact`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78945,"byte_end":78991,"line_start":522,"line_end":522,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79209,"byte_end":79219,"line_start":532,"line_end":532,"column_start":12,"column_end":22},"name":"type_param","qualname":"<TypeDefCompact<T>>::type_param","value":"pub fn type_param(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`Compact`] wrapped type, i.e. the `T` in `Compact<T>`.\n","sig":null,"attributes":[{"value":"/ Returns the [`Compact`] wrapped type, i.e. the `T` in `Compact<T>`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79126,"byte_end":79197,"line_start":531,"line_end":531,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2925},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79743,"byte_end":79761,"line_start":546,"line_end":546,"column_start":12,"column_end":30},"name":"TypeDefBitSequence","qualname":"::ty::TypeDefBitSequence","value":"TypeDefBitSequence {  }","parent":null,"children":[{"krate":0,"index":2927},{"krate":0,"index":2928}],"decl_id":null,"docs":" Type describing a [`bitvec::vec::BitVec`].","sig":null,"attributes":[{"value":"/ Type describing a [`bitvec::vec::BitVec`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79275,"byte_end":79321,"line_start":537,"line_end":537,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79322,"byte_end":79325,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79326,"byte_end":79336,"line_start":539,"line_end":539,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79337,"byte_end":79340,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ This can only be constructed for `TypeInfo` in the `MetaForm` with the `bit-vec` feature","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79341,"byte_end":79433,"line_start":541,"line_end":541,"column_start":1,"column_end":93}},{"value":"/ enabled, but can be decoded or deserialized into the `PortableForm` without this feature.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79434,"byte_end":79527,"line_start":542,"line_end":542,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80466,"byte_end":80480,"line_start":569,"line_end":569,"column_start":12,"column_end":26},"name":"bit_order_type","qualname":"<TypeDefBitSequence<T>>::bit_order_type","value":"pub fn bit_order_type(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of the bit ordering of the [`::bitvec::vec::BitVec`].\n","sig":null,"attributes":[{"value":"/ Returns the type of the bit ordering of the [`::bitvec::vec::BitVec`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80380,"byte_end":80454,"line_start":568,"line_end":568,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80626,"byte_end":80640,"line_start":574,"line_end":574,"column_start":12,"column_end":26},"name":"bit_store_type","qualname":"<TypeDefBitSequence<T>>::bit_store_type","value":"pub fn bit_store_type(&Self) -> &T::Type","parent":null,"children":[],"decl_id":null,"docs":" Returns underlying type used to store the [`::bitvec::vec::BitVec`].\n","sig":null,"attributes":[{"value":"/ Returns underlying type used to store the [`::bitvec::vec::BitVec`].","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80542,"byte_end":80614,"line_start":573,"line_end":573,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":932},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11890,"byte_end":11898,"line_start":346,"line_end":346,"column_start":11,"column_end":19},"name":"TypeInfo","qualname":"::TypeInfo","value":"TypeInfo","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"decl_id":null,"docs":" Implementors return their meta type information.\n","sig":null,"attributes":[{"value":"/ Implementors return their meta type information.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11827,"byte_end":11879,"line_start":345,"line_end":345,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":933},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12271,"byte_end":12279,"line_start":354,"line_end":354,"column_start":10,"column_end":18},"name":"Identity","qualname":"::TypeInfo::Identity","value":"type Identity: ?Sized + 'static;","parent":{"krate":0,"index":932},"children":[],"decl_id":null,"docs":" The type identifying for which type info is provided.","sig":null,"attributes":[{"value":"/ The type identifying for which type info is provided.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11905,"byte_end":11962,"line_start":347,"line_end":347,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11967,"byte_end":11970,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11975,"byte_end":11985,"line_start":349,"line_end":349,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11990,"byte_end":11993,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This is used to uniquely identify a type via [`core::any::TypeId::of`]. In most cases it","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11998,"byte_end":12090,"line_start":351,"line_end":351,"column_start":5,"column_end":97}},{"value":"/ will just be `Self`, but can be used to unify different types which have the same encoded","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12095,"byte_end":12188,"line_start":352,"line_end":352,"column_start":5,"column_end":98}},{"value":"/ representation e.g. reference types `Box<T>`, `&T` and `&mut T`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12193,"byte_end":12261,"line_start":353,"line_end":353,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12362,"byte_end":12371,"line_start":357,"line_end":357,"column_start":8,"column_end":17},"name":"type_info","qualname":"::TypeInfo::type_info","value":"pub fn type_info() -> Type","parent":{"krate":0,"index":932},"children":[],"decl_id":null,"docs":" Returns the static type identifier for `Self`.\n","sig":null,"attributes":[{"value":"/ Returns the static type identifier for `Self`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12304,"byte_end":12354,"line_start":356,"line_end":356,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":935},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12752,"byte_end":12766,"line_start":367,"line_end":367,"column_start":11,"column_end":25},"name":"StaticTypeInfo","qualname":"::StaticTypeInfo","value":"StaticTypeInfo: TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convenience trait for implementors, combining `TypeInfo` and `'static` bounds.","sig":null,"attributes":[{"value":"/ Convenience trait for implementors, combining `TypeInfo` and `'static` bounds.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12386,"byte_end":12468,"line_start":360,"line_end":360,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12469,"byte_end":12472,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12473,"byte_end":12483,"line_start":362,"line_end":362,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12484,"byte_end":12487,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ Currently because of the `'static` constraint on [`std::any::TypeId::of`] (see [`MetaType`]),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12488,"byte_end":12585,"line_start":364,"line_end":364,"column_start":1,"column_end":98}},{"value":"/ `TypeInfo` constraints must also be accompanied by a `'static` bound. This trait is useful to","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12586,"byte_end":12683,"line_start":365,"line_end":365,"column_start":1,"column_end":98}},{"value":"/ implementors so only a single constraint is required.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12684,"byte_end":12741,"line_start":366,"line_end":366,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12934,"byte_end":12943,"line_start":372,"line_end":372,"column_start":8,"column_end":17},"name":"meta_type","qualname":"::meta_type","value":"pub fn meta_type<T>() -> MetaType where T: ?Sized + TypeInfo + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns the runtime bridge to the types compile-time type information.\n","sig":null,"attributes":[{"value":"/ Returns the runtime bridge to the types compile-time type information.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12852,"byte_end":12926,"line_start":371,"line_end":371,"column_start":1,"column_end":75}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19128,"byte_end":19139,"line_start":160,"line_end":160,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19379,"byte_end":19390,"line_start":171,"line_end":171,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19711,"byte_end":19722,"line_start":183,"line_end":183,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20305,"byte_end":20316,"line_start":203,"line_end":203,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21506,"byte_end":21512,"line_start":244,"line_end":244,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22163,"byte_end":22176,"line_start":267,"line_end":267,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22323,"byte_end":22336,"line_start":276,"line_end":276,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22684,"byte_end":22697,"line_start":291,"line_end":291,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23076,"byte_end":23089,"line_start":305,"line_end":305,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24181,"byte_end":24193,"line_start":343,"line_end":343,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24465,"byte_end":24477,"line_start":355,"line_end":355,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24586,"byte_end":24598,"line_start":362,"line_end":362,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24965,"byte_end":24977,"line_start":375,"line_end":375,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25845,"byte_end":25857,"line_start":405,"line_end":405,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27148,"byte_end":27160,"line_start":449,"line_end":449,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27601,"byte_end":27609,"line_start":467,"line_end":467,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29059,"byte_end":29073,"line_start":516,"line_end":516,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29787,"byte_end":29801,"line_start":542,"line_end":542,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30799,"byte_end":30813,"line_start":577,"line_end":577,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33483,"byte_end":33491,"line_start":65,"line_end":65,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":34069,"byte_end":34081,"line_start":83,"line_end":83,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":38787,"byte_end":38790,"line_start":163,"line_end":163,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":38950,"byte_end":38958,"line_start":174,"line_end":174,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":39118,"byte_end":39124,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":39633,"byte_end":39639,"line_start":205,"line_end":205,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40272,"byte_end":40275,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40602,"byte_end":40610,"line_start":242,"line_end":242,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40951,"byte_end":40959,"line_start":257,"line_end":257,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":41262,"byte_end":41265,"line_start":271,"line_end":271,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42058,"byte_end":42064,"line_start":323,"line_end":323,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42240,"byte_end":42251,"line_start":333,"line_end":333,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42644,"byte_end":42651,"line_start":345,"line_end":345,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42834,"byte_end":42839,"line_start":355,"line_end":355,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":43328,"byte_end":43342,"line_start":372,"line_end":372,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46574,"byte_end":46589,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47105,"byte_end":47111,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48998,"byte_end":49006,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49217,"byte_end":49225,"line_start":141,"line_end":141,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49295,"byte_end":49303,"line_start":147,"line_end":147,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53276,"byte_end":53284,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53387,"byte_end":53395,"line_start":58,"line_end":58,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53420,"byte_end":53428,"line_start":60,"line_end":60,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53564,"byte_end":53572,"line_start":66,"line_end":66,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53685,"byte_end":53693,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53825,"byte_end":53833,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53941,"byte_end":53949,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57664,"byte_end":57672,"line_start":90,"line_end":90,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57736,"byte_end":57744,"line_start":96,"line_end":96,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60344,"byte_end":60360,"line_start":170,"line_end":170,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60752,"byte_end":60768,"line_start":187,"line_end":187,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61555,"byte_end":61567,"line_start":210,"line_end":210,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83254,"byte_end":83270,"line_start":82,"line_end":82,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83506,"byte_end":83522,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83775,"byte_end":83791,"line_start":104,"line_end":104,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87475,"byte_end":87480,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87886,"byte_end":87891,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88444,"byte_end":88449,"line_start":137,"line_end":137,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91156,"byte_end":91160,"line_start":66,"line_end":66,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91302,"byte_end":91306,"line_start":77,"line_end":77,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91534,"byte_end":91538,"line_start":87,"line_end":87,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91686,"byte_end":91690,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93346,"byte_end":93350,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98748,"byte_end":98762,"line_start":94,"line_end":94,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98998,"byte_end":99012,"line_start":104,"line_end":104,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99269,"byte_end":99283,"line_start":116,"line_end":116,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101001,"byte_end":101008,"line_start":174,"line_end":174,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101367,"byte_end":101374,"line_start":187,"line_end":187,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101682,"byte_end":101689,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":66811,"byte_end":66815,"line_start":89,"line_end":89,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":67628,"byte_end":67632,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68223,"byte_end":68227,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69515,"byte_end":69528,"line_start":192,"line_end":192,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69816,"byte_end":69829,"line_start":203,"line_end":203,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72062,"byte_end":72069,"line_start":274,"line_end":274,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74564,"byte_end":74576,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74836,"byte_end":74848,"line_start":371,"line_end":371,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75031,"byte_end":75043,"line_start":379,"line_end":379,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75931,"byte_end":75943,"line_start":411,"line_end":411,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76168,"byte_end":76180,"line_start":421,"line_end":421,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76655,"byte_end":76667,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77283,"byte_end":77298,"line_start":461,"line_end":461,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77537,"byte_end":77552,"line_start":471,"line_end":471,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78034,"byte_end":78049,"line_start":491,"line_end":491,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78673,"byte_end":78687,"line_start":511,"line_end":511,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78924,"byte_end":78938,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79083,"byte_end":79097,"line_start":527,"line_end":527,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79985,"byte_end":80003,"line_start":553,"line_end":553,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80333,"byte_end":80351,"line_start":564,"line_end":564,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12818,"byte_end":12819,"line_start":369,"line_end":369,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11444,"byte_end":11451,"line_start":315,"line_end":315,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11462,"byte_end":11467,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11477,"byte_end":11481,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":167}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":11502,"byte_end":11510,"line_start":320,"line_end":320,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":384}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19128,"byte_end":19139,"line_start":160,"line_end":160,"column_start":21,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19379,"byte_end":19390,"line_start":171,"line_end":171,"column_start":6,"column_end":17},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":19711,"byte_end":19722,"line_start":183,"line_end":183,"column_start":6,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":20305,"byte_end":20316,"line_start":203,"line_end":203,"column_start":9,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":21506,"byte_end":21512,"line_start":244,"line_end":244,"column_start":6,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22163,"byte_end":22176,"line_start":267,"line_end":267,"column_start":21,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22323,"byte_end":22336,"line_start":276,"line_end":276,"column_start":9,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":22684,"byte_end":22697,"line_start":291,"line_end":291,"column_start":6,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":23076,"byte_end":23089,"line_start":305,"line_end":305,"column_start":6,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24181,"byte_end":24193,"line_start":343,"line_end":343,"column_start":18,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24465,"byte_end":24477,"line_start":355,"line_end":355,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24586,"byte_end":24598,"line_start":362,"line_end":362,"column_start":9,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":24965,"byte_end":24977,"line_start":375,"line_end":375,"column_start":9,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":25845,"byte_end":25857,"line_start":405,"line_end":405,"column_start":12,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27148,"byte_end":27160,"line_start":449,"line_end":449,"column_start":9,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":27601,"byte_end":27609,"line_start":467,"line_end":467,"column_start":6,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29059,"byte_end":29073,"line_start":516,"line_end":516,"column_start":6,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":29787,"byte_end":29801,"line_start":542,"line_end":542,"column_start":9,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/build.rs","byte_start":30799,"byte_end":30813,"line_start":577,"line_end":577,"column_start":6,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":33483,"byte_end":33491,"line_start":65,"line_end":65,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3028},"to":{"krate":0,"index":185}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/form.rs","byte_start":34069,"byte_end":34081,"line_start":83,"line_end":83,"column_start":23,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3012},"to":{"krate":0,"index":185}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":38787,"byte_end":38790,"line_start":163,"line_end":163,"column_start":22,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":38950,"byte_end":38958,"line_start":174,"line_end":174,"column_start":22,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":5,"index":4173},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":39118,"byte_end":39124,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":39355},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":39633,"byte_end":39639,"line_start":205,"line_end":205,"column_start":25,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":2,"index":39482},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40272,"byte_end":40275,"line_start":228,"line_end":228,"column_start":22,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":5,"index":672},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40602,"byte_end":40610,"line_start":242,"line_end":242,"column_start":25,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":5,"index":1392},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":40951,"byte_end":40959,"line_start":257,"line_end":257,"column_start":22,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":5,"index":7463},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":41262,"byte_end":41265,"line_start":271,"line_end":271,"column_start":22,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42058,"byte_end":42064,"line_start":323,"line_end":323,"column_start":19,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42240,"byte_end":42251,"line_start":333,"line_end":333,"column_start":22,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":2,"index":3042},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42644,"byte_end":42651,"line_start":345,"line_end":345,"column_start":29,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":21,"index":2464},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":42834,"byte_end":42839,"line_start":355,"line_end":355,"column_start":24,"column_end":29},"kind":{"Impl":{"id":57}},"from":{"krate":2,"index":37866},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/impls.rs","byte_start":43328,"byte_end":43342,"line_start":372,"line_end":372,"column_start":24,"column_end":38},"kind":{"Impl":{"id":58}},"from":{"krate":2,"index":37935},"to":{"krate":0,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":46574,"byte_end":46589,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":47105,"byte_end":47111,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":48998,"byte_end":49006,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49217,"byte_end":49225,"line_start":141,"line_end":141,"column_start":26,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1476},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/interner.rs","byte_start":49295,"byte_end":49303,"line_start":147,"line_end":147,"column_start":9,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53276,"byte_end":53284,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53387,"byte_end":53395,"line_start":58,"line_end":58,"column_start":13,"column_end":21},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53420,"byte_end":53428,"line_start":60,"line_end":60,"column_start":21,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53564,"byte_end":53572,"line_start":66,"line_end":66,"column_start":14,"column_end":22},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53685,"byte_end":53693,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":9811}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53825,"byte_end":53833,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/meta_type.rs","byte_start":53941,"byte_end":53949,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57664,"byte_end":57672,"line_start":90,"line_end":90,"column_start":18,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3000},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":57736,"byte_end":57744,"line_start":96,"line_end":96,"column_start":6,"column_end":14},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60344,"byte_end":60360,"line_start":170,"line_end":170,"column_start":25,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2978},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":60752,"byte_end":60768,"line_start":187,"line_end":187,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/registry.rs","byte_start":61555,"byte_end":61567,"line_start":210,"line_end":210,"column_start":6,"column_end":18},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83254,"byte_end":83270,"line_start":82,"line_end":82,"column_start":23,"column_end":39},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1646},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83506,"byte_end":83522,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/composite.rs","byte_start":83775,"byte_end":83791,"line_start":104,"line_end":104,"column_start":9,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87475,"byte_end":87480,"line_start":100,"line_end":100,"column_start":23,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1748},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":87886,"byte_end":87891,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/fields.rs","byte_start":88444,"byte_end":88449,"line_start":137,"line_end":137,"column_start":9,"column_end":14},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91156,"byte_end":91160,"line_start":66,"line_end":66,"column_start":21,"column_end":25},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91302,"byte_end":91306,"line_start":77,"line_end":77,"column_start":23,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1805},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91534,"byte_end":91538,"line_start":87,"line_end":87,"column_start":18,"column_end":22},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":91686,"byte_end":91690,"line_start":93,"line_end":93,"column_start":6,"column_end":10},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/path.rs","byte_start":93346,"byte_end":93350,"line_start":145,"line_end":145,"column_start":9,"column_end":13},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98748,"byte_end":98762,"line_start":94,"line_end":94,"column_start":23,"column_end":37},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1912},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":98998,"byte_end":99012,"line_start":104,"line_end":104,"column_start":6,"column_end":20},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":99269,"byte_end":99283,"line_start":116,"line_end":116,"column_start":9,"column_end":23},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101001,"byte_end":101008,"line_start":174,"line_end":174,"column_start":23,"column_end":30},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2014},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101367,"byte_end":101374,"line_start":187,"line_end":187,"column_start":6,"column_end":13},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/variant.rs","byte_start":101682,"byte_end":101689,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":66811,"byte_end":66815,"line_start":89,"line_end":89,"column_start":23,"column_end":27},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2112},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":67628,"byte_end":67632,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":68223,"byte_end":68227,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69515,"byte_end":69528,"line_start":192,"line_end":192,"column_start":23,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2221},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":69816,"byte_end":69829,"line_start":203,"line_end":203,"column_start":9,"column_end":22},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":72062,"byte_end":72069,"line_start":274,"line_end":274,"column_start":23,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2325},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74564,"byte_end":74576,"line_start":360,"line_end":360,"column_start":23,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2589},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":74836,"byte_end":74848,"line_start":371,"line_end":371,"column_start":6,"column_end":18},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75031,"byte_end":75043,"line_start":379,"line_end":379,"column_start":9,"column_end":21},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":75931,"byte_end":75943,"line_start":411,"line_end":411,"column_start":23,"column_end":35},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2644},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76168,"byte_end":76180,"line_start":421,"line_end":421,"column_start":6,"column_end":18},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":76655,"byte_end":76667,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77283,"byte_end":77298,"line_start":461,"line_end":461,"column_start":23,"column_end":38},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2737},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":77537,"byte_end":77552,"line_start":471,"line_end":471,"column_start":6,"column_end":21},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78034,"byte_end":78049,"line_start":491,"line_end":491,"column_start":9,"column_end":24},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78673,"byte_end":78687,"line_start":511,"line_end":511,"column_start":23,"column_end":37},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2830},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":78924,"byte_end":78938,"line_start":521,"line_end":521,"column_start":6,"column_end":20},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79083,"byte_end":79097,"line_start":527,"line_end":527,"column_start":9,"column_end":23},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":79985,"byte_end":80003,"line_start":553,"line_end":553,"column_start":23,"column_end":41},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2925},"to":{"krate":0,"index":515}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/ty/mod.rs","byte_start":80333,"byte_end":80351,"line_start":564,"line_end":564,"column_start":9,"column_end":27},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12768,"byte_end":12776,"line_start":367,"line_end":367,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":932},"to":{"krate":0,"index":935}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/scale-info-1.0.0/src/lib.rs","byte_start":12818,"byte_end":12819,"line_start":369,"line_end":369,"column_start":28,"column_end":29},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":937},"to":{"krate":0,"index":935}}]}