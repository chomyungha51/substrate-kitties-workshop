{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support","program":"/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","frame_support","--edition=2021","/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"once_cell\"","--cfg","feature=\"serde\"","--cfg","feature=\"sp-state-machine\"","--cfg","feature=\"std\"","-C","metadata=c74a305af0d8d911","-C","extra-filename=-c74a305af0d8d911","--out-dir","/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","-L","dependency=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","--extern","bitflags=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libbitflags-d2ea910ce8700bcc.rmeta","--extern","frame_metadata=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libframe_metadata-905500ccc1ba6b58.rmeta","--extern","frame_support_procedural=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libframe_support_procedural-11fec8160f34c849.dylib","--extern","impl_trait_for_tuples=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libimpl_trait_for_tuples-3520002570cdd594.dylib","--extern","log=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/liblog-5e5b893e5fa367e7.rmeta","--extern","once_cell=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libonce_cell-d42de03a70040ca5.rmeta","--extern","codec=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libparity_scale_codec-48d05d2fb449a544.rmeta","--extern","paste=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libpaste-3c2f41c082c0c024.dylib","--extern","scale_info=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libscale_info-66e73dd6b9eeddb1.rmeta","--extern","serde=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libserde-6f8217b9748a5cc4.rmeta","--extern","smallvec=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsmallvec-7d2a09af1b98a0c7.rmeta","--extern","sp_arithmetic=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_arithmetic-4ee33c72091cf350.rmeta","--extern","sp_core=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_core-fd4b756d9c9e978e.rmeta","--extern","sp_core_hashing_proc_macro=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_core_hashing_proc_macro-09532ae142d376ac.dylib","--extern","sp_inherents=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_inherents-65882ab0ea511f32.rmeta","--extern","sp_io=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_io-0c37e3cc68ab2a50.rmeta","--extern","sp_runtime=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_runtime-9622823d28934697.rmeta","--extern","sp_staking=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_staking-1a638b8b6a46b0ab.rmeta","--extern","sp_state_machine=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_state_machine-770760a6b84bd985.rmeta","--extern","sp_std=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_std-caa0d9a9cb9fa1d4.rmeta","--extern","sp_tracing=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsp_tracing-3a143a0f14119fb5.rmeta","--extern","tt_call=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libtt_call-ca7398da98d4984e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libframe_support-c74a305af0d8d911.rmeta"},"prelude":{"crate_id":{"name":"frame_support","disambiguator":[16661794682264857644,0]},"crate_root":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src","external_crates":[{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":18,"id":{"name":"sp_tracing","disambiguator":[17115281573187824974,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":19,"id":{"name":"tracing","disambiguator":[11336498365191347296,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":20,"id":{"name":"tracing_core","disambiguator":[13166941371739321160,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":21,"id":{"name":"lazy_static","disambiguator":[15130840265310738312,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":22,"id":{"name":"tracing_attributes","disambiguator":[6081508269012503457,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":23,"id":{"name":"pin_project_lite","disambiguator":[11425072106896568983,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":24,"id":{"name":"cfg_if","disambiguator":[13037983282529128945,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","num":25,"id":{"name":"parity_scale_codec","disambiguator":[11025389664727138833,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":26,"id":{"name":"parity_scale_codec_derive","disambiguator":[13567950630339581430,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":27,"id":{"name":"arrayvec","disambiguator":[4765445384651765470,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":28,"id":{"name":"byte_slice_cast","disambiguator":[1450742829568187162,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","num":29,"id":{"name":"impl_trait_for_tuples","disambiguator":[1199501065919261664,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","num":30,"id":{"name":"serde","disambiguator":[9544137782352177236,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","num":31,"id":{"name":"serde_derive","disambiguator":[17621009518653333156,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","num":32,"id":{"name":"sp_std","disambiguator":[3836989623224051638,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":33,"id":{"name":"tracing_subscriber","disambiguator":[3482678861429152333,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":34,"id":{"name":"regex","disambiguator":[7788844225520356469,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":35,"id":{"name":"regex_syntax","disambiguator":[17206049943230988918,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":36,"id":{"name":"aho_corasick","disambiguator":[39857364077992619,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":37,"id":{"name":"memchr","disambiguator":[16906949692006644998,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":38,"id":{"name":"matchers","disambiguator":[8128970701659719436,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":39,"id":{"name":"regex_automata","disambiguator":[1456044335499460014,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":40,"id":{"name":"ansi_term","disambiguator":[5210659223695397450,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":41,"id":{"name":"tracing_log","disambiguator":[16287341719558271376,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":42,"id":{"name":"log","disambiguator":[6370244751661190342,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":43,"id":{"name":"serde_json","disambiguator":[16112264681940306659,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":44,"id":{"name":"itoa","disambiguator":[11535409108964451412,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":45,"id":{"name":"ryu","disambiguator":[16732346970662687665,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":46,"id":{"name":"tracing_serde","disambiguator":[13310577343698839343,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":47,"id":{"name":"sharded_slab","disambiguator":[3163472644790877400,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":48,"id":{"name":"thread_local","disambiguator":[15743197468808622674,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":49,"id":{"name":"once_cell","disambiguator":[906241516110484464,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","num":50,"id":{"name":"smallvec","disambiguator":[13996271574193408785,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":51,"id":{"name":"chrono","disambiguator":[16306847718078067803,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":52,"id":{"name":"libc","disambiguator":[9005103142181622755,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":53,"id":{"name":"num_integer","disambiguator":[12790497028950123625,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":54,"id":{"name":"num_traits","disambiguator":[4458903683416238728,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":55,"id":{"name":"frame_metadata","disambiguator":[13174754385741338693,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","num":56,"id":{"name":"scale_info","disambiguator":[15088973142150946651,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":57,"id":{"name":"derive_more","disambiguator":[8707368253099479613,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":58,"id":{"name":"scale_info_derive","disambiguator":[7230802250740732360,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","num":59,"id":{"name":"paste","disambiguator":[8100093209724045110,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":60,"id":{"name":"sp_core","disambiguator":[10539036770076454810,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":61,"id":{"name":"sp_runtime_interface","disambiguator":[5978476347992355165,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":62,"id":{"name":"sp_wasm_interface","disambiguator":[14621349120364007850,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":63,"id":{"name":"wasmi","disambiguator":[16123217206983833204,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":64,"id":{"name":"num_rational","disambiguator":[7244470453211819544,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":65,"id":{"name":"num_bigint","disambiguator":[635263567890515209,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":66,"id":{"name":"parity_wasm","disambiguator":[16011417072864726173,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":67,"id":{"name":"downcast_rs","disambiguator":[4795813113247543536,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":68,"id":{"name":"wasmi_validation","disambiguator":[3849529294403821989,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":69,"id":{"name":"memory_units","disambiguator":[17120499401839962369,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":70,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[18412092644992162333,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":71,"id":{"name":"sp_externalities","disambiguator":[399927920652893655,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":72,"id":{"name":"sp_storage","disambiguator":[8855496573306405091,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":73,"id":{"name":"sp_debug_derive","disambiguator":[501895185402007615,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":74,"id":{"name":"ref_cast","disambiguator":[10355980937645703199,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":75,"id":{"name":"ref_cast_impl","disambiguator":[7833991851463348593,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":76,"id":{"name":"impl_serde","disambiguator":[8512808259922711046,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":77,"id":{"name":"environmental","disambiguator":[7591175807006172968,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":78,"id":{"name":"primitive_types","disambiguator":[1132617819206243597,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":79,"id":{"name":"fixed_hash","disambiguator":[17090297082099601704,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":80,"id":{"name":"static_assertions","disambiguator":[10004466869080491857,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":81,"id":{"name":"byteorder","disambiguator":[17265137979086274999,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":82,"id":{"name":"rustc_hex","disambiguator":[4904094113549843862,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":83,"id":{"name":"rand","disambiguator":[12901984643046046855,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":84,"id":{"name":"rand_core","disambiguator":[16679925004612314669,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":85,"id":{"name":"getrandom","disambiguator":[3195479937133090562,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":86,"id":{"name":"rand_chacha","disambiguator":[14569171819719609776,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":87,"id":{"name":"ppv_lite86","disambiguator":[12042266499095552183,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":88,"id":{"name":"uint","disambiguator":[9332051173416102165,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":89,"id":{"name":"hex","disambiguator":[14313328291304734710,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":90,"id":{"name":"crunchy","disambiguator":[13790995560371089749,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":91,"id":{"name":"impl_codec","disambiguator":[7953877303562084663,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":92,"id":{"name":"sp_core_hashing","disambiguator":[1548912130435483016,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":93,"id":{"name":"sha2","disambiguator":[7984982361359771615,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":94,"id":{"name":"digest","disambiguator":[7960030921902106253,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":95,"id":{"name":"crypto_common","disambiguator":[8029973214147517645,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":96,"id":{"name":"generic_array","disambiguator":[7841133790266995098,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":97,"id":{"name":"typenum","disambiguator":[14585012641457782044,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":98,"id":{"name":"block_buffer","disambiguator":[15121256659554030653,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":99,"id":{"name":"tiny_keccak","disambiguator":[4831626262459225760,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":100,"id":{"name":"blake2_rfc","disambiguator":[16494060001680096856,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":101,"id":{"name":"arrayvec","disambiguator":[4491850697814948687,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":102,"id":{"name":"nodrop","disambiguator":[2178045376185257472,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":103,"id":{"name":"constant_time_eq","disambiguator":[918597060255610487,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":104,"id":{"name":"twox_hash","disambiguator":[3781583381976325544,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":105,"id":{"name":"base58","disambiguator":[1492415652631636402,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":106,"id":{"name":"rand","disambiguator":[6570305274632995237,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":107,"id":{"name":"rand_core","disambiguator":[17080480140097750689,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":108,"id":{"name":"getrandom","disambiguator":[8292786742397754090,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":109,"id":{"name":"rand_chacha","disambiguator":[10140618975598609131,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":110,"id":{"name":"rand_pcg","disambiguator":[16754927045678396121,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":111,"id":{"name":"secrecy","disambiguator":[12328287557864309941,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":112,"id":{"name":"zeroize","disambiguator":[14270330548133686224,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":113,"id":{"name":"zeroize_derive","disambiguator":[14645886018623984611,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":114,"id":{"name":"ss58_registry","disambiguator":[10244720218670862445,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":115,"id":{"name":"num_format","disambiguator":[17006054312781283822,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":116,"id":{"name":"itoa","disambiguator":[6582269778583154766,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":117,"id":{"name":"bip39","disambiguator":[11314893889286737187,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":118,"id":{"name":"thiserror","disambiguator":[7468023769639996234,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":119,"id":{"name":"thiserror_impl","disambiguator":[5731738171410429882,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":120,"id":{"name":"rustc_hash","disambiguator":[17030272073622719790,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":121,"id":{"name":"anyhow","disambiguator":[830393935267582809,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":122,"id":{"name":"unicode_normalization","disambiguator":[8187239885301538671,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":123,"id":{"name":"tinyvec","disambiguator":[12924922863080295405,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":124,"id":{"name":"tinyvec_macros","disambiguator":[13381352415925325925,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":125,"id":{"name":"hmac","disambiguator":[5597361097560193622,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":126,"id":{"name":"crypto_mac","disambiguator":[13652587454274268186,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":127,"id":{"name":"subtle","disambiguator":[11822527493932057962,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":128,"id":{"name":"digest","disambiguator":[14851263093279560039,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":129,"id":{"name":"sha2","disambiguator":[6259963827041717268,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":130,"id":{"name":"block_buffer","disambiguator":[15898354361683503687,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":131,"id":{"name":"opaque_debug","disambiguator":[10149071386350004449,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":132,"id":{"name":"pbkdf2","disambiguator":[15860643655094233267,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":133,"id":{"name":"libsecp256k1","disambiguator":[2699982375993309303,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":134,"id":{"name":"libsecp256k1_core","disambiguator":[9632512077303058192,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":135,"id":{"name":"arrayref","disambiguator":[1650279616086479414,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":136,"id":{"name":"hmac_drbg","disambiguator":[8562318492319979916,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":137,"id":{"name":"base64","disambiguator":[9171027083854165706,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":138,"id":{"name":"ed25519_dalek","disambiguator":[16700074225571961497,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":139,"id":{"name":"ed25519","disambiguator":[1015267793177718019,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":140,"id":{"name":"signature","disambiguator":[18058162181553298212,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":141,"id":{"name":"curve25519_dalek","disambiguator":[2964809850618072849,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":142,"id":{"name":"substrate_bip39","disambiguator":[1697577346339759795,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":143,"id":{"name":"hmac","disambiguator":[13341285572281611115,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":144,"id":{"name":"crypto_mac","disambiguator":[17226725527678380297,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":145,"id":{"name":"pbkdf2","disambiguator":[13046195669477736950,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":146,"id":{"name":"schnorrkel","disambiguator":[10486160385154417059,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":147,"id":{"name":"curve25519_dalek","disambiguator":[5450037059228546913,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":148,"id":{"name":"digest","disambiguator":[1612722049855349197,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":149,"id":{"name":"generic_array","disambiguator":[8495020690264827285,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":150,"id":{"name":"sha2","disambiguator":[7577821273395372931,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":151,"id":{"name":"block_buffer","disambiguator":[7920993218300368383,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":152,"id":{"name":"block_padding","disambiguator":[9681734599640059894,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":153,"id":{"name":"byte_tools","disambiguator":[4448446428834929902,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":154,"id":{"name":"fake_simd","disambiguator":[14330172453705584098,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":155,"id":{"name":"opaque_debug","disambiguator":[4689282538842033187,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":156,"id":{"name":"merlin","disambiguator":[7615320066614362181,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":157,"id":{"name":"keccak","disambiguator":[14288935386259045601,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":158,"id":{"name":"arrayvec","disambiguator":[10813777983401750230,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":159,"id":{"name":"hash256_std_hasher","disambiguator":[10644123848667397706,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":160,"id":{"name":"hash_db","disambiguator":[3035980359055305477,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":161,"id":{"name":"parking_lot","disambiguator":[16537474632112846226,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":162,"id":{"name":"instant","disambiguator":[10818540477857358525,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":163,"id":{"name":"lock_api","disambiguator":[5572021129215100917,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":164,"id":{"name":"scopeguard","disambiguator":[794896012219393328,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":165,"id":{"name":"parking_lot_core","disambiguator":[13801629192239844415,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","num":166,"id":{"name":"bitflags","disambiguator":[5221822649502070792,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":167,"id":{"name":"dyn_clonable","disambiguator":[1243236851226104374,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":168,"id":{"name":"dyn_clone","disambiguator":[14300175821732726930,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":169,"id":{"name":"dyn_clonable_impl","disambiguator":[18184807534735114799,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":170,"id":{"name":"futures","disambiguator":[8253965773970055907,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":171,"id":{"name":"futures_core","disambiguator":[841166366787286430,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":172,"id":{"name":"futures_util","disambiguator":[14096700963666586211,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":173,"id":{"name":"pin_utils","disambiguator":[12644058774972893031,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":174,"id":{"name":"futures_macro","disambiguator":[3113027969270784767,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":175,"id":{"name":"futures_task","disambiguator":[918535662743158888,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":176,"id":{"name":"futures_sink","disambiguator":[2935170657078551846,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":177,"id":{"name":"futures_channel","disambiguator":[14207323074309291647,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":178,"id":{"name":"slab","disambiguator":[13312282856459513588,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":179,"id":{"name":"futures_io","disambiguator":[9326164172813176432,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":180,"id":{"name":"futures_executor","disambiguator":[4441633710481061927,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":181,"id":{"name":"num_cpus","disambiguator":[4831201215496412112,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":182,"id":{"name":"sp_core_hashing_proc_macro","disambiguator":[14202893453989921009,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":183,"id":{"name":"sp_io","disambiguator":[5376141069323771889,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":184,"id":{"name":"sp_keystore","disambiguator":[14714212301356061562,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":185,"id":{"name":"async_trait","disambiguator":[16717041390317813471,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":186,"id":{"name":"sp_trie","disambiguator":[992870631350192482,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":187,"id":{"name":"trie_db","disambiguator":[3335082550653388918,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":188,"id":{"name":"hashbrown","disambiguator":[10474930597283054639,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":189,"id":{"name":"ahash","disambiguator":[14048706732936511347,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":190,"id":{"name":"trie_root","disambiguator":[16305582103997779709,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":191,"id":{"name":"memory_db","disambiguator":[8819853156270193057,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":192,"id":{"name":"parity_util_mem","disambiguator":[16113266381202813629,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":193,"id":{"name":"parity_util_mem_derive","disambiguator":[9831126247431414965,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":194,"id":{"name":"hashbrown","disambiguator":[4274156849305481277,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":195,"id":{"name":"sp_state_machine","disambiguator":[14420318803208604902,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":196,"id":{"name":"sp_panic_handler","disambiguator":[2554986030378427533,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":197,"id":{"name":"backtrace","disambiguator":[9444020036814084173,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":198,"id":{"name":"rustc_demangle","disambiguator":[18064903648624545889,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":199,"id":{"name":"addr2line","disambiguator":[1160765712610408410,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":200,"id":{"name":"gimli","disambiguator":[17778232601482657597,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":201,"id":{"name":"object","disambiguator":[1969958253925737606,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":202,"id":{"name":"tt_call","disambiguator":[18301981697436526968,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","num":203,"id":{"name":"sp_runtime","disambiguator":[3502379115498754511,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","num":204,"id":{"name":"sp_application_crypto","disambiguator":[6627145901614140475,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","num":205,"id":{"name":"sp_arithmetic","disambiguator":[16156418643593806731,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","num":206,"id":{"name":"integer_sqrt","disambiguator":[1599833354932985529,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","num":207,"id":{"name":"either","disambiguator":[3320197769548727441,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","num":208,"id":{"name":"sp_inherents","disambiguator":[18246421480553877608,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","num":209,"id":{"name":"sp_staking","disambiguator":[13589607964581496936,0]}},{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","num":210,"id":{"name":"frame_support_procedural","disambiguator":[10293331352560451309,0]}}],"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":686,"byte_end":80777,"line_start":18,"line_end":2477,"column_start":1,"column_end":42}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":884,"byte_end":894,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_tracing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":920,"byte_end":925,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"alias_span":null,"name":"codec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":55,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":950,"byte_end":964,"line_start":31,"line_end":31,"column_start":9,"column_end":23},"alias_span":null,"name":"metadata","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":42,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1001,"byte_end":1004,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"alias_span":null,"name":"log","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":49,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1053,"byte_end":1062,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"alias_span":null,"name":"once_cell","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":59,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1087,"byte_end":1092,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"alias_span":null,"name":"paste","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":56,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1117,"byte_end":1127,"line_start":40,"line_end":40,"column_start":9,"column_end":19},"alias_span":null,"name":"scale_info","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1161,"byte_end":1166,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"alias_span":null,"name":"serde","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":60,"index":4108},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1185,"byte_end":1189,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"alias_span":null,"name":"Void","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":182,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1214,"byte_end":1240,"line_start":45,"line_end":45,"column_start":9,"column_end":35},"alias_span":null,"name":"sp_core_hashing_proc_macro","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":183,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1265,"byte_end":1270,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"alias_span":null,"name":"sp_io","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":183,"index":264},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1288,"byte_end":1292,"line_start":47,"line_end":47,"column_start":32,"column_end":36},"alias_span":null,"name":"storage_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":73,"index":62},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1347,"byte_end":1359,"line_start":49,"line_end":49,"column_start":22,"column_end":34},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":72,"index":526},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1361,"byte_end":1373,"line_start":49,"line_end":49,"column_start":36,"column_end":48},"alias_span":null,"name":"StateVersion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":195,"index":2182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1441,"byte_end":1459,"line_start":52,"line_end":52,"column_start":27,"column_end":45},"alias_span":null,"name":"BasicExternalities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1484,"byte_end":1490,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"alias_span":null,"name":"sp_std","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1524,"byte_end":1525,"line_start":56,"line_end":56,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":228},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81626,"byte_end":81631,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":220},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81633,"byte_end":81639,"line_start":22,"line_end":22,"column_start":17,"column_end":23},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":26,"index":449},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81633,"byte_end":81639,"line_start":22,"line_end":22,"column_start":17,"column_end":23},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":202},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81641,"byte_end":81647,"line_start":22,"line_end":22,"column_start":25,"column_end":31},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":26,"index":448},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81641,"byte_end":81647,"line_start":22,"line_end":22,"column_start":25,"column_end":31},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":327},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81649,"byte_end":81660,"line_start":22,"line_end":22,"column_start":33,"column_end":44},"alias_span":null,"name":"EncodeAsRef","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":890},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81662,"byte_end":81672,"line_start":22,"line_end":22,"column_start":46,"column_end":56},"alias_span":null,"name":"EncodeLike","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":648},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81674,"byte_end":81684,"line_start":22,"line_end":22,"column_start":58,"column_end":68},"alias_span":null,"name":"HasCompact","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":152},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81686,"byte_end":81691,"line_start":22,"line_end":22,"column_start":70,"column_end":75},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":25,"index":173},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81693,"byte_end":81699,"line_start":22,"line_end":22,"column_start":77,"column_end":83},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":56,"index":932},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81715,"byte_end":81723,"line_start":23,"line_end":23,"column_start":14,"column_end":22},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":58,"index":261},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81715,"byte_end":81723,"line_start":23,"line_end":23,"column_start":14,"column_end":22},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":5,"index":4445},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81738,"byte_end":81741,"line_start":25,"line_end":25,"column_start":3,"column_end":6},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":3008},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81743,"byte_end":81749,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2645},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81763,"byte_end":81768,"line_start":26,"line_end":26,"column_start":13,"column_end":18},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2648},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81763,"byte_end":81768,"line_start":26,"line_end":26,"column_start":13,"column_end":18},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2680},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81770,"byte_end":81772,"line_start":26,"line_end":26,"column_start":20,"column_end":22},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81770,"byte_end":81772,"line_start":26,"line_end":26,"column_start":20,"column_end":22},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2675},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81774,"byte_end":81783,"line_start":26,"line_end":26,"column_start":24,"column_end":33},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":2679},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81774,"byte_end":81783,"line_start":26,"line_end":26,"column_start":24,"column_end":33},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":5,"index":7089},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81785,"byte_end":81788,"line_start":26,"line_end":26,"column_start":35,"column_end":38},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":2,"index":8898},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81793,"byte_end":81799,"line_start":27,"line_end":27,"column_start":3,"column_end":9},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":23674},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81818,"byte_end":81830,"line_start":30,"line_end":30,"column_start":3,"column_end":15},"alias_span":null,"name":"CallMetadata","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":5785},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81832,"byte_end":81847,"line_start":30,"line_end":30,"column_start":17,"column_end":32},"alias_span":null,"name":"GetCallMetadata","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":5782},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81849,"byte_end":81860,"line_start":30,"line_end":30,"column_start":34,"column_end":45},"alias_span":null,"name":"GetCallName","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":5811},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81862,"byte_end":81879,"line_start":30,"line_end":30,"column_start":47,"column_end":64},"alias_span":null,"name":"GetStorageVersion","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6084},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81881,"byte_end":81903,"line_start":30,"line_end":30,"column_start":66,"column_end":88},"alias_span":null,"name":"UnfilteredDispatchable","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6323},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81923,"byte_end":81939,"line_start":33,"line_end":33,"column_start":3,"column_end":19},"alias_span":null,"name":"ClassifyDispatch","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":27886},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81941,"byte_end":81953,"line_start":33,"line_end":33,"column_start":21,"column_end":33},"alias_span":null,"name":"DispatchInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6347},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81955,"byte_end":81970,"line_start":33,"line_end":33,"column_start":35,"column_end":50},"alias_span":null,"name":"GetDispatchInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6326},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81972,"byte_end":81979,"line_start":33,"line_end":33,"column_start":52,"column_end":59},"alias_span":null,"name":"PaysFee","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":27920},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81981,"byte_end":81997,"line_start":33,"line_end":33,"column_start":61,"column_end":77},"alias_span":null,"name":"PostDispatchInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":203,"index":1861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82001,"byte_end":82020,"line_start":34,"line_end":34,"column_start":3,"column_end":22},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6320},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82022,"byte_end":82031,"line_start":34,"line_end":34,"column_start":24,"column_end":33},"alias_span":null,"name":"WeighData","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6304},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82033,"byte_end":82039,"line_start":34,"line_end":34,"column_start":35,"column_end":41},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":6366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82041,"byte_end":82061,"line_start":34,"line_end":34,"column_start":43,"column_end":63},"alias_span":null,"name":"WithPostDispatchInfo","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":203,"index":1706},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82099,"byte_end":82111,"line_start":37,"line_end":37,"column_start":30,"column_end":42},"alias_span":null,"name":"Dispatchable","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":203,"index":5356},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82113,"byte_end":82126,"line_start":37,"line_end":37,"column_start":44,"column_end":57},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":73,"index":62},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82128,"byte_end":82140,"line_start":37,"line_end":37,"column_start":59,"column_end":71},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":55}},{"kind":"Use","ref_id":{"krate":0,"index":2881},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":180537,"byte_end":180564,"line_start":20,"line_end":20,"column_start":22,"column_end":49},"alias_span":null,"name":"StorageEntryMetadataBuilder","value":"","parent":{"krate":0,"index":315}},{"kind":"Use","ref_id":{"krate":203,"index":2195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":180935,"byte_end":180953,"line_start":31,"line_end":31,"column_start":21,"column_end":39},"alias_span":null,"name":"TransactionOutcome","value":"","parent":{"krate":0,"index":315}},{"kind":"Use","ref_id":{"krate":0,"index":2195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":180994,"byte_end":180997,"line_start":33,"line_end":33,"column_start":16,"column_end":19},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":315}},{"kind":"Use","ref_id":{"krate":183,"index":230},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295178,"byte_end":295195,"line_start":24,"line_end":24,"column_start":23,"column_end":40},"alias_span":null,"name":"KillStorageResult","value":"","parent":{"krate":0,"index":893}},{"kind":"Use","ref_id":{"krate":72,"index":453},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295291,"byte_end":295300,"line_start":27,"line_end":27,"column_start":28,"column_end":37},"alias_span":null,"name":"ChildInfo","value":"","parent":{"krate":0,"index":893}},{"kind":"Use","ref_id":{"krate":72,"index":487},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295302,"byte_end":295311,"line_start":27,"line_end":27,"column_start":39,"column_end":48},"alias_span":null,"name":"ChildType","value":"","parent":{"krate":0,"index":893}},{"kind":"Use","ref_id":{"krate":72,"index":526},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295313,"byte_end":295325,"line_start":27,"line_end":27,"column_start":50,"column_end":62},"alias_span":null,"name":"StateVersion","value":"","parent":{"krate":0,"index":893}},{"kind":"Use","ref_id":{"krate":0,"index":1002},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":302110,"byte_end":302126,"line_start":32,"line_end":32,"column_start":21,"column_end":37},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":949}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":302141,"byte_end":302151,"line_start":33,"line_end":33,"column_start":14,"column_end":24},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":949}},{"kind":"Use","ref_id":{"krate":0,"index":1325},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":302167,"byte_end":302178,"line_start":34,"line_end":34,"column_start":15,"column_end":26},"alias_span":null,"name":"StorageNMap","value":"","parent":{"krate":0,"index":949}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":302195,"byte_end":302207,"line_start":35,"line_end":35,"column_start":16,"column_end":28},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":949}},{"kind":"Use","ref_id":{"krate":0,"index":1753},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383211,"byte_end":383228,"line_start":32,"line_end":32,"column_start":23,"column_end":40},"alias_span":null,"name":"CountedStorageMap","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":1763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383230,"byte_end":383255,"line_start":32,"line_end":32,"column_start":42,"column_end":67},"alias_span":null,"name":"CountedStorageMapInstance","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":1979},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383278,"byte_end":383294,"line_start":33,"line_end":33,"column_start":21,"column_end":37},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2236},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383312,"byte_end":383327,"line_start":35,"line_end":35,"column_start":2,"column_end":17},"alias_span":null,"name":"EncodeLikeTuple","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2252},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383329,"byte_end":383341,"line_start":35,"line_end":35,"column_start":19,"column_end":31},"alias_span":null,"name":"HasKeyPrefix","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2256},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383343,"byte_end":383365,"line_start":35,"line_end":35,"column_start":33,"column_end":55},"alias_span":null,"name":"HasReversibleKeyPrefix","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383367,"byte_end":383370,"line_start":35,"line_end":35,"column_start":57,"column_end":60},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2200},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383372,"byte_end":383384,"line_start":35,"line_end":35,"column_start":62,"column_end":74},"alias_span":null,"name":"KeyGenerator","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2210},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383387,"byte_end":383412,"line_start":36,"line_end":36,"column_start":2,"column_end":27},"alias_span":null,"name":"KeyGeneratorMaxEncodedLen","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383414,"byte_end":383436,"line_start":36,"line_end":36,"column_start":29,"column_end":51},"alias_span":null,"name":"ReversibleKeyGenerator","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2239},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383438,"byte_end":383456,"line_start":36,"line_end":36,"column_start":53,"column_end":71},"alias_span":null,"name":"TupleToEncodedIter","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2324},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383474,"byte_end":383484,"line_start":38,"line_end":38,"column_start":14,"column_end":24},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383500,"byte_end":383511,"line_start":39,"line_end":39,"column_start":15,"column_end":26},"alias_span":null,"name":"StorageNMap","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":0,"index":2745},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383528,"byte_end":383540,"line_start":40,"line_end":40,"column_start":16,"column_end":28},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":1662}},{"kind":"Use","ref_id":{"krate":203,"index":1672},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551056,"byte_end":551061,"line_start":19,"line_end":19,"column_start":37,"column_end":42},"alias_span":null,"name":"BlockT","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":203,"index":1682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551073,"byte_end":551082,"line_start":19,"line_end":19,"column_start":54,"column_end":63},"alias_span":null,"name":"Extrinsic","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":5,"index":7089},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551128,"byte_end":551131,"line_start":21,"line_end":21,"column_start":29,"column_end":32},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":208,"index":863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551159,"byte_end":551179,"line_start":24,"line_end":24,"column_start":2,"column_end":22},"alias_span":null,"name":"CheckInherentsResult","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":208,"index":844},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551181,"byte_end":551193,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":208,"index":39},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551195,"byte_end":551213,"line_start":24,"line_end":24,"column_start":38,"column_end":56},"alias_span":null,"name":"InherentIdentifier","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":208,"index":64},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551215,"byte_end":551227,"line_start":24,"line_end":24,"column_start":58,"column_end":70},"alias_span":null,"name":"IsFatalError","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":208,"index":878},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551229,"byte_end":551243,"line_start":24,"line_end":24,"column_start":72,"column_end":86},"alias_span":null,"name":"MakeFatalError","value":"","parent":{"krate":0,"index":3539}},{"kind":"Use","ref_id":{"krate":203,"index":4068},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":554539,"byte_end":554548,"line_start":21,"line_end":21,"column_start":30,"column_end":39},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":3574}},{"kind":"Use","ref_id":{"krate":203,"index":4069},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":554539,"byte_end":554548,"line_start":21,"line_end":21,"column_start":30,"column_end":39},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":3574}},{"kind":"Use","ref_id":{"krate":203,"index":4081},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":554550,"byte_end":554561,"line_start":21,"line_end":21,"column_start":41,"column_end":52},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":3574}},{"kind":"Use","ref_id":{"krate":203,"index":4082},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":554550,"byte_end":554561,"line_start":21,"line_end":21,"column_start":41,"column_end":52},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":3574}},{"kind":"Use","ref_id":{"krate":0,"index":3682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":570901,"byte_end":570924,"line_start":33,"line_end":33,"column_start":22,"column_end":45},"alias_span":null,"name":"NamedReservableCurrency","value":"","parent":{"krate":0,"index":3612}},{"kind":"Use","ref_id":{"krate":0,"index":3666},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":570926,"byte_end":570944,"line_start":33,"line_end":33,"column_start":47,"column_end":65},"alias_span":null,"name":"ReservableCurrency","value":"","parent":{"krate":0,"index":3612}},{"kind":"Use","ref_id":{"krate":0,"index":3717},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":570980,"byte_end":570994,"line_start":35,"line_end":35,"column_start":20,"column_end":34},"alias_span":null,"name":"LockIdentifier","value":"","parent":{"krate":0,"index":3612}},{"kind":"Use","ref_id":{"krate":0,"index":3719},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":570996,"byte_end":571012,"line_start":35,"line_end":35,"column_start":36,"column_end":52},"alias_span":null,"name":"LockableCurrency","value":"","parent":{"krate":0,"index":3612}},{"kind":"Use","ref_id":{"krate":0,"index":3726},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571014,"byte_end":571029,"line_start":35,"line_end":35,"column_start":54,"column_end":69},"alias_span":null,"name":"VestingSchedule","value":"","parent":{"krate":0,"index":3612}},{"kind":"Use","ref_id":{"krate":0,"index":3864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594305,"byte_end":594313,"line_start":32,"line_end":32,"column_start":20,"column_end":28},"alias_span":null,"name":"Balanced","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":3876},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594315,"byte_end":594325,"line_start":32,"line_end":32,"column_start":30,"column_end":40},"alias_span":null,"name":"Unbalanced","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":3991},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594348,"byte_end":594356,"line_start":33,"line_end":33,"column_start":21,"column_end":29},"alias_span":null,"name":"CreditOf","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":3988},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594358,"byte_end":594364,"line_start":33,"line_end":33,"column_start":31,"column_end":37},"alias_span":null,"name":"DebtOf","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":3953},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594366,"byte_end":594385,"line_start":33,"line_end":33,"column_start":39,"column_end":58},"alias_span":null,"name":"HandleImbalanceDrop","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":20389},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594387,"byte_end":594396,"line_start":33,"line_end":33,"column_start":60,"column_end":69},"alias_span":null,"name":"Imbalance","value":"","parent":{"krate":0,"index":3799}},{"kind":"Use","ref_id":{"krate":0,"index":4170},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625191,"byte_end":625199,"line_start":31,"line_end":31,"column_start":20,"column_end":28},"alias_span":null,"name":"Balanced","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":4182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625201,"byte_end":625211,"line_start":31,"line_end":31,"column_start":30,"column_end":40},"alias_span":null,"name":"Unbalanced","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":4315},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625249,"byte_end":625257,"line_start":33,"line_end":33,"column_start":21,"column_end":29},"alias_span":null,"name":"CreditOf","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":4312},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625259,"byte_end":625265,"line_start":33,"line_end":33,"column_start":31,"column_end":37},"alias_span":null,"name":"DebtOf","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":4282},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625267,"byte_end":625286,"line_start":33,"line_end":33,"column_start":39,"column_end":58},"alias_span":null,"name":"HandleImbalanceDrop","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":20419},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625288,"byte_end":625297,"line_start":33,"line_end":33,"column_start":60,"column_end":69},"alias_span":null,"name":"Imbalance","value":"","parent":{"krate":0,"index":4099}},{"kind":"Use","ref_id":{"krate":0,"index":4397},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659036,"byte_end":659048,"line_start":28,"line_end":28,"column_start":24,"column_end":36},"alias_span":null,"name":"OnUnbalanced","value":"","parent":{"krate":0,"index":4379}},{"kind":"Use","ref_id":{"krate":0,"index":4427},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659076,"byte_end":659091,"line_start":29,"line_end":29,"column_start":27,"column_end":42},"alias_span":null,"name":"SignedImbalance","value":"","parent":{"krate":0,"index":4379}},{"kind":"Use","ref_id":{"krate":0,"index":4464},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659117,"byte_end":659129,"line_start":30,"line_end":30,"column_start":25,"column_end":37},"alias_span":null,"name":"SplitTwoWays","value":"","parent":{"krate":0,"index":4379}},{"kind":"Use","ref_id":{"krate":0,"index":4490},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569676,"byte_end":569685,"line_start":27,"line_end":27,"column_start":20,"column_end":29},"alias_span":null,"name":"Imbalance","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":4569},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569704,"byte_end":569711,"line_start":29,"line_end":29,"column_start":2,"column_end":9},"alias_span":null,"name":"AssetId","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":4572},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569713,"byte_end":569720,"line_start":29,"line_end":29,"column_start":11,"column_end":18},"alias_span":null,"name":"Balance","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":4575},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569722,"byte_end":569739,"line_start":29,"line_end":29,"column_start":20,"column_end":37},"alias_span":null,"name":"BalanceConversion","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":20525},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569741,"byte_end":569754,"line_start":29,"line_end":29,"column_start":39,"column_end":52},"alias_span":null,"name":"BalanceStatus","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":20491},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569756,"byte_end":569774,"line_start":29,"line_end":29,"column_start":54,"column_end":72},"alias_span":null,"name":"DepositConsequence","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":20511},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569776,"byte_end":569796,"line_start":29,"line_end":29,"column_start":74,"column_end":94},"alias_span":null,"name":"ExistenceRequirement","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":20456},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569799,"byte_end":569818,"line_start":30,"line_end":30,"column_start":2,"column_end":21},"alias_span":null,"name":"WithdrawConsequence","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":20570},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569820,"byte_end":569835,"line_start":30,"line_end":30,"column_start":23,"column_end":38},"alias_span":null,"name":"WithdrawReasons","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":3744},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566364,"byte_end":566372,"line_start":25,"line_end":25,"column_start":3,"column_end":11},"alias_span":null,"name":"Currency","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3717},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566374,"byte_end":566388,"line_start":25,"line_end":25,"column_start":13,"column_end":27},"alias_span":null,"name":"LockIdentifier","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3719},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566390,"byte_end":566406,"line_start":25,"line_end":25,"column_start":29,"column_end":45},"alias_span":null,"name":"LockableCurrency","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566408,"byte_end":566431,"line_start":25,"line_end":25,"column_start":47,"column_end":70},"alias_span":null,"name":"NamedReservableCurrency","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3666},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566433,"byte_end":566451,"line_start":25,"line_end":25,"column_start":72,"column_end":90},"alias_span":null,"name":"ReservableCurrency","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566455,"byte_end":566470,"line_start":26,"line_end":26,"column_start":3,"column_end":18},"alias_span":null,"name":"TotalIssuanceOf","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3726},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566472,"byte_end":566487,"line_start":26,"line_end":26,"column_start":20,"column_end":35},"alias_span":null,"name":"VestingSchedule","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":3799},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566494,"byte_end":566502,"line_start":28,"line_end":28,"column_start":2,"column_end":10},"alias_span":null,"name":"fungible","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4099},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566504,"byte_end":566513,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"alias_span":null,"name":"fungibles","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4490},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566528,"byte_end":566537,"line_start":29,"line_end":29,"column_start":14,"column_end":23},"alias_span":null,"name":"Imbalance","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4397},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566539,"byte_end":566551,"line_start":29,"line_end":29,"column_start":25,"column_end":37},"alias_span":null,"name":"OnUnbalanced","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4427},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566553,"byte_end":566568,"line_start":29,"line_end":29,"column_start":39,"column_end":54},"alias_span":null,"name":"SignedImbalance","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":20525},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566572,"byte_end":566585,"line_start":30,"line_end":30,"column_start":2,"column_end":15},"alias_span":null,"name":"BalanceStatus","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":20511},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566587,"byte_end":566607,"line_start":30,"line_end":30,"column_start":17,"column_end":37},"alias_span":null,"name":"ExistenceRequirement","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":20570},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566609,"byte_end":566624,"line_start":30,"line_end":30,"column_start":39,"column_end":54},"alias_span":null,"name":"WithdrawReasons","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4833},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566682,"byte_end":566690,"line_start":35,"line_end":35,"column_start":19,"column_end":27},"alias_span":null,"name":"AllowAll","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4834},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566692,"byte_end":566699,"line_start":35,"line_end":35,"column_start":29,"column_end":36},"alias_span":null,"name":"DenyAll","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4835},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566701,"byte_end":566707,"line_start":35,"line_end":35,"column_start":38,"column_end":44},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4848},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566730,"byte_end":566740,"line_start":37,"line_end":37,"column_start":2,"column_end":12},"alias_span":null,"name":"AsContains","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4877},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566742,"byte_end":566755,"line_start":37,"line_end":37,"column_start":14,"column_end":27},"alias_span":null,"name":"ChangeMembers","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4822},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566757,"byte_end":566765,"line_start":37,"line_end":37,"column_start":29,"column_end":37},"alias_span":null,"name":"Contains","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4868},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566767,"byte_end":566786,"line_start":37,"line_end":37,"column_start":39,"column_end":58},"alias_span":null,"name":"ContainsLengthBound","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4825},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566788,"byte_end":566798,"line_start":37,"line_end":37,"column_start":60,"column_end":70},"alias_span":null,"name":"Everything","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566800,"byte_end":566817,"line_start":37,"line_end":37,"column_start":72,"column_end":89},"alias_span":null,"name":"InitializeMembers","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4856},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566820,"byte_end":566827,"line_start":38,"line_end":38,"column_start":2,"column_end":9},"alias_span":null,"name":"IsInVec","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4829},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566829,"byte_end":566836,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"alias_span":null,"name":"Nothing","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4843},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566838,"byte_end":566851,"line_start":38,"line_end":38,"column_start":20,"column_end":33},"alias_span":null,"name":"SortedMembers","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5045},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566896,"byte_end":566914,"line_start":43,"line_end":43,"column_start":2,"column_end":20},"alias_span":null,"name":"DisabledValidators","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5016},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566916,"byte_end":566938,"line_start":43,"line_end":43,"column_start":22,"column_end":44},"alias_span":null,"name":"EstimateNextNewSession","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5006},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566940,"byte_end":566967,"line_start":43,"line_end":43,"column_start":46,"column_end":73},"alias_span":null,"name":"EstimateNextSessionRotation","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4981},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566969,"byte_end":566979,"line_start":43,"line_end":43,"column_start":75,"column_end":85},"alias_span":null,"name":"FindAuthor","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566982,"byte_end":567001,"line_start":44,"line_end":44,"column_start":2,"column_end":21},"alias_span":null,"name":"KeyOwnerProofSystem","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567003,"byte_end":567011,"line_start":44,"line_end":44,"column_start":23,"column_end":31},"alias_span":null,"name":"Lateness","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4995},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567013,"byte_end":567030,"line_start":44,"line_end":44,"column_start":33,"column_end":50},"alias_span":null,"name":"OneSessionHandler","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5042},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567032,"byte_end":567053,"line_start":44,"line_end":44,"column_start":52,"column_end":73},"alias_span":null,"name":"ValidatorRegistration","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4971},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567055,"byte_end":567067,"line_start":44,"line_end":44,"column_start":75,"column_end":87},"alias_span":null,"name":"ValidatorSet","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4977},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567070,"byte_end":567100,"line_start":45,"line_end":45,"column_start":2,"column_end":32},"alias_span":null,"name":"ValidatorSetWithIdentification","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":4991},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567102,"byte_end":567112,"line_start":45,"line_end":45,"column_start":34,"column_end":44},"alias_span":null,"name":"VerifySeal","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5103},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567147,"byte_end":567163,"line_start":49,"line_end":49,"column_start":18,"column_end":34},"alias_span":null,"name":"ClearFilterGuard","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5090},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567165,"byte_end":567176,"line_start":49,"line_end":49,"column_start":36,"column_end":47},"alias_span":null,"name":"FilterStack","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5098},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567178,"byte_end":567194,"line_start":49,"line_end":49,"column_start":49,"column_end":65},"alias_span":null,"name":"FilterStackGuard","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5126},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567196,"byte_end":567210,"line_start":49,"line_end":49,"column_start":67,"column_end":81},"alias_span":null,"name":"InstanceFilter","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21232},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567212,"byte_end":567225,"line_start":49,"line_end":49,"column_start":83,"column_end":96},"alias_span":null,"name":"IntegrityTest","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5251},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721043,"byte_end":721052,"line_start":32,"line_end":32,"column_start":18,"column_end":27},"alias_span":null,"name":"Defensive","value":"","parent":{"krate":0,"index":5240}},{"kind":"Use","ref_id":{"krate":0,"index":5272},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721054,"byte_end":721069,"line_start":32,"line_end":32,"column_start":29,"column_end":44},"alias_span":null,"name":"DefensiveOption","value":"","parent":{"krate":0,"index":5240}},{"kind":"Use","ref_id":{"krate":0,"index":5258},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721071,"byte_end":721086,"line_start":32,"line_end":32,"column_start":46,"column_end":61},"alias_span":null,"name":"DefensiveResult","value":"","parent":{"krate":0,"index":5240}},{"kind":"Use","ref_id":{"krate":0,"index":5240},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567256,"byte_end":567273,"line_start":53,"line_end":53,"column_start":2,"column_end":19},"alias_span":null,"name":"defensive_prelude","value":"","parent":{"krate":0,"index":3610}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567282,"byte_end":567283,"line_start":53,"line_end":53,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5427},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567287,"byte_end":567294,"line_start":54,"line_end":54,"column_start":2,"column_end":9},"alias_span":null,"name":"Backing","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567296,"byte_end":567305,"line_start":54,"line_end":54,"column_start":11,"column_end":20},"alias_span":null,"name":"ConstBool","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21768},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567296,"byte_end":567305,"line_start":54,"line_end":54,"column_start":11,"column_end":20},"alias_span":null,"name":"ConstBool","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21887},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567307,"byte_end":567316,"line_start":54,"line_end":54,"column_start":22,"column_end":31},"alias_span":null,"name":"ConstI128","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21888},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567307,"byte_end":567316,"line_start":54,"line_end":54,"column_start":22,"column_end":31},"alias_span":null,"name":"ConstI128","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21851},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567318,"byte_end":567326,"line_start":54,"line_end":54,"column_start":33,"column_end":41},"alias_span":null,"name":"ConstI16","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21852},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567318,"byte_end":567326,"line_start":54,"line_end":54,"column_start":33,"column_end":41},"alias_span":null,"name":"ConstI16","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567328,"byte_end":567336,"line_start":54,"line_end":54,"column_start":43,"column_end":51},"alias_span":null,"name":"ConstI32","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567328,"byte_end":567336,"line_start":54,"line_end":54,"column_start":43,"column_end":51},"alias_span":null,"name":"ConstI32","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21875},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567338,"byte_end":567346,"line_start":54,"line_end":54,"column_start":53,"column_end":61},"alias_span":null,"name":"ConstI64","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21876},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567338,"byte_end":567346,"line_start":54,"line_end":54,"column_start":53,"column_end":61},"alias_span":null,"name":"ConstI64","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21839},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567348,"byte_end":567355,"line_start":54,"line_end":54,"column_start":63,"column_end":70},"alias_span":null,"name":"ConstI8","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21840},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567348,"byte_end":567355,"line_start":54,"line_end":54,"column_start":63,"column_end":70},"alias_span":null,"name":"ConstI8","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21827},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567357,"byte_end":567366,"line_start":54,"line_end":54,"column_start":72,"column_end":81},"alias_span":null,"name":"ConstU128","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21828},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567357,"byte_end":567366,"line_start":54,"line_end":54,"column_start":72,"column_end":81},"alias_span":null,"name":"ConstU128","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21791},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567368,"byte_end":567376,"line_start":54,"line_end":54,"column_start":83,"column_end":91},"alias_span":null,"name":"ConstU16","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21792},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567368,"byte_end":567376,"line_start":54,"line_end":54,"column_start":83,"column_end":91},"alias_span":null,"name":"ConstU16","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21803},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567379,"byte_end":567387,"line_start":55,"line_end":55,"column_start":2,"column_end":10},"alias_span":null,"name":"ConstU32","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21804},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567379,"byte_end":567387,"line_start":55,"line_end":55,"column_start":2,"column_end":10},"alias_span":null,"name":"ConstU32","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21815},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567389,"byte_end":567397,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"alias_span":null,"name":"ConstU64","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21816},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567389,"byte_end":567397,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"alias_span":null,"name":"ConstU64","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21779},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567399,"byte_end":567406,"line_start":55,"line_end":55,"column_start":22,"column_end":29},"alias_span":null,"name":"ConstU8","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21780},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567399,"byte_end":567406,"line_start":55,"line_end":55,"column_start":22,"column_end":29},"alias_span":null,"name":"ConstU8","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5329},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567408,"byte_end":567427,"line_start":55,"line_end":55,"column_start":31,"column_end":50},"alias_span":null,"name":"DefensiveSaturating","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5432},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567429,"byte_end":567452,"line_start":55,"line_end":55,"column_start":52,"column_end":75},"alias_span":null,"name":"EnsureInherentsAreFirst","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5421},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567454,"byte_end":567472,"line_start":55,"line_end":55,"column_start":77,"column_end":95},"alias_span":null,"name":"EqualPrivilegeOnly","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5422},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567454,"byte_end":567472,"line_start":55,"line_end":55,"column_start":77,"column_end":95},"alias_span":null,"name":"EqualPrivilegeOnly","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5447},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567475,"byte_end":567490,"line_start":56,"line_end":56,"column_start":2,"column_end":17},"alias_span":null,"name":"EstimateCallFee","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5415},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567492,"byte_end":567504,"line_start":56,"line_end":56,"column_start":19,"column_end":31},"alias_span":null,"name":"ExecuteBlock","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5435},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567506,"byte_end":567519,"line_start":56,"line_end":56,"column_start":33,"column_end":46},"alias_span":null,"name":"ExtrinsicCall","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5350},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567521,"byte_end":567524,"line_start":56,"line_end":56,"column_start":48,"column_end":51},"alias_span":null,"name":"Get","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5430},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567526,"byte_end":567536,"line_start":56,"line_end":56,"column_start":53,"column_end":63},"alias_span":null,"name":"GetBacking","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5356},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567538,"byte_end":567548,"line_start":56,"line_end":56,"column_start":65,"column_end":75},"alias_span":null,"name":"GetDefault","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5357},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567538,"byte_end":567548,"line_start":56,"line_end":56,"column_start":65,"column_end":75},"alias_span":null,"name":"GetDefault","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5389},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567550,"byte_end":567564,"line_start":56,"line_end":56,"column_start":77,"column_end":91},"alias_span":null,"name":"HandleLifetime","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5412},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567567,"byte_end":567576,"line_start":57,"line_end":57,"column_start":2,"column_end":11},"alias_span":null,"name":"IsSubType","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5400},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567578,"byte_end":567584,"line_start":57,"line_end":57,"column_start":13,"column_end":19},"alias_span":null,"name":"IsType","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5345},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567586,"byte_end":567589,"line_start":57,"line_end":57,"column_start":21,"column_end":24},"alias_span":null,"name":"Len","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23015},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567591,"byte_end":567605,"line_start":57,"line_end":57,"column_start":26,"column_end":40},"alias_span":null,"name":"OffchainWorker","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":22454},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567607,"byte_end":567622,"line_start":57,"line_end":57,"column_start":42,"column_end":57},"alias_span":null,"name":"OnKilledAccount","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":21893},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567624,"byte_end":567636,"line_start":57,"line_end":57,"column_start":59,"column_end":71},"alias_span":null,"name":"OnNewAccount","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5521},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567638,"byte_end":567654,"line_start":57,"line_end":57,"column_start":73,"column_end":89},"alias_span":null,"name":"PreimageProvider","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5535},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567657,"byte_end":567674,"line_start":58,"line_end":58,"column_start":2,"column_end":19},"alias_span":null,"name":"PreimageRecipient","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5418},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567676,"byte_end":567688,"line_start":58,"line_end":58,"column_start":21,"column_end":33},"alias_span":null,"name":"PrivilegeCmp","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567690,"byte_end":567701,"line_start":58,"line_end":58,"column_start":35,"column_end":46},"alias_span":null,"name":"SameOrOther","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5395},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567703,"byte_end":567707,"line_start":58,"line_end":58,"column_start":48,"column_end":52},"alias_span":null,"name":"Time","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5341},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567709,"byte_end":567719,"line_start":58,"line_end":58,"column_start":54,"column_end":64},"alias_span":null,"name":"TryCollect","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5362},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567721,"byte_end":567728,"line_start":58,"line_end":58,"column_start":66,"column_end":73},"alias_span":null,"name":"TryDrop","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5398},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567730,"byte_end":567738,"line_start":58,"line_end":58,"column_start":75,"column_end":83},"alias_span":null,"name":"UnixTime","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23629},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567741,"byte_end":567758,"line_start":59,"line_end":59,"column_start":2,"column_end":19},"alias_span":null,"name":"WrapperKeepOpaque","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23596},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567760,"byte_end":567773,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"alias_span":null,"name":"WrapperOpaque","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23597},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567760,"byte_end":567773,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"alias_span":null,"name":"WrapperOpaque","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5699},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567816,"byte_end":567830,"line_start":63,"line_end":63,"column_start":22,"column_end":36},"alias_span":null,"name":"StorageMapShim","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5679},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567832,"byte_end":567841,"line_start":63,"line_end":63,"column_start":38,"column_end":47},"alias_span":null,"name":"StoredMap","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5734},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567880,"byte_end":567890,"line_start":65,"line_end":65,"column_start":21,"column_end":31},"alias_span":null,"name":"Randomness","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23674},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567928,"byte_end":567940,"line_start":69,"line_end":69,"column_start":2,"column_end":14},"alias_span":null,"name":"CallMetadata","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23690},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567942,"byte_end":567954,"line_start":69,"line_end":69,"column_start":16,"column_end":28},"alias_span":null,"name":"CrateVersion","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5785},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567956,"byte_end":567971,"line_start":69,"line_end":69,"column_start":30,"column_end":45},"alias_span":null,"name":"GetCallMetadata","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5782},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567973,"byte_end":567984,"line_start":69,"line_end":69,"column_start":47,"column_end":58},"alias_span":null,"name":"GetCallName","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5811},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":567986,"byte_end":568003,"line_start":69,"line_end":69,"column_start":60,"column_end":77},"alias_span":null,"name":"GetStorageVersion","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5754},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568005,"byte_end":568015,"line_start":69,"line_end":69,"column_start":79,"column_end":89},"alias_span":null,"name":"PalletInfo","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568018,"byte_end":568034,"line_start":70,"line_end":70,"column_start":2,"column_end":18},"alias_span":null,"name":"PalletInfoAccess","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23653},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568036,"byte_end":568050,"line_start":70,"line_end":70,"column_start":20,"column_end":34},"alias_span":null,"name":"PalletInfoData","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5768},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568052,"byte_end":568069,"line_start":70,"line_end":70,"column_start":36,"column_end":53},"alias_span":null,"name":"PalletsInfoAccess","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":23717},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568071,"byte_end":568085,"line_start":70,"line_end":70,"column_start":55,"column_end":69},"alias_span":null,"name":"StorageVersion","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5797},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568088,"byte_end":568123,"line_start":71,"line_end":71,"column_start":2,"column_end":37},"alias_span":null,"name":"STORAGE_VERSION_STORAGE_KEY_POSTFIX","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5874},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568179,"byte_end":568191,"line_start":76,"line_end":76,"column_start":16,"column_end":28},"alias_span":null,"name":"GenesisBuild","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5866},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568211,"byte_end":568216,"line_start":78,"line_end":78,"column_start":2,"column_end":7},"alias_span":null,"name":"Hooks","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":24309},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568218,"byte_end":568228,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"alias_span":null,"name":"OnFinalize","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":25428},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568230,"byte_end":568239,"line_start":78,"line_end":78,"column_start":21,"column_end":30},"alias_span":null,"name":"OnGenesis","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568241,"byte_end":568247,"line_start":78,"line_end":78,"column_start":32,"column_end":38},"alias_span":null,"name":"OnIdle","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5858},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568249,"byte_end":568261,"line_start":78,"line_end":78,"column_start":40,"column_end":52},"alias_span":null,"name":"OnInitialize","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":5864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568263,"byte_end":568279,"line_start":78,"line_end":78,"column_start":54,"column_end":70},"alias_span":null,"name":"OnRuntimeUpgrade","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":26484},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568281,"byte_end":568295,"line_start":78,"line_end":78,"column_start":72,"column_end":86},"alias_span":null,"name":"OnTimestampSet","value":"","parent":{"krate":0,"index":3610}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":794219,"byte_end":794220,"line_start":369,"line_end":369,"column_start":13,"column_end":14},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":5906}},{"kind":"Use","ref_id":{"krate":0,"index":6030},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568456,"byte_end":568464,"line_start":86,"line_end":86,"column_start":2,"column_end":10},"alias_span":null,"name":"Instance","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6038},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568466,"byte_end":568489,"line_start":86,"line_end":86,"column_start":12,"column_end":35},"alias_span":null,"name":"PartialStorageInfoTrait","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":27191},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568491,"byte_end":568502,"line_start":86,"line_end":86,"column_start":37,"column_end":48},"alias_span":null,"name":"StorageInfo","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568504,"byte_end":568520,"line_start":86,"line_end":86,"column_start":50,"column_end":66},"alias_span":null,"name":"StorageInfoTrait","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6033},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568522,"byte_end":568537,"line_start":86,"line_end":86,"column_start":68,"column_end":83},"alias_span":null,"name":"StorageInstance","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6104},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568576,"byte_end":568587,"line_start":90,"line_end":90,"column_start":20,"column_end":31},"alias_span":null,"name":"EnsureOneOf","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6078},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568589,"byte_end":568601,"line_start":90,"line_end":90,"column_start":33,"column_end":45},"alias_span":null,"name":"EnsureOrigin","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6087},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568603,"byte_end":568614,"line_start":90,"line_end":90,"column_start":47,"column_end":58},"alias_span":null,"name":"OriginTrait","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6084},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568616,"byte_end":568638,"line_start":90,"line_end":90,"column_start":60,"column_end":82},"alias_span":null,"name":"UnfilteredDispatchable","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6160},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568673,"byte_end":568687,"line_start":94,"line_end":94,"column_start":2,"column_end":16},"alias_span":null,"name":"CurrencyToVote","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568689,"byte_end":568699,"line_start":94,"line_end":94,"column_start":18,"column_end":28},"alias_span":null,"name":"PollStatus","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6201},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568701,"byte_end":568708,"line_start":94,"line_end":94,"column_start":30,"column_end":37},"alias_span":null,"name":"Polling","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6171},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568710,"byte_end":568734,"line_start":94,"line_end":94,"column_start":39,"column_end":63},"alias_span":null,"name":"SaturatingCurrencyToVote","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6172},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568710,"byte_end":568734,"line_start":94,"line_end":94,"column_start":39,"column_end":63},"alias_span":null,"name":"SaturatingCurrencyToVote","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6164},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568736,"byte_end":568754,"line_start":94,"line_end":94,"column_start":65,"column_end":83},"alias_span":null,"name":"U128CurrencyToVote","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6165},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568736,"byte_end":568754,"line_start":94,"line_end":94,"column_start":65,"column_end":83},"alias_span":null,"name":"U128CurrencyToVote","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":0,"index":6177},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568756,"byte_end":568765,"line_start":94,"line_end":94,"column_start":85,"column_end":94},"alias_span":null,"name":"VoteTally","value":"","parent":{"krate":0,"index":3610}},{"kind":"Use","ref_id":{"krate":203,"index":1861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813597,"byte_end":813616,"line_start":147,"line_end":147,"column_start":43,"column_end":62},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":6234}},{"kind":"Use","ref_id":{"krate":203,"index":1759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1819,"byte_end":1835,"line_start":75,"line_end":75,"column_start":37,"column_end":53},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":6498}},{"kind":"Use","ref_id":{"krate":203,"index":4888},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1907,"byte_end":1924,"line_start":78,"line_end":78,"column_start":3,"column_end":20},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":6498}},{"kind":"Use","ref_id":{"krate":203,"index":1884},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1926,"byte_end":1945,"line_start":78,"line_end":78,"column_start":22,"column_end":41},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":6498}},{"kind":"Use","ref_id":{"krate":203,"index":4836},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1947,"byte_end":1971,"line_start":78,"line_end":78,"column_start":43,"column_end":67},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":6498}},{"kind":"Use","ref_id":{"krate":203,"index":4759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1973,"byte_end":1991,"line_start":78,"line_end":78,"column_start":69,"column_end":87},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":6498}},{"kind":"Use","ref_id":{"krate":0,"index":165},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2028,"byte_end":2036,"line_start":83,"line_end":83,"column_start":13,"column_end":21},"alias_span":null,"name":"Callable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2038,"byte_end":2047,"line_start":83,"line_end":83,"column_start":23,"column_end":32},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2061,"byte_end":2071,"line_start":85,"line_end":85,"column_start":3,"column_end":13},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":276},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2061,"byte_end":2071,"line_start":85,"line_end":85,"column_start":3,"column_end":13},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2073,"byte_end":2089,"line_start":85,"line_end":85,"column_start":15,"column_end":31},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2073,"byte_end":2089,"line_start":85,"line_end":85,"column_start":15,"column_end":31},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2091,"byte_end":2101,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2091,"byte_end":2101,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":212},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2103,"byte_end":2111,"line_start":85,"line_end":85,"column_start":45,"column_end":53},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2113,"byte_end":2121,"line_start":85,"line_end":85,"column_start":55,"column_end":63},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2113,"byte_end":2121,"line_start":85,"line_end":85,"column_start":55,"column_end":63},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2123,"byte_end":2146,"line_start":85,"line_end":85,"column_start":65,"column_end":88},"alias_span":null,"name":"ReversibleStorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":237},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2150,"byte_end":2163,"line_start":86,"line_end":86,"column_start":3,"column_end":16},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2165,"byte_end":2172,"line_start":86,"line_end":86,"column_start":18,"column_end":25},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2165,"byte_end":2172,"line_start":86,"line_end":86,"column_start":18,"column_end":25},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2174,"byte_end":2181,"line_start":86,"line_end":86,"column_start":27,"column_end":34},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":306},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2174,"byte_end":2181,"line_start":86,"line_end":86,"column_start":27,"column_end":34},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2183,"byte_end":2195,"line_start":86,"line_end":86,"column_start":36,"column_end":48},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2183,"byte_end":2195,"line_start":86,"line_end":86,"column_start":36,"column_end":48},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2229,"byte_end":2241,"line_start":89,"line_end":89,"column_start":17,"column_end":29},"alias_span":null,"name":"BoundedSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6998},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2243,"byte_end":2253,"line_start":89,"line_end":89,"column_start":31,"column_end":41},"alias_span":null,"name":"BoundedVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1565},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2258,"byte_end":2267,"line_start":90,"line_end":90,"column_start":3,"column_end":12},"alias_span":null,"name":"migration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":19288},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2289,"byte_end":2303,"line_start":91,"line_end":91,"column_start":21,"column_end":35},"alias_span":null,"name":"WeakBoundedVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3188},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2307,"byte_end":2331,"line_start":92,"line_end":92,"column_start":3,"column_end":27},"alias_span":null,"name":"IterableStorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3175},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2333,"byte_end":2351,"line_start":92,"line_end":92,"column_start":29,"column_end":47},"alias_span":null,"name":"IterableStorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3214},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2353,"byte_end":2372,"line_start":92,"line_end":92,"column_start":49,"column_end":68},"alias_span":null,"name":"IterableStorageNMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3237},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2374,"byte_end":2390,"line_start":92,"line_end":92,"column_start":70,"column_end":86},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3124},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2394,"byte_end":2404,"line_start":93,"line_end":93,"column_start":3,"column_end":13},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3308},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2406,"byte_end":2417,"line_start":93,"line_end":93,"column_start":15,"column_end":26},"alias_span":null,"name":"StorageNMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3436},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2419,"byte_end":2437,"line_start":93,"line_end":93,"column_start":28,"column_end":46},"alias_span":null,"name":"StoragePrefixedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2439,"byte_end":2451,"line_start":93,"line_end":93,"column_start":48,"column_end":60},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":203,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2468,"byte_end":2478,"line_start":96,"line_end":96,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":203,"index":2185},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2487,"byte_end":2492,"line_start":96,"line_end":96,"column_start":28,"column_end":33},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":203,"index":1819},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2502,"byte_end":2511,"line_start":96,"line_end":96,"column_start":43,"column_end":52},"alias_span":null,"name":"Printable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":203,"index":2055},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2513,"byte_end":2530,"line_start":96,"line_end":96,"column_start":54,"column_end":71},"alias_span":null,"name":"ConsensusEngineId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2019},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16669,"byte_end":16686,"line_start":601,"line_end":601,"column_start":2,"column_end":19},"alias_span":null,"name":"construct_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2018},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16688,"byte_end":16700,"line_start":601,"line_end":601,"column_start":21,"column_end":33},"alias_span":null,"name":"decl_storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16702,"byte_end":16718,"line_start":601,"line_end":601,"column_start":35,"column_end":51},"alias_span":null,"name":"match_and_insert","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2021},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16720,"byte_end":16733,"line_start":601,"line_end":601,"column_start":53,"column_end":66},"alias_span":null,"name":"transactional","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2025},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16735,"byte_end":16754,"line_start":601,"line_end":601,"column_start":68,"column_end":87},"alias_span":null,"name":"RuntimeDebugNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2035},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16809,"byte_end":16838,"line_start":605,"line_end":605,"column_start":35,"column_end":64},"alias_span":null,"name":"__generate_dummy_part_checker","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2023},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":17319,"byte_end":17331,"line_start":623,"line_end":623,"column_start":35,"column_end":47},"alias_span":null,"name":"CloneNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2027},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":17829,"byte_end":17838,"line_start":641,"line_end":641,"column_start":35,"column_end":44},"alias_span":null,"name":"EqNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2026},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":18347,"byte_end":18363,"line_start":659,"line_end":659,"column_start":35,"column_end":51},"alias_span":null,"name":"PartialEqNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":18872,"byte_end":18884,"line_start":678,"line_end":678,"column_start":35,"column_end":47},"alias_span":null,"name":"DebugNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2028},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":19413,"byte_end":19427,"line_start":697,"line_end":697,"column_start":35,"column_end":49},"alias_span":null,"name":"DefaultNoBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2029},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":20257,"byte_end":20278,"line_start":728,"line_end":728,"column_start":35,"column_end":56},"alias_span":null,"name":"require_transactional","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":210,"index":2031},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":20885,"byte_end":20907,"line_start":743,"line_end":743,"column_start":35,"column_end":57},"alias_span":null,"name":"crate_to_crate_version","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":1560},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":23725,"byte_end":23736,"line_start":852,"line_end":852,"column_start":17,"column_end":28},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":31,"index":1258},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":23725,"byte_end":23736,"line_start":852,"line_end":852,"column_start":17,"column_end":28},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":2101},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":23738,"byte_end":23747,"line_start":852,"line_end":852,"column_start":30,"column_end":39},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":31,"index":1257},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":23738,"byte_end":23747,"line_start":852,"line_end":852,"column_start":30,"column_end":39},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5874},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37033,"byte_end":37045,"line_start":1334,"line_end":1334,"column_start":25,"column_end":37},"alias_span":null,"name":"GenesisBuild","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":5356},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37078,"byte_end":37091,"line_start":1336,"line_end":1336,"column_start":14,"column_end":27},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":163},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37093,"byte_end":37107,"line_start":1336,"line_end":1336,"column_start":29,"column_end":43},"alias_span":null,"name":"DispatchResult","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":162},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37109,"byte_end":37135,"line_start":1336,"line_end":1336,"column_start":45,"column_end":71},"alias_span":null,"name":"DispatchResultWithPostInfo","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37137,"byte_end":37146,"line_start":1336,"line_end":1336,"column_start":73,"column_end":82},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":6671},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37151,"byte_end":37157,"line_start":1337,"line_end":1337,"column_start":3,"column_end":9},"alias_span":null,"name":"ensure","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":208,"index":844},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37172,"byte_end":37184,"line_start":1338,"line_end":1338,"column_start":14,"column_end":26},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":208,"index":39},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37186,"byte_end":37204,"line_start":1338,"line_end":1338,"column_start":28,"column_end":46},"alias_span":null,"name":"InherentIdentifier","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":3566},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37206,"byte_end":37221,"line_start":1338,"line_end":1338,"column_start":48,"column_end":63},"alias_span":null,"name":"ProvideInherent","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37226,"byte_end":37233,"line_start":1339,"line_end":1339,"column_start":3,"column_end":10},"alias_span":null,"name":"storage","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":6998},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37264,"byte_end":37274,"line_start":1341,"line_end":1341,"column_start":17,"column_end":27},"alias_span":null,"name":"BoundedVec","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":1753},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37292,"byte_end":37309,"line_start":1343,"line_end":1343,"column_start":5,"column_end":22},"alias_span":null,"name":"CountedStorageMap","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37311,"byte_end":37314,"line_start":1343,"line_end":1343,"column_start":24,"column_end":27},"alias_span":null,"name":"NMapKey","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37327,"byte_end":37338,"line_start":1343,"line_end":1343,"column_start":40,"column_end":51},"alias_span":null,"name":"OptionQuery","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37327,"byte_end":37338,"line_start":1343,"line_end":1343,"column_start":40,"column_end":51},"alias_span":null,"name":"OptionQuery","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":1979},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37340,"byte_end":37356,"line_start":1343,"line_end":1343,"column_start":53,"column_end":69},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2324},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37358,"byte_end":37368,"line_start":1343,"line_end":1343,"column_start":71,"column_end":81},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37374,"byte_end":37385,"line_start":1344,"line_end":1344,"column_start":5,"column_end":16},"alias_span":null,"name":"StorageNMap","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2745},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37387,"byte_end":37399,"line_start":1344,"line_end":1344,"column_start":18,"column_end":30},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37401,"byte_end":37411,"line_start":1344,"line_end":1344,"column_start":32,"column_end":42},"alias_span":null,"name":"ValueQuery","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":2872},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37401,"byte_end":37411,"line_start":1344,"line_end":1344,"column_start":32,"column_end":42},"alias_span":null,"name":"ValueQuery","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":21803},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37439,"byte_end":37447,"line_start":1348,"line_end":1348,"column_start":4,"column_end":12},"alias_span":null,"name":"ConstU32","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":21804},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37439,"byte_end":37447,"line_start":1348,"line_end":1348,"column_start":4,"column_end":12},"alias_span":null,"name":"ConstU32","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":6078},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37449,"byte_end":37461,"line_start":1348,"line_end":1348,"column_start":14,"column_end":26},"alias_span":null,"name":"EnsureOrigin","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5350},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37463,"byte_end":37466,"line_start":1348,"line_end":1348,"column_start":28,"column_end":31},"alias_span":null,"name":"Get","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5356},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37468,"byte_end":37478,"line_start":1348,"line_end":1348,"column_start":33,"column_end":43},"alias_span":null,"name":"GetDefault","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5357},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37468,"byte_end":37478,"line_start":1348,"line_end":1348,"column_start":33,"column_end":43},"alias_span":null,"name":"GetDefault","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5811},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37480,"byte_end":37497,"line_start":1348,"line_end":1348,"column_start":45,"column_end":62},"alias_span":null,"name":"GetStorageVersion","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5866},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37499,"byte_end":37504,"line_start":1348,"line_end":1348,"column_start":64,"column_end":69},"alias_span":null,"name":"Hooks","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5400},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37506,"byte_end":37512,"line_start":1348,"line_end":1348,"column_start":71,"column_end":77},"alias_span":null,"name":"IsType","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":5763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37517,"byte_end":37533,"line_start":1349,"line_end":1349,"column_start":4,"column_end":20},"alias_span":null,"name":"PalletInfoAccess","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":6036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37535,"byte_end":37551,"line_start":1349,"line_end":1349,"column_start":22,"column_end":38},"alias_span":null,"name":"StorageInfoTrait","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":27851},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37570,"byte_end":37583,"line_start":1351,"line_end":1351,"column_start":13,"column_end":26},"alias_span":null,"name":"DispatchClass","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":27772},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37585,"byte_end":37589,"line_start":1351,"line_end":1351,"column_start":28,"column_end":32},"alias_span":null,"name":"Pays","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":6304},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37591,"byte_end":37597,"line_start":1351,"line_end":1351,"column_start":34,"column_end":40},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37602,"byte_end":37612,"line_start":1352,"line_end":1352,"column_start":3,"column_end":13},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":276},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37602,"byte_end":37612,"line_start":1352,"line_end":1352,"column_start":3,"column_end":13},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37614,"byte_end":37630,"line_start":1352,"line_end":1352,"column_start":15,"column_end":31},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37614,"byte_end":37630,"line_start":1352,"line_end":1352,"column_start":15,"column_end":31},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37632,"byte_end":37642,"line_start":1352,"line_end":1352,"column_start":33,"column_end":43},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37632,"byte_end":37642,"line_start":1352,"line_end":1352,"column_start":33,"column_end":43},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2023},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37644,"byte_end":37656,"line_start":1352,"line_end":1352,"column_start":45,"column_end":57},"alias_span":null,"name":"CloneNoBound","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37658,"byte_end":37670,"line_start":1352,"line_end":1352,"column_start":59,"column_end":71},"alias_span":null,"name":"DebugNoBound","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2027},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37672,"byte_end":37681,"line_start":1352,"line_end":1352,"column_start":73,"column_end":82},"alias_span":null,"name":"EqNoBound","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37683,"byte_end":37691,"line_start":1352,"line_end":1352,"column_start":84,"column_end":92},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37683,"byte_end":37691,"line_start":1352,"line_end":1352,"column_start":84,"column_end":92},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2026},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37695,"byte_end":37711,"line_start":1353,"line_end":1353,"column_start":3,"column_end":19},"alias_span":null,"name":"PartialEqNoBound","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":73,"index":62},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37713,"byte_end":37725,"line_start":1353,"line_end":1353,"column_start":21,"column_end":33},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2025},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37727,"byte_end":37746,"line_start":1353,"line_end":1353,"column_start":35,"column_end":54},"alias_span":null,"name":"RuntimeDebugNoBound","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37748,"byte_end":37755,"line_start":1353,"line_end":1353,"column_start":56,"column_end":63},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37748,"byte_end":37755,"line_start":1353,"line_end":1353,"column_start":56,"column_end":63},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37757,"byte_end":37764,"line_start":1353,"line_end":1353,"column_start":65,"column_end":72},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":306},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37757,"byte_end":37764,"line_start":1353,"line_end":1353,"column_start":65,"column_end":72},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37766,"byte_end":37778,"line_start":1353,"line_end":1353,"column_start":74,"column_end":86},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37766,"byte_end":37778,"line_start":1353,"line_end":1353,"column_start":74,"column_end":86},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":25,"index":220},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37801,"byte_end":37807,"line_start":1355,"line_end":1355,"column_start":18,"column_end":24},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":26,"index":449},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37801,"byte_end":37807,"line_start":1355,"line_end":1355,"column_start":18,"column_end":24},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":25,"index":202},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37809,"byte_end":37815,"line_start":1355,"line_end":1355,"column_start":26,"column_end":32},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":26,"index":448},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37809,"byte_end":37815,"line_start":1355,"line_end":1355,"column_start":26,"column_end":32},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":25,"index":958},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37817,"byte_end":37830,"line_start":1355,"line_end":1355,"column_start":34,"column_end":47},"alias_span":null,"name":"MaxEncodedLen","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":26,"index":454},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37817,"byte_end":37830,"line_start":1355,"line_end":1355,"column_start":34,"column_end":47},"alias_span":null,"name":"MaxEncodedLen","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":56,"index":932},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37854,"byte_end":37862,"line_start":1356,"line_end":1356,"column_start":22,"column_end":30},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":58,"index":261},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37854,"byte_end":37862,"line_start":1356,"line_end":1356,"column_start":22,"column_end":30},"alias_span":null,"name":"TypeInfo","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4262},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37898,"byte_end":37923,"line_start":1358,"line_end":1358,"column_start":12,"column_end":37},"alias_span":null,"name":"MaybeSerializeDeserialize","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1650},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37925,"byte_end":37931,"line_start":1358,"line_end":1358,"column_start":39,"column_end":45},"alias_span":null,"name":"Member","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37933,"byte_end":37949,"line_start":1358,"line_end":1358,"column_start":47,"column_end":63},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4650},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":37981,"byte_end":37999,"line_start":1360,"line_end":1360,"column_start":4,"column_end":22},"alias_span":null,"name":"InvalidTransaction","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1862},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38001,"byte_end":38021,"line_start":1360,"line_end":1360,"column_start":24,"column_end":44},"alias_span":null,"name":"TransactionLongevity","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38023,"byte_end":38042,"line_start":1360,"line_end":1360,"column_start":46,"column_end":65},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4888},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38044,"byte_end":38061,"line_start":1360,"line_end":1360,"column_start":67,"column_end":84},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38066,"byte_end":38080,"line_start":1361,"line_end":1361,"column_start":4,"column_end":18},"alias_span":null,"name":"TransactionTag","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":1884},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38082,"byte_end":38101,"line_start":1361,"line_end":1361,"column_start":20,"column_end":39},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4836},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38103,"byte_end":38127,"line_start":1361,"line_end":1361,"column_start":41,"column_end":65},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38129,"byte_end":38147,"line_start":1361,"line_end":1361,"column_start":67,"column_end":85},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":203,"index":4918},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38152,"byte_end":38168,"line_start":1362,"line_end":1362,"column_start":4,"column_end":20},"alias_span":null,"name":"ValidTransaction","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":2,"index":3042},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38204,"byte_end":38215,"line_start":1365,"line_end":1365,"column_start":26,"column_end":37},"alias_span":null,"name":"PhantomData","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":2,"index":3043},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":38204,"byte_end":38215,"line_start":1365,"line_end":1365,"column_start":26,"column_end":37},"alias_span":null,"name":"PhantomData","value":"","parent":{"krate":0,"index":6685}},{"kind":"Use","ref_id":{"krate":210,"index":2020},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":80770,"byte_end":80776,"line_start":2477,"line_end":2477,"column_start":35,"column_end":41},"alias_span":null,"name":"pallet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":686,"byte_end":80777,"line_start":18,"line_end":2477,"column_start":1,"column_end":42},"name":"","qualname":"::","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":182},{"krate":0,"index":315},{"krate":0,"index":3536},{"krate":0,"index":3539},{"krate":0,"index":3574},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3610},{"krate":0,"index":6234},{"krate":0,"index":6498},{"krate":0,"index":6515},{"krate":0,"index":6516},{"krate":0,"index":6517},{"krate":0,"index":6520},{"krate":0,"index":6523},{"krate":0,"index":6524},{"krate":0,"index":6525},{"krate":0,"index":6527},{"krate":0,"index":6528},{"krate":0,"index":6530},{"krate":0,"index":6531},{"krate":0,"index":6533},{"krate":0,"index":6536},{"krate":0,"index":6537},{"krate":0,"index":6539},{"krate":0,"index":6542},{"krate":0,"index":6545},{"krate":0,"index":6546},{"krate":0,"index":6548},{"krate":0,"index":6549},{"krate":0,"index":6551},{"krate":0,"index":6552},{"krate":0,"index":6554},{"krate":0,"index":6555},{"krate":0,"index":6556},{"krate":0,"index":6559},{"krate":0,"index":6562},{"krate":0,"index":6565},{"krate":0,"index":6568},{"krate":0,"index":6571},{"krate":0,"index":6574},{"krate":0,"index":6577},{"krate":0,"index":6580},{"krate":0,"index":6583},{"krate":0,"index":6586},{"krate":0,"index":6589},{"krate":0,"index":6592},{"krate":0,"index":6593},{"krate":0,"index":6596},{"krate":0,"index":6599},{"krate":0,"index":6602},{"krate":0,"index":6605},{"krate":0,"index":6606},{"krate":0,"index":6607},{"krate":0,"index":6609},{"krate":0,"index":6610},{"krate":0,"index":6612},{"krate":0,"index":6613},{"krate":0,"index":6615},{"krate":0,"index":6618},{"krate":0,"index":28059},{"krate":0,"index":28060},{"krate":0,"index":28062},{"krate":0,"index":28063},{"krate":0,"index":28065},{"krate":0,"index":28066},{"krate":0,"index":28068},{"krate":0,"index":28070},{"krate":0,"index":28074},{"krate":0,"index":28078},{"krate":0,"index":28081},{"krate":0,"index":28082},{"krate":0,"index":28083},{"krate":0,"index":28086},{"krate":0,"index":28087},{"krate":0,"index":28090},{"krate":0,"index":28099},{"krate":0,"index":28104},{"krate":0,"index":6619},{"krate":0,"index":6622},{"krate":0,"index":6623},{"krate":0,"index":6624},{"krate":0,"index":6625},{"krate":0,"index":6626},{"krate":0,"index":6627},{"krate":0,"index":6628},{"krate":0,"index":6630},{"krate":0,"index":6631},{"krate":0,"index":6634},{"krate":0,"index":6637},{"krate":0,"index":6640},{"krate":0,"index":6643},{"krate":0,"index":6646},{"krate":0,"index":6649},{"krate":0,"index":6652},{"krate":0,"index":6655},{"krate":0,"index":6658},{"krate":0,"index":6661},{"krate":0,"index":6664},{"krate":0,"index":6667},{"krate":0,"index":6670},{"krate":0,"index":6671},{"krate":0,"index":6672},{"krate":0,"index":6673},{"krate":0,"index":6674},{"krate":0,"index":6675},{"krate":0,"index":6676},{"krate":0,"index":6677},{"krate":0,"index":6678},{"krate":0,"index":6679},{"krate":0,"index":6680},{"krate":0,"index":6682},{"krate":0,"index":6683},{"krate":0,"index":6685},{"krate":0,"index":6880}],"decl_id":null,"docs":" Support code for the runtime.\n","sig":null,"attributes":[{"value":"/ Support code for the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":686,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dispatch","qualname":"::dispatch","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":6883},{"krate":0,"index":6892},{"krate":0,"index":6894},{"krate":0,"index":6898},{"krate":0,"index":6900},{"krate":0,"index":6903},{"krate":0,"index":6906},{"krate":0,"index":6909},{"krate":0,"index":6916},{"krate":0,"index":6922},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"decl_id":null,"docs":" Dispatch system. Contains a macro for defining runtime modules and\n generating values representing lazy module function calls.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1528,"byte_end":1540,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/ Dispatch system. Contains a macro for defining runtime modules and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81465,"byte_end":81535,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ generating values representing lazy module function calls.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":81536,"byte_end":81598,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":162},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82343,"byte_end":82369,"line_start":42,"line_end":42,"column_start":10,"column_end":36},"name":"DispatchResultWithPostInfo","qualname":"::dispatch::DispatchResultWithPostInfo","value":"sp_runtime::DispatchResultWithInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The return type of a `Dispatchable` in frame. When returned explicitly from\n a dispatchable function it allows overriding the default `PostDispatchInfo`\n returned from a dispatch.\n","sig":null,"attributes":[{"value":"/ The return type of a `Dispatchable` in frame. When returned explicitly from","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82144,"byte_end":82223,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ a dispatchable function it allows overriding the default `PostDispatchInfo`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82224,"byte_end":82303,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ returned from a dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82304,"byte_end":82333,"line_start":41,"line_end":41,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":163},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82793,"byte_end":82807,"line_start":49,"line_end":49,"column_start":10,"column_end":24},"name":"DispatchResult","qualname":"::dispatch::DispatchResult","value":"Result<(), sp_runtime::DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Unaugmented version of `DispatchResultWithPostInfo` that can be returned from\n dispatchable functions and is automatically converted to the augmented type. Should be\n used whenever the `PostDispatchInfo` does not need to be overwritten. As this should\n be the common case it is the implicit return type when none is specified.\n","sig":null,"attributes":[{"value":"/ Unaugmented version of `DispatchResultWithPostInfo` that can be returned from","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82444,"byte_end":82525,"line_start":45,"line_end":45,"column_start":1,"column_end":82}},{"value":"/ dispatchable functions and is automatically converted to the augmented type. Should be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82526,"byte_end":82616,"line_start":46,"line_end":46,"column_start":1,"column_end":91}},{"value":"/ used whenever the `PostDispatchInfo` does not need to be overwritten. As this should","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82617,"byte_end":82705,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/ be the common case it is the implicit return type when none is specified.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82706,"byte_end":82783,"line_start":48,"line_end":48,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":164},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82923,"byte_end":82948,"line_start":52,"line_end":52,"column_start":10,"column_end":35},"name":"DispatchErrorWithPostInfo","qualname":"::dispatch::DispatchErrorWithPostInfo","value":"sp_runtime::DispatchErrorWithPostInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The error type contained in a `DispatchResultWithPostInfo`.\n","sig":null,"attributes":[{"value":"/ The error type contained in a `DispatchResultWithPostInfo`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":82850,"byte_end":82913,"line_start":51,"line_end":51,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":165},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83085,"byte_end":83093,"line_start":56,"line_end":56,"column_start":11,"column_end":19},"name":"Callable","qualname":"::dispatch::Callable","value":"Callable<T>","parent":null,"children":[{"krate":0,"index":167}],"decl_id":null,"docs":" Serializable version of pallet dispatchable.\n","sig":null,"attributes":[{"value":"/ Serializable version of pallet dispatchable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83026,"byte_end":83074,"line_start":55,"line_end":55,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":167},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83105,"byte_end":83109,"line_start":57,"line_end":57,"column_start":7,"column_end":11},"name":"Call","qualname":"::dispatch::Callable::Call","value":"type Call: UnfilteredDispatchable + Codec + Clone + PartialEq + Eq;","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":168},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83278,"byte_end":83293,"line_start":62,"line_end":62,"column_start":10,"column_end":25},"name":"CallableCallFor","qualname":"::dispatch::CallableCallFor","value":"<A as Callable<R>>::Call","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6885},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83562,"byte_end":83566,"line_start":68,"line_end":68,"column_start":2,"column_end":6},"name":"Root","qualname":"::dispatch::RawOrigin::Root","value":"RawOrigin::Root","parent":{"krate":0,"index":6883},"children":[],"decl_id":null,"docs":" The system itself ordained this dispatch to happen: this is the highest privilege level.\n","sig":null,"attributes":[{"value":"/ The system itself ordained this dispatch to happen: this is the highest privilege level.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83468,"byte_end":83560,"line_start":67,"line_end":67,"column_start":2,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6887},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83638,"byte_end":83644,"line_start":70,"line_end":70,"column_start":2,"column_end":8},"name":"Signed","qualname":"::dispatch::RawOrigin::Signed","value":"RawOrigin::Signed(AccountId)","parent":{"krate":0,"index":6883},"children":[],"decl_id":null,"docs":" It is signed by some public key and we provide the `AccountId`.\n","sig":null,"attributes":[{"value":"/ It is signed by some public key and we provide the `AccountId`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83569,"byte_end":83636,"line_start":69,"line_end":69,"column_start":2,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6890},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83814,"byte_end":83818,"line_start":74,"line_end":74,"column_start":2,"column_end":6},"name":"None","qualname":"::dispatch::RawOrigin::None","value":"RawOrigin::None","parent":{"krate":0,"index":6883},"children":[],"decl_id":null,"docs":" It is signed by nobody, can be either:\n * included and agreed upon by the validators anyway,\n * or unsigned transaction validated by a pallet.\n","sig":null,"attributes":[{"value":"/ It is signed by nobody, can be either:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83658,"byte_end":83700,"line_start":71,"line_end":71,"column_start":2,"column_end":44}},{"value":"/ * included and agreed upon by the validators anyway,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83702,"byte_end":83758,"line_start":72,"line_end":72,"column_start":2,"column_end":58}},{"value":"/ * or unsigned transaction validated by a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83760,"byte_end":83812,"line_start":73,"line_end":73,"column_start":2,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":6883},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83444,"byte_end":83453,"line_start":66,"line_end":66,"column_start":10,"column_end":19},"name":"RawOrigin","qualname":"::dispatch::RawOrigin","value":"pub enum RawOrigin<AccountId> { Root, Signed(AccountId), None, }","parent":null,"children":[{"krate":0,"index":6885},{"krate":0,"index":6887},{"krate":0,"index":6890}],"decl_id":null,"docs":" Origin for the System pallet.\n","sig":null,"attributes":[{"value":"/ Origin for the System pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83329,"byte_end":83362,"line_start":64,"line_end":64,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84211,"byte_end":84220,"line_start":89,"line_end":89,"column_start":11,"column_end":20},"name":"Parameter","qualname":"::dispatch::Parameter","value":"Parameter: Codec + EncodeLike + Clone + Eq + fmt::Debug + scale_info::TypeInfo","parent":null,"children":[],"decl_id":null,"docs":" A type that can be used as a parameter in a dispatchable function.","sig":null,"attributes":[{"value":"/ A type that can be used as a parameter in a dispatchable function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84037,"byte_end":84107,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84108,"byte_end":84111,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ When using `decl_module` all arguments for call functions must implement this trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84112,"byte_end":84200,"line_start":88,"line_end":88,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":212},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174495,"byte_end":174503,"line_start":26,"line_end":26,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hash::Hashable","value":"Hashable: Sized","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174517,"byte_end":174527,"line_start":27,"line_end":27,"column_start":5,"column_end":15},"name":"blake2_128","qualname":"::hash::Hashable::blake2_128","value":"pub fn blake2_128(&Self) -> [u8; ]","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174552,"byte_end":174562,"line_start":28,"line_end":28,"column_start":5,"column_end":15},"name":"blake2_256","qualname":"::hash::Hashable::blake2_256","value":"pub fn blake2_256(&Self) -> [u8; ]","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174587,"byte_end":174604,"line_start":29,"line_end":29,"column_start":5,"column_end":22},"name":"blake2_128_concat","qualname":"::hash::Hashable::blake2_128_concat","value":"pub fn blake2_128_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174628,"byte_end":174636,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"twox_128","qualname":"::hash::Hashable::twox_128","value":"pub fn twox_128(&Self) -> [u8; ]","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174661,"byte_end":174669,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"twox_256","qualname":"::hash::Hashable::twox_256","value":"pub fn twox_256(&Self) -> [u8; ]","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174694,"byte_end":174708,"line_start":32,"line_end":32,"column_start":5,"column_end":19},"name":"twox_64_concat","qualname":"::hash::Hashable::twox_64_concat","value":"pub fn twox_64_concat(&Self) -> Vec<u8>","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174732,"byte_end":174740,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"identity","qualname":"::hash::Hashable::identity","value":"pub fn identity(&Self) -> Vec<u8>","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":237},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175366,"byte_end":175379,"line_start":61,"line_end":61,"column_start":11,"column_end":24},"name":"StorageHasher","qualname":"::hash::StorageHasher","value":"StorageHasher: 'static","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.\n","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175303,"byte_end":175355,"line_start":60,"line_end":60,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175398,"byte_end":175406,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"METADATA","qualname":"::hash::StorageHasher::METADATA","value":"metadata::StorageHasher","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":239},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175439,"byte_end":175445,"line_start":63,"line_end":63,"column_start":7,"column_end":13},"name":"Output","qualname":"::hash::StorageHasher::Output","value":"type Output: AsRef<[u8]>;","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175464,"byte_end":175468,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"hash","qualname":"::hash::StorageHasher::hash","value":"pub fn hash(&[u8]) -> Self::Output","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175564,"byte_end":175571,"line_start":67,"line_end":67,"column_start":5,"column_end":12},"name":"max_len","qualname":"::hash::StorageHasher::max_len","value":"pub fn max_len<K: MaxEncodedLen>() -> usize","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":" The max length of the final hash, for the given key type.\n","sig":null,"attributes":[{"value":"/ The max length of the final hash, for the given key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175498,"byte_end":175559,"line_start":66,"line_end":66,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":243},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175737,"byte_end":175760,"line_start":73,"line_end":73,"column_start":11,"column_end":34},"name":"ReversibleStorageHasher","qualname":"::hash::ReversibleStorageHasher","value":"ReversibleStorageHasher: StorageHasher","parent":null,"children":[{"krate":0,"index":244}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175605,"byte_end":175657,"line_start":70,"line_end":70,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175658,"byte_end":175661,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Reversible hasher store the encoded key after the hash part.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175662,"byte_end":175726,"line_start":72,"line_end":72,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175900,"byte_end":175907,"line_start":77,"line_end":77,"column_start":5,"column_end":12},"name":"reverse","qualname":"::hash::ReversibleStorageHasher::reverse","value":"pub fn reverse(&[u8]) -> &[u8]","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Split the hash part out of the input.","sig":null,"attributes":[{"value":"/ Split the hash part out of the input.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175779,"byte_end":175820,"line_start":74,"line_end":74,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175822,"byte_end":175825,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ I.e. for input `&[hash ++ key ++ some]` returns `&[key ++ some]`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175827,"byte_end":175895,"line_start":76,"line_end":76,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":245},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175970,"byte_end":175978,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"Identity","qualname":"::hash::Identity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Store the key directly.\n","sig":null,"attributes":[{"value":"/ Store the key directly.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175931,"byte_end":175958,"line_start":80,"line_end":80,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":255},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176387,"byte_end":176399,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"Twox64Concat","qualname":"::hash::Twox64Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(twox64(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(twox64(key), key)`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176322,"byte_end":176375,"line_start":98,"line_end":98,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177000,"byte_end":177016,"line_start":121,"line_end":121,"column_start":12,"column_end":28},"name":"Blake2_128Concat","qualname":"::hash::Blake2_128Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(blake2_128(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(blake2_128(key), key)`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176931,"byte_end":176988,"line_start":120,"line_end":120,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177615,"byte_end":177625,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"Blake2_128","qualname":"::hash::Blake2_128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 128","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177566,"byte_end":177603,"line_start":142,"line_end":142,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":285},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177923,"byte_end":177933,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"Blake2_256","qualname":"::hash::Blake2_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 256","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177874,"byte_end":177911,"line_start":155,"line_end":155,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":295},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178229,"byte_end":178236,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"Twox128","qualname":"::hash::Twox128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 128","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178182,"byte_end":178217,"line_start":168,"line_end":168,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":305},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178524,"byte_end":178531,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"Twox256","qualname":"::hash::Twox256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 256","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178477,"byte_end":178512,"line_start":181,"line_end":181,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":315},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"storage","qualname":"::storage","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":543},{"krate":0,"index":684},{"krate":0,"index":893},{"krate":0,"index":949},{"krate":0,"index":1503},{"krate":0,"index":1565},{"krate":0,"index":1662},{"krate":0,"index":2883},{"krate":0,"index":2920},{"krate":0,"index":3069},{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3097},{"krate":0,"index":3124},{"krate":0,"index":3175},{"krate":0,"index":3188},{"krate":0,"index":3214},{"krate":0,"index":3237},{"krate":0,"index":3308},{"krate":0,"index":3361},{"krate":0,"index":3369},{"krate":0,"index":3374},{"krate":0,"index":3376},{"krate":0,"index":3378},{"krate":0,"index":3386},{"krate":0,"index":3392},{"krate":0,"index":3398},{"krate":0,"index":3405},{"krate":0,"index":3410},{"krate":0,"index":3418},{"krate":0,"index":3421},{"krate":0,"index":3425},{"krate":0,"index":3431},{"krate":0,"index":3436},{"krate":0,"index":3449},{"krate":0,"index":3451},{"krate":0,"index":3454},{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3488},{"krate":0,"index":3493},{"krate":0,"index":3499},{"krate":0,"index":3506},{"krate":0,"index":3514},{"krate":0,"index":3523},{"krate":0,"index":3533}],"decl_id":null,"docs":" Stuff to do with the runtime's storage.\n","sig":null,"attributes":[{"value":"/ Stuff to do with the runtime's storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":180471,"byte_end":180514,"line_start":18,"line_end":18,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":379},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounded_btree_map","qualname":"::storage::bounded_btree_map","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":6951},{"krate":0,"index":6931},{"krate":0,"index":6942},{"krate":0,"index":417},{"krate":0,"index":425},{"krate":0,"index":430},{"krate":0,"index":448},{"krate":0,"index":453},{"krate":0,"index":458},{"krate":0,"index":463},{"krate":0,"index":469},{"krate":0,"index":473},{"krate":0,"index":478},{"krate":0,"index":483},{"krate":0,"index":488},{"krate":0,"index":495},{"krate":0,"index":500},{"krate":0,"index":506},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":523},{"krate":0,"index":528},{"krate":0,"index":532},{"krate":0,"index":536}],"decl_id":null,"docs":" Traits, types and structs to support a bounded BTreeMap.\n","sig":null,"attributes":[{"value":"/ Traits, types and structs to support a bounded BTreeMap.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242101,"byte_end":242161,"line_start":18,"line_end":18,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6951},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242873,"byte_end":242888,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"BoundedBTreeMap","qualname":"::storage::bounded_btree_map::BoundedBTreeMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bounded map based on a B-Tree.","sig":null,"attributes":[{"value":"/ A bounded map based on a B-Tree.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242403,"byte_end":242439,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242440,"byte_end":242443,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242444,"byte_end":242539,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ the amount of work performed in a search. See [`BTreeMap`] for more details.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242540,"byte_end":242620,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242621,"byte_end":242624,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Unlike a standard `BTreeMap`, there is an enforced upper limit to the number of items in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242625,"byte_end":242721,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ map. All internal operations ensure this bound is respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242722,"byte_end":242786,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"scale_info(skip_type_params(S))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242827,"byte_end":242861,"line_start":38,"line_end":38,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243514,"byte_end":243519,"line_start":65,"line_end":65,"column_start":9,"column_end":14},"name":"bound","qualname":"<BoundedBTreeMap<K, V, S>>::bound","value":"pub fn bound() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the bound of the type in `usize`.\n","sig":null,"attributes":[{"value":"/ Get the bound of the type in `usize`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243464,"byte_end":243505,"line_start":64,"line_end":64,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243833,"byte_end":243836,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"new","qualname":"<BoundedBTreeMap<K, V, S>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoundedBTreeMap`.","sig":null,"attributes":[{"value":"/ Create a new `BoundedBTreeMap`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243760,"byte_end":243795,"line_start":80,"line_end":80,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243797,"byte_end":243800,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ Does not allocate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243802,"byte_end":243824,"line_start":82,"line_end":82,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244138,"byte_end":244148,"line_start":91,"line_end":91,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BoundedBTreeMap<K, V, S>>::into_inner","value":"pub fn into_inner(Self) -> BTreeMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Consume self, and return the inner `BTreeMap`.","sig":null,"attributes":[{"value":"/ Consume self, and return the inner `BTreeMap`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243902,"byte_end":243952,"line_start":87,"line_end":87,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243954,"byte_end":243957,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ This is useful when a mutating API of the inner type is desired, and closure-based mutation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243959,"byte_end":244054,"line_start":89,"line_end":89,"column_start":2,"column_end":97}},{"value":"/ such as provided by [`try_mutate`][Self::try_mutate] is inconvenient.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244056,"byte_end":244129,"line_start":90,"line_end":90,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244537,"byte_end":244547,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<BoundedBTreeMap<K, V, S>>::try_mutate","value":"pub fn try_mutate<impl FnMut(&mut BTreeMap<K, V>): FnMut(&mut BTreeMap<K, V>)\n-> ()>(Self, impl FnMut(&mut BTreeMap<K, V>)) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and mutates self via the given `mutate` function.","sig":null,"attributes":[{"value":"/ Consumes self and mutates self via the given `mutate` function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244237,"byte_end":244304,"line_start":96,"line_end":96,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244306,"byte_end":244309,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ If the outcome of mutation is within bounds, `Some(Self)` is returned. Else, `None` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244311,"byte_end":244401,"line_start":98,"line_end":98,"column_start":2,"column_end":92}},{"value":"/ returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244403,"byte_end":244416,"line_start":99,"line_end":99,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244418,"byte_end":244421,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ This is essentially a *consuming* shorthand [`Self::into_inner`] -> `...` ->","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244423,"byte_end":244503,"line_start":101,"line_end":101,"column_start":2,"column_end":82}},{"value":"/ [`Self::try_from`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244505,"byte_end":244528,"line_start":102,"line_end":102,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244752,"byte_end":244757,"line_start":109,"line_end":109,"column_start":9,"column_end":14},"name":"clear","qualname":"<BoundedBTreeMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245023,"byte_end":245030,"line_start":117,"line_end":117,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BoundedBTreeMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Ord + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Return a mutable reference to the value corresponding to the key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244793,"byte_end":244862,"line_start":113,"line_end":113,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244864,"byte_end":244867,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering on the borrowed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244869,"byte_end":244961,"line_start":115,"line_end":115,"column_start":2,"column_end":94}},{"value":"/ form _must_ match the ordering on the key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":244963,"byte_end":245014,"line_start":116,"line_end":116,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245390,"byte_end":245400,"line_start":129,"line_end":129,"column_start":9,"column_end":19},"name":"try_insert","qualname":"<BoundedBTreeMap<K, V, S>>::try_insert","value":"pub fn try_insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`BTreeMap::insert`], but returns an `Err` (and is a noop) if\n the new length of the map exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`BTreeMap::insert`], but returns an `Err` (and is a noop) if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245144,"byte_end":245239,"line_start":125,"line_end":125,"column_start":2,"column_end":97}},{"value":"/ the new length of the map exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245241,"byte_end":245283,"line_start":126,"line_end":126,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245285,"byte_end":245288,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ In the `Err` case, returns the inserted pair so it can be further used without cloning.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245290,"byte_end":245381,"line_start":128,"line_end":128,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245863,"byte_end":245869,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"name":"remove","qualname":"<BoundedBTreeMap<K, V, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: Ord +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Remove a key from the map, returning the value at the key if the key was previously in the\n map.","sig":null,"attributes":[{"value":"/ Remove a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245598,"byte_end":245692,"line_start":137,"line_end":137,"column_start":2,"column_end":96}},{"value":"/ map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245694,"byte_end":245702,"line_start":138,"line_end":138,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245704,"byte_end":245707,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering on the borrowed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245709,"byte_end":245801,"line_start":140,"line_end":140,"column_start":2,"column_end":94}},{"value":"/ form _must_ match the ordering on the key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245803,"byte_end":245854,"line_start":141,"line_end":141,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246242,"byte_end":246254,"line_start":155,"line_end":155,"column_start":9,"column_end":21},"name":"remove_entry","qualname":"<BoundedBTreeMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q>(&mut Self, &Q) -> Option<(K, V)> where K: Borrow<Q>,\nQ: Ord + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Remove a key from the map, returning the value at the key if the key was previously in the\n map.","sig":null,"attributes":[{"value":"/ Remove a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":245977,"byte_end":246071,"line_start":150,"line_end":150,"column_start":2,"column_end":96}},{"value":"/ map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246073,"byte_end":246081,"line_start":151,"line_end":151,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246083,"byte_end":246086,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering on the borrowed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246088,"byte_end":246180,"line_start":153,"line_end":153,"column_start":2,"column_end":94}},{"value":"/ form _must_ match the ordering on the key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246182,"byte_end":246233,"line_start":154,"line_end":154,"column_start":2,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":543},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounded_btree_set","qualname":"::storage::bounded_btree_set","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":6975},{"krate":0,"index":6958},{"krate":0,"index":6967},{"krate":0,"index":581},{"krate":0,"index":588},{"krate":0,"index":592},{"krate":0,"index":607},{"krate":0,"index":611},{"krate":0,"index":615},{"krate":0,"index":619},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":639},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":654},{"krate":0,"index":658},{"krate":0,"index":662},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678}],"decl_id":null,"docs":" Traits, types and structs to support a bounded `BTreeSet`.\n","sig":null,"attributes":[{"value":"/ Traits, types and structs to support a bounded `BTreeSet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":256970,"byte_end":257032,"line_start":18,"line_end":18,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":6975},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257744,"byte_end":257759,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"BoundedBTreeSet","qualname":"::storage::bounded_btree_set::BoundedBTreeSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bounded set based on a B-Tree.","sig":null,"attributes":[{"value":"/ A bounded set based on a B-Tree.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257274,"byte_end":257310,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257311,"byte_end":257314,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257315,"byte_end":257410,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ the amount of work performed in a search. See [`BTreeSet`] for more details.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257411,"byte_end":257491,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257492,"byte_end":257495,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Unlike a standard `BTreeSet`, there is an enforced upper limit to the number of items in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257496,"byte_end":257592,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ set. All internal operations ensure this bound is respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257593,"byte_end":257657,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"scale_info(skip_type_params(S))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257698,"byte_end":257732,"line_start":38,"line_end":38,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258349,"byte_end":258354,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"name":"bound","qualname":"<BoundedBTreeSet<T, S>>::bound","value":"pub fn bound() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the bound of the type in `usize`.\n","sig":null,"attributes":[{"value":"/ Get the bound of the type in `usize`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258299,"byte_end":258340,"line_start":63,"line_end":63,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258659,"byte_end":258662,"line_start":82,"line_end":82,"column_start":9,"column_end":12},"name":"new","qualname":"<BoundedBTreeSet<T, S>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BoundedBTreeSet`.","sig":null,"attributes":[{"value":"/ Create a new `BoundedBTreeSet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258586,"byte_end":258621,"line_start":79,"line_end":79,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258623,"byte_end":258626,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ Does not allocate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258628,"byte_end":258650,"line_start":81,"line_end":81,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258964,"byte_end":258974,"line_start":90,"line_end":90,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BoundedBTreeSet<T, S>>::into_inner","value":"pub fn into_inner(Self) -> BTreeSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Consume self, and return the inner `BTreeSet`.","sig":null,"attributes":[{"value":"/ Consume self, and return the inner `BTreeSet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258728,"byte_end":258778,"line_start":86,"line_end":86,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258780,"byte_end":258783,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ This is useful when a mutating API of the inner type is desired, and closure-based mutation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258785,"byte_end":258880,"line_start":88,"line_end":88,"column_start":2,"column_end":97}},{"value":"/ such as provided by [`try_mutate`][Self::try_mutate] is inconvenient.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258882,"byte_end":258955,"line_start":89,"line_end":89,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259360,"byte_end":259370,"line_start":102,"line_end":102,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<BoundedBTreeSet<T, S>>::try_mutate","value":"pub fn try_mutate<impl FnMut(&mut BTreeSet<T>): FnMut(&mut BTreeSet<T>) ->\n()>(Self, impl FnMut(&mut BTreeSet<T>)) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and mutates self via the given `mutate` function.","sig":null,"attributes":[{"value":"/ Consumes self and mutates self via the given `mutate` function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259060,"byte_end":259127,"line_start":95,"line_end":95,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259129,"byte_end":259132,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ If the outcome of mutation is within bounds, `Some(Self)` is returned. Else, `None` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259134,"byte_end":259224,"line_start":97,"line_end":97,"column_start":2,"column_end":92}},{"value":"/ returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259226,"byte_end":259239,"line_start":98,"line_end":98,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259241,"byte_end":259244,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ This is essentially a *consuming* shorthand [`Self::into_inner`] -> `...` ->","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259246,"byte_end":259326,"line_start":100,"line_end":100,"column_start":2,"column_end":82}},{"value":"/ [`Self::try_from`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259328,"byte_end":259351,"line_start":101,"line_end":101,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259572,"byte_end":259577,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"clear","qualname":"<BoundedBTreeSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259859,"byte_end":259869,"line_start":116,"line_end":116,"column_start":9,"column_end":19},"name":"try_insert","qualname":"<BoundedBTreeSet<T, S>>::try_insert","value":"pub fn try_insert(&mut Self, T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`BTreeSet::insert`], but returns an `Err` (and is a noop) if\n the new length of the set exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`BTreeSet::insert`], but returns an `Err` (and is a noop) if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259613,"byte_end":259708,"line_start":112,"line_end":112,"column_start":2,"column_end":97}},{"value":"/ the new length of the set exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259710,"byte_end":259752,"line_start":113,"line_end":113,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259754,"byte_end":259757,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ In the `Err` case, returns the inserted item so it can be further used without cloning.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":259759,"byte_end":259850,"line_start":115,"line_end":115,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260275,"byte_end":260281,"line_start":128,"line_end":128,"column_start":9,"column_end":15},"name":"remove","qualname":"<BoundedBTreeSet<T, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Ord + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Remove an item from the set, returning whether it was previously in the set.","sig":null,"attributes":[{"value":"/ Remove an item from the set, returning whether it was previously in the set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260031,"byte_end":260111,"line_start":124,"line_end":124,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260113,"byte_end":260116,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ The item may be any borrowed form of the set's item type, but the ordering on the borrowed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260118,"byte_end":260212,"line_start":126,"line_end":126,"column_start":2,"column_end":96}},{"value":"/ form _must_ match the ordering on the item type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260214,"byte_end":260266,"line_start":127,"line_end":127,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260638,"byte_end":260642,"line_start":140,"line_end":140,"column_start":9,"column_end":13},"name":"take","qualname":"<BoundedBTreeSet<T, S>>::take","value":"pub fn take<Q>(&mut Self, &Q) -> Option<T> where T: Borrow<Q> + Ord, Q: Ord +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260386,"byte_end":260471,"line_start":136,"line_end":136,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260473,"byte_end":260476,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ The value may be any borrowed form of the set's value type, but the ordering on the borrowed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260478,"byte_end":260574,"line_start":138,"line_end":138,"column_start":2,"column_end":98}},{"value":"/ form _must_ match the ordering on the value type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260576,"byte_end":260629,"line_start":139,"line_end":139,"column_start":2,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":684},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounded_vec","qualname":"::storage::bounded_vec","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":6998},{"krate":0,"index":6981},{"krate":0,"index":6990},{"krate":0,"index":7024},{"krate":0,"index":7004},{"krate":0,"index":7015},{"krate":0,"index":735},{"krate":0,"index":739},{"krate":0,"index":743},{"krate":0,"index":747},{"krate":0,"index":751},{"krate":0,"index":755},{"krate":0,"index":761},{"krate":0,"index":766},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":789},{"krate":0,"index":793},{"krate":0,"index":809},{"krate":0,"index":813},{"krate":0,"index":817},{"krate":0,"index":821},{"krate":0,"index":826},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":838},{"krate":0,"index":843},{"krate":0,"index":849},{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":864},{"krate":0,"index":869},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":883},{"krate":0,"index":887}],"decl_id":null,"docs":" Traits, types and structs to support putting a bounded vector into storage, as a raw value, map\n or a double map.\n","sig":null,"attributes":[{"value":"/ Traits, types and structs to support putting a bounded vector into storage, as a raw value, map","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":270798,"byte_end":270897,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ or a double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":270898,"byte_end":270918,"line_start":19,"line_end":19,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":6998},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271605,"byte_end":271615,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"BoundedVec","qualname":"::storage::bounded_vec::BoundedVec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bounded vector.","sig":null,"attributes":[{"value":"/ A bounded vector.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271203,"byte_end":271224,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271225,"byte_end":271228,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271229,"byte_end":271329,"line_start":35,"line_end":35,"column_start":1,"column_end":101}},{"value":"/ put into storage as a raw value, map or double-map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271330,"byte_end":271385,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271386,"byte_end":271389,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ As the name suggests, the length of the queue is always bounded. All internal operations ensure","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271390,"byte_end":271489,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ this bound is respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271490,"byte_end":271518,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"scale_info(skip_type_params(S))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271559,"byte_end":271593,"line_start":41,"line_end":41,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271827,"byte_end":271839,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BoundedSlice","qualname":"::storage::bounded_vec::BoundedSlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bounded slice.","sig":null,"attributes":[{"value":"/ A bounded slice.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271648,"byte_end":271668,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271669,"byte_end":271672,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Similar to a `BoundedVec`, but not owned and cannot be decoded.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271673,"byte_end":271740,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"scale_info(skip_type_params(S))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":271781,"byte_end":271815,"line_start":48,"line_end":48,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274065,"byte_end":274075,"line_start":118,"line_end":118,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BoundedVec<T, S>>::into_inner","value":"pub fn into_inner(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consume self, and return the inner `Vec`. Henceforth, the `Vec<_>` can be altered in an\n arbitrary way. At some point, if the reverse conversion is required, `TryFrom<Vec<_>>` can\n be used.","sig":null,"attributes":[{"value":"/ Consume self, and return the inner `Vec`. Henceforth, the `Vec<_>` can be altered in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273704,"byte_end":273795,"line_start":112,"line_end":112,"column_start":2,"column_end":93}},{"value":"/ arbitrary way. At some point, if the reverse conversion is required, `TryFrom<Vec<_>>` can","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273797,"byte_end":273891,"line_start":113,"line_end":113,"column_start":2,"column_end":96}},{"value":"/ be used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273893,"byte_end":273905,"line_start":114,"line_end":114,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273907,"byte_end":273910,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ This is useful for cases if you need access to an internal API of the inner `Vec<_>` which","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273912,"byte_end":274006,"line_start":116,"line_end":116,"column_start":2,"column_end":96}},{"value":"/ is not provided by the wrapper `BoundedVec`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274008,"byte_end":274056,"line_start":117,"line_end":117,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274232,"byte_end":274238,"line_start":127,"line_end":127,"column_start":9,"column_end":15},"name":"remove","qualname":"<BoundedVec<T, S>>::remove","value":"pub fn remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::remove`].","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::remove`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274108,"byte_end":274158,"line_start":122,"line_end":122,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274160,"byte_end":274163,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274165,"byte_end":274177,"line_start":124,"line_end":124,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274179,"byte_end":274182,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274184,"byte_end":274223,"line_start":126,"line_end":126,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274428,"byte_end":274439,"line_start":136,"line_end":136,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BoundedVec<T, S>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::swap_remove`].","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::swap_remove`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274299,"byte_end":274354,"line_start":131,"line_end":131,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274356,"byte_end":274359,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274361,"byte_end":274373,"line_start":133,"line_end":133,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274375,"byte_end":274378,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274380,"byte_end":274419,"line_start":135,"line_end":135,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274564,"byte_end":274570,"line_start":141,"line_end":141,"column_start":9,"column_end":15},"name":"retain","qualname":"<BoundedVec<T, S>>::retain","value":"pub fn retain<F: FnMut(&T) -> bool>(&mut Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::retain`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::retain`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274505,"byte_end":274555,"line_start":140,"line_end":140,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274698,"byte_end":274705,"line_start":146,"line_end":146,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BoundedVec<T, S>>::get_mut","value":"pub fn get_mut<I: SliceIndex<[T]>>(&mut Self, I)\n-> Option<&mut <I as SliceIndex<[T]>>::Output>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`slice::get_mut`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`slice::get_mut`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274636,"byte_end":274689,"line_start":145,"line_end":145,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274894,"byte_end":274902,"line_start":154,"line_end":154,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BoundedVec<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::truncate`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::truncate`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274833,"byte_end":274885,"line_start":153,"line_end":153,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275009,"byte_end":275012,"line_start":159,"line_end":159,"column_start":9,"column_end":12},"name":"pop","qualname":"<BoundedVec<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::pop`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::pop`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":274953,"byte_end":275000,"line_start":158,"line_end":158,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275357,"byte_end":275378,"line_start":174,"line_end":174,"column_start":9,"column_end":30},"name":"with_bounded_capacity","qualname":"<BoundedVec<T, S>>::with_bounded_capacity","value":"pub fn with_bounded_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Pre-allocate `capacity` items in self.","sig":null,"attributes":[{"value":"/ Pre-allocate `capacity` items in self.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275212,"byte_end":275254,"line_start":171,"line_end":171,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275256,"byte_end":275259,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ If `capacity` is greater than [`Self::bound`], then the minimum of the two is used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275261,"byte_end":275348,"line_start":173,"line_end":173,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275576,"byte_end":275593,"line_start":180,"line_end":180,"column_start":9,"column_end":26},"name":"with_max_capacity","qualname":"<BoundedVec<T, S>>::with_max_capacity","value":"pub fn with_max_capacity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate self with the maximum possible capacity.\n","sig":null,"attributes":[{"value":"/ Allocate self with the maximum possible capacity.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275514,"byte_end":275567,"line_start":179,"line_end":179,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275706,"byte_end":275711,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"name":"bound","qualname":"<BoundedVec<T, S>>::bound","value":"pub fn bound() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the bound of the type in `usize`.\n","sig":null,"attributes":[{"value":"/ Get the bound of the type in `usize`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275656,"byte_end":275697,"line_start":184,"line_end":184,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276074,"byte_end":276097,"line_start":196,"line_end":196,"column_start":9,"column_end":32},"name":"force_insert_keep_right","qualname":"<BoundedVec<T, S>>::force_insert_keep_right","value":"pub fn force_insert_keep_right(&mut Self, usize, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Forces the insertion of `s` into `self` retaining all items with index at least `index`.","sig":null,"attributes":[{"value":"/ Forces the insertion of `s` into `self` retaining all items with index at least `index`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275750,"byte_end":275842,"line_start":189,"line_end":189,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275844,"byte_end":275847,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ If `index == 0` and `self.len() == Self::bound()`, then this is a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275849,"byte_end":275925,"line_start":191,"line_end":191,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275927,"byte_end":275930,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ If `Self::bound() < index` or `self.len() < index`, then this is also a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275932,"byte_end":276014,"line_start":193,"line_end":193,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276016,"byte_end":276019,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ Returns `true` if the item was inserted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276021,"byte_end":276065,"line_start":195,"line_end":195,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276947,"byte_end":276969,"line_start":223,"line_end":223,"column_start":9,"column_end":31},"name":"force_insert_keep_left","qualname":"<BoundedVec<T, S>>::force_insert_keep_left","value":"pub fn force_insert_keep_left(&mut Self, usize, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Forces the insertion of `s` into `self` retaining all items with index at most `index`.","sig":null,"attributes":[{"value":"/ Forces the insertion of `s` into `self` retaining all items with index at most `index`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276612,"byte_end":276703,"line_start":216,"line_end":216,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276705,"byte_end":276708,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ If `index == Self::bound()` and `self.len() == Self::bound()`, then this is a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276710,"byte_end":276798,"line_start":218,"line_end":218,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276800,"byte_end":276803,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ If `Self::bound() < index` or `self.len() < index`, then this is also a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276805,"byte_end":276887,"line_start":220,"line_end":220,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276889,"byte_end":276892,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ Returns `true` if the item was inserted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":276894,"byte_end":276938,"line_start":222,"line_end":222,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277863,"byte_end":277868,"line_start":248,"line_end":248,"column_start":9,"column_end":14},"name":"slide","qualname":"<BoundedVec<T, S>>::slide","value":"pub fn slide(&mut Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Move the position of an item from one location to another in the slice.","sig":null,"attributes":[{"value":"/ Move the position of an item from one location to another in the slice.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277412,"byte_end":277487,"line_start":239,"line_end":239,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277489,"byte_end":277492,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ Except for the item being moved, the order of the slice remains the same.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277494,"byte_end":277571,"line_start":241,"line_end":241,"column_start":2,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277573,"byte_end":277576,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ - `index` is the location of the item to be moved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277578,"byte_end":277632,"line_start":243,"line_end":243,"column_start":2,"column_end":56}},{"value":"/ - `insert_position` is the index of the item in the slice which should *immediately follow*","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277634,"byte_end":277729,"line_start":244,"line_end":244,"column_start":2,"column_end":97}},{"value":"/   the item which is being moved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277731,"byte_end":277767,"line_start":245,"line_end":245,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277769,"byte_end":277772,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ Returns `true` of the operation was successful, otherwise `false` if a noop.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":277774,"byte_end":277854,"line_start":247,"line_end":247,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279434,"byte_end":279444,"line_start":292,"line_end":292,"column_start":9,"column_end":19},"name":"force_push","qualname":"<BoundedVec<T, S>>::force_push","value":"pub fn force_push(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Forces the insertion of `s` into `self` truncating first if necessary.","sig":null,"attributes":[{"value":"/ Forces the insertion of `s` into `self` truncating first if necessary.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279284,"byte_end":279358,"line_start":289,"line_end":289,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279360,"byte_end":279363,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ Infallible, but if the bound is zero, then it's a no-op.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279365,"byte_end":279425,"line_start":291,"line_end":291,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279691,"byte_end":279705,"line_start":301,"line_end":301,"column_start":9,"column_end":23},"name":"bounded_resize","qualname":"<BoundedVec<T, S>>::bounded_resize","value":"pub fn bounded_resize(&mut Self, usize, T) where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Same as `Vec::resize`, but if `size` is more than [`Self::bound`], then [`Self::bound`] is\n used.\n","sig":null,"attributes":[{"value":"/ Same as `Vec::resize`, but if `size` is more than [`Self::bound`], then [`Self::bound`] is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279577,"byte_end":279671,"line_start":299,"line_end":299,"column_start":2,"column_end":96}},{"value":"/ used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279673,"byte_end":279682,"line_start":300,"line_end":300,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280135,"byte_end":280145,"line_start":316,"line_end":316,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<BoundedVec<T, S>>::try_mutate","value":"pub fn try_mutate<impl FnMut(&mut Vec<T>): FnMut(&mut Vec<T>) ->\n()>(Self, impl FnMut(&mut Vec<T>)) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and mutates self via the given `mutate` function.","sig":null,"attributes":[{"value":"/ Consumes self and mutates self via the given `mutate` function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279835,"byte_end":279902,"line_start":309,"line_end":309,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279904,"byte_end":279907,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ If the outcome of mutation is within bounds, `Some(Self)` is returned. Else, `None` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":279909,"byte_end":279999,"line_start":311,"line_end":311,"column_start":2,"column_end":92}},{"value":"/ returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280001,"byte_end":280014,"line_start":312,"line_end":312,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280016,"byte_end":280019,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ This is essentially a *consuming* shorthand [`Self::into_inner`] -> `...` ->","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280021,"byte_end":280101,"line_start":314,"line_end":314,"column_start":2,"column_end":82}},{"value":"/ [`Self::try_from`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280103,"byte_end":280126,"line_start":315,"line_end":315,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280492,"byte_end":280502,"line_start":327,"line_end":327,"column_start":9,"column_end":19},"name":"try_insert","qualname":"<BoundedVec<T, S>>::try_insert","value":"pub fn try_insert(&mut Self, usize, T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::insert`], but returns an `Err` (and is a noop) if the\n new length of the vector exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::insert`], but returns an `Err` (and is a noop) if the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280292,"byte_end":280386,"line_start":321,"line_end":321,"column_start":2,"column_end":96}},{"value":"/ new length of the vector exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280388,"byte_end":280429,"line_start":322,"line_end":322,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280431,"byte_end":280434,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280436,"byte_end":280448,"line_start":324,"line_end":324,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280450,"byte_end":280453,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280455,"byte_end":280483,"line_start":326,"line_end":326,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280895,"byte_end":280903,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"name":"try_push","qualname":"<BoundedVec<T, S>>::try_push","value":"pub fn try_push(&mut Self, T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::push`], but returns an `Err` (and is a noop) if the\n new length of the vector exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::push`], but returns an `Err` (and is a noop) if the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280669,"byte_end":280761,"line_start":336,"line_end":336,"column_start":2,"column_end":94}},{"value":"/ new length of the vector exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280763,"byte_end":280804,"line_start":337,"line_end":337,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280806,"byte_end":280809,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280811,"byte_end":280823,"line_start":339,"line_end":339,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280825,"byte_end":280828,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds isize::MAX bytes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":280830,"byte_end":280886,"line_start":341,"line_end":341,"column_start":2,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":893},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"child","qualname":"::storage::child","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" Operation on runtime child storages.","sig":null,"attributes":[{"value":"/ Operation on runtime child storages.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":294885,"byte_end":294925,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":294926,"byte_end":294929,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This module is a currently only a variant of unhashed with additional `child_info`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":294930,"byte_end":295017,"line_start":20,"line_end":20,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":918},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295434,"byte_end":295437,"line_start":30,"line_end":30,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::child::get","value":"pub fn get<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295329,"byte_end":295426,"line_start":29,"line_end":29,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":922},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296096,"byte_end":296110,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::child::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":295975,"byte_end":296068,"line_start":50,"line_end":50,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296069,"byte_end":296088,"line_start":51,"line_end":51,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":924},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296359,"byte_end":296365,"line_start":58,"line_end":58,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::child::get_or","value":"pub fn get_or<T: Decode + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296241,"byte_end":296331,"line_start":56,"line_end":56,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296332,"byte_end":296351,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":926},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296616,"byte_end":296627,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::child::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296496,"byte_end":296588,"line_start":62,"line_end":62,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296589,"byte_end":296608,"line_start":63,"line_end":63,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":929},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296834,"byte_end":296837,"line_start":73,"line_end":73,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::child::put","value":"pub fn put<T: Encode>(&ChildInfo, &[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":296787,"byte_end":296826,"line_start":72,"line_end":72,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":932},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297183,"byte_end":297187,"line_start":82,"line_end":82,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::child::take","value":"pub fn take<T: Decode + Sized>(&ChildInfo, &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297076,"byte_end":297175,"line_start":81,"line_end":81,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":934},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297477,"byte_end":297492,"line_start":92,"line_end":92,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::child::take_or_default","value":"pub fn take_or_default<T: Codec + Sized + Default>(&ChildInfo, &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297341,"byte_end":297439,"line_start":90,"line_end":90,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297440,"byte_end":297469,"line_start":91,"line_end":91,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":936},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297786,"byte_end":297793,"line_start":98,"line_end":98,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::child::take_or","value":"pub fn take_or<T: Codec + Sized>(&ChildInfo, &[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297623,"byte_end":297713,"line_start":96,"line_end":96,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297714,"byte_end":297778,"line_start":97,"line_end":97,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298089,"byte_end":298101,"line_start":104,"line_end":104,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::child::take_or_else","value":"pub fn take_or_else<T: Codec + Sized, F: FnOnce() -> T>(&ChildInfo, &[u8], F)\n-> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":297924,"byte_end":298016,"line_start":102,"line_end":102,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298017,"byte_end":298081,"line_start":103,"line_end":103,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":941},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298328,"byte_end":298334,"line_start":113,"line_end":113,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::child::exists","value":"pub fn exists(&ChildInfo, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298261,"byte_end":298320,"line_start":112,"line_end":112,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":942},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299464,"byte_end":299476,"line_start":139,"line_end":139,"column_start":8,"column_end":20},"name":"kill_storage","qualname":"::storage::child::kill_storage","value":"pub fn kill_storage(&ChildInfo, Option<u32>) -> KillStorageResult","parent":null,"children":[],"decl_id":null,"docs":" Remove all `storage_key` key/values","sig":null,"attributes":[{"value":"/ Remove all `storage_key` key/values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298520,"byte_end":298559,"line_start":120,"line_end":120,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298560,"byte_end":298563,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Deletes all keys from the overlay and up to `limit` keys from the backend if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298564,"byte_end":298644,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ it is set to `Some`. No limit is applied when `limit` is set to `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298645,"byte_end":298720,"line_start":123,"line_end":123,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298721,"byte_end":298724,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The limit can be used to partially delete a child trie in case it is too large","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298725,"byte_end":298807,"line_start":125,"line_end":125,"column_start":1,"column_end":83}},{"value":"/ to delete in one go (block).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298808,"byte_end":298840,"line_start":126,"line_end":126,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298841,"byte_end":298844,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298845,"byte_end":298855,"line_start":128,"line_end":128,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298856,"byte_end":298859,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Please note that keys that are residing in the overlay for that child trie when","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298860,"byte_end":298943,"line_start":130,"line_end":130,"column_start":1,"column_end":84}},{"value":"/ issuing this call are all deleted without counting towards the `limit`. Only keys","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":298944,"byte_end":299029,"line_start":131,"line_end":131,"column_start":1,"column_end":86}},{"value":"/ written during the current block are part of the overlay. Deleting with a `limit`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299030,"byte_end":299115,"line_start":132,"line_end":132,"column_start":1,"column_end":86}},{"value":"/ mostly makes sense with an empty overlay for that child trie.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299116,"byte_end":299181,"line_start":133,"line_end":133,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299182,"byte_end":299185,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Calling this function multiple times per block for the same `storage_key` does","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299186,"byte_end":299268,"line_start":135,"line_end":135,"column_start":1,"column_end":83}},{"value":"/ not make much sense because it is not cumulative when called inside the same block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299269,"byte_end":299356,"line_start":136,"line_end":136,"column_start":1,"column_end":88}},{"value":"/ Use this function to distribute the deletion of a single child trie across multiple","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299357,"byte_end":299444,"line_start":137,"line_end":137,"column_start":1,"column_end":88}},{"value":"/ blocks.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299445,"byte_end":299456,"line_start":138,"line_end":138,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":943},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299749,"byte_end":299753,"line_start":147,"line_end":147,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::child::kill","value":"pub fn kill(&ChildInfo, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299691,"byte_end":299741,"line_start":146,"line_end":146,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":944},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299981,"byte_end":299988,"line_start":156,"line_end":156,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::child::get_raw","value":"pub fn get_raw(&ChildInfo, &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":299937,"byte_end":299973,"line_start":155,"line_end":155,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":945},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300225,"byte_end":300232,"line_start":163,"line_end":163,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::child::put_raw","value":"pub fn put_raw(&ChildInfo, &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300179,"byte_end":300217,"line_start":162,"line_end":162,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":946},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300475,"byte_end":300479,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"root","qualname":"::storage::child::root","value":"pub fn root(&ChildInfo, StateVersion) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Calculate current child root value.\n","sig":null,"attributes":[{"value":"/ Calculate current child root value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300428,"byte_end":300467,"line_start":170,"line_end":170,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":947},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300781,"byte_end":300784,"line_start":179,"line_end":179,"column_start":8,"column_end":11},"name":"len","qualname":"::storage::child::len","value":"pub fn len(&ChildInfo, &[u8]) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Return the length in bytes of the value without reading it. `None` if it does not exist.\n","sig":null,"attributes":[{"value":"/ Return the length in bytes of the value without reading it. `None` if it does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/child.rs","byte_start":300681,"byte_end":300773,"line_start":178,"line_end":178,"column_start":1,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":949},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generator","qualname":"::storage::generator","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":1124},{"krate":0,"index":1269},{"krate":0,"index":1423},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1500}],"decl_id":null,"docs":" Generators are a set of trait on which storage traits are implemented.","sig":null,"attributes":[{"value":"/ Generators are a set of trait on which storage traits are implemented.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301711,"byte_end":301785,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301786,"byte_end":301789,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ (i.e. implementing the generator for StorageValue on a type will automatically derive the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301790,"byte_end":301883,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ implementation of StorageValue for this type).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301884,"byte_end":301934,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301935,"byte_end":301938,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ They are used by `decl_storage`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301939,"byte_end":301975,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301976,"byte_end":301979,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is internal api and is subject to change.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/mod.rs","byte_start":301980,"byte_end":302030,"line_start":25,"line_end":25,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307828,"byte_end":307844,"line_start":46,"line_end":46,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::generator::double_map::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1016}],"decl_id":null,"docs":" Generator for `StorageDoubleMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageDoubleMap` used by `decl_storage`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":306866,"byte_end":306926,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":306927,"byte_end":306930,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Mapping of keys to a storage path","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":306931,"byte_end":306970,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":306971,"byte_end":306974,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The storage key (i.e. the key under which the `Value` will be stored) is created from two parts.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":306975,"byte_end":307075,"line_start":30,"line_end":30,"column_start":1,"column_end":101}},{"value":"/ The first part is a hash of a concatenation of the `key1_prefix` and `Key1`. And the second part","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307076,"byte_end":307176,"line_start":31,"line_end":31,"column_start":1,"column_end":101}},{"value":"/ is a hash of a `Key2`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307177,"byte_end":307203,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307204,"byte_end":307207,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Thus value for (key1, key2) is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307208,"byte_end":307253,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307254,"byte_end":307270,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher1(encode(key1)) ++ Hasher2(encode(key2))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307271,"byte_end":307374,"line_start":36,"line_end":36,"column_start":1,"column_end":104}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307375,"byte_end":307382,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307383,"byte_end":307386,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307387,"byte_end":307400,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307401,"byte_end":307404,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If the key1s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307405,"byte_end":307499,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher1. Otherwise, other values in storage can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307500,"byte_end":307597,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/ If the key2s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307598,"byte_end":307692,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher2. Otherwise, other items in storage with the same first","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307693,"byte_end":307789,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ key can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307790,"byte_end":307817,"line_start":45,"line_end":45,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1006},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307936,"byte_end":307941,"line_start":48,"line_end":48,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::double_map::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307894,"byte_end":307929,"line_start":47,"line_end":47,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307981,"byte_end":307988,"line_start":51,"line_end":51,"column_start":7,"column_end":14},"name":"Hasher1","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher1","value":"type Hasher1: StorageHasher;","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Hasher for the first key.\n","sig":null,"attributes":[{"value":"/ Hasher for the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":307945,"byte_end":307974,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308044,"byte_end":308051,"line_start":54,"line_end":54,"column_start":7,"column_end":14},"name":"Hasher2","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher2","value":"type Hasher2: StorageHasher;","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Hasher for the second key.\n","sig":null,"attributes":[{"value":"/ Hasher for the second key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308007,"byte_end":308037,"line_start":53,"line_end":53,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308124,"byte_end":308137,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308070,"byte_end":308119,"line_start":56,"line_end":56,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308215,"byte_end":308229,"line_start":60,"line_end":60,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308160,"byte_end":308210,"line_start":59,"line_end":59,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308361,"byte_end":308372,"line_start":64,"line_end":64,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::double_map::StorageDoubleMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308252,"byte_end":308333,"line_start":62,"line_end":62,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308335,"byte_end":308356,"line_start":63,"line_end":63,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308567,"byte_end":308595,"line_start":70,"line_end":70,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::double_map::StorageDoubleMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308489,"byte_end":308562,"line_start":69,"line_end":69,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308687,"byte_end":308715,"line_start":73,"line_end":73,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::double_map::StorageDoubleMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308628,"byte_end":308682,"line_start":72,"line_end":72,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308812,"byte_end":308841,"line_start":76,"line_end":76,"column_start":5,"column_end":34},"name":"storage_double_map_final_key1","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key1","value":"pub fn storage_double_map_final_key1<KArg1>(KArg1) -> Vec<u8> where\nKArg1: EncodeLike<K1>","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Generate the first part of the key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the first part of the key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":308748,"byte_end":308807,"line_start":75,"line_end":75,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":309322,"byte_end":309350,"line_start":92,"line_end":92,"column_start":5,"column_end":33},"name":"storage_double_map_final_key","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key","value":"pub fn storage_double_map_final_key<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":309271,"byte_end":309317,"line_start":91,"line_end":91,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326826,"byte_end":326836,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::generator::map::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184}],"decl_id":null,"docs":" Generator for `StorageMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageMap` used by `decl_storage`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326408,"byte_end":326462,"line_start":28,"line_end":28,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326463,"byte_end":326466,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ By default each key value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326467,"byte_end":326510,"line_start":30,"line_end":30,"column_start":1,"column_end":44}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326511,"byte_end":326527,"line_start":31,"line_end":31,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher(encode(key))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326528,"byte_end":326604,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326605,"byte_end":326612,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326613,"byte_end":326616,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326617,"byte_end":326630,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326631,"byte_end":326634,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326635,"byte_end":326728,"line_start":37,"line_end":37,"column_start":1,"column_end":94}},{"value":"/ `blake2_256` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326729,"byte_end":326815,"line_start":38,"line_end":38,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326911,"byte_end":326916,"line_start":41,"line_end":41,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::map::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326869,"byte_end":326904,"line_start":40,"line_end":40,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1178},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326969,"byte_end":326975,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"name":"Hasher","qualname":"::storage::generator::map::StorageMap::Hasher","value":"type Hasher: StorageHasher;","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Hasher. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Hasher. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326920,"byte_end":326962,"line_start":43,"line_end":43,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327048,"byte_end":327061,"line_start":47,"line_end":47,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::map::StorageMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":326994,"byte_end":327043,"line_start":46,"line_end":46,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327139,"byte_end":327153,"line_start":50,"line_end":50,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::map::StorageMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327084,"byte_end":327134,"line_start":49,"line_end":49,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327285,"byte_end":327296,"line_start":54,"line_end":54,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::map::StorageMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327176,"byte_end":327257,"line_start":52,"line_end":52,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327259,"byte_end":327280,"line_start":53,"line_end":53,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327491,"byte_end":327519,"line_start":60,"line_end":60,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::map::StorageMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327413,"byte_end":327486,"line_start":59,"line_end":59,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327611,"byte_end":327639,"line_start":63,"line_end":63,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::map::StorageMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327552,"byte_end":327606,"line_start":62,"line_end":62,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327723,"byte_end":327744,"line_start":66,"line_end":66,"column_start":5,"column_end":26},"name":"storage_map_final_key","qualname":"::storage::generator::map::StorageMap::storage_map_final_key","value":"pub fn storage_map_final_key<KeyArg>(KeyArg) -> Vec<u8> where\nKeyArg: EncodeLike<K>","parent":{"krate":0,"index":1174},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":327672,"byte_end":327718,"line_start":65,"line_end":65,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340923,"byte_end":340934,"line_start":60,"line_end":60,"column_start":11,"column_end":22},"name":"StorageNMap","qualname":"::storage::generator::nmap::StorageNMap","value":"StorageNMap<K: KeyGenerator, V: FullCodec>","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1336}],"decl_id":null,"docs":" Generator for `StorageNMap` used by `decl_storage` and storage types.","sig":null,"attributes":[{"value":"/ Generator for `StorageNMap` used by `decl_storage` and storage types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340394,"byte_end":340467,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340468,"byte_end":340471,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ By default each key value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340472,"byte_end":340515,"line_start":49,"line_end":49,"column_start":1,"column_end":44}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340516,"byte_end":340532,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"/ Twox128(pallet_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340533,"byte_end":340586,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/     ++ Hasher1(encode(key1)) ++ Hasher2(encode(key2)) ++ ... ++ HasherN(encode(keyN))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340587,"byte_end":340676,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340677,"byte_end":340684,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340685,"byte_end":340688,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340689,"byte_end":340702,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340703,"byte_end":340706,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340707,"byte_end":340800,"line_start":57,"line_end":57,"column_start":1,"column_end":94}},{"value":"/ `blake2_256` must be used.  Otherwise, other values in storage with the same prefix can","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340801,"byte_end":340892,"line_start":58,"line_end":58,"column_start":1,"column_end":92}},{"value":"/ be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340893,"byte_end":340912,"line_start":59,"line_end":59,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1328},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341011,"byte_end":341016,"line_start":62,"line_end":62,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::nmap::StorageNMap::Query","value":"type Query;","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":340969,"byte_end":341004,"line_start":61,"line_end":61,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341074,"byte_end":341087,"line_start":65,"line_end":65,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::nmap::StorageNMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341020,"byte_end":341069,"line_start":64,"line_end":64,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341165,"byte_end":341179,"line_start":68,"line_end":68,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::nmap::StorageNMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341110,"byte_end":341160,"line_start":67,"line_end":67,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341311,"byte_end":341322,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::nmap::StorageNMap::prefix_hash","value":"pub fn prefix_hash() -> Vec<u8>","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341202,"byte_end":341283,"line_start":70,"line_end":70,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341285,"byte_end":341306,"line_start":71,"line_end":71,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341517,"byte_end":341545,"line_start":78,"line_end":78,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::nmap::StorageNMap::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<V>) -> Self::Query","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341439,"byte_end":341512,"line_start":77,"line_end":77,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341637,"byte_end":341665,"line_start":81,"line_end":81,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::nmap::StorageNMap::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<V>","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341578,"byte_end":341632,"line_start":80,"line_end":80,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341750,"byte_end":341775,"line_start":84,"line_end":84,"column_start":5,"column_end":30},"name":"storage_n_map_partial_key","qualname":"::storage::generator::nmap::StorageNMap::storage_n_map_partial_key","value":"pub fn storage_n_map_partial_key<KP>(KP) -> Vec<u8> where K: HasKeyPrefix<KP>","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Generate a partial key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate a partial key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":341698,"byte_end":341745,"line_start":83,"line_end":83,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":342235,"byte_end":342258,"line_start":100,"line_end":100,"column_start":5,"column_end":28},"name":"storage_n_map_final_key","qualname":"::storage::generator::nmap::StorageNMap::storage_n_map_final_key","value":"pub fn storage_n_map_final_key<KG, KArg>(KArg) -> Vec<u8> where\nKG: KeyGenerator, KArg: EncodeLikeTuple<KG::KArg> + TupleToEncodedIter","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":342184,"byte_end":342230,"line_start":99,"line_end":99,"column_start":2,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358315,"byte_end":358327,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::generator::value::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458}],"decl_id":null,"docs":" Generator for `StorageValue` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageValue` used by `decl_storage`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358130,"byte_end":358186,"line_start":24,"line_end":24,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358187,"byte_end":358190,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ By default value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358191,"byte_end":358225,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358226,"byte_end":358242,"line_start":27,"line_end":27,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358243,"byte_end":358296,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358297,"byte_end":358304,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":1453},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358387,"byte_end":358392,"line_start":32,"line_end":32,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::value::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358345,"byte_end":358380,"line_start":31,"line_end":31,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358450,"byte_end":358463,"line_start":35,"line_end":35,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::value::StorageValue::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358396,"byte_end":358445,"line_start":34,"line_end":34,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358541,"byte_end":358555,"line_start":38,"line_end":38,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::value::StorageValue::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358486,"byte_end":358536,"line_start":37,"line_end":37,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358656,"byte_end":358684,"line_start":41,"line_end":41,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::value::StorageValue::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<T>) -> Self::Query","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358578,"byte_end":358651,"line_start":40,"line_end":40,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358776,"byte_end":358804,"line_start":44,"line_end":44,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::value::StorageValue::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<T>","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358717,"byte_end":358771,"line_start":43,"line_end":43,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358888,"byte_end":358911,"line_start":47,"line_end":47,"column_start":5,"column_end":28},"name":"storage_value_final_key","qualname":"::storage::generator::value::StorageValue::storage_value_final_key","value":"pub fn storage_value_final_key() -> [u8; ]","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":358837,"byte_end":358883,"line_start":46,"line_end":46,"column_start":2,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hashed","qualname":"::storage::hashed","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1519},{"krate":0,"index":1523},{"krate":0,"index":1527},{"krate":0,"index":1532},{"krate":0,"index":1536},{"krate":0,"index":1540},{"krate":0,"index":1544},{"krate":0,"index":1548},{"krate":0,"index":1553},{"krate":0,"index":1556},{"krate":0,"index":1559},{"krate":0,"index":1562}],"decl_id":null,"docs":" Operation on runtime storage using hashed keys.\n","sig":null,"attributes":[{"value":"/ Operation on runtime storage using hashed keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":361945,"byte_end":361996,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362178,"byte_end":362181,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::hashed::get","value":"pub fn get<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362073,"byte_end":362170,"line_start":24,"line_end":24,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362466,"byte_end":362480,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::hashed::get_or_default","value":"pub fn get_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362345,"byte_end":362438,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362439,"byte_end":362458,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362775,"byte_end":362781,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::hashed::get_or","value":"pub fn get_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362657,"byte_end":362747,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362748,"byte_end":362767,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363093,"byte_end":363104,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::hashed::get_or_else","value":"pub fn get_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":362973,"byte_end":363065,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363066,"byte_end":363085,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1532},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363370,"byte_end":363373,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::hashed::put","value":"pub fn put<T, HashFn, R>(&HashFn, &[u8], &T) where T: Encode,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363323,"byte_end":363362,"line_start":68,"line_end":68,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363641,"byte_end":363645,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::hashed::take","value":"pub fn take<T, HashFn, R>(&HashFn, &[u8]) -> Option<T> where T: Decode +\nSized, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363534,"byte_end":363633,"line_start":78,"line_end":78,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":1540},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363946,"byte_end":363961,"line_start":90,"line_end":90,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::hashed::take_or_default","value":"pub fn take_or_default<T, HashFn, R>(&HashFn, &[u8]) -> T where T: Decode +\nSized + Default, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363810,"byte_end":363908,"line_start":88,"line_end":88,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":363909,"byte_end":363938,"line_start":89,"line_end":89,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364302,"byte_end":364309,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::hashed::take_or","value":"pub fn take_or<T, HashFn, R>(&HashFn, &[u8], T) -> T where T: Decode + Sized,\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364139,"byte_end":364229,"line_start":99,"line_end":99,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364230,"byte_end":364294,"line_start":100,"line_end":100,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364667,"byte_end":364679,"line_start":112,"line_end":112,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::hashed::take_or_else","value":"pub fn take_or_else<T, F, HashFn, R>(&HashFn, &[u8], F) -> T where T: Decode +\nSized, F: FnOnce() -> T, HashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364502,"byte_end":364594,"line_start":110,"line_end":110,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364595,"byte_end":364659,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1553},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364966,"byte_end":364972,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::hashed::exists","value":"pub fn exists<HashFn, R>(&HashFn, &[u8]) -> bool where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":364899,"byte_end":364958,"line_start":122,"line_end":122,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365169,"byte_end":365173,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::hashed::kill","value":"pub fn kill<HashFn, R>(&HashFn, &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365111,"byte_end":365161,"line_start":131,"line_end":131,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":1559},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365346,"byte_end":365353,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::hashed::get_raw","value":"pub fn get_raw<HashFn, R>(&HashFn, &[u8]) -> Option<Vec<u8>> where\nHashFn: Fn(&[u8]) -> R, R: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365302,"byte_end":365338,"line_start":140,"line_end":140,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365550,"byte_end":365557,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::hashed::put_raw","value":"pub fn put_raw<HashFn, R>(&HashFn, &[u8], &[u8]) where HashFn: Fn(&[u8]) -> R,\nR: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/hashed.rs","byte_start":365504,"byte_end":365542,"line_start":149,"line_end":149,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"migration","qualname":"::storage::migration","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1574},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1594},{"krate":0,"index":1600},{"krate":0,"index":1605},{"krate":0,"index":1610},{"krate":0,"index":1618},{"krate":0,"index":1625},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1637},{"krate":0,"index":1641},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660}],"decl_id":null,"docs":" Some utilities for helping access storage with arbitrary key types.\n","sig":null,"attributes":[{"value":"/ Some utilities for helping access storage with arbitrary key types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366396,"byte_end":366467,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366726,"byte_end":366741,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"StorageIterator","qualname":"::storage::migration::StorageIterator","value":"StorageIterator {  }","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366662,"byte_end":366714,"line_start":30,"line_end":30,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367081,"byte_end":367084,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageIterator<T>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366881,"byte_end":366968,"line_start":39,"line_end":39,"column_start":2,"column_end":89}},{"value":"deprecated(note =\n\"Please use the storage_iter or storage_iter_with_suffix functions instead\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366970,"byte_end":367072,"line_start":40,"line_end":42,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367394,"byte_end":367405,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageIterator<T>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367194,"byte_end":367281,"line_start":48,"line_end":48,"column_start":2,"column_end":89}},{"value":"deprecated(note =\n\"Please use the storage_iter or storage_iter_with_suffix functions instead\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367283,"byte_end":367385,"line_start":49,"line_end":51,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367842,"byte_end":367847,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageIterator<T>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367742,"byte_end":367833,"line_start":61,"line_end":61,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368664,"byte_end":368682,"line_start":96,"line_end":96,"column_start":12,"column_end":30},"name":"StorageKeyIterator","qualname":"::storage::migration::StorageKeyIterator","value":"StorageKeyIterator {  }","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368600,"byte_end":368652,"line_start":95,"line_end":95,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369109,"byte_end":369112,"line_start":108,"line_end":108,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageKeyIterator<K, T, H>>::new","value":"pub fn new(&[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368901,"byte_end":368988,"line_start":104,"line_end":104,"column_start":2,"column_end":89}},{"value":"deprecated(note =\n\"Please use the storage_key_iter or storage_key_iter_with_suffix functions instead\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368990,"byte_end":369100,"line_start":105,"line_end":107,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369430,"byte_end":369441,"line_start":117,"line_end":117,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageKeyIterator<K, T, H>>::with_suffix","value":"pub fn with_suffix(&[u8], &[u8], &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369222,"byte_end":369309,"line_start":113,"line_end":113,"column_start":2,"column_end":89}},{"value":"deprecated(note =\n\"Please use the storage_key_iter or storage_key_iter_with_suffix functions instead\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369311,"byte_end":369421,"line_start":114,"line_end":116,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369878,"byte_end":369883,"line_start":127,"line_end":127,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageKeyIterator<K, T, H>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":369778,"byte_end":369869,"line_start":126,"line_end":126,"column_start":2,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":1632},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":370923,"byte_end":370935,"line_start":169,"line_end":169,"column_start":8,"column_end":20},"name":"storage_iter","qualname":"::storage::migration::storage_iter","value":"pub fn storage_iter<T: Decode + Sized>(&[u8], &[u8])\n-> PrefixIterator<(Vec<u8>, T)>","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":370828,"byte_end":370915,"line_start":168,"line_end":168,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":371164,"byte_end":371188,"line_start":174,"line_end":174,"column_start":8,"column_end":32},"name":"storage_iter_with_suffix","qualname":"::storage::migration::storage_iter_with_suffix","value":"pub fn storage_iter_with_suffix<T: Decode + Sized>(&[u8], &[u8], &[u8])\n-> PrefixIterator<(Vec<u8>, T)>","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":371069,"byte_end":371156,"line_start":173,"line_end":173,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":371844,"byte_end":371860,"line_start":193,"line_end":193,"column_start":8,"column_end":24},"name":"storage_key_iter","qualname":"::storage::migration::storage_key_iter","value":"pub fn storage_key_iter<K: Decode + Sized, T: Decode + Sized,\nH: ReversibleStorageHasher>(&[u8], &[u8]) -> PrefixIterator<(K, T)>","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":371749,"byte_end":371836,"line_start":192,"line_end":192,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":372150,"byte_end":372178,"line_start":201,"line_end":201,"column_start":8,"column_end":36},"name":"storage_key_iter_with_suffix","qualname":"::storage::migration::storage_key_iter_with_suffix","value":"pub fn storage_key_iter_with_suffix<K: Decode + Sized, T: Decode + Sized,\nH: ReversibleStorageHasher>(&[u8], &[u8], &[u8]) -> PrefixIterator<(K, T)>","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":372055,"byte_end":372142,"line_start":200,"line_end":200,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":372966,"byte_end":372984,"line_start":226,"line_end":226,"column_start":8,"column_end":26},"name":"have_storage_value","qualname":"::storage::migration::have_storage_value","value":"pub fn have_storage_value(&[u8], &[u8], &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":372862,"byte_end":372958,"line_start":225,"line_end":225,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":1647},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":373198,"byte_end":373215,"line_start":231,"line_end":231,"column_start":8,"column_end":25},"name":"get_storage_value","qualname":"::storage::migration::get_storage_value","value":"pub fn get_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":373094,"byte_end":373190,"line_start":230,"line_end":230,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":1649},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":373624,"byte_end":373642,"line_start":240,"line_end":240,"column_start":8,"column_end":26},"name":"take_storage_value","qualname":"::storage::migration::take_storage_value","value":"pub fn take_storage_value<T: Decode + Sized>(&[u8], &[u8], &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":373519,"byte_end":373616,"line_start":239,"line_end":239,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":1651},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374053,"byte_end":374070,"line_start":249,"line_end":249,"column_start":8,"column_end":25},"name":"put_storage_value","qualname":"::storage::migration::put_storage_value","value":"pub fn put_storage_value<T: Encode>(&[u8], &[u8], &[u8], T)","parent":null,"children":[],"decl_id":null,"docs":" Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":373947,"byte_end":374045,"line_start":248,"line_end":248,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":1653},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374481,"byte_end":374502,"line_start":259,"line_end":259,"column_start":8,"column_end":29},"name":"remove_storage_prefix","qualname":"::storage::migration::remove_storage_prefix","value":"pub fn remove_storage_prefix(&[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Remove all items under a storage prefix by the `module`, the map's `item` name and the key\n `hash`.\n","sig":null,"attributes":[{"value":"/ Remove all items under a storage prefix by the `module`, the map's `item` name and the key","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374367,"byte_end":374461,"line_start":257,"line_end":257,"column_start":1,"column_end":95}},{"value":"/ `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374462,"byte_end":374473,"line_start":258,"line_end":258,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1654},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374888,"byte_end":374905,"line_start":268,"line_end":268,"column_start":8,"column_end":25},"name":"take_storage_item","qualname":"::storage::migration::take_storage_item","value":"pub fn take_storage_item<K: Encode + Sized, T: Decode + Sized,\nH: StorageHasher>(&[u8], &[u8], K) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a particular item in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Take a particular item in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":374784,"byte_end":374880,"line_start":267,"line_end":267,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376018,"byte_end":376042,"line_start":296,"line_end":296,"column_start":8,"column_end":32},"name":"move_storage_from_pallet","qualname":"::storage::migration::move_storage_from_pallet","value":"pub fn move_storage_from_pallet(&[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Move a storage from a pallet prefix to another pallet prefix.","sig":null,"attributes":[{"value":"/ Move a storage from a pallet prefix to another pallet prefix.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375093,"byte_end":375158,"line_start":276,"line_end":276,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375159,"byte_end":375162,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ Keys used in pallet storages always start with:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375163,"byte_end":375214,"line_start":278,"line_end":278,"column_start":1,"column_end":52}},{"value":"/ `concat(twox_128(pallet_name), towx_128(storage_name))`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375215,"byte_end":375275,"line_start":279,"line_end":279,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375276,"byte_end":375279,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ This function will remove all value for which the key start with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375280,"byte_end":375348,"line_start":281,"line_end":281,"column_start":1,"column_end":69}},{"value":"/ `concat(twox_128(old_pallet_name), towx_128(storage_name))` and insert them at the key with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375349,"byte_end":375444,"line_start":282,"line_end":282,"column_start":1,"column_end":96}},{"value":"/ the start replaced by `concat(twox_128(new_pallet_name), towx_128(storage_name))`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375445,"byte_end":375531,"line_start":283,"line_end":283,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375532,"byte_end":375535,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375536,"byte_end":375549,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375550,"byte_end":375553,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ If a pallet named \"my_example\" has 2 storages named \"Foo\" and \"Bar\" and the pallet is renamed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375554,"byte_end":375651,"line_start":287,"line_end":287,"column_start":1,"column_end":98}},{"value":"/ \"my_new_example_name\", a migration can be:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375652,"byte_end":375698,"line_start":288,"line_end":288,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375699,"byte_end":375706,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use frame_support::storage::migration::move_storage_from_pallet;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375707,"byte_end":375777,"line_start":290,"line_end":290,"column_start":1,"column_end":71}},{"value":"/ # sp_io::TestExternalities::new_empty().execute_with(|| {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375778,"byte_end":375839,"line_start":291,"line_end":291,"column_start":1,"column_end":62}},{"value":"/ move_storage_from_pallet(b\"Foo\", b\"my_example\", b\"my_new_example_name\");","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375840,"byte_end":375916,"line_start":292,"line_end":292,"column_start":1,"column_end":77}},{"value":"/ move_storage_from_pallet(b\"Bar\", b\"my_example\", b\"my_new_example_name\");","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375917,"byte_end":375993,"line_start":293,"line_end":293,"column_start":1,"column_end":77}},{"value":"/ # })","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":375994,"byte_end":376002,"line_start":294,"line_end":294,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376003,"byte_end":376010,"line_start":295,"line_end":295,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1659},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377233,"byte_end":377244,"line_start":332,"line_end":332,"column_start":8,"column_end":19},"name":"move_pallet","qualname":"::storage::migration::move_pallet","value":"pub fn move_pallet(&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Move all storages from a pallet prefix to another pallet prefix.","sig":null,"attributes":[{"value":"/ Move all storages from a pallet prefix to another pallet prefix.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376426,"byte_end":376494,"line_start":312,"line_end":312,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376495,"byte_end":376498,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ Keys used in pallet storages always start with:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376499,"byte_end":376550,"line_start":314,"line_end":314,"column_start":1,"column_end":52}},{"value":"/ `concat(twox_128(pallet_name), towx_128(storage_name))`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376551,"byte_end":376611,"line_start":315,"line_end":315,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376612,"byte_end":376615,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ This function will remove all value for which the key start with `twox_128(old_pallet_name)`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376616,"byte_end":376712,"line_start":317,"line_end":317,"column_start":1,"column_end":97}},{"value":"/ and insert them at the key with the start replaced by `twox_128(new_pallet_name)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376713,"byte_end":376799,"line_start":318,"line_end":318,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376800,"byte_end":376803,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ NOTE: The value at the key `twox_128(old_pallet_name)` is not moved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376804,"byte_end":376876,"line_start":320,"line_end":320,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376877,"byte_end":376880,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376881,"byte_end":376894,"line_start":322,"line_end":322,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376895,"byte_end":376898,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ If a pallet named \"my_example\" has some storages and the pallet is renamed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376899,"byte_end":376977,"line_start":324,"line_end":324,"column_start":1,"column_end":79}},{"value":"/ \"my_new_example_name\", a migration can be:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":376978,"byte_end":377024,"line_start":325,"line_end":325,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377025,"byte_end":377032,"line_start":326,"line_end":326,"column_start":1,"column_end":8}},{"value":"/ # use frame_support::storage::migration::move_pallet;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377033,"byte_end":377090,"line_start":327,"line_end":327,"column_start":1,"column_end":58}},{"value":"/ # sp_io::TestExternalities::new_empty().execute_with(|| {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377091,"byte_end":377152,"line_start":328,"line_end":328,"column_start":1,"column_end":62}},{"value":"/ move_pallet(b\"my_example\", b\"my_new_example_name\");","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377153,"byte_end":377208,"line_start":329,"line_end":329,"column_start":1,"column_end":56}},{"value":"/ # })","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377209,"byte_end":377217,"line_start":330,"line_end":330,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377218,"byte_end":377225,"line_start":331,"line_end":331,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1660},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377673,"byte_end":377684,"line_start":342,"line_end":342,"column_start":8,"column_end":19},"name":"move_prefix","qualname":"::storage::migration::move_prefix","value":"pub fn move_prefix(&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Move all `(key, value)` after some prefix to the another prefix","sig":null,"attributes":[{"value":"/ Move all `(key, value)` after some prefix to the another prefix","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377377,"byte_end":377444,"line_start":336,"line_end":336,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377445,"byte_end":377448,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ This function will remove all value for which the key start with `from_prefix`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377449,"byte_end":377531,"line_start":338,"line_end":338,"column_start":1,"column_end":83}},{"value":"/ and insert them at the key with the start replaced by `to_prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377532,"byte_end":377602,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377603,"byte_end":377606,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ NOTE: The value at the key `from_prefix` is not moved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":377607,"byte_end":377665,"line_start":341,"line_end":341,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":1662},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::storage::types","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1914},{"krate":0,"index":2167},{"krate":0,"index":2259},{"krate":0,"index":2463},{"krate":0,"index":2683},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2816},{"krate":0,"index":2819},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2829},{"krate":0,"index":2832},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2841},{"krate":0,"index":2844},{"krate":0,"index":2847},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2863},{"krate":0,"index":2865},{"krate":0,"index":2871},{"krate":0,"index":2873},{"krate":0,"index":2881}],"decl_id":null,"docs":" Storage types to build abstraction on storage, they implements storage traits such as\n StorageMap and others.\n","sig":null,"attributes":[{"value":"/ Storage types to build abstraction on storage, they implements storage traits such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":382884,"byte_end":382973,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ StorageMap and others.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":382974,"byte_end":383000,"line_start":19,"line_end":19,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387844,"byte_end":387861,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"CountedStorageMap","qualname":"::storage::types::counted_map::CountedStorageMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around a `StorageMap` and a `StorageValue<Value=u32>` to keep track of how many items\n are in a map, without needing to iterate all the values.","sig":null,"attributes":[{"value":"/ A wrapper around a `StorageMap` and a `StorageValue<Value=u32>` to keep track of how many items","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387173,"byte_end":387272,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ are in a map, without needing to iterate all the values.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387273,"byte_end":387333,"line_start":38,"line_end":38,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387334,"byte_end":387337,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ This storage item has additional storage read and write overhead when manipulating values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387338,"byte_end":387431,"line_start":40,"line_end":40,"column_start":1,"column_end":94}},{"value":"/ compared to a regular storage map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387432,"byte_end":387470,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387471,"byte_end":387474,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For functions where we only add or remove a value, a single storage read is needed to check if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387475,"byte_end":387573,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ that value already exists. For mutate functions, two storage reads are used to check if the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387574,"byte_end":387669,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ value existed before and after the mutation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387670,"byte_end":387718,"line_start":45,"line_end":45,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387719,"byte_end":387722,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Whenever the counter needs to be updated, an additional read and write occurs to update that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387723,"byte_end":387819,"line_start":47,"line_end":47,"column_start":1,"column_end":97}},{"value":"/ counter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":387820,"byte_end":387832,"line_start":48,"line_end":48,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":1763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388133,"byte_end":388158,"line_start":60,"line_end":60,"column_start":11,"column_end":36},"name":"CountedStorageMapInstance","qualname":"::storage::types::counted_map::CountedStorageMapInstance","value":"CountedStorageMapInstance: StorageInstance","parent":null,"children":[{"krate":0,"index":1764}],"decl_id":null,"docs":" The requirement for an instance of [`CountedStorageMap`].\n","sig":null,"attributes":[{"value":"/ The requirement for an instance of [`CountedStorageMap`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388061,"byte_end":388122,"line_start":59,"line_end":59,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":1764},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388238,"byte_end":388251,"line_start":62,"line_end":62,"column_start":7,"column_end":20},"name":"CounterPrefix","qualname":"::storage::types::counted_map::CountedStorageMapInstance::CounterPrefix","value":"type CounterPrefix: StorageInstance;","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The prefix to use for the counter storage value.\n","sig":null,"attributes":[{"value":"/ The prefix to use for the counter storage value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388179,"byte_end":388231,"line_start":61,"line_end":61,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388362,"byte_end":388365,"line_start":67,"line_end":67,"column_start":7,"column_end":10},"name":"Map","qualname":"::storage::types::counted_map::MapWrapper::Map","value":"type Map;","parent":{"krate":0,"index":1765},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1778},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388760,"byte_end":388782,"line_start":80,"line_end":80,"column_start":12,"column_end":34},"name":"OnRemovalCounterUpdate","qualname":"::storage::types::counted_map::OnRemovalCounterUpdate","value":"","parent":null,"children":[],"decl_id":null,"docs":" On removal logic for updating counter while draining upon some prefix with\n [`crate::storage::PrefixIterator`].\n","sig":null,"attributes":[{"value":"/ On removal logic for updating counter while draining upon some prefix with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388630,"byte_end":388708,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ [`crate::storage::PrefixIterator`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388709,"byte_end":388748,"line_start":79,"line_end":79,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389496,"byte_end":389521,"line_start":102,"line_end":102,"column_start":9,"column_end":34},"name":"counter_storage_final_key","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::counter_storage_final_key","value":"pub fn counter_storage_final_key() -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" The key used to store the counter of the map.\n","sig":null,"attributes":[{"value":"/ The key used to store the counter of the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389438,"byte_end":389487,"line_start":101,"line_end":101,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389640,"byte_end":389664,"line_start":107,"line_end":107,"column_start":9,"column_end":33},"name":"map_storage_final_prefix","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::map_storage_final_prefix","value":"pub fn map_storage_final_prefix() -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" The prefix used to generate the key of the map.\n","sig":null,"attributes":[{"value":"/ The prefix used to generate the key of the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389580,"byte_end":389631,"line_start":106,"line_end":106,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389860,"byte_end":389874,"line_start":113,"line_end":113,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<Key>>(KeyArg) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389773,"byte_end":389851,"line_start":112,"line_end":112,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390038,"byte_end":390050,"line_start":118,"line_end":118,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<Key>>(KeyArg) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389980,"byte_end":390029,"line_start":117,"line_end":117,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390222,"byte_end":390225,"line_start":123,"line_end":123,"column_start":9,"column_end":12},"name":"get","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::get","value":"pub fn get<KeyArg: EncodeLike<Key>>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390151,"byte_end":390213,"line_start":122,"line_end":122,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390445,"byte_end":390452,"line_start":130,"line_end":130,"column_start":9,"column_end":16},"name":"try_get","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_get","value":"pub fn try_get<KeyArg: EncodeLike<Key>>(KeyArg) -> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390329,"byte_end":390385,"line_start":127,"line_end":127,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390387,"byte_end":390390,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390392,"byte_end":390436,"line_start":129,"line_end":129,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390602,"byte_end":390606,"line_start":135,"line_end":135,"column_start":9,"column_end":13},"name":"swap","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::swap","value":"pub fn swap<KeyArg1: EncodeLike<Key>,\nKeyArg2: EncodeLike<Key>>(KeyArg1, KeyArg2)","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390561,"byte_end":390593,"line_start":134,"line_end":134,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390818,"byte_end":390824,"line_start":140,"line_end":140,"column_start":9,"column_end":15},"name":"insert","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::insert","value":"pub fn insert<KeyArg: EncodeLike<Key> + Clone,\nValArg: EncodeLike<Value>>(KeyArg, ValArg)","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":390742,"byte_end":390809,"line_start":139,"line_end":139,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391148,"byte_end":391154,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"name":"remove","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove","value":"pub fn remove<KeyArg: EncodeLike<Key> + Clone>(KeyArg)","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391106,"byte_end":391139,"line_start":150,"line_end":150,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391424,"byte_end":391430,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"name":"mutate","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate","value":"pub fn mutate<KeyArg: EncodeLike<Key> + Clone, R,\nF: FnOnce(&mut QueryKind::Query) -> R>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391382,"byte_end":391415,"line_start":158,"line_end":158,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391709,"byte_end":391719,"line_start":168,"line_end":168,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate","value":"pub fn try_mutate<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key> + Clone, F: FnOnce(&mut QueryKind::Query) ->\nResult<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":391645,"byte_end":391700,"line_start":167,"line_end":167,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392354,"byte_end":392367,"line_start":184,"line_end":184,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<Key> + Clone, R,\nF: FnOnce(&mut Option<Value>) -> R>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392271,"byte_end":392345,"line_start":183,"line_end":183,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392874,"byte_end":392891,"line_start":195,"line_end":195,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key> + Clone, F: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392586,"byte_end":392682,"line_start":192,"line_end":192,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392684,"byte_end":392780,"line_start":193,"line_end":193,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":392782,"byte_end":392865,"line_start":194,"line_end":194,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":393551,"byte_end":393555,"line_start":219,"line_end":219,"column_start":9,"column_end":13},"name":"take","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::take","value":"pub fn take<KeyArg: EncodeLike<Key> + Clone>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":393511,"byte_end":393542,"line_start":218,"line_end":218,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394251,"byte_end":394257,"line_start":236,"line_end":236,"column_start":9,"column_end":15},"name":"append","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::append","value":"pub fn append<Item, EncodeLikeItem,\nEncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<Key> + Clone, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":393915,"byte_end":393970,"line_start":228,"line_end":228,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":393972,"byte_end":393975,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":393977,"byte_end":394036,"line_start":230,"line_end":230,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394038,"byte_end":394041,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394043,"byte_end":394056,"line_start":232,"line_end":232,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394058,"byte_end":394061,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten and set to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394063,"byte_end":394154,"line_start":234,"line_end":234,"column_start":2,"column_end":93}},{"value":"/ `[item]`. Any default value set for the storage item will be ignored on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394156,"byte_end":394242,"line_start":235,"line_end":235,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395120,"byte_end":395130,"line_start":261,"line_end":261,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<Key>>(KeyArg) -> Option<usize> where\nValue: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the given\n `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the given","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394657,"byte_end":394747,"line_start":249,"line_end":249,"column_start":2,"column_end":92}},{"value":"/ `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394749,"byte_end":394759,"line_start":250,"line_end":250,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394761,"byte_end":394764,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394766,"byte_end":394827,"line_start":252,"line_end":252,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394829,"byte_end":394832,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned. Otherwise","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394834,"byte_end":394930,"line_start":254,"line_end":254,"column_start":2,"column_end":98}},{"value":"/ `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394932,"byte_end":394960,"line_start":255,"line_end":255,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394962,"byte_end":394965,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394967,"byte_end":394980,"line_start":257,"line_end":257,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394982,"byte_end":394985,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":394987,"byte_end":395080,"line_start":259,"line_end":259,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395082,"byte_end":395111,"line_start":260,"line_end":260,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395469,"byte_end":395480,"line_start":271,"line_end":271,"column_start":9,"column_end":20},"name":"migrate_key","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::migrate_key","value":"pub fn migrate_key<OldHasher: crate::hash::StorageHasher,\nKeyArg: EncodeLike<Key>>(KeyArg) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395276,"byte_end":395366,"line_start":268,"line_end":268,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395368,"byte_end":395371,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395373,"byte_end":395460,"line_start":270,"line_end":270,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395695,"byte_end":395705,"line_start":278,"line_end":278,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove_all","value":"pub fn remove_all()","parent":null,"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395650,"byte_end":395686,"line_start":277,"line_end":277,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396130,"byte_end":396141,"line_start":289,"line_end":289,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_values","value":"pub fn iter_values()\n-> crate::storage::PrefixIterator<Value, OnRemovalCounterUpdate<Prefix>>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":395989,"byte_end":396028,"line_start":286,"line_end":286,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396030,"byte_end":396033,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396035,"byte_end":396121,"line_start":288,"line_end":288,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396877,"byte_end":396893,"line_start":307,"line_end":307,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\nOption<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396288,"byte_end":396382,"line_start":293,"line_end":293,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396384,"byte_end":396387,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396389,"byte_end":396468,"line_start":295,"line_end":295,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396470,"byte_end":396473,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396475,"byte_end":396559,"line_start":297,"line_end":297,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396561,"byte_end":396564,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396566,"byte_end":396579,"line_start":299,"line_end":299,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396581,"byte_end":396584,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396586,"byte_end":396679,"line_start":301,"line_end":301,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396681,"byte_end":396753,"line_start":302,"line_end":302,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396755,"byte_end":396758,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396760,"byte_end":396771,"line_start":304,"line_end":304,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396773,"byte_end":396776,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":396778,"byte_end":396868,"line_start":306,"line_end":306,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397316,"byte_end":397326,"line_start":320,"line_end":320,"column_start":9,"column_end":19},"name":"try_append","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_append","value":"pub fn try_append<KArg, Item, EncodeLikeItem>(KArg, EncodeLikeItem)\n-> Result<(), ()> where KArg: EncodeLike<Key> + Clone, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageTryAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Try and append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Try and append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397158,"byte_end":397220,"line_start":317,"line_end":317,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397222,"byte_end":397225,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ Is only available if `Value` of the storage implements [`StorageTryAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397227,"byte_end":397307,"line_start":319,"line_end":319,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398204,"byte_end":398222,"line_start":345,"line_end":345,"column_start":9,"column_end":27},"name":"initialize_counter","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::initialize_counter","value":"pub fn initialize_counter() -> u32","parent":null,"children":[],"decl_id":null,"docs":" Initialize the counter with the actual number of items in the map.","sig":null,"attributes":[{"value":"/ Initialize the counter with the actual number of items in the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397894,"byte_end":397964,"line_start":339,"line_end":339,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397966,"byte_end":397969,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ This function iterates through all the items in the map and sets the counter. This operation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":397971,"byte_end":398067,"line_start":341,"line_end":341,"column_start":2,"column_end":98}},{"value":"/ can be very heavy, so use with caution.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398069,"byte_end":398112,"line_start":342,"line_end":342,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398114,"byte_end":398117,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ Returns the number of items in the map which is used to set the counter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398119,"byte_end":398195,"line_start":344,"line_end":344,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398363,"byte_end":398368,"line_start":352,"line_end":352,"column_start":9,"column_end":14},"name":"count","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::count","value":"pub fn count() -> u32","parent":null,"children":[],"decl_id":null,"docs":" Return the count.\n","sig":null,"attributes":[{"value":"/ Return the count.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398333,"byte_end":398354,"line_start":351,"line_end":351,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398975,"byte_end":398979,"line_start":371,"line_end":371,"column_start":9,"column_end":13},"name":"iter","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter","value":"pub fn iter()\n->\n    crate::storage::PrefixIterator<(Key, Value),\n    OnRemovalCounterUpdate<Prefix>>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398826,"byte_end":398887,"line_start":368,"line_end":368,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398889,"byte_end":398892,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398894,"byte_end":398966,"line_start":370,"line_end":370,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399309,"byte_end":399314,"line_start":378,"line_end":378,"column_start":9,"column_end":14},"name":"drain","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::drain","value":"pub fn drain()\n->\n    crate::storage::PrefixIterator<(Key, Value),\n    OnRemovalCounterUpdate<Prefix>>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399126,"byte_end":399211,"line_start":375,"line_end":375,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399213,"byte_end":399216,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399218,"byte_end":399300,"line_start":377,"line_end":377,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399742,"byte_end":399751,"line_start":387,"line_end":387,"column_start":9,"column_end":18},"name":"translate","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399462,"byte_end":399556,"line_start":382,"line_end":382,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399558,"byte_end":399561,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399563,"byte_end":399642,"line_start":384,"line_end":384,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399644,"byte_end":399647,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":399649,"byte_end":399733,"line_start":386,"line_end":386,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400209,"byte_end":400218,"line_start":401,"line_end":401,"column_start":9,"column_end":18},"name":"iter_from","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_from","value":"pub fn iter_from(Vec<u8>)\n->\n    crate::storage::PrefixIterator<(Key, Value),\n    OnRemovalCounterUpdate<Prefix>>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the counted map after a specified `starting_raw_key` in no\n particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the counted map after a specified `starting_raw_key` in no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400010,"byte_end":400098,"line_start":397,"line_end":397,"column_start":2,"column_end":90}},{"value":"/ particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400100,"byte_end":400121,"line_start":398,"line_end":398,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400123,"byte_end":400126,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400128,"byte_end":400200,"line_start":400,"line_end":400,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400547,"byte_end":400556,"line_start":410,"line_end":410,"column_start":9,"column_end":18},"name":"iter_keys","qualname":"<CountedStorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_keys","value":"pub fn iter_keys() -> crate::storage::KeyPrefixIterator<Key>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys in the counted map.","sig":null,"attributes":[{"value":"/ Enumerate all keys in the counted map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400417,"byte_end":400459,"line_start":407,"line_end":407,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400461,"byte_end":400464,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400466,"byte_end":400538,"line_start":409,"line_end":409,"column_start":2,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":419190,"byte_end":419206,"line_start":49,"line_end":49,"column_start":12,"column_end":28},"name":"StorageDoubleMap","qualname":"::storage::types::double_map::StorageDoubleMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow\n to iterate and remove value associated to first key.","sig":null,"attributes":[{"value":"/ A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418572,"byte_end":418670,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ to iterate and remove value associated to first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418671,"byte_end":418727,"line_start":34,"line_end":34,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418728,"byte_end":418731,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418732,"byte_end":418760,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418761,"byte_end":418777,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix())","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418778,"byte_end":418814,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/ \t\t++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418815,"byte_end":418855,"line_start":39,"line_end":39,"column_start":1,"column_end":41}},{"value":"/ \t\t++ Hasher1(encode(key1))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418856,"byte_end":418886,"line_start":40,"line_end":40,"column_start":1,"column_end":31}},{"value":"/ \t\t++ Hasher2(encode(key2))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418887,"byte_end":418917,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418918,"byte_end":418925,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418926,"byte_end":418929,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418930,"byte_end":418943,"line_start":44,"line_end":44,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418944,"byte_end":418947,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If the key1s (or key2s) are not trusted (e.g. can be set by a user), a cryptographic `hasher`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":418948,"byte_end":419045,"line_start":46,"line_end":46,"column_start":1,"column_end":98}},{"value":"/ such as `blake2_128_concat` must be used for Hasher1 (resp. Hasher2). Otherwise, other values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":419046,"byte_end":419143,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ in storage can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":419144,"byte_end":419178,"line_start":48,"line_end":48,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":421774,"byte_end":421788,"line_start":140,"line_end":140,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::hashed_key_for","value":"pub fn hashed_key_for<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":421687,"byte_end":421765,"line_start":139,"line_end":139,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2033},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422051,"byte_end":422063,"line_start":149,"line_end":149,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::contains_key","value":"pub fn contains_key<KArg1, KArg2>(KArg1, KArg2) -> bool where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":421993,"byte_end":422042,"line_start":148,"line_end":148,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422341,"byte_end":422344,"line_start":158,"line_end":158,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::get","value":"pub fn get<KArg1, KArg2>(KArg1, KArg2) -> QueryKind::Query where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422263,"byte_end":422332,"line_start":157,"line_end":157,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422670,"byte_end":422677,"line_start":169,"line_end":169,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::try_get","value":"pub fn try_get<KArg1, KArg2>(KArg1, KArg2) -> Result<Value, ()> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the double map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422547,"byte_end":422610,"line_start":166,"line_end":166,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422612,"byte_end":422615,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422617,"byte_end":422661,"line_start":168,"line_end":168,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422948,"byte_end":422952,"line_start":178,"line_end":178,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::take","value":"pub fn take<KArg1, KArg2>(KArg1, KArg2) -> QueryKind::Query where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":422885,"byte_end":422939,"line_start":177,"line_end":177,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423202,"byte_end":423206,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"swap","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::swap","value":"pub fn swap<XKArg1, XKArg2, YKArg1, YKArg2>(XKArg1, XKArg2, YKArg1, YKArg2)\nwhere XKArg1: EncodeLike<Key1>, XKArg2: EncodeLike<Key2>,\nYKArg1: EncodeLike<Key1>, YKArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423156,"byte_end":423193,"line_start":186,"line_end":186,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423611,"byte_end":423617,"line_start":202,"line_end":202,"column_start":9,"column_end":15},"name":"insert","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::insert","value":"pub fn insert<KArg1, KArg2, VArg>(KArg1, KArg2, VArg) where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>, VArg: EncodeLike<Value>","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423527,"byte_end":423602,"line_start":201,"line_end":201,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423903,"byte_end":423909,"line_start":212,"line_end":212,"column_start":9,"column_end":15},"name":"remove","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::remove","value":"pub fn remove<KArg1, KArg2>(KArg1, KArg2) where KArg1: EncodeLike<Key1>,\nKArg2: EncodeLike<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":423852,"byte_end":423894,"line_start":211,"line_end":211,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424146,"byte_end":424159,"line_start":221,"line_end":221,"column_start":9,"column_end":22},"name":"remove_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::remove_prefix","value":"pub fn remove_prefix<KArg1>(KArg1, Option<u32>) -> sp_io::KillStorageResult\nwhere KArg1: ?Sized + EncodeLike<Key1>","parent":null,"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424095,"byte_end":424137,"line_start":220,"line_end":220,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424425,"byte_end":424443,"line_start":229,"line_end":229,"column_start":9,"column_end":27},"name":"iter_prefix_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_prefix_values","value":"pub fn iter_prefix_values<KArg1>(KArg1)\n-> crate::storage::PrefixIterator<Value> where KArg1: ?Sized +\nEncodeLike<Key1>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424367,"byte_end":424416,"line_start":228,"line_end":228,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424693,"byte_end":424699,"line_start":237,"line_end":237,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::mutate","value":"pub fn mutate<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut QueryKind::Query) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424642,"byte_end":424684,"line_start":236,"line_end":236,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425027,"byte_end":425037,"line_start":247,"line_end":247,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::try_mutate","value":"pub fn try_mutate<KArg1, KArg2, R, E, F>(KArg1, KArg2, F) -> Result<R, E>\nwhere KArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut QueryKind::Query) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":424946,"byte_end":425018,"line_start":246,"line_end":246,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425405,"byte_end":425418,"line_start":257,"line_end":257,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::mutate_exists","value":"pub fn mutate_exists<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut Option<Value>) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425313,"byte_end":425396,"line_start":256,"line_end":256,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425957,"byte_end":425974,"line_start":269,"line_end":269,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::try_mutate_exists","value":"pub fn try_mutate_exists<KArg1, KArg2, R, E, F>(KArg1, KArg2, F)\n-> Result<R, E> where KArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>,\nF: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425669,"byte_end":425765,"line_start":266,"line_end":266,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425767,"byte_end":425863,"line_start":267,"line_end":267,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":425865,"byte_end":425948,"line_start":268,"line_end":268,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426590,"byte_end":426596,"line_start":287,"line_end":287,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::append","value":"pub fn append<Item, EncodeLikeItem, KArg1,\nKArg2>(KArg1, KArg2, EncodeLikeItem) where KArg1: EncodeLike<Key1>,\nKArg2: EncodeLike<Key2>, Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nValue: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426254,"byte_end":426308,"line_start":278,"line_end":278,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426310,"byte_end":426313,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426315,"byte_end":426370,"line_start":280,"line_end":280,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426372,"byte_end":426375,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426377,"byte_end":426390,"line_start":282,"line_end":282,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426392,"byte_end":426395,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426397,"byte_end":426477,"line_start":284,"line_end":284,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426479,"byte_end":426562,"line_start":285,"line_end":285,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426564,"byte_end":426581,"line_start":286,"line_end":286,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427389,"byte_end":427399,"line_start":310,"line_end":310,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::decode_len","value":"pub fn decode_len<KArg1, KArg2>(KArg1, KArg2) -> Option<usize> where\nKArg1: EncodeLike<Key1>, KArg2: EncodeLike<Key2>, Value: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":426914,"byte_end":426998,"line_start":298,"line_end":298,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427000,"byte_end":427028,"line_start":299,"line_end":299,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427030,"byte_end":427033,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427035,"byte_end":427096,"line_start":301,"line_end":301,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427098,"byte_end":427101,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427103,"byte_end":427189,"line_start":303,"line_end":303,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427191,"byte_end":427229,"line_start":304,"line_end":304,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427231,"byte_end":427234,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427236,"byte_end":427249,"line_start":306,"line_end":306,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427251,"byte_end":427254,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427256,"byte_end":427349,"line_start":308,"line_end":308,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427351,"byte_end":427380,"line_start":309,"line_end":309,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427871,"byte_end":427883,"line_start":323,"line_end":323,"column_start":9,"column_end":21},"name":"migrate_keys","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::migrate_keys","value":"pub fn migrate_keys<OldHasher1: crate::StorageHasher,\nOldHasher2: crate::StorageHasher, KeyArg1: EncodeLike<Key1>,\nKeyArg2: EncodeLike<Key2>>(KeyArg1, KeyArg2) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427644,"byte_end":427726,"line_start":319,"line_end":319,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427728,"byte_end":427768,"line_start":320,"line_end":320,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427770,"byte_end":427773,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":427775,"byte_end":427862,"line_start":322,"line_end":322,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428541,"byte_end":428551,"line_start":345,"line_end":345,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::remove_all","value":"pub fn remove_all(Option<u32>) -> sp_io::KillStorageResult","parent":null,"children":[],"decl_id":null,"docs":" Remove all values of the storage in the overlay and up to `limit` in the backend.","sig":null,"attributes":[{"value":"/ Remove all values of the storage in the overlay and up to `limit` in the backend.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428219,"byte_end":428304,"line_start":340,"line_end":340,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428306,"byte_end":428309,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ All values in the client overlay will be deleted, if there is some `limit` then up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428311,"byte_end":428400,"line_start":342,"line_end":342,"column_start":2,"column_end":91}},{"value":"/ `limit` values are deleted from the client backend, if `limit` is none then all values in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428402,"byte_end":428495,"line_start":343,"line_end":343,"column_start":2,"column_end":95}},{"value":"/ the client backend are deleted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428497,"byte_end":428532,"line_start":344,"line_end":344,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428821,"byte_end":428832,"line_start":352,"line_end":352,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_values","value":"pub fn iter_values() -> crate::storage::PrefixIterator<Value>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428680,"byte_end":428719,"line_start":349,"line_end":349,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428721,"byte_end":428724,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428726,"byte_end":428812,"line_start":351,"line_end":351,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429536,"byte_end":429552,"line_start":369,"line_end":369,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\nOption<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":428952,"byte_end":429046,"line_start":356,"line_end":356,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429048,"byte_end":429127,"line_start":357,"line_end":357,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429129,"byte_end":429132,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429134,"byte_end":429218,"line_start":359,"line_end":359,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429220,"byte_end":429223,"line_start":360,"line_end":360,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429225,"byte_end":429238,"line_start":361,"line_end":361,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429240,"byte_end":429243,"line_start":362,"line_end":362,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429245,"byte_end":429338,"line_start":363,"line_end":363,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429340,"byte_end":429412,"line_start":364,"line_end":364,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429414,"byte_end":429417,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429419,"byte_end":429430,"line_start":366,"line_end":366,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429432,"byte_end":429435,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429437,"byte_end":429527,"line_start":368,"line_end":368,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429854,"byte_end":429864,"line_start":376,"line_end":376,"column_start":9,"column_end":19},"name":"try_append","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::try_append","value":"pub fn try_append<KArg1, KArg2, Item,\nEncodeLikeItem>(KArg1, KArg2, EncodeLikeItem) -> Result<(), ()> where\nKArg1: EncodeLike<Key1> + Clone, KArg2: EncodeLike<Key2> + Clone,\nItem: Encode, EncodeLikeItem: EncodeLike<Item>, Value: StorageTryAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Try and append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Try and append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429696,"byte_end":429758,"line_start":373,"line_end":373,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429760,"byte_end":429763,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ Is only available if `Value` of the storage implements [`StorageTryAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":429765,"byte_end":429845,"line_start":375,"line_end":375,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430998,"byte_end":431009,"line_start":411,"line_end":411,"column_start":9,"column_end":20},"name":"iter_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_prefix","value":"pub fn iter_prefix<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>)\n-> crate::storage::PrefixIterator<(Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430782,"byte_end":430863,"line_start":407,"line_end":407,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430865,"byte_end":430868,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose first key is `k1` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430870,"byte_end":430965,"line_start":409,"line_end":409,"column_start":2,"column_end":97}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430967,"byte_end":430989,"line_start":410,"line_end":410,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431440,"byte_end":431456,"line_start":420,"line_end":420,"column_start":9,"column_end":25},"name":"iter_prefix_from","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_prefix_from","value":"pub fn iter_prefix_from<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>,\nVec<u8>) -> crate::storage::PrefixIterator<(Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` after a specified `starting_raw_key`\n in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` after a specified `starting_raw_key`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431182,"byte_end":431276,"line_start":415,"line_end":415,"column_start":2,"column_end":96}},{"value":"/ in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431278,"byte_end":431305,"line_start":416,"line_end":416,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431307,"byte_end":431310,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose first key is `k1` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431312,"byte_end":431407,"line_start":418,"line_end":418,"column_start":2,"column_end":97}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431409,"byte_end":431431,"line_start":419,"line_end":419,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431936,"byte_end":431951,"line_start":435,"line_end":435,"column_start":9,"column_end":24},"name":"iter_key_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_key_prefix","value":"pub fn iter_key_prefix<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>)\n-> crate::storage::KeyPrefixIterator<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all second keys `k2` in the map with the same first key `k1` in no particular\n order.","sig":null,"attributes":[{"value":"/ Enumerate all second keys `k2` in the map with the same first key `k1` in no particular","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431698,"byte_end":431789,"line_start":430,"line_end":430,"column_start":2,"column_end":93}},{"value":"/ order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431791,"byte_end":431801,"line_start":431,"line_end":431,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431803,"byte_end":431806,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose first key is `k1` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431808,"byte_end":431903,"line_start":433,"line_end":433,"column_start":2,"column_end":97}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":431905,"byte_end":431927,"line_start":434,"line_end":434,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432397,"byte_end":432417,"line_start":444,"line_end":444,"column_start":9,"column_end":29},"name":"iter_key_prefix_from","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_key_prefix_from","value":"pub fn iter_key_prefix_from<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>,\nVec<u8>) -> crate::storage::KeyPrefixIterator<Key2>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all second keys `k2` in the map with the same first key `k1` after a specified\n `starting_raw_key` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all second keys `k2` in the map with the same first key `k1` after a specified","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432122,"byte_end":432214,"line_start":439,"line_end":439,"column_start":2,"column_end":94}},{"value":"/ `starting_raw_key` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432216,"byte_end":432262,"line_start":440,"line_end":440,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432264,"byte_end":432267,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose first key is `k1` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432269,"byte_end":432364,"line_start":442,"line_end":442,"column_start":2,"column_end":97}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432366,"byte_end":432388,"line_start":443,"line_end":443,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432890,"byte_end":432902,"line_start":459,"line_end":459,"column_start":9,"column_end":21},"name":"drain_prefix","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::drain_prefix","value":"pub fn drain_prefix<impl EncodeLike<Key1>: EncodeLike<Key1>>(impl EncodeLike<Key1>)\n-> crate::storage::PrefixIterator<(Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in no\n particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432657,"byte_end":432744,"line_start":454,"line_end":454,"column_start":2,"column_end":89}},{"value":"/ particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432746,"byte_end":432767,"line_start":455,"line_end":455,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432769,"byte_end":432772,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ If you add elements with first key `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432774,"byte_end":432867,"line_start":457,"line_end":457,"column_start":2,"column_end":95}},{"value":"/ results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":432869,"byte_end":432881,"line_start":458,"line_end":458,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433249,"byte_end":433253,"line_start":468,"line_end":468,"column_start":9,"column_end":13},"name":"iter","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter","value":"pub fn iter() -> crate::storage::PrefixIterator<(Key1, Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433082,"byte_end":433143,"line_start":465,"line_end":465,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433145,"byte_end":433148,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433150,"byte_end":433240,"line_start":467,"line_end":467,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433607,"byte_end":433616,"line_start":476,"line_end":476,"column_start":9,"column_end":18},"name":"iter_from","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_from","value":"pub fn iter_from(Vec<u8>)\n-> crate::storage::PrefixIterator<(Key1, Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_raw_key` in no particular\n order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_raw_key` in no particular","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433398,"byte_end":433489,"line_start":472,"line_end":472,"column_start":2,"column_end":93}},{"value":"/ order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433491,"byte_end":433501,"line_start":473,"line_end":473,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433503,"byte_end":433506,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433508,"byte_end":433598,"line_start":475,"line_end":475,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433998,"byte_end":434007,"line_start":487,"line_end":487,"column_start":9,"column_end":18},"name":"iter_keys","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_keys","value":"pub fn iter_keys() -> crate::storage::KeyPrefixIterator<(Key1, Key2)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys `k1` and `k2` in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all keys `k1` and `k2` in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433821,"byte_end":433892,"line_start":484,"line_end":484,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433894,"byte_end":433897,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":433899,"byte_end":433989,"line_start":486,"line_end":486,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434372,"byte_end":434386,"line_start":495,"line_end":495,"column_start":9,"column_end":23},"name":"iter_keys_from","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>)\n-> crate::storage::KeyPrefixIterator<(Key1, Key2)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys `k1` and `k2` in the map after a specified `starting_raw_key` in no\n particular order.","sig":null,"attributes":[{"value":"/ Enumerate all keys `k1` and `k2` in the map after a specified `starting_raw_key` in no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434153,"byte_end":434243,"line_start":491,"line_end":491,"column_start":2,"column_end":92}},{"value":"/ particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434245,"byte_end":434266,"line_start":492,"line_end":492,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434268,"byte_end":434271,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434273,"byte_end":434363,"line_start":494,"line_end":494,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434775,"byte_end":434780,"line_start":506,"line_end":506,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::drain","value":"pub fn drain() -> crate::storage::PrefixIterator<(Key1, Key2, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434592,"byte_end":434677,"line_start":503,"line_end":503,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434679,"byte_end":434682,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434684,"byte_end":434766,"line_start":505,"line_end":505,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435206,"byte_end":435215,"line_start":515,"line_end":515,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageDoubleMap<Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind,\nOnEmpty, MaxValues>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key1, Key2, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":434926,"byte_end":435020,"line_start":510,"line_end":510,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435022,"byte_end":435025,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435027,"byte_end":435106,"line_start":512,"line_end":512,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435108,"byte_end":435111,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435113,"byte_end":435197,"line_start":514,"line_end":514,"column_start":2,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446729,"byte_end":446732,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"Key","qualname":"::storage::types::key::Key","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type used exclusively by storage maps as their key type.","sig":null,"attributes":[{"value":"/ A type used exclusively by storage maps as their key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446467,"byte_end":446529,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446530,"byte_end":446533,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The final key generated has the following form:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446534,"byte_end":446585,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446586,"byte_end":446602,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/ Hasher1(encode(key1))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446603,"byte_end":446628,"line_start":30,"line_end":30,"column_start":1,"column_end":26}},{"value":"/     ++ Hasher2(encode(key2))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446629,"byte_end":446661,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/     ++ ...","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446662,"byte_end":446676,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/     ++ HasherN(encode(keyN))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446677,"byte_end":446709,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446710,"byte_end":446717,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446873,"byte_end":446885,"line_start":38,"line_end":38,"column_start":11,"column_end":23},"name":"KeyGenerator","qualname":"::storage::types::key::KeyGenerator","value":"KeyGenerator","parent":null,"children":[{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2208}],"decl_id":null,"docs":" A trait that contains the current key as an associated type.\n","sig":null,"attributes":[{"value":"/ A trait that contains the current key as an associated type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446798,"byte_end":446862,"line_start":37,"line_end":37,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":2201},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446894,"byte_end":446897,"line_start":39,"line_end":39,"column_start":7,"column_end":10},"name":"Key","qualname":"::storage::types::key::KeyGenerator::Key","value":"type Key: EncodeLike<Self::Key> + StaticTypeInfo;","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2202},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446945,"byte_end":446949,"line_start":40,"line_end":40,"column_start":7,"column_end":11},"name":"KArg","qualname":"::storage::types::key::KeyGenerator::KArg","value":"type KArg: Encode;","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2203},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":446965,"byte_end":446971,"line_start":41,"line_end":41,"column_start":7,"column_end":13},"name":"HashFn","qualname":"::storage::types::key::KeyGenerator::HashFn","value":"type HashFn: FnOnce(&[u8]) -> Vec<u8>;","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2204},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447005,"byte_end":447009,"line_start":42,"line_end":42,"column_start":7,"column_end":11},"name":"HArg","qualname":"::storage::types::key::KeyGenerator::HArg","value":"type HArg;","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2205},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447019,"byte_end":447034,"line_start":44,"line_end":44,"column_start":8,"column_end":23},"name":"HASHER_METADATA","qualname":"::storage::types::key::KeyGenerator::HASHER_METADATA","value":"&'static [crate::metadata::StorageHasher]","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447248,"byte_end":447257,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"final_key","qualname":"::storage::types::key::KeyGenerator::final_key","value":"pub fn final_key<KArg: EncodeLikeTuple<Self::KArg> + TupleToEncodedIter>(KArg)\n-> Vec<u8>","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" Given a `key` tuple, calculate the final key by encoding each element individually and\n hashing them using the corresponding hasher in the `KeyGenerator`.\n","sig":null,"attributes":[{"value":"/ Given a `key` tuple, calculate the final key by encoding each element individually and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447081,"byte_end":447171,"line_start":46,"line_end":46,"column_start":2,"column_end":92}},{"value":"/ hashing them using the corresponding hasher in the `KeyGenerator`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447173,"byte_end":447243,"line_start":47,"line_end":47,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447503,"byte_end":447514,"line_start":51,"line_end":51,"column_start":5,"column_end":16},"name":"migrate_key","qualname":"::storage::types::key::KeyGenerator::migrate_key","value":"pub fn migrate_key<KArg: EncodeLikeTuple<Self::KArg> +\nTupleToEncodedIter>(&KArg, Self::HArg) -> Vec<u8>","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" Given a `key` tuple, migrate the keys from using the old hashers as given by `hash_fns`\n to using the newer hashers as specified by this `KeyGenerator`.\n","sig":null,"attributes":[{"value":"/ Given a `key` tuple, migrate the keys from using the old hashers as given by `hash_fns`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447338,"byte_end":447429,"line_start":49,"line_end":49,"column_start":2,"column_end":93}},{"value":"/ to using the newer hashers as specified by this `KeyGenerator`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447431,"byte_end":447498,"line_start":50,"line_end":50,"column_start":2,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447689,"byte_end":447714,"line_start":58,"line_end":58,"column_start":11,"column_end":36},"name":"KeyGeneratorMaxEncodedLen","qualname":"::storage::types::key::KeyGeneratorMaxEncodedLen","value":"KeyGeneratorMaxEncodedLen: KeyGenerator","parent":null,"children":[{"krate":0,"index":2211}],"decl_id":null,"docs":" The maximum length used by the key in storage.\n","sig":null,"attributes":[{"value":"/ The maximum length used by the key in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447628,"byte_end":447678,"line_start":57,"line_end":57,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447735,"byte_end":447754,"line_start":59,"line_end":59,"column_start":5,"column_end":24},"name":"key_max_encoded_len","qualname":"::storage::types::key::KeyGeneratorMaxEncodedLen::key_max_encoded_len","value":"pub fn key_max_encoded_len() -> usize","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2212},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447888,"byte_end":447905,"line_start":64,"line_end":64,"column_start":11,"column_end":28},"name":"KeyGeneratorInner","qualname":"::storage::types::key::KeyGeneratorInner","value":"KeyGeneratorInner: KeyGenerator","parent":null,"children":[{"krate":0,"index":2213},{"krate":0,"index":2214}],"decl_id":null,"docs":" A trait containing methods that are only implemented on the Key struct instead of the entire\n tuple.\n","sig":null,"attributes":[{"value":"/ A trait containing methods that are only implemented on the Key struct instead of the entire","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447770,"byte_end":447866,"line_start":62,"line_end":62,"column_start":1,"column_end":97}},{"value":"/ tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447867,"byte_end":447877,"line_start":63,"line_end":63,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":2213},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447928,"byte_end":447934,"line_start":65,"line_end":65,"column_start":7,"column_end":13},"name":"Hasher","qualname":"::storage::types::key::KeyGeneratorInner::Hasher","value":"type Hasher: StorageHasher;","parent":{"krate":0,"index":2212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":448050,"byte_end":448060,"line_start":68,"line_end":68,"column_start":5,"column_end":15},"name":"final_hash","qualname":"::storage::types::key::KeyGeneratorInner::final_hash","value":"pub fn final_hash(&[u8]) -> Vec<u8>","parent":{"krate":0,"index":2212},"children":[],"decl_id":null,"docs":" Hash a given `encoded` byte slice using the `KeyGenerator`'s associated `StorageHasher`.\n","sig":null,"attributes":[{"value":"/ Hash a given `encoded` byte slice using the `KeyGenerator`'s associated `StorageHasher`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447953,"byte_end":448045,"line_start":67,"line_end":67,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":2236},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450917,"byte_end":450932,"line_start":166,"line_end":166,"column_start":11,"column_end":26},"name":"EncodeLikeTuple","qualname":"::storage::types::key::EncodeLikeTuple","value":"EncodeLikeTuple<T>: crate::storage::private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to indicate that each element in the tuple encodes like the corresponding element\n in another tuple.","sig":null,"attributes":[{"value":"/ Marker trait to indicate that each element in the tuple encodes like the corresponding element","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450756,"byte_end":450854,"line_start":162,"line_end":162,"column_start":1,"column_end":99}},{"value":"/ in another tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450855,"byte_end":450876,"line_start":163,"line_end":163,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450877,"byte_end":450880,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450881,"byte_end":450906,"line_start":165,"line_end":165,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452361,"byte_end":452379,"line_start":200,"line_end":200,"column_start":11,"column_end":29},"name":"TupleToEncodedIter","qualname":"::storage::types::key::TupleToEncodedIter","value":"TupleToEncodedIter","parent":null,"children":[{"krate":0,"index":2240}],"decl_id":null,"docs":" Trait to indicate that a tuple can be converted into an iterator of a vector of encoded bytes.\n","sig":null,"attributes":[{"value":"/ Trait to indicate that a tuple can be converted into an iterator of a vector of encoded bytes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452252,"byte_end":452350,"line_start":199,"line_end":199,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452386,"byte_end":452401,"line_start":201,"line_end":201,"column_start":5,"column_end":20},"name":"to_encoded_iter","qualname":"::storage::types::key::TupleToEncodedIter::to_encoded_iter","value":"pub fn to_encoded_iter(&Self) -> sp_std::vec::IntoIter<Vec<u8>>","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452953,"byte_end":452975,"line_start":219,"line_end":219,"column_start":11,"column_end":33},"name":"ReversibleKeyGenerator","qualname":"::storage::types::key::ReversibleKeyGenerator","value":"ReversibleKeyGenerator: KeyGenerator","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2246}],"decl_id":null,"docs":" A trait that indicates the hashers for the keys generated are all reversible.\n","sig":null,"attributes":[{"value":"/ A trait that indicates the hashers for the keys generated are all reversible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452861,"byte_end":452942,"line_start":218,"line_end":218,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":2245},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452998,"byte_end":453014,"line_start":220,"line_end":220,"column_start":7,"column_end":23},"name":"ReversibleHasher","qualname":"::storage::types::key::ReversibleKeyGenerator::ReversibleHasher","value":"type ReversibleHasher;","parent":{"krate":0,"index":2244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":453020,"byte_end":453036,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"decode_final_key","qualname":"::storage::types::key::ReversibleKeyGenerator::decode_final_key","value":"pub fn decode_final_key(&[u8]) -> Result<(Self::Key, &[u8]), codec::Error>","parent":{"krate":0,"index":2244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2252},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454155,"byte_end":454167,"line_start":257,"line_end":257,"column_start":11,"column_end":23},"name":"HasKeyPrefix","qualname":"::storage::types::key::HasKeyPrefix","value":"HasKeyPrefix<P>: KeyGenerator","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2255}],"decl_id":null,"docs":" Trait indicating whether a KeyGenerator has the prefix P.\n","sig":null,"attributes":[{"value":"/ Trait indicating whether a KeyGenerator has the prefix P.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454083,"byte_end":454144,"line_start":256,"line_end":256,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":2254},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454193,"byte_end":454199,"line_start":258,"line_end":258,"column_start":7,"column_end":13},"name":"Suffix","qualname":"::storage::types::key::HasKeyPrefix::Suffix","value":"type Suffix;","parent":{"krate":0,"index":2252},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454206,"byte_end":454217,"line_start":260,"line_end":260,"column_start":5,"column_end":16},"name":"partial_key","qualname":"::storage::types::key::HasKeyPrefix::partial_key","value":"pub fn partial_key(P) -> Vec<u8>","parent":{"krate":0,"index":2252},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2256},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454326,"byte_end":454348,"line_start":264,"line_end":264,"column_start":11,"column_end":33},"name":"HasReversibleKeyPrefix","qualname":"::storage::types::key::HasReversibleKeyPrefix","value":"HasReversibleKeyPrefix<P>: ReversibleKeyGenerator + HasKeyPrefix<P>","parent":null,"children":[{"krate":0,"index":2258}],"decl_id":null,"docs":" Trait indicating whether a ReversibleKeyGenerator has the prefix P.\n","sig":null,"attributes":[{"value":"/ Trait indicating whether a ReversibleKeyGenerator has the prefix P.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454244,"byte_end":454315,"line_start":263,"line_end":263,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454400,"byte_end":454418,"line_start":265,"line_end":265,"column_start":5,"column_end":23},"name":"decode_partial_key","qualname":"::storage::types::key::HasReversibleKeyPrefix::decode_partial_key","value":"pub fn decode_partial_key(&[u8]) -> Result<Self::Suffix, codec::Error>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456262,"byte_end":456272,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"StorageMap","qualname":"::storage::types::map::StorageMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store value for given key. Allowing to insert/remove/iterate on values.","sig":null,"attributes":[{"value":"/ A type that allow to store value for given key. Allowing to insert/remove/iterate on values.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455778,"byte_end":455874,"line_start":33,"line_end":33,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455875,"byte_end":455878,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455879,"byte_end":455907,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455908,"byte_end":455924,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix())","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455925,"byte_end":455961,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/ \t\t++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":455962,"byte_end":456002,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ \t\t++ Hasher1(encode(key))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456003,"byte_end":456032,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456033,"byte_end":456040,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456041,"byte_end":456044,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456045,"byte_end":456058,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456059,"byte_end":456062,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456063,"byte_end":456156,"line_start":44,"line_end":44,"column_start":1,"column_end":94}},{"value":"/ `blake2_128_concat` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456157,"byte_end":456250,"line_start":45,"line_end":45,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458417,"byte_end":458431,"line_start":115,"line_end":115,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<Key>>(KeyArg) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458330,"byte_end":458408,"line_start":114,"line_end":114,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2368},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458618,"byte_end":458630,"line_start":120,"line_end":120,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<Key>>(KeyArg) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458560,"byte_end":458609,"line_start":119,"line_end":119,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458825,"byte_end":458828,"line_start":125,"line_end":125,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::get","value":"pub fn get<KeyArg: EncodeLike<Key>>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458754,"byte_end":458816,"line_start":124,"line_end":124,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2372},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459071,"byte_end":459078,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_get","value":"pub fn try_get<KeyArg: EncodeLike<Key>>(KeyArg) -> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458955,"byte_end":459011,"line_start":129,"line_end":129,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459013,"byte_end":459016,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459018,"byte_end":459062,"line_start":131,"line_end":131,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2374},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459251,"byte_end":459255,"line_start":137,"line_end":137,"column_start":9,"column_end":13},"name":"swap","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::swap","value":"pub fn swap<KeyArg1: EncodeLike<Key>,\nKeyArg2: EncodeLike<Key>>(KeyArg1, KeyArg2)","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459210,"byte_end":459242,"line_start":136,"line_end":136,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459490,"byte_end":459496,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"name":"insert","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::insert","value":"pub fn insert<KeyArg: EncodeLike<Key>,\nValArg: EncodeLike<Value>>(KeyArg, ValArg)","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459414,"byte_end":459481,"line_start":141,"line_end":141,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459693,"byte_end":459699,"line_start":147,"line_end":147,"column_start":9,"column_end":15},"name":"remove","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove","value":"pub fn remove<KeyArg: EncodeLike<Key>>(KeyArg)","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459651,"byte_end":459684,"line_start":146,"line_end":146,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459851,"byte_end":459857,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate","value":"pub fn mutate<KeyArg: EncodeLike<Key>, R, F: FnOnce(&mut QueryKind::Query) ->\nR>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":459809,"byte_end":459842,"line_start":151,"line_end":151,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460095,"byte_end":460105,"line_start":160,"line_end":160,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate","value":"pub fn try_mutate<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key>, F: FnOnce(&mut QueryKind::Query) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460031,"byte_end":460086,"line_start":159,"line_end":159,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460406,"byte_end":460419,"line_start":169,"line_end":169,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<Key>, R, F: FnOnce(&mut Option<Value>)\n-> R>(KeyArg, F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under a key. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460323,"byte_end":460397,"line_start":168,"line_end":168,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460885,"byte_end":460902,"line_start":179,"line_end":179,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg, R, E, F>(KeyArg, F) -> Result<R, E> where\nKeyArg: EncodeLike<Key>, F: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460597,"byte_end":460693,"line_start":176,"line_end":176,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460695,"byte_end":460791,"line_start":177,"line_end":177,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":460793,"byte_end":460876,"line_start":178,"line_end":178,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461164,"byte_end":461168,"line_start":188,"line_end":188,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::take","value":"pub fn take<KeyArg: EncodeLike<Key>>(KeyArg) -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461124,"byte_end":461155,"line_start":187,"line_end":187,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2402},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461637,"byte_end":461643,"line_start":201,"line_end":201,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::append","value":"pub fn append<Item, EncodeLikeItem,\nEncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<Key>, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461296,"byte_end":461351,"line_start":192,"line_end":192,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461353,"byte_end":461356,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461358,"byte_end":461417,"line_start":194,"line_end":194,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461419,"byte_end":461422,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461424,"byte_end":461437,"line_start":196,"line_end":196,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461439,"byte_end":461442,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461444,"byte_end":461524,"line_start":198,"line_end":198,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461526,"byte_end":461609,"line_start":199,"line_end":199,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461611,"byte_end":461628,"line_start":200,"line_end":200,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2406},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462387,"byte_end":462397,"line_start":223,"line_end":223,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<Key>>(KeyArg) -> Option<usize> where\nValue: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":461924,"byte_end":462008,"line_start":211,"line_end":211,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462010,"byte_end":462026,"line_start":212,"line_end":212,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462028,"byte_end":462031,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462033,"byte_end":462094,"line_start":214,"line_end":214,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462096,"byte_end":462099,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462101,"byte_end":462187,"line_start":216,"line_end":216,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462189,"byte_end":462227,"line_start":217,"line_end":217,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462229,"byte_end":462232,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462234,"byte_end":462247,"line_start":219,"line_end":219,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462249,"byte_end":462252,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462254,"byte_end":462347,"line_start":221,"line_end":221,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462349,"byte_end":462378,"line_start":222,"line_end":222,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462759,"byte_end":462770,"line_start":233,"line_end":233,"column_start":9,"column_end":20},"name":"migrate_key","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::migrate_key","value":"pub fn migrate_key<OldHasher: crate::hash::StorageHasher,\nKeyArg: EncodeLike<Key>>(KeyArg) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462566,"byte_end":462656,"line_start":230,"line_end":230,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462658,"byte_end":462661,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462663,"byte_end":462750,"line_start":232,"line_end":232,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463285,"byte_end":463295,"line_start":244,"line_end":244,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove_all","value":"pub fn remove_all(Option<u32>) -> sp_io::KillStorageResult","parent":null,"children":[],"decl_id":null,"docs":" Remove all values of the storage in the overlay and up to `limit` in the backend.","sig":null,"attributes":[{"value":"/ Remove all values of the storage in the overlay and up to `limit` in the backend.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":462963,"byte_end":463048,"line_start":239,"line_end":239,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463050,"byte_end":463053,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ All values in the client overlay will be deleted, if there is some `limit` then up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463055,"byte_end":463144,"line_start":241,"line_end":241,"column_start":2,"column_end":91}},{"value":"/ `limit` values are deleted from the client backend, if `limit` is none then all values in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463146,"byte_end":463239,"line_start":242,"line_end":242,"column_start":2,"column_end":95}},{"value":"/ the client backend are deleted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463241,"byte_end":463276,"line_start":243,"line_end":243,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463565,"byte_end":463576,"line_start":251,"line_end":251,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_values","value":"pub fn iter_values() -> crate::storage::PrefixIterator<Value>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463424,"byte_end":463463,"line_start":248,"line_end":248,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463465,"byte_end":463468,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463470,"byte_end":463556,"line_start":250,"line_end":250,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2413},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464285,"byte_end":464301,"line_start":269,"line_end":269,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\nOption<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463696,"byte_end":463790,"line_start":255,"line_end":255,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463792,"byte_end":463795,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463797,"byte_end":463876,"line_start":257,"line_end":257,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463878,"byte_end":463881,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463883,"byte_end":463967,"line_start":259,"line_end":259,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463969,"byte_end":463972,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463974,"byte_end":463987,"line_start":261,"line_end":261,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463989,"byte_end":463992,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":463994,"byte_end":464087,"line_start":263,"line_end":263,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464089,"byte_end":464161,"line_start":264,"line_end":264,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464163,"byte_end":464166,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464168,"byte_end":464179,"line_start":266,"line_end":266,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464181,"byte_end":464184,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464186,"byte_end":464276,"line_start":268,"line_end":268,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464603,"byte_end":464613,"line_start":276,"line_end":276,"column_start":9,"column_end":19},"name":"try_append","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_append","value":"pub fn try_append<KArg, Item, EncodeLikeItem>(KArg, EncodeLikeItem)\n-> Result<(), ()> where KArg: EncodeLike<Key> + Clone, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageTryAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Try and append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Try and append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464445,"byte_end":464507,"line_start":273,"line_end":273,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464509,"byte_end":464512,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ Is only available if `Value` of the storage implements [`StorageTryAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464514,"byte_end":464594,"line_start":275,"line_end":275,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465451,"byte_end":465455,"line_start":301,"line_end":301,"column_start":9,"column_end":13},"name":"iter","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter","value":"pub fn iter() -> crate::storage::PrefixIterator<(Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465302,"byte_end":465363,"line_start":298,"line_end":298,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465365,"byte_end":465368,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465370,"byte_end":465442,"line_start":300,"line_end":300,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465771,"byte_end":465780,"line_start":309,"line_end":309,"column_start":9,"column_end":18},"name":"iter_from","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_from","value":"pub fn iter_from(Vec<u8>) -> crate::storage::PrefixIterator<(Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_raw_key` in no\n particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_raw_key` in no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465580,"byte_end":465660,"line_start":305,"line_end":305,"column_start":2,"column_end":82}},{"value":"/ particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465662,"byte_end":465683,"line_start":306,"line_end":306,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465685,"byte_end":465688,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465690,"byte_end":465762,"line_start":308,"line_end":308,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466096,"byte_end":466105,"line_start":316,"line_end":316,"column_start":9,"column_end":18},"name":"iter_keys","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_keys","value":"pub fn iter_keys() -> crate::storage::KeyPrefixIterator<Key>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":465951,"byte_end":466008,"line_start":313,"line_end":313,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466010,"byte_end":466013,"line_start":314,"line_end":314,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466015,"byte_end":466087,"line_start":315,"line_end":315,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466416,"byte_end":466430,"line_start":324,"line_end":324,"column_start":9,"column_end":23},"name":"iter_keys_from","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>) -> crate::storage::KeyPrefixIterator<Key>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys in the map after a specified `starting_raw_key` in no particular\n order.","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map after a specified `starting_raw_key` in no particular","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466229,"byte_end":466316,"line_start":320,"line_end":320,"column_start":2,"column_end":89}},{"value":"/ order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466318,"byte_end":466328,"line_start":321,"line_end":321,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466330,"byte_end":466333,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466335,"byte_end":466407,"line_start":323,"line_end":323,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466783,"byte_end":466788,"line_start":331,"line_end":331,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::drain","value":"pub fn drain() -> crate::storage::PrefixIterator<(Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466600,"byte_end":466685,"line_start":328,"line_end":328,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466687,"byte_end":466690,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466692,"byte_end":466774,"line_start":330,"line_end":330,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467194,"byte_end":467203,"line_start":340,"line_end":340,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageMap<Prefix, Hasher, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":466914,"byte_end":467008,"line_start":335,"line_end":335,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467010,"byte_end":467013,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467015,"byte_end":467094,"line_start":337,"line_end":337,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467096,"byte_end":467099,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467101,"byte_end":467185,"line_start":339,"line_end":339,"column_start":2,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2543},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477680,"byte_end":477691,"line_start":54,"line_end":54,"column_start":12,"column_end":23},"name":"StorageNMap","qualname":"::storage::types::nmap::StorageNMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store values for an arbitrary number of keys in the form of\n `(Key<Hasher1, key1>, Key<Hasher2, key2>, ..., Key<HasherN, keyN>)`.","sig":null,"attributes":[{"value":"/ A type that allow to store values for an arbitrary number of keys in the form of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477038,"byte_end":477122,"line_start":36,"line_end":36,"column_start":1,"column_end":85}},{"value":"/ `(Key<Hasher1, key1>, Key<Hasher2, key2>, ..., Key<HasherN, keyN>)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477123,"byte_end":477195,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477196,"byte_end":477199,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477200,"byte_end":477228,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477229,"byte_end":477245,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix())","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477246,"byte_end":477282,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/ \t\t++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477283,"byte_end":477323,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ \t\t++ Hasher1(encode(key1))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477324,"byte_end":477354,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/ \t\t++ Hasher2(encode(key2))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477355,"byte_end":477385,"line_start":44,"line_end":44,"column_start":1,"column_end":31}},{"value":"/ \t++ ...","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477386,"byte_end":477397,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/ \t++ HasherN(encode(keyN))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477398,"byte_end":477427,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477428,"byte_end":477435,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477436,"byte_end":477439,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477440,"byte_end":477453,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477454,"byte_end":477457,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477458,"byte_end":477543,"line_start":51,"line_end":51,"column_start":1,"column_end":86}},{"value":"/ such as `blake2_128_concat` must be used for the key hashers. Otherwise, other values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477544,"byte_end":477633,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ in storage can be compromised.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477634,"byte_end":477668,"line_start":53,"line_end":53,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479704,"byte_end":479718,"line_start":118,"line_end":118,"column_start":9,"column_end":23},"name":"hashed_key_for","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::hashed_key_for","value":"pub fn hashed_key_for<KArg: EncodeLikeTuple<Key::KArg> +\nTupleToEncodedIter>(KArg) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479617,"byte_end":479695,"line_start":117,"line_end":117,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479940,"byte_end":479952,"line_start":125,"line_end":125,"column_start":9,"column_end":21},"name":"contains_key","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::contains_key","value":"pub fn contains_key<KArg: EncodeLikeTuple<Key::KArg> +\nTupleToEncodedIter>(KArg) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479882,"byte_end":479931,"line_start":124,"line_end":124,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2584},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480176,"byte_end":480179,"line_start":130,"line_end":130,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::get","value":"pub fn get<KArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter>(KArg)\n-> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480105,"byte_end":480167,"line_start":129,"line_end":129,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2586},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480457,"byte_end":480464,"line_start":139,"line_end":139,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_get","value":"pub fn try_get<KArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter>(KArg)\n-> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480341,"byte_end":480397,"line_start":136,"line_end":136,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480399,"byte_end":480402,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480404,"byte_end":480448,"line_start":138,"line_end":138,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480694,"byte_end":480698,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::take","value":"pub fn take<KArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter>(KArg)\n-> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480631,"byte_end":480685,"line_start":145,"line_end":145,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480907,"byte_end":480911,"line_start":153,"line_end":153,"column_start":9,"column_end":13},"name":"swap","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::swap","value":"pub fn swap<KOther, KArg1, KArg2>(KArg1, KArg2) where KOther: KeyGenerator,\nKArg1: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter,\nKArg2: EncodeLikeTuple<KOther::KArg> + TupleToEncodedIter","parent":null,"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":480861,"byte_end":480898,"line_start":152,"line_end":152,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481281,"byte_end":481287,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"name":"insert","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::insert","value":"pub fn insert<KArg, VArg>(KArg, VArg) where KArg: EncodeLikeTuple<Key::KArg> +\nTupleToEncodedIter, VArg: EncodeLike<Value>","parent":null,"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481204,"byte_end":481272,"line_start":162,"line_end":162,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481542,"byte_end":481548,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"name":"remove","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove","value":"pub fn remove<KArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter>(KArg)","parent":null,"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481491,"byte_end":481533,"line_start":171,"line_end":171,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2599},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481738,"byte_end":481751,"line_start":177,"line_end":177,"column_start":9,"column_end":22},"name":"remove_prefix","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove_prefix","value":"pub fn remove_prefix<KP>(KP, Option<u32>) -> sp_io::KillStorageResult where\nKey: HasKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481687,"byte_end":481729,"line_start":176,"line_end":176,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482006,"byte_end":482024,"line_start":185,"line_end":185,"column_start":9,"column_end":27},"name":"iter_prefix_values","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_prefix_values","value":"pub fn iter_prefix_values<KP>(KP) -> PrefixIterator<Value> where\nKey: HasKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":481948,"byte_end":481997,"line_start":184,"line_end":184,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482247,"byte_end":482253,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate","value":"pub fn mutate<KArg, R, F>(KArg, F) -> R where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter,\nF: FnOnce(&mut QueryKind::Query) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482196,"byte_end":482238,"line_start":192,"line_end":192,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482550,"byte_end":482560,"line_start":202,"line_end":202,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate","value":"pub fn try_mutate<KArg, R, E, F>(KArg, F) -> Result<R, E> where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter,\nF: FnOnce(&mut QueryKind::Query) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482469,"byte_end":482541,"line_start":201,"line_end":201,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482897,"byte_end":482910,"line_start":211,"line_end":211,"column_start":9,"column_end":22},"name":"mutate_exists","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::mutate_exists","value":"pub fn mutate_exists<KArg, R, F>(KArg, F) -> R where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter,\nF: FnOnce(&mut Option<Value>) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":482805,"byte_end":482888,"line_start":210,"line_end":210,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483418,"byte_end":483435,"line_start":222,"line_end":222,"column_start":9,"column_end":26},"name":"try_mutate_exists","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::try_mutate_exists","value":"pub fn try_mutate_exists<KArg, R, E, F>(KArg, F) -> Result<R, E> where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter,\nF: FnOnce(&mut Option<Value>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483130,"byte_end":483226,"line_start":219,"line_end":219,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483228,"byte_end":483324,"line_start":220,"line_end":220,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483326,"byte_end":483409,"line_start":221,"line_end":221,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484020,"byte_end":484026,"line_start":239,"line_end":239,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::append","value":"pub fn append<Item, EncodeLikeItem, KArg>(KArg, EncodeLikeItem) where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483684,"byte_end":483738,"line_start":230,"line_end":230,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483740,"byte_end":483743,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483745,"byte_end":483800,"line_start":232,"line_end":232,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483802,"byte_end":483805,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483807,"byte_end":483820,"line_start":234,"line_end":234,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483822,"byte_end":483825,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483827,"byte_end":483907,"line_start":236,"line_end":236,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483909,"byte_end":483992,"line_start":237,"line_end":237,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":483994,"byte_end":484011,"line_start":238,"line_end":238,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2625},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484788,"byte_end":484798,"line_start":261,"line_end":261,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::decode_len","value":"pub fn decode_len<KArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter>(KArg)\n-> Option<usize> where Value: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484313,"byte_end":484397,"line_start":249,"line_end":249,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484399,"byte_end":484427,"line_start":250,"line_end":250,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484429,"byte_end":484432,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484434,"byte_end":484495,"line_start":252,"line_end":252,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484497,"byte_end":484500,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484502,"byte_end":484588,"line_start":254,"line_end":254,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484590,"byte_end":484628,"line_start":255,"line_end":255,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484630,"byte_end":484633,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484635,"byte_end":484648,"line_start":257,"line_end":257,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484650,"byte_end":484653,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484655,"byte_end":484748,"line_start":259,"line_end":259,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":484750,"byte_end":484779,"line_start":260,"line_end":260,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485193,"byte_end":485205,"line_start":273,"line_end":273,"column_start":9,"column_end":21},"name":"migrate_keys","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::migrate_keys","value":"pub fn migrate_keys<KArg>(KArg, Key::HArg) -> Option<Value> where\nKArg: EncodeLikeTuple<Key::KArg> + TupleToEncodedIter","parent":null,"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from defunct `hash_fns` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from defunct `hash_fns` to the current hashers.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485002,"byte_end":485090,"line_start":270,"line_end":270,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485092,"byte_end":485095,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485097,"byte_end":485184,"line_start":272,"line_end":272,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485464,"byte_end":485474,"line_start":281,"line_end":281,"column_start":9,"column_end":19},"name":"remove_all","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::remove_all","value":"pub fn remove_all(Option<u32>) -> sp_io::KillStorageResult","parent":null,"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485419,"byte_end":485455,"line_start":280,"line_end":280,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485744,"byte_end":485755,"line_start":288,"line_end":288,"column_start":9,"column_end":20},"name":"iter_values","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_values","value":"pub fn iter_values() -> crate::storage::PrefixIterator<Value>","parent":null,"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485603,"byte_end":485642,"line_start":285,"line_end":285,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485644,"byte_end":485647,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485649,"byte_end":485735,"line_start":287,"line_end":287,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486459,"byte_end":486475,"line_start":305,"line_end":305,"column_start":9,"column_end":25},"name":"translate_values","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\nOption<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485875,"byte_end":485969,"line_start":292,"line_end":292,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":485971,"byte_end":486050,"line_start":293,"line_end":293,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486052,"byte_end":486055,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486057,"byte_end":486141,"line_start":295,"line_end":295,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486143,"byte_end":486146,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486148,"byte_end":486161,"line_start":297,"line_end":297,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486163,"byte_end":486166,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486168,"byte_end":486261,"line_start":299,"line_end":299,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486263,"byte_end":486335,"line_start":300,"line_end":300,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486337,"byte_end":486340,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486342,"byte_end":486353,"line_start":302,"line_end":302,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486355,"byte_end":486358,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486360,"byte_end":486450,"line_start":304,"line_end":304,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487171,"byte_end":487182,"line_start":324,"line_end":324,"column_start":9,"column_end":20},"name":"iter_prefix","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_prefix","value":"pub fn iter_prefix<KP>(KP)\n-> crate::storage::PrefixIterator<(<Key as HasKeyPrefix<KP>>::Suffix, Value)>\nwhere Key: HasReversibleKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with prefix key `kp` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with prefix key `kp` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486953,"byte_end":487035,"line_start":320,"line_end":320,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487037,"byte_end":487040,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose prefix key is `kp` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487042,"byte_end":487138,"line_start":322,"line_end":322,"column_start":2,"column_end":98}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487140,"byte_end":487162,"line_start":323,"line_end":323,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487666,"byte_end":487682,"line_start":338,"line_end":338,"column_start":9,"column_end":25},"name":"iter_prefix_from","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_prefix_from","value":"pub fn iter_prefix_from<KP>(KP, Vec<u8>)\n-> crate::storage::PrefixIterator<(<Key as HasKeyPrefix<KP>>::Suffix, Value)>\nwhere Key: HasReversibleKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with prefix key `kp` after a specified `starting_raw_key`\n in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with prefix key `kp` after a specified `starting_raw_key`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487406,"byte_end":487501,"line_start":333,"line_end":333,"column_start":2,"column_end":97}},{"value":"/ in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487503,"byte_end":487530,"line_start":334,"line_end":334,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487532,"byte_end":487535,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose prefix key is `kp` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487537,"byte_end":487633,"line_start":336,"line_end":336,"column_start":2,"column_end":98}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487635,"byte_end":487657,"line_start":337,"line_end":337,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488190,"byte_end":488205,"line_start":355,"line_end":355,"column_start":9,"column_end":24},"name":"iter_key_prefix","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_key_prefix","value":"pub fn iter_key_prefix<KP>(KP)\n-> crate::storage::KeyPrefixIterator<<Key as HasKeyPrefix<KP>>::Suffix> where\nKey: HasReversibleKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all suffix keys in the map with prefix key `kp` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all suffix keys in the map with prefix key `kp` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":487969,"byte_end":488054,"line_start":351,"line_end":351,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488056,"byte_end":488059,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose prefix key is `kp` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488061,"byte_end":488157,"line_start":353,"line_end":353,"column_start":2,"column_end":98}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488159,"byte_end":488181,"line_start":354,"line_end":354,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488690,"byte_end":488710,"line_start":369,"line_end":369,"column_start":9,"column_end":29},"name":"iter_key_prefix_from","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_key_prefix_from","value":"pub fn iter_key_prefix_from<KP>(KP, Vec<u8>)\n-> crate::storage::KeyPrefixIterator<<Key as HasKeyPrefix<KP>>::Suffix> where\nKey: HasReversibleKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all suffix keys in the map with prefix key `kp` after a specified\n `starting_raw_key` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all suffix keys in the map with prefix key `kp` after a specified","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488427,"byte_end":488506,"line_start":364,"line_end":364,"column_start":2,"column_end":81}},{"value":"/ `starting_raw_key` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488508,"byte_end":488554,"line_start":365,"line_end":365,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488556,"byte_end":488559,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values whose prefix key is `kp` to the map while doing this, you'll get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488561,"byte_end":488657,"line_start":367,"line_end":367,"column_start":2,"column_end":98}},{"value":"/ undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488659,"byte_end":488681,"line_start":368,"line_end":368,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489230,"byte_end":489242,"line_start":387,"line_end":387,"column_start":9,"column_end":21},"name":"drain_prefix","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::drain_prefix","value":"pub fn drain_prefix<KP>(KP)\n-> crate::storage::PrefixIterator<(<Key as HasKeyPrefix<KP>>::Suffix, Value)>\nwhere Key: HasReversibleKeyPrefix<KP>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map with prefix key `kp` and iterate through them in no\n particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map with prefix key `kp` and iterate through them in no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":488995,"byte_end":489083,"line_start":382,"line_end":382,"column_start":2,"column_end":90}},{"value":"/ particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489085,"byte_end":489106,"line_start":383,"line_end":383,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489108,"byte_end":489111,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ If you add elements with prefix key `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489113,"byte_end":489207,"line_start":385,"line_end":385,"column_start":2,"column_end":96}},{"value":"/ results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489209,"byte_end":489221,"line_start":386,"line_end":386,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489634,"byte_end":489638,"line_start":399,"line_end":399,"column_start":9,"column_end":13},"name":"iter","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter","value":"pub fn iter() -> crate::storage::PrefixIterator<(Key::Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489467,"byte_end":489528,"line_start":396,"line_end":396,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489530,"byte_end":489533,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489535,"byte_end":489625,"line_start":398,"line_end":398,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489969,"byte_end":489978,"line_start":406,"line_end":406,"column_start":9,"column_end":18},"name":"iter_from","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_from","value":"pub fn iter_from(Vec<u8>) -> crate::storage::PrefixIterator<(Key::Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_key` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_key` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489769,"byte_end":489863,"line_start":403,"line_end":403,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489865,"byte_end":489868,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":489870,"byte_end":489960,"line_start":405,"line_end":405,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490324,"byte_end":490333,"line_start":415,"line_end":415,"column_start":9,"column_end":18},"name":"iter_keys","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_keys","value":"pub fn iter_keys() -> crate::storage::KeyPrefixIterator<Key::Key>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys in the map in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490161,"byte_end":490218,"line_start":412,"line_end":412,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490220,"byte_end":490223,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490225,"byte_end":490315,"line_start":414,"line_end":414,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490663,"byte_end":490677,"line_start":422,"line_end":422,"column_start":9,"column_end":23},"name":"iter_keys_from","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>) -> crate::storage::KeyPrefixIterator<Key::Key>","parent":null,"children":[],"decl_id":null,"docs":" Enumerate all keys in the map after a specified `starting_raw_key` in no particular order.","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map after a specified `starting_raw_key` in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490463,"byte_end":490557,"line_start":419,"line_end":419,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490559,"byte_end":490562,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ If you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490564,"byte_end":490654,"line_start":421,"line_end":421,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491042,"byte_end":491047,"line_start":431,"line_end":431,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::drain","value":"pub fn drain() -> crate::storage::PrefixIterator<(Key::Key, Value)>","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order.","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490859,"byte_end":490944,"line_start":428,"line_end":428,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490946,"byte_end":490949,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":490951,"byte_end":491033,"line_start":430,"line_end":430,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491459,"byte_end":491468,"line_start":440,"line_end":440,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageNMap<Prefix, Key, Value, QueryKind, OnEmpty, MaxValues>>::translate","value":"pub fn translate<O: Decode, F: FnMut(Key::Key, O) -> Option<Value>>(F)","parent":null,"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491179,"byte_end":491273,"line_start":435,"line_end":435,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491275,"byte_end":491278,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491280,"byte_end":491359,"line_start":437,"line_end":437,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491361,"byte_end":491364,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491366,"byte_end":491450,"line_start":439,"line_end":439,"column_start":2,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2745},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515658,"byte_end":515670,"line_start":39,"line_end":39,"column_start":12,"column_end":24},"name":"StorageValue","qualname":"::storage::types::value::StorageValue","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type that allow to store a value.","sig":null,"attributes":[{"value":"/ A type that allow to store a value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515477,"byte_end":515516,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515517,"byte_end":515520,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Each value is stored at:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515521,"byte_end":515549,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515550,"byte_end":515566,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/ Twox128(Prefix::pallet_prefix()) ++ Twox128(Prefix::STORAGE_PREFIX)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515567,"byte_end":515638,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515639,"byte_end":515646,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516800,"byte_end":516810,"line_start":74,"line_end":74,"column_start":9,"column_end":19},"name":"hashed_key","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::hashed_key","value":"pub fn hashed_key() -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516767,"byte_end":516791,"line_start":73,"line_end":73,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2769},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516952,"byte_end":516958,"line_start":79,"line_end":79,"column_start":9,"column_end":15},"name":"exists","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::exists","value":"pub fn exists() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516894,"byte_end":516943,"line_start":78,"line_end":78,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517097,"byte_end":517100,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::get","value":"pub fn get() -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517034,"byte_end":517088,"line_start":83,"line_end":83,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517303,"byte_end":517310,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"name":"try_get","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::try_get","value":"pub fn try_get() -> Result<Value, ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance; `Ok` if it exists,\n `Err` if not.\n","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance; `Ok` if it exists,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517185,"byte_end":517275,"line_start":88,"line_end":88,"column_start":2,"column_end":92}},{"value":"/ `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517277,"byte_end":517294,"line_start":89,"line_end":89,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518294,"byte_end":518303,"line_start":115,"line_end":115,"column_start":9,"column_end":18},"name":"translate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::translate","value":"pub fn translate<O: Decode, F: FnOnce(Option<O>) -> Option<Value>>(F)\n-> Result<Option<Value>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517400,"byte_end":517472,"line_start":94,"line_end":94,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517474,"byte_end":517477,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517479,"byte_end":517518,"line_start":96,"line_end":96,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517520,"byte_end":517523,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517525,"byte_end":517618,"line_start":98,"line_end":98,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517620,"byte_end":517655,"line_start":99,"line_end":99,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517657,"byte_end":517660,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517662,"byte_end":517757,"line_start":101,"line_end":101,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517759,"byte_end":517790,"line_start":102,"line_end":102,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517792,"byte_end":517795,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517797,"byte_end":517810,"line_start":104,"line_end":104,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517812,"byte_end":517815,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517817,"byte_end":517910,"line_start":106,"line_end":106,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517912,"byte_end":517984,"line_start":107,"line_end":107,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517986,"byte_end":517989,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":517991,"byte_end":518002,"line_start":109,"line_end":109,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518004,"byte_end":518007,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518009,"byte_end":518099,"line_start":111,"line_end":111,"column_start":2,"column_end":92}},{"value":"/ while ensuring **no usage of this storage are made before the call to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518101,"byte_end":518174,"line_start":112,"line_end":112,"column_start":2,"column_end":75}},{"value":"/ `on_runtime_upgrade`**. (More precisely prior initialized modules doesn't make use of this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518176,"byte_end":518270,"line_start":113,"line_end":113,"column_start":2,"column_end":96}},{"value":"/ storage).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518272,"byte_end":518285,"line_start":114,"line_end":114,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2775},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518541,"byte_end":518544,"line_start":122,"line_end":122,"column_start":9,"column_end":12},"name":"put","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::put","value":"pub fn put<Arg: EncodeLike<Value>>(Arg)","parent":null,"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518464,"byte_end":518532,"line_start":121,"line_end":121,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518790,"byte_end":518793,"line_start":129,"line_end":129,"column_start":9,"column_end":12},"name":"set","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::set","value":"pub fn set(QueryKind::Query)","parent":null,"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518644,"byte_end":518712,"line_start":126,"line_end":126,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518714,"byte_end":518717,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ this uses the query type rather than the underlying value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518719,"byte_end":518781,"line_start":128,"line_end":128,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518911,"byte_end":518917,"line_start":134,"line_end":134,"column_start":9,"column_end":15},"name":"mutate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::mutate","value":"pub fn mutate<R, F: FnOnce(&mut QueryKind::Query) -> R>(F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":518882,"byte_end":518902,"line_start":133,"line_end":133,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519090,"byte_end":519100,"line_start":139,"line_end":139,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::try_mutate","value":"pub fn try_mutate<R, E, F: FnOnce(&mut QueryKind::Query) -> Result<R, E>>(F)\n-> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519037,"byte_end":519081,"line_start":138,"line_end":138,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519292,"byte_end":519296,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"name":"kill","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::kill","value":"pub fn kill()","parent":null,"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519255,"byte_end":519283,"line_start":145,"line_end":145,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519425,"byte_end":519429,"line_start":151,"line_end":151,"column_start":9,"column_end":13},"name":"take","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::take","value":"pub fn take() -> QueryKind::Query","parent":null,"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519362,"byte_end":519416,"line_start":150,"line_end":150,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519856,"byte_end":519862,"line_start":164,"line_end":164,"column_start":9,"column_end":15},"name":"append","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::append","value":"pub fn append<Item, EncodeLikeItem>(EncodeLikeItem) where Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, Value: StorageAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519515,"byte_end":519569,"line_start":155,"line_end":155,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519571,"byte_end":519574,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519576,"byte_end":519631,"line_start":157,"line_end":157,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519633,"byte_end":519636,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519638,"byte_end":519651,"line_start":159,"line_end":159,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519653,"byte_end":519656,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519658,"byte_end":519743,"line_start":161,"line_end":161,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519745,"byte_end":519828,"line_start":162,"line_end":162,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":519830,"byte_end":519847,"line_start":163,"line_end":163,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520502,"byte_end":520512,"line_start":184,"line_end":184,"column_start":9,"column_end":19},"name":"decode_len","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::decode_len","value":"pub fn decode_len() -> Option<usize> where Value: StorageDecodeLength","parent":null,"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520066,"byte_end":520141,"line_start":173,"line_end":173,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520143,"byte_end":520146,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ `Value` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520148,"byte_end":520209,"line_start":175,"line_end":175,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520211,"byte_end":520214,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520216,"byte_end":520302,"line_start":177,"line_end":177,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520304,"byte_end":520342,"line_start":178,"line_end":178,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520344,"byte_end":520347,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520349,"byte_end":520362,"line_start":180,"line_end":180,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520364,"byte_end":520367,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520369,"byte_end":520462,"line_start":182,"line_end":182,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520464,"byte_end":520493,"line_start":183,"line_end":183,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520797,"byte_end":520807,"line_start":194,"line_end":194,"column_start":9,"column_end":19},"name":"try_append","qualname":"<StorageValue<Prefix, Value, QueryKind, OnEmpty>>::try_append","value":"pub fn try_append<Item, EncodeLikeItem>(EncodeLikeItem) -> Result<(), ()>\nwhere Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nValue: StorageTryAppend<Item>","parent":null,"children":[],"decl_id":null,"docs":" Try and append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Try and append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520639,"byte_end":520701,"line_start":191,"line_end":191,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520703,"byte_end":520706,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ Is only available if `Value` of the storage implements [`StorageTryAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":520708,"byte_end":520788,"line_start":193,"line_end":193,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":2856},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383922,"byte_end":383936,"line_start":49,"line_end":49,"column_start":11,"column_end":25},"name":"QueryKindTrait","qualname":"::storage::types::QueryKindTrait","value":"QueryKindTrait<Value, OnEmpty>","parent":null,"children":[{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2861},{"krate":0,"index":2862}],"decl_id":null,"docs":" Trait implementing how the storage optional value is converted into the queried type.","sig":null,"attributes":[{"value":"/ Trait implementing how the storage optional value is converted into the queried type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383543,"byte_end":383632,"line_start":42,"line_end":42,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383633,"byte_end":383636,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It is implemented by:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383637,"byte_end":383662,"line_start":44,"line_end":44,"column_start":1,"column_end":26}},{"value":"/ * `OptionQuery` which convert an optional value to an optional value, user when querying storage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383663,"byte_end":383763,"line_start":45,"line_end":45,"column_start":1,"column_end":101}},{"value":"/   will get an optional value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383764,"byte_end":383797,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/ * `ValueQuery` which convert an optional value to a value, user when querying storage will get a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383798,"byte_end":383898,"line_start":47,"line_end":47,"column_start":1,"column_end":101}},{"value":"/   value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383899,"byte_end":383911,"line_start":48,"line_end":48,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":2859},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383998,"byte_end":384006,"line_start":51,"line_end":51,"column_start":8,"column_end":16},"name":"METADATA","qualname":"::storage::types::QueryKindTrait::METADATA","value":"StorageEntryModifier","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Metadata for the storage kind.\n","sig":null,"attributes":[{"value":"/ Metadata for the storage kind.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":383956,"byte_end":383990,"line_start":50,"line_end":50,"column_start":2,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":2860},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384065,"byte_end":384070,"line_start":54,"line_end":54,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::types::QueryKindTrait::Query","value":"type Query: FullCodec + 'static;","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Type returned on query\n","sig":null,"attributes":[{"value":"/ Type returned on query","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384032,"byte_end":384058,"line_start":53,"line_end":53,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384205,"byte_end":384233,"line_start":58,"line_end":58,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::types::QueryKindTrait::from_optional_value_to_query","value":"pub fn from_optional_value_to_query(Option<Value>) -> Self::Query","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Convert an optional value (i.e. some if trie contains the value or none otherwise) to the\n query.\n","sig":null,"attributes":[{"value":"/ Convert an optional value (i.e. some if trie contains the value or none otherwise) to the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384095,"byte_end":384188,"line_start":56,"line_end":56,"column_start":2,"column_end":95}},{"value":"/ query.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384190,"byte_end":384200,"line_start":57,"line_end":57,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2862},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384316,"byte_end":384344,"line_start":61,"line_end":61,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::types::QueryKindTrait::from_query_to_optional_value","value":"pub fn from_query_to_optional_value(Self::Query) -> Option<Value>","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Convert a query to an optional value.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384270,"byte_end":384311,"line_start":60,"line_end":60,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384655,"byte_end":384666,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"OptionQuery","qualname":"::storage::types::OptionQuery","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement QueryKindTrait with query being `Option<Value>`","sig":null,"attributes":[{"value":"/ Implement QueryKindTrait with query being `Option<Value>`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384382,"byte_end":384443,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384444,"byte_end":384447,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ NOTE: it doesn't support a generic `OnEmpty`. This means only `None` can be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384448,"byte_end":384527,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ returned when no value is found. To use another `OnEmpty` implementation, `ValueQuery` can be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384528,"byte_end":384625,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ used instead.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384626,"byte_end":384643,"line_start":68,"line_end":68,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385183,"byte_end":385193,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"ValueQuery","qualname":"::storage::types::ValueQuery","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement QueryKindTrait with query being `Value`\n","sig":null,"attributes":[{"value":"/ Implement QueryKindTrait with query being `Value`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385118,"byte_end":385171,"line_start":88,"line_end":88,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":2881},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385765,"byte_end":385792,"line_start":111,"line_end":111,"column_start":11,"column_end":38},"name":"StorageEntryMetadataBuilder","qualname":"::storage::types::StorageEntryMetadataBuilder","value":"StorageEntryMetadataBuilder","parent":null,"children":[{"krate":0,"index":2882}],"decl_id":null,"docs":" Build the metadata of a storage.","sig":null,"attributes":[{"value":"/ Build the metadata of a storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385624,"byte_end":385660,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385661,"byte_end":385664,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Implemented by each of the storage types: value, map, countedmap, doublemap and nmap.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385665,"byte_end":385754,"line_start":110,"line_end":110,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385886,"byte_end":385900,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"build_metadata","qualname":"::storage::types::StorageEntryMetadataBuilder::build_metadata","value":"pub fn build_metadata(Vec<&'static str>, &mut Vec<StorageEntryMetadata>)","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" Build into `entries` the storage metadata entries of a storage given some `docs`.\n","sig":null,"attributes":[{"value":"/ Build into `entries` the storage metadata entries of a storage given some `docs`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385796,"byte_end":385881,"line_start":112,"line_end":112,"column_start":2,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":2883},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unhashed","qualname":"::storage::unhashed","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2896},{"krate":0,"index":2898},{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2910},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2919}],"decl_id":null,"docs":" Operation on unhashed runtime storage.\n","sig":null,"attributes":[{"value":"/ Operation on unhashed runtime storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":526636,"byte_end":526678,"line_start":18,"line_end":18,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":2892},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":526839,"byte_end":526842,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::unhashed::get","value":"pub fn get<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":526734,"byte_end":526831,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":2896},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527276,"byte_end":527290,"line_start":40,"line_end":40,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::unhashed::get_or_default","value":"pub fn get_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527155,"byte_end":527248,"line_start":38,"line_end":38,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527249,"byte_end":527268,"line_start":39,"line_end":39,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2898},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527503,"byte_end":527509,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::unhashed::get_or","value":"pub fn get_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527385,"byte_end":527475,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527476,"byte_end":527495,"line_start":45,"line_end":45,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2900},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527724,"byte_end":527735,"line_start":52,"line_end":52,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::unhashed::get_or_else","value":"pub fn get_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527604,"byte_end":527696,"line_start":50,"line_end":50,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527697,"byte_end":527716,"line_start":51,"line_end":51,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2903},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527900,"byte_end":527903,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::unhashed::put","value":"pub fn put<T: Encode + ?Sized>(&[u8], &T)","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":527853,"byte_end":527892,"line_start":56,"line_end":56,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2906},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528122,"byte_end":528126,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::unhashed::take","value":"pub fn take<T: Decode + Sized>(&[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528015,"byte_end":528114,"line_start":61,"line_end":61,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":2908},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528368,"byte_end":528383,"line_start":72,"line_end":72,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::unhashed::take_or_default","value":"pub fn take_or_default<T: Decode + Sized + Default>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528232,"byte_end":528330,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528331,"byte_end":528360,"line_start":71,"line_end":71,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2910},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528642,"byte_end":528649,"line_start":78,"line_end":78,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::unhashed::take_or","value":"pub fn take_or<T: Decode + Sized>(&[u8], T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528479,"byte_end":528569,"line_start":76,"line_end":76,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528570,"byte_end":528634,"line_start":77,"line_end":77,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":2912},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528910,"byte_end":528922,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::unhashed::take_or_else","value":"pub fn take_or_else<T: Decode + Sized, F: FnOnce() -> T>(&[u8], F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528745,"byte_end":528837,"line_start":82,"line_end":82,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":528838,"byte_end":528902,"line_start":83,"line_end":83,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":2915},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529108,"byte_end":529114,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::unhashed::exists","value":"pub fn exists(&[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529041,"byte_end":529100,"line_start":88,"line_end":88,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":2916},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529227,"byte_end":529231,"line_start":94,"line_end":94,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::unhashed::kill","value":"pub fn kill(&[u8])","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529169,"byte_end":529219,"line_start":93,"line_end":93,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":2917},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529353,"byte_end":529364,"line_start":99,"line_end":99,"column_start":8,"column_end":19},"name":"kill_prefix","qualname":"::storage::unhashed::kill_prefix","value":"pub fn kill_prefix(&[u8], Option<u32>) -> sp_io::KillStorageResult","parent":null,"children":[],"decl_id":null,"docs":" Ensure keys with the given `prefix` have no entries in storage.\n","sig":null,"attributes":[{"value":"/ Ensure keys with the given `prefix` have no entries in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529278,"byte_end":529345,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":2918},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529522,"byte_end":529529,"line_start":104,"line_end":104,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::unhashed::get_raw","value":"pub fn get_raw(&[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529478,"byte_end":529514,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2919},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529846,"byte_end":529853,"line_start":113,"line_end":113,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::unhashed::put_raw","value":"pub fn put_raw(&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529592,"byte_end":529630,"line_start":108,"line_end":108,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529631,"byte_end":529634,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: If you set the storage of the Substrate Wasm (`well_known_keys::CODE`),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529635,"byte_end":529723,"line_start":110,"line_end":110,"column_start":1,"column_end":89}},{"value":"/ you should also call `frame_system::RuntimeUpgraded::put(true)` to trigger the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529724,"byte_end":529806,"line_start":111,"line_end":111,"column_start":1,"column_end":83}},{"value":"/ `on_runtime_upgrade` logic.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/unhashed.rs","byte_start":529807,"byte_end":529838,"line_start":112,"line_end":112,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":2920},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weak_bounded_vec","qualname":"::storage::weak_bounded_vec","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","parent":null,"children":[{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":2926},{"krate":0,"index":2929},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2947},{"krate":0,"index":2950},{"krate":0,"index":2953},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2963},{"krate":0,"index":19288},{"krate":0,"index":19271},{"krate":0,"index":19280},{"krate":0,"index":2964},{"krate":0,"index":2971},{"krate":0,"index":2982},{"krate":0,"index":2992},{"krate":0,"index":2996},{"krate":0,"index":3000},{"krate":0,"index":3004},{"krate":0,"index":3009},{"krate":0,"index":3013},{"krate":0,"index":3017},{"krate":0,"index":3021},{"krate":0,"index":3026},{"krate":0,"index":3032},{"krate":0,"index":3037},{"krate":0,"index":3043},{"krate":0,"index":3047},{"krate":0,"index":3051},{"krate":0,"index":3055},{"krate":0,"index":3058},{"krate":0,"index":3061},{"krate":0,"index":3065}],"decl_id":null,"docs":" Traits, types and structs to support putting a bounded vector into storage, as a raw value, map\n or a double map.\n","sig":null,"attributes":[{"value":"/ Traits, types and structs to support putting a bounded vector into storage, as a raw value, map","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":530604,"byte_end":530703,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ or a double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":530704,"byte_end":530724,"line_start":19,"line_end":19,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":19288},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531443,"byte_end":531457,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"WeakBoundedVec","qualname":"::storage::weak_bounded_vec::WeakBoundedVec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A weakly bounded vector.","sig":null,"attributes":[{"value":"/ A weakly bounded vector.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":530984,"byte_end":531012,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531013,"byte_end":531016,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531017,"byte_end":531117,"line_start":34,"line_end":34,"column_start":1,"column_end":101}},{"value":"/ put into storage as a raw value, map or double-map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531118,"byte_end":531173,"line_start":35,"line_end":35,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531174,"byte_end":531177,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The length of the vec is not strictly bounded. Decoding a vec with more element that the bound","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531178,"byte_end":531276,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ is accepted, and some method allow to bypass the restriction with warnings.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531277,"byte_end":531356,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"scale_info(skip_type_params(S))","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531397,"byte_end":531431,"line_start":40,"line_end":40,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2975},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532341,"byte_end":532351,"line_start":66,"line_end":66,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<WeakBoundedVec<T, S>>::into_inner","value":"pub fn into_inner(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consume self, and return the inner `Vec`. Henceforth, the `Vec<_>` can be altered in an\n arbitrary way. At some point, if the reverse conversion is required, `TryFrom<Vec<_>>` can\n be used.","sig":null,"attributes":[{"value":"/ Consume self, and return the inner `Vec`. Henceforth, the `Vec<_>` can be altered in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531976,"byte_end":532067,"line_start":60,"line_end":60,"column_start":2,"column_end":93}},{"value":"/ arbitrary way. At some point, if the reverse conversion is required, `TryFrom<Vec<_>>` can","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532069,"byte_end":532163,"line_start":61,"line_end":61,"column_start":2,"column_end":96}},{"value":"/ be used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532165,"byte_end":532177,"line_start":62,"line_end":62,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532179,"byte_end":532182,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ This is useful for cases if you need access to an internal API of the inner `Vec<_>` which","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532184,"byte_end":532278,"line_start":64,"line_end":64,"column_start":2,"column_end":96}},{"value":"/ is not provided by the wrapper `WeakBoundedVec`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532280,"byte_end":532332,"line_start":65,"line_end":65,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532508,"byte_end":532514,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"name":"remove","qualname":"<WeakBoundedVec<T, S>>::remove","value":"pub fn remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::remove`].","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::remove`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532384,"byte_end":532434,"line_start":70,"line_end":70,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532436,"byte_end":532439,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532441,"byte_end":532453,"line_start":72,"line_end":72,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532455,"byte_end":532458,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532460,"byte_end":532499,"line_start":74,"line_end":74,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532704,"byte_end":532715,"line_start":84,"line_end":84,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<WeakBoundedVec<T, S>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::swap_remove`].","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::swap_remove`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532575,"byte_end":532630,"line_start":79,"line_end":79,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532632,"byte_end":532635,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532637,"byte_end":532649,"line_start":81,"line_end":81,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532651,"byte_end":532654,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532656,"byte_end":532695,"line_start":83,"line_end":83,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532840,"byte_end":532846,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"retain","qualname":"<WeakBoundedVec<T, S>>::retain","value":"pub fn retain<F: FnMut(&T) -> bool>(&mut Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::retain`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::retain`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532781,"byte_end":532831,"line_start":88,"line_end":88,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532974,"byte_end":532981,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<WeakBoundedVec<T, S>>::get_mut","value":"pub fn get_mut<I: SliceIndex<[T]>>(&mut Self, I)\n-> Option<&mut <I as SliceIndex<[T]>>::Output>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`slice::get_mut`].\n","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`slice::get_mut`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":532912,"byte_end":532965,"line_start":93,"line_end":93,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533205,"byte_end":533210,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"name":"bound","qualname":"<WeakBoundedVec<T, S>>::bound","value":"pub fn bound() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the bound of the type in `usize`.\n","sig":null,"attributes":[{"value":"/ Get the bound of the type in `usize`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533155,"byte_end":533196,"line_start":103,"line_end":103,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533451,"byte_end":533461,"line_start":111,"line_end":111,"column_start":9,"column_end":19},"name":"force_from","qualname":"<WeakBoundedVec<T, S>>::force_from","value":"pub fn force_from(Vec<T>, Option<&'static str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `Self` from `t` without any checks. Logs warnings if the bound is not being\n respected. The additional scope can be used to indicate where a potential overflow is\n happening.\n","sig":null,"attributes":[{"value":"/ Create `Self` from `t` without any checks. Logs warnings if the bound is not being","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533249,"byte_end":533335,"line_start":108,"line_end":108,"column_start":2,"column_end":88}},{"value":"/ respected. The additional scope can be used to indicate where a potential overflow is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533337,"byte_end":533426,"line_start":109,"line_end":109,"column_start":2,"column_end":91}},{"value":"/ happening.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533428,"byte_end":533442,"line_start":110,"line_end":110,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534027,"byte_end":534037,"line_start":130,"line_end":130,"column_start":9,"column_end":19},"name":"try_mutate","qualname":"<WeakBoundedVec<T, S>>::try_mutate","value":"pub fn try_mutate<impl FnMut(&mut Vec<T>): FnMut(&mut Vec<T>) ->\n()>(Self, impl FnMut(&mut Vec<T>)) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and mutates self via the given `mutate` function.","sig":null,"attributes":[{"value":"/ Consumes self and mutates self via the given `mutate` function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533727,"byte_end":533794,"line_start":123,"line_end":123,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533796,"byte_end":533799,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ If the outcome of mutation is within bounds, `Some(Self)` is returned. Else, `None` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533801,"byte_end":533891,"line_start":125,"line_end":125,"column_start":2,"column_end":92}},{"value":"/ returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533893,"byte_end":533906,"line_start":126,"line_end":126,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533908,"byte_end":533911,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ This is essentially a *consuming* shorthand [`Self::into_inner`] -> `...` ->","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533913,"byte_end":533993,"line_start":128,"line_end":128,"column_start":2,"column_end":82}},{"value":"/ [`Self::try_from`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533995,"byte_end":534018,"line_start":129,"line_end":129,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534384,"byte_end":534394,"line_start":141,"line_end":141,"column_start":9,"column_end":19},"name":"try_insert","qualname":"<WeakBoundedVec<T, S>>::try_insert","value":"pub fn try_insert(&mut Self, usize, T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::insert`], but returns an `Err` (and is a noop) if the\n new length of the vector exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::insert`], but returns an `Err` (and is a noop) if the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534184,"byte_end":534278,"line_start":135,"line_end":135,"column_start":2,"column_end":96}},{"value":"/ new length of the vector exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534280,"byte_end":534321,"line_start":136,"line_end":136,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534323,"byte_end":534326,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534328,"byte_end":534340,"line_start":138,"line_end":138,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534342,"byte_end":534345,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534347,"byte_end":534375,"line_start":140,"line_end":140,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534787,"byte_end":534795,"line_start":156,"line_end":156,"column_start":9,"column_end":17},"name":"try_push","qualname":"<WeakBoundedVec<T, S>>::try_push","value":"pub fn try_push(&mut Self, T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Exactly the same semantics as [`Vec::push`], but returns an `Err` (and is a noop) if the\n new length of the vector exceeds `S`.","sig":null,"attributes":[{"value":"/ Exactly the same semantics as [`Vec::push`], but returns an `Err` (and is a noop) if the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534561,"byte_end":534653,"line_start":150,"line_end":150,"column_start":2,"column_end":94}},{"value":"/ new length of the vector exceeds `S`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534655,"byte_end":534696,"line_start":151,"line_end":151,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534698,"byte_end":534701,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534703,"byte_end":534715,"line_start":153,"line_end":153,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534717,"byte_end":534720,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds isize::MAX bytes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534722,"byte_end":534778,"line_start":155,"line_end":155,"column_start":2,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":3082},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182449,"byte_end":182468,"line_start":93,"line_end":93,"column_start":8,"column_end":27},"name":"require_transaction","qualname":"::storage::require_transaction","value":"pub fn require_transaction()","parent":null,"children":[],"decl_id":null,"docs":" Assert this method is called within a storage transaction.\n This will **panic** if is not called within a storage transaction.","sig":null,"attributes":[{"value":"/ Assert this method is called within a storage transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182212,"byte_end":182274,"line_start":89,"line_end":89,"column_start":1,"column_end":63}},{"value":"/ This will **panic** if is not called within a storage transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182275,"byte_end":182345,"line_start":90,"line_end":90,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182346,"byte_end":182349,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This assertion is enabled for native execution and when `debug_assertions` are enabled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182350,"byte_end":182441,"line_start":92,"line_end":92,"column_start":1,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":3083},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182878,"byte_end":182894,"line_start":104,"line_end":104,"column_start":8,"column_end":24},"name":"with_transaction","qualname":"::storage::with_transaction","value":"pub fn with_transaction<R, impl FnOnce() -> TransactionOutcome<R>: FnOnce() ->\nTransactionOutcome<R>>(impl FnOnce() -> TransactionOutcome<R>) -> R","parent":null,"children":[],"decl_id":null,"docs":" Execute the supplied function in a new storage transaction.","sig":null,"attributes":[{"value":"/ Execute the supplied function in a new storage transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182573,"byte_end":182636,"line_start":98,"line_end":98,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182637,"byte_end":182640,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ All changes to storage performed by the supplied function are discarded if the returned","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182641,"byte_end":182732,"line_start":100,"line_end":100,"column_start":1,"column_end":92}},{"value":"/ outcome is `TransactionOutcome::Rollback`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182733,"byte_end":182779,"line_start":101,"line_end":101,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182780,"byte_end":182783,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Transactions can be nested to any depth. Commits happen to the parent transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":182784,"byte_end":182870,"line_start":103,"line_end":103,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":3097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183514,"byte_end":183526,"line_start":128,"line_end":128,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3108},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3114},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3123}],"decl_id":null,"docs":" A trait for working with macro-generated storage values under the substrate storage API.","sig":null,"attributes":[{"value":"/ A trait for working with macro-generated storage values under the substrate storage API.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183332,"byte_end":183424,"line_start":125,"line_end":125,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183425,"byte_end":183428,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageValue`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183429,"byte_end":183503,"line_start":127,"line_end":127,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":3099},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183585,"byte_end":183590,"line_start":130,"line_end":130,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183544,"byte_end":183578,"line_start":129,"line_end":129,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183623,"byte_end":183633,"line_start":133,"line_end":133,"column_start":5,"column_end":15},"name":"hashed_key","qualname":"::storage::StorageValue::hashed_key","value":"pub fn hashed_key() -> [u8; ]","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183594,"byte_end":183618,"line_start":132,"line_end":132,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3102},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183705,"byte_end":183711,"line_start":136,"line_end":136,"column_start":5,"column_end":11},"name":"exists","qualname":"::storage::StorageValue::exists","value":"pub fn exists() -> bool","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183651,"byte_end":183700,"line_start":135,"line_end":135,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183784,"byte_end":183787,"line_start":139,"line_end":139,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageValue::get","value":"pub fn get() -> Self::Query","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183725,"byte_end":183779,"line_start":138,"line_end":138,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183935,"byte_end":183942,"line_start":144,"line_end":144,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageValue::try_get","value":"pub fn try_get() -> Result<T, ()>","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance.","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183808,"byte_end":183879,"line_start":141,"line_end":141,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183881,"byte_end":183884,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183886,"byte_end":183930,"line_start":143,"line_end":143,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3105},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184850,"byte_end":184859,"line_start":166,"line_end":166,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::StorageValue::translate","value":"pub fn translate<O: Decode, F: FnOnce(Option<O>) -> Option<T>>(F)\n-> Result<Option<T>, ()>","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":183965,"byte_end":184037,"line_start":146,"line_end":146,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184039,"byte_end":184042,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184044,"byte_end":184083,"line_start":148,"line_end":148,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184085,"byte_end":184088,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184090,"byte_end":184183,"line_start":150,"line_end":150,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184185,"byte_end":184220,"line_start":151,"line_end":151,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184222,"byte_end":184225,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184227,"byte_end":184322,"line_start":153,"line_end":153,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184324,"byte_end":184355,"line_start":154,"line_end":154,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184357,"byte_end":184360,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184362,"byte_end":184375,"line_start":156,"line_end":156,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184377,"byte_end":184380,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184382,"byte_end":184475,"line_start":158,"line_end":158,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184477,"byte_end":184549,"line_start":159,"line_end":159,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184551,"byte_end":184554,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184556,"byte_end":184567,"line_start":161,"line_end":161,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184569,"byte_end":184572,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade, while","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184574,"byte_end":184670,"line_start":163,"line_end":163,"column_start":2,"column_end":98}},{"value":"/ ensuring **no usage of this storage are made before the call to `on_runtime_upgrade`**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184672,"byte_end":184763,"line_start":164,"line_end":164,"column_start":2,"column_end":93}},{"value":"/ (More precisely prior initialized modules doesn't make use of this storage).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184765,"byte_end":184845,"line_start":165,"line_end":165,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3108},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185013,"byte_end":185016,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"put","qualname":"::storage::StorageValue::put","value":"pub fn put<Arg: EncodeLike<T>>(Arg)","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":184940,"byte_end":185008,"line_start":168,"line_end":168,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185187,"byte_end":185190,"line_start":173,"line_end":173,"column_start":5,"column_end":8},"name":"set","qualname":"::storage::StorageValue::set","value":"pub fn set(Self::Query)","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance; this uses the query\n type rather than the underlying value.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance; this uses the query","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185050,"byte_end":185138,"line_start":171,"line_end":171,"column_start":2,"column_end":90}},{"value":"/ type rather than the underlying value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185140,"byte_end":185182,"line_start":172,"line_end":172,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3111},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185237,"byte_end":185243,"line_start":176,"line_end":176,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageValue::mutate","value":"pub fn mutate<R, F: FnOnce(&mut Self::Query) -> R>(F) -> R","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185212,"byte_end":185232,"line_start":175,"line_end":175,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3114},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185344,"byte_end":185354,"line_start":179,"line_end":179,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageValue::try_mutate","value":"pub fn try_mutate<R, E, F: FnOnce(&mut Self::Query) -> Result<R, E>>(F)\n-> Result<R, E>","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185295,"byte_end":185339,"line_start":178,"line_end":178,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185464,"byte_end":185468,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"kill","qualname":"::storage::StorageValue::kill","value":"pub fn kill()","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185431,"byte_end":185459,"line_start":181,"line_end":181,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185533,"byte_end":185537,"line_start":185,"line_end":185,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageValue::take","value":"pub fn take() -> Self::Query","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185474,"byte_end":185528,"line_start":184,"line_end":184,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3120},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185891,"byte_end":185897,"line_start":196,"line_end":196,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageValue::append","value":"pub fn append<Item, EncodeLikeItem>(EncodeLikeItem) where Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, T: StorageAppend<Item>","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185558,"byte_end":185612,"line_start":187,"line_end":187,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185614,"byte_end":185617,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185619,"byte_end":185670,"line_start":189,"line_end":189,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185672,"byte_end":185675,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185677,"byte_end":185690,"line_start":191,"line_end":191,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185692,"byte_end":185695,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185697,"byte_end":185782,"line_start":193,"line_end":193,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185784,"byte_end":185867,"line_start":194,"line_end":194,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":185869,"byte_end":185886,"line_start":195,"line_end":195,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3123},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186457,"byte_end":186467,"line_start":213,"line_end":213,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageValue::decode_len","value":"pub fn decode_len() -> Option<usize> where T: StorageDecodeLength","parent":{"krate":0,"index":3097},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186029,"byte_end":186104,"line_start":202,"line_end":202,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186106,"byte_end":186109,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186111,"byte_end":186168,"line_start":204,"line_end":204,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186170,"byte_end":186173,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186175,"byte_end":186261,"line_start":206,"line_end":206,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186263,"byte_end":186301,"line_start":207,"line_end":207,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186303,"byte_end":186306,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186308,"byte_end":186321,"line_start":209,"line_end":209,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186323,"byte_end":186326,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186328,"byte_end":186421,"line_start":211,"line_end":211,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186423,"byte_end":186452,"line_start":212,"line_end":212,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":3124},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186690,"byte_end":186700,"line_start":224,"line_end":224,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3130},{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3139},{"krate":0,"index":3142},{"krate":0,"index":3144},{"krate":0,"index":3148},{"krate":0,"index":3153},{"krate":0,"index":3157},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3173}],"decl_id":null,"docs":" A strongly-typed map in storage.","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186566,"byte_end":186602,"line_start":221,"line_end":221,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186603,"byte_end":186606,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageMap`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186607,"byte_end":186679,"line_start":223,"line_end":223,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":3127},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186774,"byte_end":186779,"line_start":226,"line_end":226,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186733,"byte_end":186767,"line_start":225,"line_end":225,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3128},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186866,"byte_end":186880,"line_start":229,"line_end":229,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageMap::hashed_key_for","value":"pub fn hashed_key_for<KeyArg: EncodeLike<K>>(KeyArg) -> Vec<u8>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186783,"byte_end":186861,"line_start":228,"line_end":228,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3130},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186985,"byte_end":186997,"line_start":232,"line_end":232,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageMap::contains_key","value":"pub fn contains_key<KeyArg: EncodeLike<K>>(KeyArg) -> bool","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":186931,"byte_end":186980,"line_start":231,"line_end":231,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187112,"byte_end":187115,"line_start":235,"line_end":235,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageMap::get","value":"pub fn get<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187045,"byte_end":187107,"line_start":234,"line_end":234,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3134},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187282,"byte_end":187289,"line_start":240,"line_end":240,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageMap::try_get","value":"pub fn try_get<KeyArg: EncodeLike<K>>(KeyArg) -> Result<V, ()>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187170,"byte_end":187226,"line_start":237,"line_end":237,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187228,"byte_end":187231,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187233,"byte_end":187277,"line_start":239,"line_end":239,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3136},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187383,"byte_end":187387,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageMap::swap","value":"pub fn swap<KeyArg1: EncodeLike<K>, KeyArg2: EncodeLike<K>>(KeyArg1, KeyArg2)","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187346,"byte_end":187378,"line_start":242,"line_end":242,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187541,"byte_end":187547,"line_start":246,"line_end":246,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageMap::insert","value":"pub fn insert<KeyArg: EncodeLike<K>, ValArg: EncodeLike<V>>(KeyArg, ValArg)","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187469,"byte_end":187536,"line_start":245,"line_end":245,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187661,"byte_end":187667,"line_start":249,"line_end":249,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageMap::remove","value":"pub fn remove<KeyArg: EncodeLike<K>>(KeyArg)","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187623,"byte_end":187656,"line_start":248,"line_end":248,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3144},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187745,"byte_end":187751,"line_start":252,"line_end":252,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageMap::mutate","value":"pub fn mutate<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Self::Query) ->\nR>(KeyArg, F) -> R","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187707,"byte_end":187740,"line_start":251,"line_end":251,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187899,"byte_end":187909,"line_start":255,"line_end":255,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageMap::try_mutate","value":"pub fn try_mutate<KeyArg: EncodeLike<K>, R, E, F: FnOnce(&mut Self::Query) ->\nResult<R, E>>(KeyArg, F) -> Result<R, E>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":187839,"byte_end":187894,"line_start":254,"line_end":254,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3153},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188119,"byte_end":188132,"line_start":263,"line_end":263,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageMap::mutate_exists","value":"pub fn mutate_exists<KeyArg: EncodeLike<K>, R, F: FnOnce(&mut Option<V>) ->\nR>(KeyArg, F) -> R","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Mutate the value under a key.","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188030,"byte_end":188063,"line_start":260,"line_end":260,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188065,"byte_end":188068,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188070,"byte_end":188114,"line_start":262,"line_end":262,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188510,"byte_end":188527,"line_start":271,"line_end":271,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageMap::try_mutate_exists","value":"pub fn try_mutate_exists<KeyArg: EncodeLike<K>, R, E,\nF: FnOnce(&mut Option<V>) -> Result<R, E>>(KeyArg, F) -> Result<R, E>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188226,"byte_end":188322,"line_start":268,"line_end":268,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188324,"byte_end":188420,"line_start":269,"line_end":269,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188422,"byte_end":188505,"line_start":270,"line_end":270,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188682,"byte_end":188686,"line_start":277,"line_end":277,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageMap::take","value":"pub fn take<KeyArg: EncodeLike<K>>(KeyArg) -> Self::Query","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188646,"byte_end":188677,"line_start":276,"line_end":276,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3164},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189074,"byte_end":189080,"line_start":288,"line_end":288,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageMap::append","value":"pub fn append<Item, EncodeLikeItem,\nEncodeLikeKey>(EncodeLikeKey, EncodeLikeItem) where\nEncodeLikeKey: EncodeLike<K>, Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nV: StorageAppend<Item>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188741,"byte_end":188796,"line_start":279,"line_end":279,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188798,"byte_end":188801,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188803,"byte_end":188858,"line_start":281,"line_end":281,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188860,"byte_end":188863,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188865,"byte_end":188878,"line_start":283,"line_end":283,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188880,"byte_end":188883,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188885,"byte_end":188965,"line_start":285,"line_end":285,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":188967,"byte_end":189050,"line_start":286,"line_end":286,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189052,"byte_end":189069,"line_start":287,"line_end":287,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189734,"byte_end":189744,"line_start":307,"line_end":307,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageMap::decode_len","value":"pub fn decode_len<KeyArg: EncodeLike<K>>(KeyArg) -> Option<usize> where\nV: StorageDecodeLength","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189279,"byte_end":189363,"line_start":295,"line_end":295,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189365,"byte_end":189381,"line_start":296,"line_end":296,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189383,"byte_end":189386,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189388,"byte_end":189445,"line_start":298,"line_end":298,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189447,"byte_end":189450,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189452,"byte_end":189538,"line_start":300,"line_end":300,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189540,"byte_end":189578,"line_start":301,"line_end":301,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189580,"byte_end":189583,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189585,"byte_end":189598,"line_start":303,"line_end":303,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189600,"byte_end":189603,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189605,"byte_end":189698,"line_start":305,"line_end":305,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189700,"byte_end":189729,"line_start":306,"line_end":306,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3170},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190072,"byte_end":190083,"line_start":317,"line_end":317,"column_start":5,"column_end":16},"name":"migrate_key","qualname":"::storage::StorageMap::migrate_key","value":"pub fn migrate_key<OldHasher: StorageHasher, KeyArg: EncodeLike<K>>(KeyArg)\n-> Option<V>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189883,"byte_end":189973,"line_start":314,"line_end":314,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189975,"byte_end":189978,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":189980,"byte_end":190067,"line_start":316,"line_end":316,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3173},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190351,"byte_end":190373,"line_start":322,"line_end":322,"column_start":5,"column_end":27},"name":"migrate_key_from_blake","qualname":"::storage::StorageMap::migrate_key_from_blake","value":"pub fn migrate_key_from_blake<KeyArg: EncodeLike<K>>(KeyArg) -> Option<V>","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190162,"byte_end":190252,"line_start":319,"line_end":319,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190254,"byte_end":190257,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190259,"byte_end":190346,"line_start":321,"line_end":321,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":3175},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190581,"byte_end":190599,"line_start":328,"line_end":328,"column_start":11,"column_end":29},"name":"IterableStorageMap","qualname":"::storage::IterableStorageMap","value":"IterableStorageMap<K: FullEncode, V: FullCodec>: StorageMap<K, V>","parent":null,"children":[{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3181},{"krate":0,"index":3182},{"krate":0,"index":3183},{"krate":0,"index":3184},{"krate":0,"index":3185}],"decl_id":null,"docs":" A strongly-typed map in storage whose keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage whose keys and values can be iterated over.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190491,"byte_end":190570,"line_start":327,"line_end":327,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":3178},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190708,"byte_end":190716,"line_start":330,"line_end":330,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageMap::Iterator","value":"type Iterator: Iterator<Item = (K, V)>;","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key, value)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190650,"byte_end":190701,"line_start":329,"line_end":329,"column_start":2,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":3179},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190795,"byte_end":190806,"line_start":332,"line_end":332,"column_start":7,"column_end":18},"name":"KeyIterator","qualname":"::storage::IterableStorageMap::KeyIterator","value":"type KeyIterator: Iterator<Item = K>;","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" The type that itereates over all `key`s.\n","sig":null,"attributes":[{"value":"/ The type that itereates over all `key`s.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190744,"byte_end":190788,"line_start":331,"line_end":331,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3180},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190991,"byte_end":190995,"line_start":336,"line_end":336,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in lexicographical order of the encoded key. If you\n alter the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in lexicographical order of the encoded key. If you","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190830,"byte_end":190919,"line_start":334,"line_end":334,"column_start":2,"column_end":91}},{"value":"/ alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190921,"byte_end":190986,"line_start":335,"line_end":335,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3181},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191222,"byte_end":191231,"line_start":341,"line_end":341,"column_start":5,"column_end":14},"name":"iter_from","qualname":"::storage::IterableStorageMap::iter_from","value":"pub fn iter_from(Vec<u8>) -> Self::Iterator","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical\n order of the encoded key. If you alter the map while doing this, you'll get undefined\n results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191019,"byte_end":191112,"line_start":338,"line_end":338,"column_start":2,"column_end":95}},{"value":"/ order of the encoded key. If you alter the map while doing this, you'll get undefined","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191114,"byte_end":191203,"line_start":339,"line_end":339,"column_start":2,"column_end":91}},{"value":"/ results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191205,"byte_end":191217,"line_start":340,"line_end":340,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191465,"byte_end":191474,"line_start":345,"line_end":345,"column_start":5,"column_end":14},"name":"iter_keys","qualname":"::storage::IterableStorageMap::iter_keys","value":"pub fn iter_keys() -> Self::KeyIterator","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Enumerate all keys in the map in lexicographical order of the encoded key, skipping over\n the elements. If you alter the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map in lexicographical order of the encoded key, skipping over","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191280,"byte_end":191372,"line_start":343,"line_end":343,"column_start":2,"column_end":94}},{"value":"/ the elements. If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191374,"byte_end":191460,"line_start":344,"line_end":344,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3183},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191695,"byte_end":191709,"line_start":349,"line_end":349,"column_start":5,"column_end":19},"name":"iter_keys_from","qualname":"::storage::IterableStorageMap::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>) -> Self::KeyIterator","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Enumerate all keys in the map after a specified `starting_raw_key` in lexicographical order\n of the encoded key. If you alter the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map after a specified `starting_raw_key` in lexicographical order","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191501,"byte_end":191596,"line_start":347,"line_end":347,"column_start":2,"column_end":97}},{"value":"/ of the encoded key. If you alter the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191598,"byte_end":191690,"line_start":348,"line_end":348,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":3184},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191956,"byte_end":191961,"line_start":353,"line_end":353,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in lexicographical order of the\n encoded key. If you add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191761,"byte_end":191854,"line_start":351,"line_end":351,"column_start":2,"column_end":95}},{"value":"/ encoded key. If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191856,"byte_end":191951,"line_start":352,"line_end":352,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":3185},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192282,"byte_end":192291,"line_start":360,"line_end":360,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageMap::translate","value":"pub fn translate<O: Decode, F: FnMut(K, O) -> Option<V>>(F)","parent":{"krate":0,"index":3175},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in lexicographical order\n of the encoded key.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in lexicographical order","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":191985,"byte_end":192080,"line_start":355,"line_end":355,"column_start":2,"column_end":97}},{"value":"/ of the encoded key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192082,"byte_end":192105,"line_start":356,"line_end":356,"column_start":2,"column_end":25}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192107,"byte_end":192186,"line_start":357,"line_end":357,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192188,"byte_end":192191,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192193,"byte_end":192277,"line_start":359,"line_end":359,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":3188},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192449,"byte_end":192473,"line_start":364,"line_end":364,"column_start":11,"column_end":35},"name":"IterableStorageDoubleMap","qualname":"::storage::IterableStorageDoubleMap","value":"IterableStorageDoubleMap<K1: FullCodec, K2: FullCodec, V: FullCodec>: StorageDoubleMap<K1, K2, V>","parent":null,"children":[{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3198},{"krate":0,"index":3200},{"krate":0,"index":3202},{"krate":0,"index":3204},{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211}],"decl_id":null,"docs":" A strongly-typed double map in storage whose secondary keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed double map in storage whose secondary keys and values can be iterated over.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192342,"byte_end":192438,"line_start":363,"line_end":363,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":3192},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192601,"byte_end":192619,"line_start":368,"line_end":368,"column_start":7,"column_end":25},"name":"PartialKeyIterator","qualname":"::storage::IterableStorageDoubleMap::PartialKeyIterator","value":"type PartialKeyIterator: Iterator<Item = K2>;","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" The type that iterates over all `key2`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `key2`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192551,"byte_end":192594,"line_start":367,"line_end":367,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3193},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192703,"byte_end":192717,"line_start":371,"line_end":371,"column_start":7,"column_end":21},"name":"PrefixIterator","qualname":"::storage::IterableStorageDoubleMap::PrefixIterator","value":"type PrefixIterator: Iterator<Item = (K2, V)>;","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key2, value)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192644,"byte_end":192696,"line_start":370,"line_end":370,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":3194},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192805,"byte_end":192820,"line_start":374,"line_end":374,"column_start":7,"column_end":22},"name":"FullKeyIterator","qualname":"::storage::IterableStorageDoubleMap::FullKeyIterator","value":"type FullKeyIterator: Iterator<Item = (K1, K2)>;","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192747,"byte_end":192798,"line_start":373,"line_end":373,"column_start":2,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":3195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192916,"byte_end":192924,"line_start":377,"line_end":377,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageDoubleMap::Iterator","value":"type Iterator: Iterator<Item = (K1, K2, V)>;","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, value)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192851,"byte_end":192909,"line_start":376,"line_end":376,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3196},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193186,"byte_end":193197,"line_start":382,"line_end":382,"column_start":5,"column_end":16},"name":"iter_prefix","qualname":"::storage::IterableStorageDoubleMap::iter_prefix","value":"pub fn iter_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in lexicographical order of the\n encoded key. If you add or remove values whose first key is `k1` to the map while doing\n this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192958,"byte_end":193047,"line_start":379,"line_end":379,"column_start":2,"column_end":91}},{"value":"/ encoded key. If you add or remove values whose first key is `k1` to the map while doing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193049,"byte_end":193140,"line_start":380,"line_end":380,"column_start":2,"column_end":93}},{"value":"/ this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193142,"byte_end":193181,"line_start":381,"line_end":381,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3198},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193515,"byte_end":193531,"line_start":387,"line_end":387,"column_start":5,"column_end":21},"name":"iter_prefix_from","qualname":"::storage::IterableStorageDoubleMap::iter_prefix_from","value":"pub fn iter_prefix_from<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>,\nVec<u8>) -> Self::PrefixIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` after a specified `starting_raw_key`\n in lexicographical order of the encoded key. If you add or remove values whose first key is\n `k1` to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` after a specified `starting_raw_key`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193250,"byte_end":193344,"line_start":384,"line_end":384,"column_start":2,"column_end":96}},{"value":"/ in lexicographical order of the encoded key. If you add or remove values whose first key is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193346,"byte_end":193441,"line_start":385,"line_end":385,"column_start":2,"column_end":97}},{"value":"/ `k1` to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193443,"byte_end":193510,"line_start":386,"line_end":386,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3200},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193858,"byte_end":193873,"line_start":393,"line_end":393,"column_start":5,"column_end":20},"name":"iter_key_prefix","qualname":"::storage::IterableStorageDoubleMap::iter_key_prefix","value":"pub fn iter_key_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PartialKeyIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all second keys `k2` in the map with the same first key `k1` in lexicographical\n order of the encoded key. If you add or remove values whose first key is `k1` to the map\n while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all second keys `k2` in the map with the same first key `k1` in lexicographical","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193613,"byte_end":193706,"line_start":390,"line_end":390,"column_start":2,"column_end":95}},{"value":"/ order of the encoded key. If you add or remove values whose first key is `k1` to the map","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193708,"byte_end":193800,"line_start":391,"line_end":391,"column_start":2,"column_end":94}},{"value":"/ while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193802,"byte_end":193853,"line_start":392,"line_end":392,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3202},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194212,"byte_end":194232,"line_start":398,"line_end":398,"column_start":5,"column_end":25},"name":"iter_key_prefix_from","qualname":"::storage::IterableStorageDoubleMap::iter_key_prefix_from","value":"pub fn iter_key_prefix_from<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>,\nVec<u8>) -> Self::PartialKeyIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all second keys `k2` in the map with the same first key `k1` after a specified\n `starting_raw_key` in lexicographical order of the encoded key. If you add or remove values\n whose first key is `k1` to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all second keys `k2` in the map with the same first key `k1` after a specified","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":193930,"byte_end":194022,"line_start":395,"line_end":395,"column_start":2,"column_end":94}},{"value":"/ `starting_raw_key` in lexicographical order of the encoded key. If you add or remove values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194024,"byte_end":194119,"line_start":396,"line_end":396,"column_start":2,"column_end":97}},{"value":"/ whose first key is `k1` to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194121,"byte_end":194207,"line_start":397,"line_end":397,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3204},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194564,"byte_end":194576,"line_start":406,"line_end":406,"column_start":5,"column_end":17},"name":"drain_prefix","qualname":"::storage::IterableStorageDoubleMap::drain_prefix","value":"pub fn drain_prefix<impl EncodeLike<K1>: EncodeLike<K1>>(impl EncodeLike<K1>)\n-> Self::PrefixIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in\n lexicographical order of the encoded key. If you add elements with first key `k1` to the\n map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194324,"byte_end":194408,"line_start":403,"line_end":403,"column_start":2,"column_end":86}},{"value":"/ lexicographical order of the encoded key. If you add elements with first key `k1` to the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194410,"byte_end":194502,"line_start":404,"line_end":404,"column_start":2,"column_end":94}},{"value":"/ map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194504,"byte_end":194559,"line_start":405,"line_end":405,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3206},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194808,"byte_end":194812,"line_start":410,"line_end":410,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageDoubleMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in lexicographical order of the encoded key. If you add\n or remove values to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in lexicographical order of the encoded key. If you add","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194629,"byte_end":194722,"line_start":408,"line_end":408,"column_start":2,"column_end":95}},{"value":"/ or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194724,"byte_end":194803,"line_start":409,"line_end":409,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3207},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195057,"byte_end":195066,"line_start":415,"line_end":415,"column_start":5,"column_end":14},"name":"iter_from","qualname":"::storage::IterableStorageDoubleMap::iter_from","value":"pub fn iter_from(Vec<u8>) -> Self::Iterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical\n order of the encoded key. If you add or remove values to the map while doing this, you'll\n get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194836,"byte_end":194929,"line_start":412,"line_end":412,"column_start":2,"column_end":95}},{"value":"/ order of the encoded key. If you add or remove values to the map while doing this, you'll","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":194931,"byte_end":195024,"line_start":413,"line_end":413,"column_start":2,"column_end":95}},{"value":"/ get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195026,"byte_end":195052,"line_start":414,"line_end":414,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3208},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195304,"byte_end":195313,"line_start":419,"line_end":419,"column_start":5,"column_end":14},"name":"iter_keys","qualname":"::storage::IterableStorageDoubleMap::iter_keys","value":"pub fn iter_keys() -> Self::FullKeyIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all keys `k1` and `k2` in the map in lexicographical order of the encoded key. If\n you add or remove values to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys `k1` and `k2` in the map in lexicographical order of the encoded key. If","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195115,"byte_end":195210,"line_start":417,"line_end":417,"column_start":2,"column_end":97}},{"value":"/ you add or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195212,"byte_end":195299,"line_start":418,"line_end":418,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3209},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195575,"byte_end":195589,"line_start":424,"line_end":424,"column_start":5,"column_end":19},"name":"iter_keys_from","qualname":"::storage::IterableStorageDoubleMap::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>) -> Self::FullKeyIterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Enumerate all keys `k1` and `k2` in the map after a specified `starting_raw_key` in\n lexicographical order of the encoded key. If you add or remove values to the map while\n doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys `k1` and `k2` in the map after a specified `starting_raw_key` in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195344,"byte_end":195431,"line_start":421,"line_end":421,"column_start":2,"column_end":89}},{"value":"/ lexicographical order of the encoded key. If you add or remove values to the map while","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195433,"byte_end":195523,"line_start":422,"line_end":422,"column_start":2,"column_end":92}},{"value":"/ doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195525,"byte_end":195570,"line_start":423,"line_end":423,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3210},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195840,"byte_end":195845,"line_start":428,"line_end":428,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageDoubleMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in lexicographical order of the\n encoded key. If you add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195645,"byte_end":195738,"line_start":426,"line_end":426,"column_start":2,"column_end":95}},{"value":"/ encoded key. If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195740,"byte_end":195835,"line_start":427,"line_end":427,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":3211},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196166,"byte_end":196175,"line_start":435,"line_end":435,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageDoubleMap::translate","value":"pub fn translate<O: Decode, F: FnMut(K1, K2, O) -> Option<V>>(F)","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in lexicographical order\n of the encoded key.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in lexicographical order","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195869,"byte_end":195964,"line_start":430,"line_end":430,"column_start":2,"column_end":97}},{"value":"/ of the encoded key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195966,"byte_end":195989,"line_start":431,"line_end":431,"column_start":2,"column_end":25}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":195991,"byte_end":196070,"line_start":432,"line_end":432,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196072,"byte_end":196075,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196077,"byte_end":196161,"line_start":434,"line_end":434,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":3214},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196355,"byte_end":196374,"line_start":440,"line_end":440,"column_start":11,"column_end":30},"name":"IterableStorageNMap","qualname":"::storage::IterableStorageNMap","value":"IterableStorageNMap<K: ReversibleKeyGenerator, V: FullCodec>: StorageNMap<K, V>","parent":null,"children":[{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3221},{"krate":0,"index":3223},{"krate":0,"index":3225},{"krate":0,"index":3227},{"krate":0,"index":3229},{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234}],"decl_id":null,"docs":" A strongly-typed map with arbitrary number of keys in storage whose keys and values can be\n iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed map with arbitrary number of keys in storage whose keys and values can be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196231,"byte_end":196325,"line_start":438,"line_end":438,"column_start":1,"column_end":95}},{"value":"/ iterated over.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196326,"byte_end":196344,"line_start":439,"line_end":439,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":3217},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196519,"byte_end":196530,"line_start":442,"line_end":442,"column_start":7,"column_end":18},"name":"KeyIterator","qualname":"::storage::IterableStorageNMap::KeyIterator","value":"type KeyIterator: Iterator<Item = K::Key>;","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, key3, ... keyN)` tuples.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, key3, ... keyN)` tuples.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196438,"byte_end":196512,"line_start":441,"line_end":441,"column_start":2,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":3218},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196648,"byte_end":196656,"line_start":445,"line_end":445,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageNMap::Iterator","value":"type Iterator: Iterator<Item = (K::Key, V)>;","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, key3, ... keyN), value)` tuples.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, key3, ... keyN), value)` tuples.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196559,"byte_end":196641,"line_start":444,"line_end":444,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196916,"byte_end":196927,"line_start":450,"line_end":450,"column_start":5,"column_end":16},"name":"iter_prefix","qualname":"::storage::IterableStorageNMap::iter_prefix","value":"pub fn iter_prefix<KP>(KP)\n-> PrefixIterator<(<K as HasKeyPrefix<KP>>::Suffix, V)> where\nK: HasReversibleKeyPrefix<KP>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with prefix key `kp` in lexicographical order of the\n encoded key. If you add or remove values whose prefix is `kp` to the map while doing this,\n you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with prefix key `kp` in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196690,"byte_end":196780,"line_start":447,"line_end":447,"column_start":2,"column_end":92}},{"value":"/ encoded key. If you add or remove values whose prefix is `kp` to the map while doing this,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196782,"byte_end":196876,"line_start":448,"line_end":448,"column_start":2,"column_end":96}},{"value":"/ you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196878,"byte_end":196911,"line_start":449,"line_end":449,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3221},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197301,"byte_end":197317,"line_start":457,"line_end":457,"column_start":5,"column_end":21},"name":"iter_prefix_from","qualname":"::storage::IterableStorageNMap::iter_prefix_from","value":"pub fn iter_prefix_from<KP>(KP, Vec<u8>)\n-> PrefixIterator<(<K as HasKeyPrefix<KP>>::Suffix, V)> where\nK: HasReversibleKeyPrefix<KP>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with prefix key `kp` after a specified `starting_raw_key`\n in lexicographical order of the encoded key. If you add or remove values whose prefix is\n `kp` to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with prefix key `kp` after a specified `starting_raw_key`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197038,"byte_end":197133,"line_start":454,"line_end":454,"column_start":2,"column_end":97}},{"value":"/ in lexicographical order of the encoded key. If you add or remove values whose prefix is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197135,"byte_end":197227,"line_start":455,"line_end":455,"column_start":2,"column_end":94}},{"value":"/ `kp` to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197229,"byte_end":197296,"line_start":456,"line_end":456,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3223},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197692,"byte_end":197707,"line_start":467,"line_end":467,"column_start":5,"column_end":20},"name":"iter_key_prefix","qualname":"::storage::IterableStorageNMap::iter_key_prefix","value":"pub fn iter_key_prefix<KP>(KP)\n-> KeyPrefixIterator<<K as HasKeyPrefix<KP>>::Suffix> where\nK: HasReversibleKeyPrefix<KP>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all suffix keys in the map with prefix key `kp` in lexicographical order of the\n encoded key. If you add or remove values whose prefix is `kp` to the map while doing this,\n you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all suffix keys in the map with prefix key `kp` in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197463,"byte_end":197556,"line_start":464,"line_end":464,"column_start":2,"column_end":95}},{"value":"/ encoded key. If you add or remove values whose prefix is `kp` to the map while doing this,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197558,"byte_end":197652,"line_start":465,"line_end":465,"column_start":2,"column_end":96}},{"value":"/ you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197654,"byte_end":197687,"line_start":466,"line_end":466,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3225},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198082,"byte_end":198102,"line_start":474,"line_end":474,"column_start":5,"column_end":25},"name":"iter_key_prefix_from","qualname":"::storage::IterableStorageNMap::iter_key_prefix_from","value":"pub fn iter_key_prefix_from<KP>(KP, Vec<u8>)\n-> KeyPrefixIterator<<K as HasKeyPrefix<KP>>::Suffix> where\nK: HasReversibleKeyPrefix<KP>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all suffix keys in the map with prefix key `kp` after a specified\n `starting_raw_key` in lexicographical order of the encoded key. If you add or remove values\n whose prefix is `kp` to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all suffix keys in the map with prefix key `kp` after a specified","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197816,"byte_end":197895,"line_start":471,"line_end":471,"column_start":2,"column_end":81}},{"value":"/ `starting_raw_key` in lexicographical order of the encoded key. If you add or remove values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197897,"byte_end":197992,"line_start":472,"line_end":472,"column_start":2,"column_end":97}},{"value":"/ whose prefix is `kp` to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":197994,"byte_end":198077,"line_start":473,"line_end":473,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3227},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198488,"byte_end":198500,"line_start":484,"line_end":484,"column_start":5,"column_end":17},"name":"drain_prefix","qualname":"::storage::IterableStorageNMap::drain_prefix","value":"pub fn drain_prefix<KP>(KP)\n-> PrefixIterator<(<K as HasKeyPrefix<KP>>::Suffix, V)> where\nK: HasReversibleKeyPrefix<KP>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Remove all elements from the map with prefix key `kp` and iterate through them in\n lexicographical order of the encoded key. If you add elements with prefix key `kp` to the\n map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map with prefix key `kp` and iterate through them in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198246,"byte_end":198331,"line_start":481,"line_end":481,"column_start":2,"column_end":87}},{"value":"/ lexicographical order of the encoded key. If you add elements with prefix key `kp` to the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198333,"byte_end":198426,"line_start":482,"line_end":482,"column_start":2,"column_end":95}},{"value":"/ map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198428,"byte_end":198483,"line_start":483,"line_end":483,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198790,"byte_end":198794,"line_start":490,"line_end":490,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageNMap::iter","value":"pub fn iter() -> Self::Iterator","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in lexicographical order of the encoded key. If you add\n or remove values to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in lexicographical order of the encoded key. If you add","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198611,"byte_end":198704,"line_start":488,"line_end":488,"column_start":2,"column_end":95}},{"value":"/ or remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198706,"byte_end":198785,"line_start":489,"line_end":489,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199039,"byte_end":199048,"line_start":495,"line_end":495,"column_start":5,"column_end":14},"name":"iter_from","qualname":"::storage::IterableStorageNMap::iter_from","value":"pub fn iter_from(Vec<u8>) -> Self::Iterator","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical\n order of the encoded key. If you add or remove values to the map while doing this, you'll\n get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map after a specified `starting_raw_key` in lexicographical","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198818,"byte_end":198911,"line_start":492,"line_end":492,"column_start":2,"column_end":95}},{"value":"/ order of the encoded key. If you add or remove values to the map while doing this, you'll","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":198913,"byte_end":199006,"line_start":493,"line_end":493,"column_start":2,"column_end":95}},{"value":"/ get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199008,"byte_end":199034,"line_start":494,"line_end":494,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3231},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199272,"byte_end":199281,"line_start":499,"line_end":499,"column_start":5,"column_end":14},"name":"iter_keys","qualname":"::storage::IterableStorageNMap::iter_keys","value":"pub fn iter_keys() -> Self::KeyIterator","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all keys in the map in lexicographical order of the encoded key. If you add or\n remove values to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map in lexicographical order of the encoded key. If you add or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199097,"byte_end":199189,"line_start":497,"line_end":497,"column_start":2,"column_end":94}},{"value":"/ remove values to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199191,"byte_end":199267,"line_start":498,"line_end":498,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199513,"byte_end":199527,"line_start":504,"line_end":504,"column_start":5,"column_end":19},"name":"iter_keys_from","qualname":"::storage::IterableStorageNMap::iter_keys_from","value":"pub fn iter_keys_from(Vec<u8>) -> Self::KeyIterator","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Enumerate all keys in the map after `starting_raw_key` in lexicographical order of the\n encoded key. If you add or remove values to the map while doing this, you'll get undefined\n results.\n","sig":null,"attributes":[{"value":"/ Enumerate all keys in the map after `starting_raw_key` in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199308,"byte_end":199398,"line_start":501,"line_end":501,"column_start":2,"column_end":92}},{"value":"/ encoded key. If you add or remove values to the map while doing this, you'll get undefined","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199400,"byte_end":199494,"line_start":502,"line_end":502,"column_start":2,"column_end":96}},{"value":"/ results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199496,"byte_end":199508,"line_start":503,"line_end":503,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199774,"byte_end":199779,"line_start":508,"line_end":508,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageNMap::drain","value":"pub fn drain() -> Self::Iterator","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in lexicographical order of the\n encoded key. If you add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in lexicographical order of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199579,"byte_end":199672,"line_start":506,"line_end":506,"column_start":2,"column_end":95}},{"value":"/ encoded key. If you add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199674,"byte_end":199769,"line_start":507,"line_end":507,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200100,"byte_end":200109,"line_start":515,"line_end":515,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageNMap::translate","value":"pub fn translate<O: Decode, F: FnMut(K::Key, O) -> Option<V>>(F)","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in lexicographical order\n of the encoded key.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in lexicographical order","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199803,"byte_end":199898,"line_start":510,"line_end":510,"column_start":2,"column_end":97}},{"value":"/ of the encoded key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199900,"byte_end":199923,"line_start":511,"line_end":511,"column_start":2,"column_end":25}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":199925,"byte_end":200004,"line_start":512,"line_end":512,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200006,"byte_end":200009,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200011,"byte_end":200095,"line_start":514,"line_end":514,"column_start":2,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":3237},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200415,"byte_end":200431,"line_start":524,"line_end":524,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3245},{"krate":0,"index":3248},{"krate":0,"index":3251},{"krate":0,"index":3254},{"krate":0,"index":3257},{"krate":0,"index":3262},{"krate":0,"index":3266},{"krate":0,"index":3269},{"krate":0,"index":3271},{"krate":0,"index":3273},{"krate":0,"index":3278},{"krate":0,"index":3284},{"krate":0,"index":3289},{"krate":0,"index":3295},{"krate":0,"index":3300},{"krate":0,"index":3303}],"decl_id":null,"docs":" An implementation of a map with a two keys.","sig":null,"attributes":[{"value":"/ An implementation of a map with a two keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200165,"byte_end":200212,"line_start":518,"line_end":518,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200213,"byte_end":200216,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ It provides an important ability to efficiently remove all entries","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200217,"byte_end":200287,"line_start":520,"line_end":520,"column_start":1,"column_end":71}},{"value":"/ that have a common first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200288,"byte_end":200321,"line_start":521,"line_end":521,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200322,"byte_end":200325,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at [`generator::StorageDoubleMap`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200326,"byte_end":200404,"line_start":523,"line_end":523,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":3241},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200523,"byte_end":200528,"line_start":526,"line_end":526,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200481,"byte_end":200516,"line_start":525,"line_end":525,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200615,"byte_end":200629,"line_start":529,"line_end":529,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageDoubleMap::hashed_key_for","value":"pub fn hashed_key_for<KArg1, KArg2>(KArg1, KArg2) -> Vec<u8> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200532,"byte_end":200610,"line_start":528,"line_end":528,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200790,"byte_end":200802,"line_start":535,"line_end":535,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageDoubleMap::contains_key","value":"pub fn contains_key<KArg1, KArg2>(KArg1, KArg2) -> bool where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200736,"byte_end":200785,"line_start":534,"line_end":534,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200980,"byte_end":200983,"line_start":541,"line_end":541,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageDoubleMap::get","value":"pub fn get<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":200906,"byte_end":200975,"line_start":540,"line_end":540,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3251},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201213,"byte_end":201220,"line_start":549,"line_end":549,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageDoubleMap::try_get","value":"pub fn try_get<KArg1, KArg2>(KArg1, KArg2) -> Result<V, ()> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the double map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201094,"byte_end":201157,"line_start":546,"line_end":546,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201159,"byte_end":201162,"line_start":547,"line_end":547,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201164,"byte_end":201208,"line_start":548,"line_end":548,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3254},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201392,"byte_end":201396,"line_start":555,"line_end":555,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageDoubleMap::take","value":"pub fn take<KArg1, KArg2>(KArg1, KArg2) -> Self::Query where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201333,"byte_end":201387,"line_start":554,"line_end":554,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3257},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201549,"byte_end":201553,"line_start":561,"line_end":561,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageDoubleMap::swap","value":"pub fn swap<XKArg1, XKArg2, YKArg1, YKArg2>(XKArg1, XKArg2, YKArg1, YKArg2)\nwhere XKArg1: EncodeLike<K1>, XKArg2: EncodeLike<K2>, YKArg1: EncodeLike<K1>,\nYKArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201507,"byte_end":201544,"line_start":560,"line_end":560,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201835,"byte_end":201841,"line_start":569,"line_end":569,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageDoubleMap::insert","value":"pub fn insert<KArg1, KArg2, VArg>(KArg1, KArg2, VArg) where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, VArg: EncodeLike<V>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201755,"byte_end":201830,"line_start":568,"line_end":568,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202024,"byte_end":202030,"line_start":576,"line_end":576,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageDoubleMap::remove","value":"pub fn remove<KArg1, KArg2>(KArg1, KArg2) where KArg1: EncodeLike<K1>,\nKArg2: EncodeLike<K2>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":201977,"byte_end":202019,"line_start":575,"line_end":575,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3269},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202173,"byte_end":202186,"line_start":582,"line_end":582,"column_start":5,"column_end":18},"name":"remove_prefix","qualname":"::storage::StorageDoubleMap::remove_prefix","value":"pub fn remove_prefix<KArg1>(KArg1, Option<u32>) -> sp_io::KillStorageResult\nwhere KArg1: ?Sized + EncodeLike<K1>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202126,"byte_end":202168,"line_start":581,"line_end":581,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202350,"byte_end":202368,"line_start":587,"line_end":587,"column_start":5,"column_end":23},"name":"iter_prefix_values","qualname":"::storage::StorageDoubleMap::iter_prefix_values","value":"pub fn iter_prefix_values<KArg1>(KArg1) -> PrefixIterator<V> where\nKArg1: ?Sized + EncodeLike<K1>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202296,"byte_end":202345,"line_start":586,"line_end":586,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3273},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202498,"byte_end":202504,"line_start":592,"line_end":592,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageDoubleMap::mutate","value":"pub fn mutate<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Self::Query) -> R","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202451,"byte_end":202493,"line_start":591,"line_end":591,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3278},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202730,"byte_end":202740,"line_start":599,"line_end":599,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageDoubleMap::try_mutate","value":"pub fn try_mutate<KArg1, KArg2, R, E, F>(KArg1, KArg2, F) -> Result<R, E>\nwhere KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Self::Query) -> Result<R, E>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202653,"byte_end":202725,"line_start":598,"line_end":598,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3284},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203002,"byte_end":203015,"line_start":606,"line_end":606,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageDoubleMap::mutate_exists","value":"pub fn mutate_exists<KArg1, KArg2, R, F>(KArg1, KArg2, F) -> R where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, F: FnOnce(&mut Option<V>) -> R","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":202914,"byte_end":202997,"line_start":605,"line_end":605,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3289},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203446,"byte_end":203463,"line_start":615,"line_end":615,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageDoubleMap::try_mutate_exists","value":"pub fn try_mutate_exists<KArg1, KArg2, R, E, F>(KArg1, KArg2, F)\n-> Result<R, E> where KArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>,\nF: FnOnce(&mut Option<V>) -> Result<R, E>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203162,"byte_end":203258,"line_start":612,"line_end":612,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203260,"byte_end":203356,"line_start":613,"line_end":613,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203358,"byte_end":203441,"line_start":614,"line_end":614,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3295},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203963,"byte_end":203969,"line_start":630,"line_end":630,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageDoubleMap::append","value":"pub fn append<Item, EncodeLikeItem, KArg1,\nKArg2>(KArg1, KArg2, EncodeLikeItem) where KArg1: EncodeLike<K1>,\nKArg2: EncodeLike<K2>, Item: Encode, EncodeLikeItem: EncodeLike<Item>,\nV: StorageAppend<Item>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203635,"byte_end":203689,"line_start":621,"line_end":621,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203691,"byte_end":203694,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageAppend`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203696,"byte_end":203747,"line_start":623,"line_end":623,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203749,"byte_end":203752,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203754,"byte_end":203767,"line_start":625,"line_end":625,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203769,"byte_end":203772,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203774,"byte_end":203854,"line_start":627,"line_end":627,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203856,"byte_end":203939,"line_start":628,"line_end":628,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":203941,"byte_end":203958,"line_start":629,"line_end":629,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3300},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204654,"byte_end":204664,"line_start":650,"line_end":650,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDoubleMap::decode_len","value":"pub fn decode_len<KArg1, KArg2>(KArg1, KArg2) -> Option<usize> where\nKArg1: EncodeLike<K1>, KArg2: EncodeLike<K2>, V: StorageDecodeLength","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204187,"byte_end":204271,"line_start":638,"line_end":638,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204273,"byte_end":204301,"line_start":639,"line_end":639,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204303,"byte_end":204306,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204308,"byte_end":204365,"line_start":641,"line_end":641,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204367,"byte_end":204370,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204372,"byte_end":204458,"line_start":643,"line_end":643,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204460,"byte_end":204498,"line_start":644,"line_end":644,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204500,"byte_end":204503,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204505,"byte_end":204518,"line_start":646,"line_end":646,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204520,"byte_end":204523,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204525,"byte_end":204618,"line_start":648,"line_end":648,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204620,"byte_end":204649,"line_start":649,"line_end":649,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3303},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205087,"byte_end":205099,"line_start":663,"line_end":663,"column_start":5,"column_end":17},"name":"migrate_keys","qualname":"::storage::StorageDoubleMap::migrate_keys","value":"pub fn migrate_keys<OldHasher1: StorageHasher, OldHasher2: StorageHasher,\nKeyArg1: EncodeLike<K1>, KeyArg2: EncodeLike<K2>>(KeyArg1, KeyArg2)\n-> Option<V>","parent":{"krate":0,"index":3237},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204864,"byte_end":204946,"line_start":659,"line_end":659,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204948,"byte_end":204988,"line_start":660,"line_end":660,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204990,"byte_end":204993,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":204995,"byte_end":205082,"line_start":662,"line_end":662,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":3308},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205424,"byte_end":205435,"line_start":677,"line_end":677,"column_start":11,"column_end":22},"name":"StorageNMap","qualname":"::storage::StorageNMap","value":"StorageNMap<K: KeyGenerator, V: FullCodec>","parent":null,"children":[{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3314},{"krate":0,"index":3316},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3324},{"krate":0,"index":3327},{"krate":0,"index":3329},{"krate":0,"index":3331},{"krate":0,"index":3333},{"krate":0,"index":3337},{"krate":0,"index":3342},{"krate":0,"index":3346},{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3357},{"krate":0,"index":3359}],"decl_id":null,"docs":" An implementation of a map with an arbitrary number of keys.","sig":null,"attributes":[{"value":"/ An implementation of a map with an arbitrary number of keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205271,"byte_end":205335,"line_start":674,"line_end":674,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205336,"byte_end":205339,"line_start":675,"line_end":675,"column_start":1,"column_end":4}},{"value":"/ Details of implementation can be found at [`generator::StorageNMap`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205340,"byte_end":205413,"line_start":676,"line_end":676,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":3311},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205512,"byte_end":205517,"line_start":679,"line_end":679,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageNMap::Query","value":"type Query;","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205470,"byte_end":205505,"line_start":678,"line_end":678,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3312},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205604,"byte_end":205618,"line_start":682,"line_end":682,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageNMap::hashed_key_for","value":"pub fn hashed_key_for<KArg: EncodeLikeTuple<K::KArg> +\nTupleToEncodedIter>(KArg) -> Vec<u8>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205521,"byte_end":205599,"line_start":681,"line_end":681,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3314},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205751,"byte_end":205763,"line_start":685,"line_end":685,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageNMap::contains_key","value":"pub fn contains_key<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)\n-> bool","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205697,"byte_end":205746,"line_start":684,"line_end":684,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205906,"byte_end":205909,"line_start":688,"line_end":688,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageNMap::get","value":"pub fn get<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)\n-> Self::Query","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205839,"byte_end":205901,"line_start":687,"line_end":687,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206104,"byte_end":206111,"line_start":693,"line_end":693,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageNMap::try_get","value":"pub fn try_get<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)\n-> Result<V, ()>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Try to get the value for the given key from the map.","sig":null,"attributes":[{"value":"/ Try to get the value for the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":205992,"byte_end":206048,"line_start":690,"line_end":690,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206050,"byte_end":206053,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` if it exists, `Err` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206055,"byte_end":206099,"line_start":692,"line_end":692,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206233,"byte_end":206237,"line_start":696,"line_end":696,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageNMap::swap","value":"pub fn swap<KOther, KArg1, KArg2>(KArg1, KArg2) where KOther: KeyGenerator,\nKArg1: EncodeLikeTuple<K::KArg> + TupleToEncodedIter,\nKArg2: EncodeLikeTuple<KOther::KArg> + TupleToEncodedIter","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206196,"byte_end":206228,"line_start":695,"line_end":695,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3324},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206508,"byte_end":206514,"line_start":703,"line_end":703,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageNMap::insert","value":"pub fn insert<KArg, VArg>(KArg, VArg) where KArg: EncodeLikeTuple<K::KArg> +\nTupleToEncodedIter, VArg: EncodeLike<V>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206436,"byte_end":206503,"line_start":702,"line_end":702,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3327},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206674,"byte_end":206680,"line_start":709,"line_end":709,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageNMap::remove","value":"pub fn remove<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206636,"byte_end":206669,"line_start":708,"line_end":708,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206804,"byte_end":206817,"line_start":712,"line_end":712,"column_start":5,"column_end":18},"name":"remove_prefix","qualname":"::storage::StorageNMap::remove_prefix","value":"pub fn remove_prefix<KP>(KP, Option<u32>) -> sp_io::KillStorageResult where\nK: HasKeyPrefix<KP>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Remove all values under the partial prefix key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the partial prefix key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206748,"byte_end":206799,"line_start":711,"line_end":711,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3331},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206982,"byte_end":207000,"line_start":717,"line_end":717,"column_start":5,"column_end":23},"name":"iter_prefix_values","qualname":"::storage::StorageNMap::iter_prefix_values","value":"pub fn iter_prefix_values<KP>(KP) -> PrefixIterator<V> where\nK: HasKeyPrefix<KP>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Iterate over values that share the partial prefix key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the partial prefix key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":206919,"byte_end":206977,"line_start":716,"line_end":716,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207113,"byte_end":207119,"line_start":722,"line_end":722,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageNMap::mutate","value":"pub fn mutate<KArg, R, F>(KArg, F) -> R where KArg: EncodeLikeTuple<K::KArg> +\nTupleToEncodedIter, F: FnOnce(&mut Self::Query) -> R","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207075,"byte_end":207108,"line_start":721,"line_end":721,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207314,"byte_end":207324,"line_start":728,"line_end":728,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageNMap::try_mutate","value":"pub fn try_mutate<KArg, R, E, F>(KArg, F) -> Result<R, E> where\nKArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter,\nF: FnOnce(&mut Self::Query) -> Result<R, E>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207254,"byte_end":207309,"line_start":727,"line_end":727,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207573,"byte_end":207586,"line_start":736,"line_end":736,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageNMap::mutate_exists","value":"pub fn mutate_exists<KArg, R, F>(KArg, F) -> R where\nKArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter, F: FnOnce(&mut Option<V>)\n-> R","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Mutate the value under a key.","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207484,"byte_end":207517,"line_start":733,"line_end":733,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207519,"byte_end":207522,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207524,"byte_end":207568,"line_start":735,"line_end":735,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208003,"byte_end":208020,"line_start":744,"line_end":744,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageNMap::try_mutate_exists","value":"pub fn try_mutate_exists<KArg, R, E, F>(KArg, F) -> Result<R, E> where\nKArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter, F: FnOnce(&mut Option<V>)\n-> Result<R, E>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207719,"byte_end":207815,"line_start":741,"line_end":741,"column_start":2,"column_end":98}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207817,"byte_end":207913,"line_start":742,"line_end":742,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":207915,"byte_end":207998,"line_start":743,"line_end":743,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3351},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208214,"byte_end":208218,"line_start":750,"line_end":750,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageNMap::take","value":"pub fn take<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)\n-> Self::Query","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208178,"byte_end":208209,"line_start":749,"line_end":749,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3353},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208634,"byte_end":208640,"line_start":761,"line_end":761,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageNMap::append","value":"pub fn append<Item, EncodeLikeItem, KArg>(KArg, EncodeLikeItem) where\nKArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter, Item: Encode,\nEncodeLikeItem: EncodeLike<Item>, V: StorageAppend<Item>","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208301,"byte_end":208356,"line_start":752,"line_end":752,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208358,"byte_end":208361,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208363,"byte_end":208418,"line_start":754,"line_end":754,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208420,"byte_end":208423,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208425,"byte_end":208438,"line_start":756,"line_end":756,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208440,"byte_end":208443,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208445,"byte_end":208525,"line_start":758,"line_end":758,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208527,"byte_end":208610,"line_start":759,"line_end":759,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208612,"byte_end":208629,"line_start":760,"line_end":760,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3357},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209299,"byte_end":209309,"line_start":780,"line_end":780,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageNMap::decode_len","value":"pub fn decode_len<KArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter>(KArg)\n-> Option<usize> where V: StorageDecodeLength","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208844,"byte_end":208928,"line_start":768,"line_end":768,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208930,"byte_end":208946,"line_start":769,"line_end":769,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208948,"byte_end":208951,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":208953,"byte_end":209010,"line_start":771,"line_end":771,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209012,"byte_end":209015,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209017,"byte_end":209103,"line_start":773,"line_end":773,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209105,"byte_end":209143,"line_start":774,"line_end":774,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209145,"byte_end":209148,"line_start":775,"line_end":775,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209150,"byte_end":209163,"line_start":776,"line_end":776,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209165,"byte_end":209168,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209170,"byte_end":209263,"line_start":778,"line_end":778,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209265,"byte_end":209294,"line_start":779,"line_end":779,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3359},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209663,"byte_end":209675,"line_start":790,"line_end":790,"column_start":5,"column_end":17},"name":"migrate_keys","qualname":"::storage::StorageNMap::migrate_keys","value":"pub fn migrate_keys<KArg>(KArg, K::HArg) -> Option<V> where\nKArg: EncodeLikeTuple<K::KArg> + TupleToEncodedIter","parent":{"krate":0,"index":3308},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from defunct `hash_fns` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from defunct `hash_fns` to the current hashers.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209476,"byte_end":209564,"line_start":787,"line_end":787,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209566,"byte_end":209569,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209571,"byte_end":209658,"line_start":789,"line_end":789,"column_start":2,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":3361},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210041,"byte_end":210055,"line_start":800,"line_end":800,"column_start":12,"column_end":26},"name":"PrefixIterator","qualname":"::storage::PrefixIterator","value":"PrefixIterator {  }","parent":null,"children":[{"krate":0,"index":3364},{"krate":0,"index":3365},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3368}],"decl_id":null,"docs":" Iterate or drain over a prefix and decode raw_key and raw_value into `T`.","sig":null,"attributes":[{"value":"/ Iterate or drain over a prefix and decode raw_key and raw_value into `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209790,"byte_end":209867,"line_start":795,"line_end":795,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209868,"byte_end":209871,"line_start":796,"line_end":796,"column_start":1,"column_end":4}},{"value":"/ If any decoding fails it skips it and continues to the next key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209872,"byte_end":209940,"line_start":797,"line_end":797,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209941,"byte_end":209944,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ If draining, then the hook `OnRemoval::on_removal` is called after each removal.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":209945,"byte_end":210029,"line_start":799,"line_end":799,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3372},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210589,"byte_end":210607,"line_start":813,"line_end":813,"column_start":9,"column_end":27},"name":"convert_on_removal","qualname":"<PrefixIterator<T, OnRemoval1>>::convert_on_removal","value":"pub fn convert_on_removal<OnRemoval2>(Self) -> PrefixIterator<T, OnRemoval2>","parent":null,"children":[],"decl_id":null,"docs":" Converts to the same iterator but with the different 'OnRemoval' type\n","sig":null,"attributes":[{"value":"/ Converts to the same iterator but with the different 'OnRemoval' type","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210507,"byte_end":210580,"line_start":812,"line_end":812,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":3374},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210924,"byte_end":210947,"line_start":825,"line_end":825,"column_start":11,"column_end":34},"name":"PrefixIteratorOnRemoval","qualname":"::storage::PrefixIteratorOnRemoval","value":"PrefixIteratorOnRemoval","parent":null,"children":[{"krate":0,"index":3375}],"decl_id":null,"docs":" Trait for specialising on removal logic of [`PrefixIterator`].\n","sig":null,"attributes":[{"value":"/ Trait for specialising on removal logic of [`PrefixIterator`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210847,"byte_end":210913,"line_start":824,"line_end":824,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211016,"byte_end":211026,"line_start":827,"line_end":827,"column_start":5,"column_end":15},"name":"on_removal","qualname":"::storage::PrefixIteratorOnRemoval::on_removal","value":"pub fn on_removal(&[u8], &[u8])","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" This function is called whenever a key/value is removed.\n","sig":null,"attributes":[{"value":"/ This function is called whenever a key/value is removed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210951,"byte_end":211011,"line_start":826,"line_end":826,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211761,"byte_end":211764,"line_start":844,"line_end":844,"column_start":9,"column_end":12},"name":"new","qualname":"<PrefixIterator<T, OnRemoval>>::new","value":"pub fn new(Vec<u8>, Vec<u8>, fn(: &[u8], : &[u8]) -> Result<T, codec::Error>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `PrefixIterator`, iterating after `previous_key` and filtering out keys that\n are not prefixed with `prefix`.","sig":null,"attributes":[{"value":"/ Creates a new `PrefixIterator`, iterating after `previous_key` and filtering out keys that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211221,"byte_end":211315,"line_start":836,"line_end":836,"column_start":2,"column_end":96}},{"value":"/ are not prefixed with `prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211317,"byte_end":211352,"line_start":837,"line_end":837,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211354,"byte_end":211357,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ A `decode_fn` function must also be supplied, and it takes in two `&[u8]` parameters,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211359,"byte_end":211448,"line_start":839,"line_end":839,"column_start":2,"column_end":91}},{"value":"/ returning a `Result` containing the decoded type `T` if successful, and a `codec::Error` on","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211450,"byte_end":211545,"line_start":840,"line_end":840,"column_start":2,"column_end":97}},{"value":"/ failure. The first `&[u8]` argument represents the raw, undecoded key without the prefix of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211547,"byte_end":211642,"line_start":841,"line_end":841,"column_start":2,"column_end":97}},{"value":"/ the current item, while the second `&[u8]` argument denotes the corresponding raw,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211644,"byte_end":211730,"line_start":842,"line_end":842,"column_start":2,"column_end":88}},{"value":"/ undecoded value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211732,"byte_end":211752,"line_start":843,"line_end":843,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":3382},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212081,"byte_end":212093,"line_start":859,"line_end":859,"column_start":9,"column_end":21},"name":"last_raw_key","qualname":"<PrefixIterator<T, OnRemoval>>::last_raw_key","value":"pub fn last_raw_key(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the last key that has been iterated upon and return it.\n","sig":null,"attributes":[{"value":"/ Get the last key that has been iterated upon and return it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212009,"byte_end":212072,"line_start":858,"line_end":858,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3383},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212226,"byte_end":212232,"line_start":864,"line_end":864,"column_start":9,"column_end":15},"name":"prefix","qualname":"<PrefixIterator<T, OnRemoval>>::prefix","value":"pub fn prefix(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the prefix that is being iterated upon for this iterator and return it.\n","sig":null,"attributes":[{"value":"/ Get the prefix that is being iterated upon for this iterator and return it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212138,"byte_end":212217,"line_start":863,"line_end":863,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3384},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212343,"byte_end":212359,"line_start":869,"line_end":869,"column_start":9,"column_end":25},"name":"set_last_raw_key","qualname":"<PrefixIterator<T, OnRemoval>>::set_last_raw_key","value":"pub fn set_last_raw_key(&mut Self, Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Set the key that the iterator should start iterating after.\n","sig":null,"attributes":[{"value":"/ Set the key that the iterator should start iterating after.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212271,"byte_end":212334,"line_start":868,"line_end":868,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3385},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212537,"byte_end":212542,"line_start":874,"line_end":874,"column_start":9,"column_end":14},"name":"drain","qualname":"<PrefixIterator<T, OnRemoval>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212437,"byte_end":212528,"line_start":873,"line_end":873,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":3392},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":213890,"byte_end":213907,"line_start":928,"line_end":928,"column_start":12,"column_end":29},"name":"KeyPrefixIterator","qualname":"::storage::KeyPrefixIterator","value":"KeyPrefixIterator {  }","parent":null,"children":[{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3397}],"decl_id":null,"docs":" Iterate over a prefix and decode raw_key into `T`.","sig":null,"attributes":[{"value":"/ Iterate over a prefix and decode raw_key into `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":213751,"byte_end":213805,"line_start":925,"line_end":925,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":213806,"byte_end":213809,"line_start":926,"line_end":926,"column_start":1,"column_end":4}},{"value":"/ If any decoding fails it skips it and continues to the next key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":213810,"byte_end":213878,"line_start":927,"line_end":927,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214705,"byte_end":214708,"line_start":946,"line_end":946,"column_start":9,"column_end":12},"name":"new","qualname":"<KeyPrefixIterator<T>>::new","value":"pub fn new(Vec<u8>, Vec<u8>, fn(: &[u8]) -> Result<T, codec::Error>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `KeyPrefixIterator`, iterating after `previous_key` and filtering out keys\n that are not prefixed with `prefix`.","sig":null,"attributes":[{"value":"/ Creates a new `KeyPrefixIterator`, iterating after `previous_key` and filtering out keys","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214254,"byte_end":214346,"line_start":939,"line_end":939,"column_start":2,"column_end":94}},{"value":"/ that are not prefixed with `prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214348,"byte_end":214388,"line_start":940,"line_end":940,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214390,"byte_end":214393,"line_start":941,"line_end":941,"column_start":2,"column_end":5}},{"value":"/ A `decode_fn` function must also be supplied, and it takes in a `&[u8]` parameter, returning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214395,"byte_end":214491,"line_start":942,"line_end":942,"column_start":2,"column_end":98}},{"value":"/ a `Result` containing the decoded key type `T` if successful, and a `codec::Error` on","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214493,"byte_end":214582,"line_start":943,"line_end":943,"column_start":2,"column_end":91}},{"value":"/ failure. The `&[u8]` argument represents the raw, undecoded key without the prefix of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214584,"byte_end":214677,"line_start":944,"line_end":944,"column_start":2,"column_end":95}},{"value":"/ current item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214679,"byte_end":214696,"line_start":945,"line_end":945,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3401},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214974,"byte_end":214986,"line_start":955,"line_end":955,"column_start":9,"column_end":21},"name":"last_raw_key","qualname":"<KeyPrefixIterator<T>>::last_raw_key","value":"pub fn last_raw_key(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the last key that has been iterated upon and return it.\n","sig":null,"attributes":[{"value":"/ Get the last key that has been iterated upon and return it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214902,"byte_end":214965,"line_start":954,"line_end":954,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215119,"byte_end":215125,"line_start":960,"line_end":960,"column_start":9,"column_end":15},"name":"prefix","qualname":"<KeyPrefixIterator<T>>::prefix","value":"pub fn prefix(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the prefix that is being iterated upon for this iterator and return it.\n","sig":null,"attributes":[{"value":"/ Get the prefix that is being iterated upon for this iterator and return it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215031,"byte_end":215110,"line_start":959,"line_end":959,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3403},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215236,"byte_end":215252,"line_start":965,"line_end":965,"column_start":9,"column_end":25},"name":"set_last_raw_key","qualname":"<KeyPrefixIterator<T>>::set_last_raw_key","value":"pub fn set_last_raw_key(&mut Self, Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Set the key that the iterator should start iterating after.\n","sig":null,"attributes":[{"value":"/ Set the key that the iterator should start iterating after.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215164,"byte_end":215227,"line_start":964,"line_end":964,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215430,"byte_end":215435,"line_start":970,"line_end":970,"column_start":9,"column_end":14},"name":"drain","qualname":"<KeyPrefixIterator<T>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215330,"byte_end":215421,"line_start":969,"line_end":969,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":3410},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216341,"byte_end":216364,"line_start":1008,"line_end":1008,"column_start":12,"column_end":35},"name":"ChildTriePrefixIterator","qualname":"::storage::ChildTriePrefixIterator","value":"ChildTriePrefixIterator {  }","parent":null,"children":[{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417}],"decl_id":null,"docs":" Iterate over a prefix of a child trie and decode raw_key and raw_value into `T`.","sig":null,"attributes":[{"value":"/ Iterate over a prefix of a child trie and decode raw_key and raw_value into `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216167,"byte_end":216251,"line_start":1005,"line_end":1005,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216252,"byte_end":216255,"line_start":1006,"line_end":1006,"column_start":1,"column_end":4}},{"value":"/ If any decoding fails it skips the key and continues to the next one.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216256,"byte_end":216329,"line_start":1007,"line_end":1007,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217032,"byte_end":217037,"line_start":1026,"line_end":1026,"column_start":9,"column_end":14},"name":"drain","qualname":"<ChildTriePrefixIterator<T>>::drain","value":"pub fn drain(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216932,"byte_end":217023,"line_start":1025,"line_end":1025,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217357,"byte_end":217368,"line_start":1037,"line_end":1037,"column_start":9,"column_end":20},"name":"with_prefix","qualname":"<ChildTriePrefixIterator<(Vec<u8>, T)>>::with_prefix","value":"pub fn with_prefix(&ChildInfo, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over child trie items in `child_info` with the prefix\n `prefix`.","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over child trie items in `child_info` with the prefix","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217157,"byte_end":217244,"line_start":1033,"line_end":1033,"column_start":2,"column_end":89}},{"value":"/ `prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217246,"byte_end":217259,"line_start":1034,"line_end":1034,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217261,"byte_end":217264,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ NOTE: Iterator with [`Self::drain`] will remove any value who failed to decode","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217266,"byte_end":217348,"line_start":1036,"line_end":1036,"column_start":2,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":218081,"byte_end":218101,"line_start":1061,"line_end":1061,"column_start":9,"column_end":29},"name":"with_prefix_over_key","qualname":"<ChildTriePrefixIterator<(K, T)>>::with_prefix_over_key","value":"pub fn with_prefix_over_key<H: ReversibleStorageHasher>(&ChildInfo, &[u8])\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over child trie items in `child_info` with the prefix\n `prefix`.","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over child trie items in `child_info` with the prefix","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217874,"byte_end":217961,"line_start":1057,"line_end":1057,"column_start":2,"column_end":89}},{"value":"/ `prefix`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217963,"byte_end":217976,"line_start":1058,"line_end":1058,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217978,"byte_end":217981,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ NOTE: Iterator with [`Self::drain`] will remove any key or value who failed to decode","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217983,"byte_end":218072,"line_start":1060,"line_end":1060,"column_start":2,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":3436},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220109,"byte_end":220127,"line_start":1143,"line_end":1143,"column_start":11,"column_end":29},"name":"StoragePrefixedMap","qualname":"::storage::StoragePrefixedMap","value":"StoragePrefixedMap<Value: FullCodec>","parent":null,"children":[{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3445}],"decl_id":null,"docs":" Trait for maps that store all its value after a unique prefix.","sig":null,"attributes":[{"value":"/ Trait for maps that store all its value after a unique prefix.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":219913,"byte_end":219979,"line_start":1137,"line_end":1137,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":219980,"byte_end":219983,"line_start":1138,"line_end":1138,"column_start":1,"column_end":4}},{"value":"/ By default the final prefix is:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":219984,"byte_end":220019,"line_start":1139,"line_end":1139,"column_start":1,"column_end":36}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220020,"byte_end":220036,"line_start":1140,"line_end":1140,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220037,"byte_end":220090,"line_start":1141,"line_end":1141,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220091,"byte_end":220098,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220203,"byte_end":220216,"line_start":1145,"line_end":1145,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::StoragePrefixedMap::module_prefix","value":"pub fn module_prefix() -> &'static [u8]","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220149,"byte_end":220198,"line_start":1144,"line_end":1144,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220294,"byte_end":220308,"line_start":1148,"line_end":1148,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::StoragePrefixedMap::storage_prefix","value":"pub fn storage_prefix() -> &'static [u8]","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220239,"byte_end":220289,"line_start":1147,"line_end":1147,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220381,"byte_end":220393,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17},"name":"final_prefix","qualname":"::storage::StoragePrefixedMap::final_prefix","value":"pub fn final_prefix() -> [u8; ]","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Final full prefix that prefixes all keys.\n","sig":null,"attributes":[{"value":"/ Final full prefix that prefixes all keys.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220331,"byte_end":220376,"line_start":1150,"line_end":1150,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220813,"byte_end":220823,"line_start":1160,"line_end":1160,"column_start":5,"column_end":15},"name":"remove_all","qualname":"::storage::StoragePrefixedMap::remove_all","value":"pub fn remove_all(Option<u32>) -> sp_io::KillStorageResult","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Remove all values of the storage in the overlay and up to `limit` in the backend.","sig":null,"attributes":[{"value":"/ Remove all values of the storage in the overlay and up to `limit` in the backend.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220495,"byte_end":220580,"line_start":1155,"line_end":1155,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220582,"byte_end":220585,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ All values in the client overlay will be deleted, if there is some `limit` then up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220587,"byte_end":220676,"line_start":1157,"line_end":1157,"column_start":2,"column_end":91}},{"value":"/ `limit` values are deleted from the client backend, if `limit` is none then all values in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220678,"byte_end":220771,"line_start":1158,"line_end":1158,"column_start":2,"column_end":95}},{"value":"/ the client backend are deleted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220773,"byte_end":220808,"line_start":1159,"line_end":1159,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221077,"byte_end":221088,"line_start":1167,"line_end":1167,"column_start":5,"column_end":16},"name":"iter_values","qualname":"::storage::StoragePrefixedMap::iter_values","value":"pub fn iter_values() -> PrefixIterator<Value>","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Iter over all value of the storage.","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220940,"byte_end":220979,"line_start":1164,"line_end":1164,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220981,"byte_end":220984,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value failed to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":220986,"byte_end":221072,"line_start":1166,"line_end":1166,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221943,"byte_end":221959,"line_start":1191,"line_end":1191,"column_start":5,"column_end":21},"name":"translate_values","qualname":"::storage::StoragePrefixedMap::translate_values","value":"pub fn translate_values<OldValue: Decode, F: FnMut(OldValue) ->\nOption<Value>>(F)","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221363,"byte_end":221457,"line_start":1178,"line_end":1178,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221459,"byte_end":221538,"line_start":1179,"line_end":1179,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221540,"byte_end":221543,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ NOTE: If a value fail to decode because storage is corrupted then it is skipped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221545,"byte_end":221629,"line_start":1181,"line_end":1181,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221631,"byte_end":221634,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221636,"byte_end":221649,"line_start":1183,"line_end":1183,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221651,"byte_end":221654,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221656,"byte_end":221749,"line_start":1185,"line_end":1185,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221751,"byte_end":221823,"line_start":1186,"line_end":1186,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221825,"byte_end":221828,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221830,"byte_end":221841,"line_start":1188,"line_end":1188,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221843,"byte_end":221846,"line_start":1189,"line_end":1189,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":221848,"byte_end":221938,"line_start":1190,"line_end":1190,"column_start":2,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":3449},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222731,"byte_end":222744,"line_start":1216,"line_end":1216,"column_start":11,"column_end":24},"name":"StorageAppend","qualname":"::storage::StorageAppend","value":"StorageAppend<Item: Encode>: private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that will be implemented for types that support the `storage::append` api.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support the `storage::append` api.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222599,"byte_end":222690,"line_start":1213,"line_end":1213,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222691,"byte_end":222694,"line_start":1214,"line_end":1214,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222695,"byte_end":222720,"line_start":1215,"line_end":1215,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":3451},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223052,"byte_end":223071,"line_start":1223,"line_end":1223,"column_start":11,"column_end":30},"name":"StorageDecodeLength","qualname":"::storage::StorageDecodeLength","value":"StorageDecodeLength: private::Sealed + codec::DecodeLength","parent":null,"children":[{"krate":0,"index":3452}],"decl_id":null,"docs":" Marker trait that will be implemented for types that support to decode their length in an\n effificent way. It is expected that the length is at the beginning of the encoded object\n and that the length is a `Compact<u32>`.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support to decode their length in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222780,"byte_end":222873,"line_start":1218,"line_end":1218,"column_start":1,"column_end":94}},{"value":"/ effificent way. It is expected that the length is at the beginning of the encoded object","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222874,"byte_end":222966,"line_start":1219,"line_end":1219,"column_start":1,"column_end":93}},{"value":"/ and that the length is a `Compact<u32>`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222967,"byte_end":223011,"line_start":1220,"line_end":1220,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223012,"byte_end":223015,"line_start":1221,"line_end":1221,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223016,"byte_end":223041,"line_start":1222,"line_end":1222,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223376,"byte_end":223386,"line_start":1230,"line_end":1230,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDecodeLength::decode_len","value":"pub fn decode_len(&[u8]) -> Option<usize>","parent":{"krate":0,"index":3451},"children":[],"decl_id":null,"docs":" Decode the length of the storage value at `key`.","sig":null,"attributes":[{"value":"/ Decode the length of the storage value at `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223114,"byte_end":223166,"line_start":1224,"line_end":1224,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223168,"byte_end":223171,"line_start":1225,"line_end":1225,"column_start":2,"column_end":5}},{"value":"/ This function assumes that the length is at the beginning of the encoded object","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223173,"byte_end":223256,"line_start":1226,"line_end":1226,"column_start":2,"column_end":85}},{"value":"/ and is a `Compact<u32>`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223258,"byte_end":223286,"line_start":1227,"line_end":1227,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223288,"byte_end":223291,"line_start":1228,"line_end":1228,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the storage value does not exist or the decoding failed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223293,"byte_end":223371,"line_start":1229,"line_end":1229,"column_start":2,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":3462},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223901,"byte_end":223907,"line_start":1246,"line_end":1246,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::storage::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3485},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225869,"byte_end":225885,"line_start":1295,"line_end":1295,"column_start":11,"column_end":27},"name":"StorageTryAppend","qualname":"::storage::StorageTryAppend","value":"StorageTryAppend<Item>: StorageDecodeLength + private::Sealed","parent":null,"children":[{"krate":0,"index":3487}],"decl_id":null,"docs":" Marker trait that is implemented for types that support the `storage::append` api with a limit\n on the number of element.","sig":null,"attributes":[{"value":"/ Marker trait that is implemented for types that support the `storage::append` api with a limit","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225700,"byte_end":225798,"line_start":1291,"line_end":1291,"column_start":1,"column_end":99}},{"value":"/ on the number of element.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225799,"byte_end":225828,"line_start":1292,"line_end":1292,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225829,"byte_end":225832,"line_start":1293,"line_end":1293,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225833,"byte_end":225858,"line_start":1294,"line_end":1294,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3487},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225937,"byte_end":225942,"line_start":1296,"line_end":1296,"column_start":5,"column_end":10},"name":"bound","qualname":"::storage::StorageTryAppend::bound","value":"pub fn bound() -> usize","parent":{"krate":0,"index":3485},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3488},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226061,"byte_end":226075,"line_start":1300,"line_end":1300,"column_start":11,"column_end":25},"name":"TryAppendValue","qualname":"::storage::TryAppendValue","value":"TryAppendValue<T: StorageTryAppend<I>, I: Encode>","parent":null,"children":[{"krate":0,"index":3491}],"decl_id":null,"docs":" Storage value that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).\n","sig":null,"attributes":[{"value":"/ Storage value that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225958,"byte_end":226050,"line_start":1299,"line_end":1299,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":3491},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226226,"byte_end":226236,"line_start":1304,"line_end":1304,"column_start":5,"column_end":15},"name":"try_append","qualname":"::storage::TryAppendValue::try_append","value":"pub fn try_append<LikeI: EncodeLike<I>>(LikeI) -> Result<(), ()>","parent":{"krate":0,"index":3488},"children":[],"decl_id":null,"docs":" Try and append the `item` into the storage item.","sig":null,"attributes":[{"value":"/ Try and append the `item` into the storage item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226114,"byte_end":226166,"line_start":1301,"line_end":1301,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226168,"byte_end":226171,"line_start":1302,"line_end":1302,"column_start":2,"column_end":5}},{"value":"/ This might fail if bounds are not respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226173,"byte_end":226221,"line_start":1303,"line_end":1303,"column_start":2,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":3499},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227012,"byte_end":227024,"line_start":1329,"line_end":1329,"column_start":11,"column_end":23},"name":"TryAppendMap","qualname":"::storage::TryAppendMap","value":"TryAppendMap<K: Encode, T: StorageTryAppend<I>, I: Encode>","parent":null,"children":[{"krate":0,"index":3503}],"decl_id":null,"docs":" Storage map that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).\n","sig":null,"attributes":[{"value":"/ Storage map that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226911,"byte_end":227001,"line_start":1328,"line_end":1328,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":3503},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227204,"byte_end":227214,"line_start":1333,"line_end":1333,"column_start":5,"column_end":15},"name":"try_append","qualname":"::storage::TryAppendMap::try_append","value":"pub fn try_append<LikeK: EncodeLike<K> + Clone,\nLikeI: EncodeLike<I>>(LikeK, LikeI) -> Result<(), ()>","parent":{"krate":0,"index":3499},"children":[],"decl_id":null,"docs":" Try and append the `item` into the storage map at the given `key`.","sig":null,"attributes":[{"value":"/ Try and append the `item` into the storage map at the given `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227074,"byte_end":227144,"line_start":1330,"line_end":1330,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227146,"byte_end":227149,"line_start":1331,"line_end":1331,"column_start":2,"column_end":5}},{"value":"/ This might fail if bounds are not respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227151,"byte_end":227199,"line_start":1332,"line_end":1332,"column_start":2,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":3514},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227983,"byte_end":228001,"line_start":1363,"line_end":1363,"column_start":11,"column_end":29},"name":"TryAppendDoubleMap","qualname":"::storage::TryAppendDoubleMap","value":"TryAppendDoubleMap<K1: Encode, K2: Encode, T: StorageTryAppend<I>, I: Encode>","parent":null,"children":[{"krate":0,"index":3519}],"decl_id":null,"docs":" Storage double map that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).\n","sig":null,"attributes":[{"value":"/ Storage double map that is capable of [`StorageTryAppend`](crate::storage::StorageTryAppend).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227875,"byte_end":227972,"line_start":1362,"line_end":1362,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":3519},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228201,"byte_end":228211,"line_start":1367,"line_end":1367,"column_start":5,"column_end":15},"name":"try_append","qualname":"::storage::TryAppendDoubleMap::try_append","value":"pub fn try_append<LikeK1: EncodeLike<K1> + Clone, LikeK2: EncodeLike<K2> +\nClone, LikeI: EncodeLike<I>>(LikeK1, LikeK2, LikeI) -> Result<(), ()>","parent":{"krate":0,"index":3514},"children":[],"decl_id":null,"docs":" Try and append the `item` into the storage double map at the given `key`.","sig":null,"attributes":[{"value":"/ Try and append the `item` into the storage double map at the given `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228064,"byte_end":228141,"line_start":1364,"line_end":1364,"column_start":2,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228143,"byte_end":228146,"line_start":1365,"line_end":1365,"column_start":2,"column_end":5}},{"value":"/ This might fail if bounds are not respected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228148,"byte_end":228196,"line_start":1366,"line_end":1366,"column_start":2,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":3533},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":229279,"byte_end":229293,"line_start":1410,"line_end":1410,"column_start":8,"column_end":22},"name":"storage_prefix","qualname":"::storage::storage_prefix","value":"pub fn storage_prefix(&[u8], &[u8]) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the storage prefix for a specific pallet name and storage name.","sig":null,"attributes":[{"value":"/ Returns the storage prefix for a specific pallet name and storage name.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":229109,"byte_end":229184,"line_start":1407,"line_end":1407,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":229185,"byte_end":229188,"line_start":1408,"line_end":1408,"column_start":1,"column_end":4}},{"value":"/ The storage prefix is `concat(twox_128(pallet_name), twox_128(storage_name))`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":229189,"byte_end":229271,"line_start":1409,"line_end":1409,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":3536},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::event","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/event.rs","parent":null,"children":[{"krate":0,"index":3537},{"krate":0,"index":3538}],"decl_id":null,"docs":" Macros that define an Event types. Events can be used to easily report changes or conditions\n in your runtime to external entities like users, chain explorers, or dApps.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1586,"byte_end":1598,"line_start":62,"line_end":62,"column_start":1,"column_end":13}},{"value":"/ Macros that define an Event types. Events can be used to easily report changes or conditions","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/event.rs","byte_start":542698,"byte_end":542794,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ in your runtime to external entities like users, chain explorers, or dApps.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/event.rs","byte_start":542795,"byte_end":542874,"line_start":19,"line_end":19,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":3539},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inherent","qualname":"::inherent","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","parent":null,"children":[{"krate":0,"index":3540},{"krate":0,"index":3541},{"krate":0,"index":3544},{"krate":0,"index":3547},{"krate":0,"index":3550},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3560},{"krate":0,"index":3563},{"krate":0,"index":3566}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3566},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551414,"byte_end":551429,"line_start":30,"line_end":30,"column_start":11,"column_end":26},"name":"ProvideInherent","qualname":"::inherent::ProvideInherent","value":"ProvideInherent","parent":null,"children":[{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3571},{"krate":0,"index":3572},{"krate":0,"index":3573}],"decl_id":null,"docs":" A pallet that provides or verifies an inherent extrinsic.","sig":null,"attributes":[{"value":"/ A pallet that provides or verifies an inherent extrinsic.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551249,"byte_end":551310,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551311,"byte_end":551314,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The pallet may provide the inherent, verify an inherent, or both provide and verify.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551315,"byte_end":551403,"line_start":29,"line_end":29,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":3567},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551472,"byte_end":551476,"line_start":32,"line_end":32,"column_start":7,"column_end":11},"name":"Call","qualname":"::inherent::ProvideInherent::Call","value":"type Call;","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" The call type of the pallet.\n","sig":null,"attributes":[{"value":"/ The call type of the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551433,"byte_end":551465,"line_start":31,"line_end":31,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":3568},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551529,"byte_end":551534,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"name":"Error","qualname":"::inherent::ProvideInherent::Error","value":"type Error: codec::Encode + IsFatalError;","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" The error returned by `check_inherent`.\n","sig":null,"attributes":[{"value":"/ The error returned by `check_inherent`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551479,"byte_end":551522,"line_start":33,"line_end":33,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":3569},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551625,"byte_end":551644,"line_start":36,"line_end":36,"column_start":8,"column_end":27},"name":"INHERENT_IDENTIFIER","qualname":"::inherent::ProvideInherent::INHERENT_IDENTIFIER","value":"self::InherentIdentifier","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" The inherent identifier used by this inherent.\n","sig":null,"attributes":[{"value":"/ The inherent identifier used by this inherent.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551567,"byte_end":551617,"line_start":35,"line_end":35,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551734,"byte_end":551749,"line_start":39,"line_end":39,"column_start":5,"column_end":20},"name":"create_inherent","qualname":"::inherent::ProvideInherent::create_inherent","value":"pub fn create_inherent(&InherentData) -> Option<Self::Call>","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" Create an inherent out of the given `InherentData`.\n","sig":null,"attributes":[{"value":"/ Create an inherent out of the given `InherentData`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551674,"byte_end":551729,"line_start":38,"line_end":38,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3571},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552535,"byte_end":552555,"line_start":56,"line_end":56,"column_start":5,"column_end":25},"name":"is_inherent_required","qualname":"::inherent::ProvideInherent::is_inherent_required","value":"pub fn is_inherent_required(&InherentData)\n-> Result<Option<Self::Error>, Self::Error>","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" Determines whether this inherent is required in this block.","sig":null,"attributes":[{"value":"/ Determines whether this inherent is required in this block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551796,"byte_end":551859,"line_start":41,"line_end":41,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551861,"byte_end":551864,"line_start":42,"line_end":42,"column_start":2,"column_end":5}},{"value":"/ - `Ok(None)` indicates that this inherent is not required in this block. The default","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551866,"byte_end":551954,"line_start":43,"line_end":43,"column_start":2,"column_end":90}},{"value":"/ implementation returns this.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551956,"byte_end":551988,"line_start":44,"line_end":44,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551990,"byte_end":551993,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ - `Ok(Some(e))` indicates that this inherent is required in this block. `construct_runtime!`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":551995,"byte_end":552091,"line_start":46,"line_end":46,"column_start":2,"column_end":98}},{"value":"/ will call this function from in its implementation of `fn check_extrinsics`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552093,"byte_end":552173,"line_start":47,"line_end":47,"column_start":2,"column_end":82}},{"value":"/ If the inherent is not present, it will return `e`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552175,"byte_end":552230,"line_start":48,"line_end":48,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552232,"byte_end":552235,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ - `Err(_)` indicates that this function failed and further operations should be aborted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552237,"byte_end":552329,"line_start":50,"line_end":50,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552331,"byte_end":552334,"line_start":51,"line_end":51,"column_start":2,"column_end":5}},{"value":"/ NOTE: If inherent is required then the runtime asserts that the block contains at least","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552336,"byte_end":552427,"line_start":52,"line_end":52,"column_start":2,"column_end":93}},{"value":"/ one inherent for which:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552429,"byte_end":552456,"line_start":53,"line_end":53,"column_start":2,"column_end":29}},{"value":"/ * type is [`Self::Call`],","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552458,"byte_end":552487,"line_start":54,"line_end":54,"column_start":2,"column_end":31}},{"value":"/ * [`Self::is_inherent`] returns true.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552489,"byte_end":552530,"line_start":55,"line_end":55,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3572},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553077,"byte_end":553091,"line_start":68,"line_end":68,"column_start":5,"column_end":19},"name":"check_inherent","qualname":"::inherent::ProvideInherent::check_inherent","value":"pub fn check_inherent(&Self::Call, &InherentData) -> Result<(), Self::Error>","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" Check whether the given inherent is valid. Checking the inherent is optional and can be\n omitted by using the default implementation.","sig":null,"attributes":[{"value":"/ Check whether the given inherent is valid. Checking the inherent is optional and can be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552636,"byte_end":552727,"line_start":60,"line_end":60,"column_start":2,"column_end":93}},{"value":"/ omitted by using the default implementation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552729,"byte_end":552777,"line_start":61,"line_end":61,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552779,"byte_end":552782,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ When checking an inherent, the first parameter represents the inherent that is actually","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552784,"byte_end":552875,"line_start":63,"line_end":63,"column_start":2,"column_end":93}},{"value":"/ included in the block by its author. Whereas the second parameter represents the inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552877,"byte_end":552970,"line_start":64,"line_end":64,"column_start":2,"column_end":95}},{"value":"/ data that the verifying node calculates.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":552972,"byte_end":553016,"line_start":65,"line_end":65,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553018,"byte_end":553021,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ NOTE: A block can contains multiple inherent.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553023,"byte_end":553072,"line_start":67,"line_end":67,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3573},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553725,"byte_end":553736,"line_start":83,"line_end":83,"column_start":5,"column_end":16},"name":"is_inherent","qualname":"::inherent::ProvideInherent::is_inherent","value":"pub fn is_inherent(&Self::Call) -> bool","parent":{"krate":0,"index":3566},"children":[],"decl_id":null,"docs":" Return whether the call is an inherent call.","sig":null,"attributes":[{"value":"/ Return whether the call is an inherent call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553169,"byte_end":553217,"line_start":72,"line_end":72,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553219,"byte_end":553222,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ NOTE: Signed extrinsics are not inherent, but signed extrinsic with the given call variant","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553224,"byte_end":553318,"line_start":74,"line_end":74,"column_start":2,"column_end":96}},{"value":"/ can be dispatched.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553320,"byte_end":553342,"line_start":75,"line_end":75,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553344,"byte_end":553347,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553349,"byte_end":553362,"line_start":77,"line_end":77,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553364,"byte_end":553367,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ In FRAME, inherent are enforced to be before other extrinsics, for this reason,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553369,"byte_end":553452,"line_start":79,"line_end":79,"column_start":2,"column_end":85}},{"value":"/ pallets with unsigned transactions **must ensure** that no unsigned transaction call","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553454,"byte_end":553542,"line_start":80,"line_end":80,"column_start":2,"column_end":90}},{"value":"/ is an inherent call, when implementing `ValidateUnsigned::validate_unsigned`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553544,"byte_end":553625,"line_start":81,"line_end":81,"column_start":2,"column_end":83}},{"value":"/ Otherwise block producer can produce invalid blocks by including them after non inherent.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/inherent.rs","byte_start":553627,"byte_end":553720,"line_start":82,"line_end":82,"column_start":2,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":3574},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","parent":null,"children":[{"krate":0,"index":3575},{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3579},{"krate":0,"index":3580},{"krate":0,"index":3582}],"decl_id":null,"docs":" Macro for declaring a module error.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1632,"byte_end":1644,"line_start":65,"line_end":65,"column_start":1,"column_end":13}},{"value":"/ Macro for declaring a module error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/error.rs","byte_start":554454,"byte_end":554493,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":3583},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instances","qualname":"::instances","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","parent":null,"children":[{"krate":0,"index":19638},{"krate":0,"index":19640},{"krate":0,"index":19642},{"krate":0,"index":19643},{"krate":0,"index":19644},{"krate":0,"index":19646},{"krate":0,"index":19647},{"krate":0,"index":19649},{"krate":0,"index":19652},{"krate":0,"index":19654},{"krate":0,"index":19656},{"krate":0,"index":19657},{"krate":0,"index":19658},{"krate":0,"index":19660},{"krate":0,"index":19661},{"krate":0,"index":19663},{"krate":0,"index":19666},{"krate":0,"index":19668},{"krate":0,"index":19670},{"krate":0,"index":19671},{"krate":0,"index":19672},{"krate":0,"index":19674},{"krate":0,"index":19675},{"krate":0,"index":19677},{"krate":0,"index":19680},{"krate":0,"index":19682},{"krate":0,"index":19684},{"krate":0,"index":19685},{"krate":0,"index":19686},{"krate":0,"index":19688},{"krate":0,"index":19689},{"krate":0,"index":19691},{"krate":0,"index":19694},{"krate":0,"index":19696},{"krate":0,"index":19698},{"krate":0,"index":19699},{"krate":0,"index":19700},{"krate":0,"index":19702},{"krate":0,"index":19703},{"krate":0,"index":19705},{"krate":0,"index":19708},{"krate":0,"index":19710},{"krate":0,"index":19712},{"krate":0,"index":19713},{"krate":0,"index":19714},{"krate":0,"index":19716},{"krate":0,"index":19717},{"krate":0,"index":19719},{"krate":0,"index":19722},{"krate":0,"index":19724},{"krate":0,"index":19726},{"krate":0,"index":19727},{"krate":0,"index":19728},{"krate":0,"index":19730},{"krate":0,"index":19731},{"krate":0,"index":19733},{"krate":0,"index":19736},{"krate":0,"index":19738},{"krate":0,"index":19740},{"krate":0,"index":19741},{"krate":0,"index":19742},{"krate":0,"index":19744},{"krate":0,"index":19745},{"krate":0,"index":19747},{"krate":0,"index":19750},{"krate":0,"index":19752},{"krate":0,"index":19754},{"krate":0,"index":19755},{"krate":0,"index":19756},{"krate":0,"index":19758},{"krate":0,"index":19759},{"krate":0,"index":19761},{"krate":0,"index":19764},{"krate":0,"index":19766},{"krate":0,"index":19768},{"krate":0,"index":19769},{"krate":0,"index":19770},{"krate":0,"index":19772},{"krate":0,"index":19773},{"krate":0,"index":19775},{"krate":0,"index":19778},{"krate":0,"index":19780},{"krate":0,"index":19782},{"krate":0,"index":19783},{"krate":0,"index":19784},{"krate":0,"index":19786},{"krate":0,"index":19787},{"krate":0,"index":19789},{"krate":0,"index":19792},{"krate":0,"index":19794},{"krate":0,"index":19796},{"krate":0,"index":19797},{"krate":0,"index":19798},{"krate":0,"index":19800},{"krate":0,"index":19801},{"krate":0,"index":19803},{"krate":0,"index":19806},{"krate":0,"index":19808},{"krate":0,"index":19810},{"krate":0,"index":19811},{"krate":0,"index":19812},{"krate":0,"index":19814},{"krate":0,"index":19815},{"krate":0,"index":19817},{"krate":0,"index":19820},{"krate":0,"index":19822},{"krate":0,"index":19824},{"krate":0,"index":19825},{"krate":0,"index":19826},{"krate":0,"index":19828},{"krate":0,"index":19829},{"krate":0,"index":19831},{"krate":0,"index":19834},{"krate":0,"index":19836},{"krate":0,"index":19838},{"krate":0,"index":19839},{"krate":0,"index":19840},{"krate":0,"index":19842},{"krate":0,"index":19843},{"krate":0,"index":19845},{"krate":0,"index":19848},{"krate":0,"index":19850},{"krate":0,"index":19852},{"krate":0,"index":19853},{"krate":0,"index":19854},{"krate":0,"index":19856},{"krate":0,"index":19857},{"krate":0,"index":19859}],"decl_id":null,"docs":" Some instance placeholder to be used in [`frame_support::pallet`] attribute macro.","sig":null,"attributes":[{"value":"/ Some instance placeholder to be used in [`frame_support::pallet`] attribute macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":559802,"byte_end":559888,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":559889,"byte_end":559892,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`frame_support::pallet`] attribute macro does only requires the instance generic `I` to be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":559893,"byte_end":559988,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ static (contrary to `decl_*` macro which requires instance generic to implement","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":559989,"byte_end":560072,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ [`frame_support::traits::Instance`]).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560073,"byte_end":560114,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560115,"byte_end":560118,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Thus support provides some instance types to be used, This allow some instantiable pallet to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560119,"byte_end":560215,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ depend on specific instance of another:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560216,"byte_end":560259,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560260,"byte_end":560267,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ # mod another_pallet { pub trait Config<I: 'static = ()> {} }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560268,"byte_end":560333,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/ pub trait Config<I: 'static = ()>: another_pallet::Config<I> {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560334,"byte_end":560401,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560402,"byte_end":560409,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560410,"byte_end":560413,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ NOTE: [`frame_support::pallet`] will reexport them inside the module, in order to make them","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560414,"byte_end":560509,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ accessible to [`frame_support::construct_runtime`].","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560510,"byte_end":560565,"line_start":32,"line_end":32,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":19638},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560721,"byte_end":560730,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"Instance1","qualname":"::instances::Instance1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance1 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance1 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560567,"byte_end":560643,"line_start":34,"line_end":34,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19652},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560887,"byte_end":560896,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"Instance2","qualname":"::instances::Instance2","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance2 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance2 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560733,"byte_end":560809,"line_start":38,"line_end":38,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19666},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561053,"byte_end":561062,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"Instance3","qualname":"::instances::Instance3","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance3 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance3 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":560899,"byte_end":560975,"line_start":42,"line_end":42,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19680},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561219,"byte_end":561228,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"name":"Instance4","qualname":"::instances::Instance4","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance4 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance4 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561065,"byte_end":561141,"line_start":46,"line_end":46,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19694},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561385,"byte_end":561394,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"Instance5","qualname":"::instances::Instance5","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance5 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance5 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561231,"byte_end":561307,"line_start":50,"line_end":50,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19708},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561551,"byte_end":561560,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"Instance6","qualname":"::instances::Instance6","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance6 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance6 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561397,"byte_end":561473,"line_start":54,"line_end":54,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19722},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561717,"byte_end":561726,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"Instance7","qualname":"::instances::Instance7","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance7 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance7 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561563,"byte_end":561639,"line_start":58,"line_end":58,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19736},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561883,"byte_end":561892,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"Instance8","qualname":"::instances::Instance8","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance8 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance8 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561729,"byte_end":561805,"line_start":62,"line_end":62,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19750},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562049,"byte_end":562058,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"Instance9","qualname":"::instances::Instance9","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance9 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance9 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":561895,"byte_end":561971,"line_start":66,"line_end":66,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":19764},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562216,"byte_end":562226,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"Instance10","qualname":"::instances::Instance10","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance10 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance10 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562061,"byte_end":562138,"line_start":70,"line_end":70,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19778},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562384,"byte_end":562394,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"Instance11","qualname":"::instances::Instance11","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance11 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance11 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562229,"byte_end":562306,"line_start":74,"line_end":74,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19792},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562552,"byte_end":562562,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"Instance12","qualname":"::instances::Instance12","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance12 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance12 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562397,"byte_end":562474,"line_start":78,"line_end":78,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19806},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562720,"byte_end":562730,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"Instance13","qualname":"::instances::Instance13","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance13 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance13 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562565,"byte_end":562642,"line_start":82,"line_end":82,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19820},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562888,"byte_end":562898,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"Instance14","qualname":"::instances::Instance14","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance14 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance14 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562733,"byte_end":562810,"line_start":86,"line_end":86,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19834},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":563056,"byte_end":563066,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"Instance15","qualname":"::instances::Instance15","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance15 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance15 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":562901,"byte_end":562978,"line_start":90,"line_end":90,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":19848},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":563224,"byte_end":563234,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"Instance16","qualname":"::instances::Instance16","value":"","parent":null,"children":[],"decl_id":null,"docs":" Instance16 to be used for instantiable pallet define with `pallet` macro.\n","sig":null,"attributes":[{"value":"/ Instance16 to be used for instantiable pallet define with `pallet` macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/instances.rs","byte_start":563069,"byte_end":563146,"line_start":94,"line_end":94,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":3584},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"migrations","qualname":"::migrations","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","parent":null,"children":[{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3590},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":3602},{"krate":0,"index":19862},{"krate":0,"index":19864},{"krate":0,"index":19867},{"krate":0,"index":19871},{"krate":0,"index":19876},{"krate":0,"index":19882},{"krate":0,"index":19889},{"krate":0,"index":19897},{"krate":0,"index":19906},{"krate":0,"index":19916},{"krate":0,"index":19927},{"krate":0,"index":19939},{"krate":0,"index":19952},{"krate":0,"index":19966},{"krate":0,"index":19981},{"krate":0,"index":19997},{"krate":0,"index":20014},{"krate":0,"index":20032},{"krate":0,"index":20051},{"krate":0,"index":20071},{"krate":0,"index":20092},{"krate":0,"index":20114},{"krate":0,"index":20137},{"krate":0,"index":20161},{"krate":0,"index":20186},{"krate":0,"index":20212},{"krate":0,"index":20239},{"krate":0,"index":20267},{"krate":0,"index":20296},{"krate":0,"index":20326},{"krate":0,"index":20357},{"krate":0,"index":3608}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3600},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":564132,"byte_end":564167,"line_start":24,"line_end":24,"column_start":11,"column_end":46},"name":"PalletVersionToStorageVersionHelper","qualname":"::migrations::PalletVersionToStorageVersionHelper","value":"PalletVersionToStorageVersionHelper","parent":null,"children":[{"krate":0,"index":3601}],"decl_id":null,"docs":" Trait used by [`migrate_from_pallet_version_to_storage_version`] to do the actual migration.\n","sig":null,"attributes":[{"value":"/ Trait used by [`migrate_from_pallet_version_to_storage_version`] to do the actual migration.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":564025,"byte_end":564121,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":3601},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":564174,"byte_end":564181,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"name":"migrate","qualname":"::migrations::PalletVersionToStorageVersionHelper::migrate","value":"pub fn migrate(&RuntimeDbWeight) -> Weight","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3608},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":565288,"byte_end":565334,"line_start":60,"line_end":60,"column_start":8,"column_end":54},"name":"migrate_from_pallet_version_to_storage_version","qualname":"::migrations::migrate_from_pallet_version_to_storage_version","value":"pub fn migrate_from_pallet_version_to_storage_version<Pallets: PalletVersionToStorageVersionHelper>(&RuntimeDbWeight)\n-> Weight","parent":null,"children":[],"decl_id":null,"docs":" Migrate from the `PalletVersion` struct to the new\n [`StorageVersion`](crate::traits::StorageVersion) struct.","sig":null,"attributes":[{"value":"/ Migrate from the `PalletVersion` struct to the new","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":565062,"byte_end":565116,"line_start":56,"line_end":56,"column_start":1,"column_end":55}},{"value":"/ [`StorageVersion`](crate::traits::StorageVersion) struct.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":565117,"byte_end":565178,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":565179,"byte_end":565182,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This will remove all `PalletVersion's` from the state and insert the current storage version.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":565183,"byte_end":565280,"line_start":59,"line_end":59,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":3610},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","parent":null,"children":[{"krate":0,"index":3611},{"krate":0,"index":4768},{"krate":0,"index":4769},{"krate":0,"index":4770},{"krate":0,"index":4773},{"krate":0,"index":4776},{"krate":0,"index":4779},{"krate":0,"index":4782},{"krate":0,"index":4785},{"krate":0,"index":4788},{"krate":0,"index":4791},{"krate":0,"index":4794},{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4801},{"krate":0,"index":4804},{"krate":0,"index":4807},{"krate":0,"index":4810},{"krate":0,"index":4813},{"krate":0,"index":4816},{"krate":0,"index":4891},{"krate":0,"index":4892},{"krate":0,"index":4895},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":4902},{"krate":0,"index":4905},{"krate":0,"index":4908},{"krate":0,"index":4911},{"krate":0,"index":4914},{"krate":0,"index":4917},{"krate":0,"index":4920},{"krate":0,"index":4923},{"krate":0,"index":4926},{"krate":0,"index":4929},{"krate":0,"index":5049},{"krate":0,"index":5050},{"krate":0,"index":5053},{"krate":0,"index":5056},{"krate":0,"index":5059},{"krate":0,"index":5062},{"krate":0,"index":5065},{"krate":0,"index":5068},{"krate":0,"index":5071},{"krate":0,"index":5074},{"krate":0,"index":5077},{"krate":0,"index":5080},{"krate":0,"index":5083},{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5156},{"krate":0,"index":5159},{"krate":0,"index":5162},{"krate":0,"index":5165},{"krate":0,"index":5168},{"krate":0,"index":5545},{"krate":0,"index":5546},{"krate":0,"index":5547},{"krate":0,"index":5550},{"krate":0,"index":5551},{"krate":0,"index":5554},{"krate":0,"index":5555},{"krate":0,"index":5557},{"krate":0,"index":5558},{"krate":0,"index":5560},{"krate":0,"index":5561},{"krate":0,"index":5563},{"krate":0,"index":5564},{"krate":0,"index":5566},{"krate":0,"index":5567},{"krate":0,"index":5569},{"krate":0,"index":5570},{"krate":0,"index":5572},{"krate":0,"index":5573},{"krate":0,"index":5575},{"krate":0,"index":5576},{"krate":0,"index":5578},{"krate":0,"index":5579},{"krate":0,"index":5581},{"krate":0,"index":5582},{"krate":0,"index":5584},{"krate":0,"index":5585},{"krate":0,"index":5587},{"krate":0,"index":5590},{"krate":0,"index":5593},{"krate":0,"index":5594},{"krate":0,"index":5596},{"krate":0,"index":5599},{"krate":0,"index":5602},{"krate":0,"index":5605},{"krate":0,"index":5608},{"krate":0,"index":5611},{"krate":0,"index":5612},{"krate":0,"index":5614},{"krate":0,"index":5617},{"krate":0,"index":5620},{"krate":0,"index":5623},{"krate":0,"index":5626},{"krate":0,"index":5629},{"krate":0,"index":5632},{"krate":0,"index":5635},{"krate":0,"index":5638},{"krate":0,"index":5641},{"krate":0,"index":5644},{"krate":0,"index":5647},{"krate":0,"index":5650},{"krate":0,"index":5653},{"krate":0,"index":5656},{"krate":0,"index":5659},{"krate":0,"index":5662},{"krate":0,"index":5663},{"krate":0,"index":5665},{"krate":0,"index":5726},{"krate":0,"index":5727},{"krate":0,"index":5730},{"krate":0,"index":5733},{"krate":0,"index":5739},{"krate":0,"index":5742},{"krate":0,"index":5814},{"krate":0,"index":5815},{"krate":0,"index":5818},{"krate":0,"index":5821},{"krate":0,"index":5824},{"krate":0,"index":5827},{"krate":0,"index":5830},{"krate":0,"index":5833},{"krate":0,"index":5836},{"krate":0,"index":5839},{"krate":0,"index":5842},{"krate":0,"index":5845},{"krate":0,"index":5848},{"krate":0,"index":5881},{"krate":0,"index":5884},{"krate":0,"index":5885},{"krate":0,"index":5888},{"krate":0,"index":5891},{"krate":0,"index":5894},{"krate":0,"index":5897},{"krate":0,"index":5900},{"krate":0,"index":5903},{"krate":0,"index":5906},{"krate":0,"index":6028},{"krate":0,"index":6040},{"krate":0,"index":6041},{"krate":0,"index":6044},{"krate":0,"index":6047},{"krate":0,"index":6050},{"krate":0,"index":6053},{"krate":0,"index":6056},{"krate":0,"index":6118},{"krate":0,"index":6119},{"krate":0,"index":6122},{"krate":0,"index":6125},{"krate":0,"index":6128},{"krate":0,"index":6131},{"krate":0,"index":6215},{"krate":0,"index":6216},{"krate":0,"index":6219},{"krate":0,"index":6222},{"krate":0,"index":6225},{"krate":0,"index":6226},{"krate":0,"index":6228},{"krate":0,"index":6229},{"krate":0,"index":6231}],"decl_id":null,"docs":" Traits and associated utilities for use in the FRAME environment.","sig":null,"attributes":[{"value":"/ Traits and associated utilities for use in the FRAME environment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566148,"byte_end":566217,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566218,"byte_end":566221,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ NOTE: If you're looking for `parameter_types`, it has moved in to the top-level module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566222,"byte_end":566313,"line_start":20,"line_end":20,"column_start":1,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":3611},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tokens","qualname":"::traits::tokens","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3799},{"krate":0,"index":4099},{"krate":0,"index":4379},{"krate":0,"index":4526},{"krate":0,"index":4581},{"krate":0,"index":4669},{"krate":0,"index":4740},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":4747},{"krate":0,"index":4750},{"krate":0,"index":4753},{"krate":0,"index":4756},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":4765}],"decl_id":null,"docs":" Traits for working with tokens and their associated datastructures.\n","sig":null,"attributes":[{"value":"/ Traits for working with tokens and their associated datastructures.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569457,"byte_end":569528,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":3612},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"currency","qualname":"::traits::tokens::currency","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","parent":null,"children":[{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3618},{"krate":0,"index":3621},{"krate":0,"index":3622},{"krate":0,"index":3625},{"krate":0,"index":3628},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3636},{"krate":0,"index":3639},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3651},{"krate":0,"index":3695},{"krate":0,"index":3696},{"krate":0,"index":3699},{"krate":0,"index":3702},{"krate":0,"index":3734},{"krate":0,"index":3735},{"krate":0,"index":3738},{"krate":0,"index":3741},{"krate":0,"index":3744},{"krate":0,"index":3767},{"krate":0,"index":3772},{"krate":0,"index":3776}],"decl_id":null,"docs":" The Currency trait and associated types.\n","sig":null,"attributes":[{"value":"/ The Currency trait and associated types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":570527,"byte_end":570571,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":3666},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":580901,"byte_end":580919,"line_start":24,"line_end":24,"column_start":11,"column_end":29},"name":"ReservableCurrency","qualname":"::traits::tokens::currency::reservable::ReservableCurrency","value":"ReservableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3673}],"decl_id":null,"docs":" A currency where funds can be reserved from the user.\n","sig":null,"attributes":[{"value":"/ A currency where funds can be reserved from the user.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":580833,"byte_end":580890,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581091,"byte_end":581102,"line_start":27,"line_end":27,"column_start":5,"column_end":16},"name":"can_reserve","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::can_reserve","value":"pub fn can_reserve(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" Same result as `reserve(who, value)` (but without the side-effects) assuming there\n are no balance changes in the meantime.\n","sig":null,"attributes":[{"value":"/ Same result as `reserve(who, value)` (but without the side-effects) assuming there","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":580955,"byte_end":581041,"line_start":25,"line_end":25,"column_start":2,"column_end":88}},{"value":"/ are no balance changes in the meantime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581043,"byte_end":581086,"line_start":26,"line_end":26,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581415,"byte_end":581429,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"slash_reserved","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::slash_reserved","value":"pub fn slash_reserved(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" Deducts up to `value` from reserved balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from reserved balance of `who`. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581153,"byte_end":581237,"line_start":29,"line_end":29,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581239,"byte_end":581242,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If the reserve balance of `who`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581244,"byte_end":581337,"line_start":31,"line_end":31,"column_start":2,"column_end":95}},{"value":"/ is less than `value`, then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581339,"byte_end":581410,"line_start":32,"line_end":32,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582168,"byte_end":582184,"line_start":49,"line_end":49,"column_start":5,"column_end":21},"name":"reserved_balance","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::reserved_balance","value":"pub fn reserved_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" The amount of the balance of a given account that is externally reserved; this can still get\n slashed, but gets slashed last of all.","sig":null,"attributes":[{"value":"/ The amount of the balance of a given account that is externally reserved; this can still get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581524,"byte_end":581620,"line_start":38,"line_end":38,"column_start":2,"column_end":98}},{"value":"/ slashed, but gets slashed last of all.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581622,"byte_end":581664,"line_start":39,"line_end":39,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581666,"byte_end":581669,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ This balance is a 'reserve' balance that other subsystems use in order to set aside tokens","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581671,"byte_end":581765,"line_start":41,"line_end":41,"column_start":2,"column_end":96}},{"value":"/ that are still 'owned' by the account holder, but which are suspendable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581767,"byte_end":581843,"line_start":42,"line_end":42,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581845,"byte_end":581848,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581850,"byte_end":581946,"line_start":44,"line_end":44,"column_start":2,"column_end":98}},{"value":"/ is deleted: specifically, `ReservedBalance`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581948,"byte_end":581996,"line_start":45,"line_end":45,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":581998,"byte_end":582001,"line_start":46,"line_end":46,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582003,"byte_end":582089,"line_start":47,"line_end":47,"column_start":2,"column_end":88}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582091,"byte_end":582163,"line_start":48,"line_end":48,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582458,"byte_end":582465,"line_start":55,"line_end":55,"column_start":5,"column_end":12},"name":"reserve","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::reserve","value":"pub fn reserve(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" Moves `value` from balance to reserved balance.","sig":null,"attributes":[{"value":"/ Moves `value` from balance to reserved balance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582222,"byte_end":582273,"line_start":51,"line_end":51,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582275,"byte_end":582278,"line_start":52,"line_end":52,"column_start":2,"column_end":5}},{"value":"/ If the free balance is lower than `value`, then no funds will be moved and an `Err` will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582280,"byte_end":582372,"line_start":53,"line_end":53,"column_start":2,"column_end":94}},{"value":"/ be returned to notify of this. This is different behavior than `unreserve`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582374,"byte_end":582453,"line_start":54,"line_end":54,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3672},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582998,"byte_end":583007,"line_start":67,"line_end":67,"column_start":5,"column_end":14},"name":"unreserve","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::unreserve","value":"pub fn unreserve(&AccountId, Self::Balance) -> Self::Balance","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance to free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance to free balance. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582526,"byte_end":582615,"line_start":57,"line_end":57,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582617,"byte_end":582620,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be moved as possible. If the reserve balance of `who`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582622,"byte_end":582712,"line_start":59,"line_end":59,"column_start":2,"column_end":92}},{"value":"/ is less than `value`, then the remaining amount will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582714,"byte_end":582783,"line_start":60,"line_end":60,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582785,"byte_end":582788,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ # NOTES","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582790,"byte_end":582801,"line_start":62,"line_end":62,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582803,"byte_end":582806,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ - This is different from `reserve`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582808,"byte_end":582847,"line_start":64,"line_end":64,"column_start":2,"column_end":41}},{"value":"/ - If the remaining reserved balance is less than `ExistentialDeposit`, it will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582849,"byte_end":582931,"line_start":65,"line_end":65,"column_start":2,"column_end":84}},{"value":"/ invoke `on_reserved_too_low` and could reap the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":582933,"byte_end":582993,"line_start":66,"line_end":66,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583521,"byte_end":583540,"line_start":76,"line_end":76,"column_start":5,"column_end":24},"name":"repatriate_reserved","qualname":"::traits::tokens::currency::reservable::ReservableCurrency::repatriate_reserved","value":"pub fn repatriate_reserved(&AccountId, &AccountId, Self::Balance,\nBalanceStatus) -> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":3666},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance of account `slashed` to balance of account\n `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be\n returned. Funds will be placed in either the `free` balance or the `reserved` balance,\n depending on the `status`.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance of account `slashed` to balance of account","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583067,"byte_end":583155,"line_start":69,"line_end":69,"column_start":2,"column_end":90}},{"value":"/ `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583157,"byte_end":583251,"line_start":70,"line_end":70,"column_start":2,"column_end":96}},{"value":"/ returned. Funds will be placed in either the `free` balance or the `reserved` balance,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583253,"byte_end":583343,"line_start":71,"line_end":71,"column_start":2,"column_end":92}},{"value":"/ depending on the `status`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583345,"byte_end":583375,"line_start":72,"line_end":72,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583377,"byte_end":583380,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583382,"byte_end":583473,"line_start":74,"line_end":74,"column_start":2,"column_end":93}},{"value":"/ then `Ok(non_zero)` will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":583475,"byte_end":583516,"line_start":75,"line_end":75,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":3682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584327,"byte_end":584350,"line_start":111,"line_end":111,"column_start":11,"column_end":34},"name":"NamedReservableCurrency","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency","value":"NamedReservableCurrency<AccountId>: ReservableCurrency<AccountId>","parent":null,"children":[{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3684},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584537,"byte_end":584554,"line_start":114,"line_end":114,"column_start":7,"column_end":24},"name":"ReserveIdentifier","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::ReserveIdentifier","value":"type ReserveIdentifier;","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" An identifier for a reserve. Used for disambiguating different reserves so that\n they can be individually replaced or removed.\n","sig":null,"attributes":[{"value":"/ An identifier for a reserve. Used for disambiguating different reserves so that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584396,"byte_end":584479,"line_start":112,"line_end":112,"column_start":2,"column_end":85}},{"value":"/ they can be individually replaced or removed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584481,"byte_end":584530,"line_start":113,"line_end":113,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584820,"byte_end":584840,"line_start":120,"line_end":120,"column_start":5,"column_end":25},"name":"slash_reserved_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::slash_reserved_named","value":"pub fn slash_reserved_named(&Self::ReserveIdentifier, &AccountId,\nSelf::Balance) -> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Deducts up to `value` from reserved balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from reserved balance of `who`. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584558,"byte_end":584642,"line_start":116,"line_end":116,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584644,"byte_end":584647,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If the reserve balance of `who`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584649,"byte_end":584742,"line_start":118,"line_end":118,"column_start":2,"column_end":95}},{"value":"/ is less than `value`, then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584744,"byte_end":584815,"line_start":119,"line_end":119,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3686},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585611,"byte_end":585633,"line_start":137,"line_end":137,"column_start":5,"column_end":27},"name":"reserved_balance_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::reserved_balance_named","value":"pub fn reserved_balance_named(&Self::ReserveIdentifier, &AccountId)\n-> Self::Balance","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" The amount of the balance of a given account that is externally reserved; this can still get\n slashed, but gets slashed last of all.","sig":null,"attributes":[{"value":"/ The amount of the balance of a given account that is externally reserved; this can still get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584967,"byte_end":585063,"line_start":126,"line_end":126,"column_start":2,"column_end":98}},{"value":"/ slashed, but gets slashed last of all.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585065,"byte_end":585107,"line_start":127,"line_end":127,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585109,"byte_end":585112,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ This balance is a 'reserve' balance that other subsystems use in order to set aside tokens","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585114,"byte_end":585208,"line_start":129,"line_end":129,"column_start":2,"column_end":96}},{"value":"/ that are still 'owned' by the account holder, but which are suspendable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585210,"byte_end":585286,"line_start":130,"line_end":130,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585288,"byte_end":585291,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585293,"byte_end":585389,"line_start":132,"line_end":132,"column_start":2,"column_end":98}},{"value":"/ is deleted: specifically, `ReservedBalance`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585391,"byte_end":585439,"line_start":133,"line_end":133,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585441,"byte_end":585444,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585446,"byte_end":585532,"line_start":135,"line_end":135,"column_start":2,"column_end":88}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585534,"byte_end":585606,"line_start":136,"line_end":136,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585937,"byte_end":585950,"line_start":143,"line_end":143,"column_start":5,"column_end":18},"name":"reserve_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::reserve_named","value":"pub fn reserve_named(&Self::ReserveIdentifier, &AccountId, Self::Balance)\n-> DispatchResult","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Moves `value` from balance to reserved balance.","sig":null,"attributes":[{"value":"/ Moves `value` from balance to reserved balance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585701,"byte_end":585752,"line_start":139,"line_end":139,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585754,"byte_end":585757,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ If the free balance is lower than `value`, then no funds will be moved and an `Err` will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585759,"byte_end":585851,"line_start":141,"line_end":141,"column_start":2,"column_end":94}},{"value":"/ be returned to notify of this. This is different behavior than `unreserve`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":585853,"byte_end":585932,"line_start":142,"line_end":142,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586523,"byte_end":586538,"line_start":159,"line_end":159,"column_start":5,"column_end":20},"name":"unreserve_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::unreserve_named","value":"pub fn unreserve_named(&Self::ReserveIdentifier, &AccountId, Self::Balance)\n-> Self::Balance","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance to free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance to free balance. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586051,"byte_end":586140,"line_start":149,"line_end":149,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586142,"byte_end":586145,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be moved as possible. If the reserve balance of `who`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586147,"byte_end":586237,"line_start":151,"line_end":151,"column_start":2,"column_end":92}},{"value":"/ is less than `value`, then the remaining amount will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586239,"byte_end":586308,"line_start":152,"line_end":152,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586310,"byte_end":586313,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ # NOTES","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586315,"byte_end":586326,"line_start":154,"line_end":154,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586328,"byte_end":586331,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ - This is different from `reserve`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586333,"byte_end":586372,"line_start":156,"line_end":156,"column_start":2,"column_end":41}},{"value":"/ - If the remaining reserved balance is less than `ExistentialDeposit`, it will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586374,"byte_end":586456,"line_start":157,"line_end":157,"column_start":2,"column_end":84}},{"value":"/ invoke `on_reserved_too_low` and could reap the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586458,"byte_end":586518,"line_start":158,"line_end":158,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3689},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587092,"byte_end":587117,"line_start":172,"line_end":172,"column_start":5,"column_end":30},"name":"repatriate_reserved_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::repatriate_reserved_named","value":"pub fn repatriate_reserved_named(&Self::ReserveIdentifier, &AccountId,\n&AccountId, Self::Balance, BalanceStatus)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance of account `slashed` to balance of account\n `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be\n returned. Funds will be placed in either the `free` balance or the `reserved` balance,\n depending on the `status`.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance of account `slashed` to balance of account","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586638,"byte_end":586726,"line_start":165,"line_end":165,"column_start":2,"column_end":90}},{"value":"/ `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586728,"byte_end":586822,"line_start":166,"line_end":166,"column_start":2,"column_end":96}},{"value":"/ returned. Funds will be placed in either the `free` balance or the `reserved` balance,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586824,"byte_end":586914,"line_start":167,"line_end":167,"column_start":2,"column_end":92}},{"value":"/ depending on the `status`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586916,"byte_end":586946,"line_start":168,"line_end":168,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586948,"byte_end":586951,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":586953,"byte_end":587044,"line_start":170,"line_end":170,"column_start":2,"column_end":93}},{"value":"/ then `Ok(non_zero)` will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587046,"byte_end":587087,"line_start":171,"line_end":171,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3690},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587516,"byte_end":587537,"line_start":184,"line_end":184,"column_start":5,"column_end":26},"name":"ensure_reserved_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::ensure_reserved_named","value":"pub fn ensure_reserved_named(&Self::ReserveIdentifier, &AccountId,\nSelf::Balance) -> DispatchResult","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Ensure the reserved balance is equal to `value`.","sig":null,"attributes":[{"value":"/ Ensure the reserved balance is equal to `value`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587296,"byte_end":587348,"line_start":180,"line_end":180,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587350,"byte_end":587353,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ This will reserve extra amount of current reserved balance is less than `value`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587355,"byte_end":587439,"line_start":182,"line_end":182,"column_start":2,"column_end":86}},{"value":"/ And unreserve if current reserved balance is greater than `value`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587441,"byte_end":587511,"line_start":183,"line_end":183,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588136,"byte_end":588155,"line_start":206,"line_end":206,"column_start":5,"column_end":24},"name":"unreserve_all_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::unreserve_all_named","value":"pub fn unreserve_all_named(&Self::ReserveIdentifier, &AccountId)\n-> Self::Balance","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Unreserve all the named reserved balances, returning unreserved amount.","sig":null,"attributes":[{"value":"/ Unreserve all the named reserved balances, returning unreserved amount.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":587996,"byte_end":588071,"line_start":203,"line_end":203,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588073,"byte_end":588076,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the value to be unreserved is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588078,"byte_end":588131,"line_start":205,"line_end":205,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3692},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588468,"byte_end":588492,"line_start":215,"line_end":215,"column_start":5,"column_end":29},"name":"slash_all_reserved_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::slash_all_reserved_named","value":"pub fn slash_all_reserved_named(&Self::ReserveIdentifier, &AccountId)\n-> Self::NegativeImbalance","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Slash all the reserved balance, returning the negative imbalance created.","sig":null,"attributes":[{"value":"/ Slash all the reserved balance, returning the negative imbalance created.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588329,"byte_end":588406,"line_start":212,"line_end":212,"column_start":2,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588408,"byte_end":588411,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the value to be slashed is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588413,"byte_end":588463,"line_start":214,"line_end":214,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3693},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":589016,"byte_end":589045,"line_start":229,"line_end":229,"column_start":5,"column_end":34},"name":"repatriate_all_reserved_named","qualname":"::traits::tokens::currency::reservable::NamedReservableCurrency::repatriate_all_reserved_named","value":"pub fn repatriate_all_reserved_named(&Self::ReserveIdentifier, &AccountId,\n&AccountId, BalanceStatus) -> DispatchResult","parent":{"krate":0,"index":3682},"children":[],"decl_id":null,"docs":" Move all the named reserved balance of one account into the balance of another, according to\n `status`. If `status` is `Reserved`, the balance will be reserved with given `id`.","sig":null,"attributes":[{"value":"/ Move all the named reserved balance of one account into the balance of another, according to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588682,"byte_end":588778,"line_start":223,"line_end":223,"column_start":2,"column_end":98}},{"value":"/ `status`. If `status` is `Reserved`, the balance will be reserved with given `id`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588780,"byte_end":588866,"line_start":224,"line_end":224,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588868,"byte_end":588871,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588873,"byte_end":588891,"line_start":226,"line_end":226,"column_start":2,"column_end":20}},{"value":"/ - the value to be moved is zero; or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588893,"byte_end":588932,"line_start":227,"line_end":227,"column_start":2,"column_end":41}},{"value":"/ - the `slashed` id equal to `beneficiary` and the `status` is `Reserved`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":588934,"byte_end":589011,"line_start":228,"line_end":228,"column_start":2,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":3717},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590322,"byte_end":590336,"line_start":25,"line_end":25,"column_start":10,"column_end":24},"name":"LockIdentifier","qualname":"::traits::tokens::currency::lockable::LockIdentifier","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a lock. Used for disambiguating different locks so that\n they can be individually replaced or removed.\n","sig":null,"attributes":[{"value":"/ An identifier for a lock. Used for disambiguating different locks so that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590185,"byte_end":590262,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ they can be individually replaced or removed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590263,"byte_end":590312,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":3719},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590422,"byte_end":590438,"line_start":28,"line_end":28,"column_start":11,"column_end":27},"name":"LockableCurrency","qualname":"::traits::tokens::currency::lockable::LockableCurrency","value":"LockableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":3721},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3724},{"krate":0,"index":3725}],"decl_id":null,"docs":" A currency whose accounts can have liquidity restrictions.\n","sig":null,"attributes":[{"value":"/ A currency whose accounts can have liquidity restrictions.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590349,"byte_end":590411,"line_start":27,"line_end":27,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":3721},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590548,"byte_end":590554,"line_start":30,"line_end":30,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::tokens::currency::lockable::LockableCurrency::Moment","value":"type Moment;","parent":{"krate":0,"index":3719},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590474,"byte_end":590541,"line_start":29,"line_end":29,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":3722},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590633,"byte_end":590641,"line_start":33,"line_end":33,"column_start":7,"column_end":15},"name":"MaxLocks","qualname":"::traits::tokens::currency::lockable::LockableCurrency::MaxLocks","value":"type MaxLocks: Get<u32>;","parent":{"krate":0,"index":3719},"children":[],"decl_id":null,"docs":" The maximum number of locks a user should have on their account.\n","sig":null,"attributes":[{"value":"/ The maximum number of locks a user should have on their account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590558,"byte_end":590626,"line_start":32,"line_end":32,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590945,"byte_end":590953,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"set_lock","qualname":"::traits::tokens::currency::lockable::LockableCurrency::set_lock","value":"pub fn set_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":3719},"children":[],"decl_id":null,"docs":" Create a new balance lock on account `who`.","sig":null,"attributes":[{"value":"/ Create a new balance lock on account `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590655,"byte_end":590702,"line_start":35,"line_end":35,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590704,"byte_end":590707,"line_start":36,"line_end":36,"column_start":2,"column_end":5}},{"value":"/ If the new lock is valid (i.e. not already expired), it will push the struct to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590709,"byte_end":590792,"line_start":37,"line_end":37,"column_start":2,"column_end":85}},{"value":"/ the `Locks` vec in storage. Note that you can lock more funds than a user has.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590794,"byte_end":590876,"line_start":38,"line_end":38,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590878,"byte_end":590881,"line_start":39,"line_end":39,"column_start":2,"column_end":5}},{"value":"/ If the lock `id` already exists, this will update it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590883,"byte_end":590940,"line_start":40,"line_end":40,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591504,"byte_end":591515,"line_start":56,"line_end":56,"column_start":5,"column_end":16},"name":"extend_lock","qualname":"::traits::tokens::currency::lockable::LockableCurrency::extend_lock","value":"pub fn extend_lock(LockIdentifier, &AccountId, Self::Balance, WithdrawReasons)","parent":{"krate":0,"index":3719},"children":[],"decl_id":null,"docs":" Changes a balance lock (selected by `id`) so that it becomes less liquid in all\n parameters or creates a new one if it does not exist.","sig":null,"attributes":[{"value":"/ Changes a balance lock (selected by `id`) so that it becomes less liquid in all","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591055,"byte_end":591138,"line_start":48,"line_end":48,"column_start":2,"column_end":85}},{"value":"/ parameters or creates a new one if it does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591140,"byte_end":591197,"line_start":49,"line_end":49,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591199,"byte_end":591202,"line_start":50,"line_end":50,"column_start":2,"column_end":5}},{"value":"/ Calling `extend_lock` on an existing lock `id` differs from `set_lock` in that it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591204,"byte_end":591289,"line_start":51,"line_end":51,"column_start":2,"column_end":87}},{"value":"/ applies the most severe constraints of the two, while `set_lock` replaces the lock","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591291,"byte_end":591377,"line_start":52,"line_end":52,"column_start":2,"column_end":88}},{"value":"/ with the new parameters. As in, `extend_lock` will set:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591379,"byte_end":591438,"line_start":53,"line_end":53,"column_start":2,"column_end":61}},{"value":"/ - maximum `amount`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591440,"byte_end":591462,"line_start":54,"line_end":54,"column_start":2,"column_end":24}},{"value":"/ - bitwise mask of all `reasons`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591464,"byte_end":591499,"line_start":55,"line_end":55,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3725},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591650,"byte_end":591661,"line_start":64,"line_end":64,"column_start":5,"column_end":16},"name":"remove_lock","qualname":"::traits::tokens::currency::lockable::LockableCurrency::remove_lock","value":"pub fn remove_lock(LockIdentifier, &AccountId)","parent":{"krate":0,"index":3719},"children":[],"decl_id":null,"docs":" Remove an existing lock.\n","sig":null,"attributes":[{"value":"/ Remove an existing lock.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591617,"byte_end":591645,"line_start":63,"line_end":63,"column_start":2,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":3726},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591829,"byte_end":591844,"line_start":69,"line_end":69,"column_start":11,"column_end":26},"name":"VestingSchedule","qualname":"::traits::tokens::currency::lockable::VestingSchedule","value":"VestingSchedule<AccountId>","parent":null,"children":[{"krate":0,"index":3728},{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731},{"krate":0,"index":3732},{"krate":0,"index":3733}],"decl_id":null,"docs":" A vesting schedule over a currency. This allows a particular currency to have vesting limits\n applied to it.\n","sig":null,"attributes":[{"value":"/ A vesting schedule over a currency. This allows a particular currency to have vesting limits","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591703,"byte_end":591799,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/ applied to it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591800,"byte_end":591818,"line_start":68,"line_end":68,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":3728},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591933,"byte_end":591939,"line_start":71,"line_end":71,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::tokens::currency::lockable::VestingSchedule::Moment","value":"type Moment;","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591859,"byte_end":591926,"line_start":70,"line_end":70,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":3729},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591997,"byte_end":592005,"line_start":74,"line_end":74,"column_start":7,"column_end":15},"name":"Currency","qualname":"::traits::tokens::currency::lockable::VestingSchedule::Currency","value":"type Currency: Currency<AccountId>;","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" The currency that this schedule applies to.\n","sig":null,"attributes":[{"value":"/ The currency that this schedule applies to.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":591943,"byte_end":591990,"line_start":73,"line_end":73,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3730},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592191,"byte_end":592206,"line_start":78,"line_end":78,"column_start":5,"column_end":20},"name":"vesting_balance","qualname":"::traits::tokens::currency::lockable::VestingSchedule::vesting_balance","value":"pub fn vesting_balance(&AccountId)\n-> Option<<Self::Currency as Currency<AccountId>>::Balance>","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" Get the amount that is currently being vested and cannot be transferred out of this account.\n Returns `None` if the account has no vesting schedule.\n","sig":null,"attributes":[{"value":"/ Get the amount that is currently being vested and cannot be transferred out of this account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592030,"byte_end":592126,"line_start":76,"line_end":76,"column_start":2,"column_end":98}},{"value":"/ Returns `None` if the account has no vesting schedule.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592128,"byte_end":592186,"line_start":77,"line_end":77,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3731},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592568,"byte_end":592588,"line_start":89,"line_end":89,"column_start":5,"column_end":25},"name":"add_vesting_schedule","qualname":"::traits::tokens::currency::lockable::VestingSchedule::add_vesting_schedule","value":"pub fn add_vesting_schedule(&AccountId,\n<Self::Currency as Currency<AccountId>>::Balance,\n<Self::Currency as Currency<AccountId>>::Balance, Self::Moment)\n-> DispatchResult","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" Adds a vesting schedule to a given account.","sig":null,"attributes":[{"value":"/ Adds a vesting schedule to a given account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592289,"byte_end":592336,"line_start":81,"line_end":81,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592338,"byte_end":592341,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ If the account has `MaxVestingSchedules`, an Error is returned and nothing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592343,"byte_end":592421,"line_start":83,"line_end":83,"column_start":2,"column_end":80}},{"value":"/ is updated.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592423,"byte_end":592438,"line_start":84,"line_end":84,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592440,"byte_end":592443,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the amount to be vested is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592445,"byte_end":592495,"line_start":86,"line_end":86,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592497,"byte_end":592500,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592502,"byte_end":592563,"line_start":88,"line_end":88,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592855,"byte_end":592879,"line_start":97,"line_end":97,"column_start":5,"column_end":29},"name":"can_add_vesting_schedule","qualname":"::traits::tokens::currency::lockable::VestingSchedule::can_add_vesting_schedule","value":"pub fn can_add_vesting_schedule(&AccountId,\n<Self::Currency as Currency<AccountId>>::Balance,\n<Self::Currency as Currency<AccountId>>::Balance, Self::Moment)\n-> DispatchResult","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" Checks if `add_vesting_schedule` would work against `who`.\n","sig":null,"attributes":[{"value":"/ Checks if `add_vesting_schedule` would work against `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":592788,"byte_end":592850,"line_start":96,"line_end":96,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3733},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":593202,"byte_end":593225,"line_start":107,"line_end":107,"column_start":5,"column_end":28},"name":"remove_vesting_schedule","qualname":"::traits::tokens::currency::lockable::VestingSchedule::remove_vesting_schedule","value":"pub fn remove_vesting_schedule(&AccountId, u32) -> DispatchResult","parent":{"krate":0,"index":3726},"children":[],"decl_id":null,"docs":" Remove a vesting schedule for a given account.","sig":null,"attributes":[{"value":"/ Remove a vesting schedule for a given account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":593079,"byte_end":593129,"line_start":104,"line_end":104,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":593131,"byte_end":593134,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":593136,"byte_end":593197,"line_start":106,"line_end":106,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":3744},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571090,"byte_end":571098,"line_start":38,"line_end":38,"column_start":11,"column_end":19},"name":"Currency","qualname":"::traits::tokens::currency::Currency","value":"Currency<AccountId>","parent":null,"children":[{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753},{"krate":0,"index":3754},{"krate":0,"index":3755},{"krate":0,"index":3756},{"krate":0,"index":3757},{"krate":0,"index":3758},{"krate":0,"index":3759},{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3762},{"krate":0,"index":3763},{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766}],"decl_id":null,"docs":" Abstraction over a fungible assets system.\n","sig":null,"attributes":[{"value":"/ Abstraction over a fungible assets system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571033,"byte_end":571079,"line_start":37,"line_end":37,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":3746},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571150,"byte_end":571157,"line_start":40,"line_end":40,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::tokens::currency::Currency::Balance","value":"type Balance: Balance + MaybeSerializeDeserialize + Debug + MaxEncodedLen;","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The balance of an account.\n","sig":null,"attributes":[{"value":"/ The balance of an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571113,"byte_end":571143,"line_start":39,"line_end":39,"column_start":2,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":3747},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571383,"byte_end":571400,"line_start":44,"line_end":44,"column_start":7,"column_end":24},"name":"PositiveImbalance","qualname":"::traits::tokens::currency::Currency::PositiveImbalance","value":"type PositiveImbalance: Imbalance<Self::Balance, Opposite = Self::NegativeImbalance>;","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571222,"byte_end":571307,"line_start":42,"line_end":42,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571309,"byte_end":571376,"line_start":43,"line_end":43,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":3748},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571627,"byte_end":571644,"line_start":48,"line_end":48,"column_start":7,"column_end":24},"name":"NegativeImbalance","qualname":"::traits::tokens::currency::Currency::NegativeImbalance","value":"type NegativeImbalance: Imbalance<Self::Balance, Opposite = Self::PositiveImbalance>;","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571466,"byte_end":571551,"line_start":46,"line_end":46,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571553,"byte_end":571620,"line_start":47,"line_end":47,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3749},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571772,"byte_end":571785,"line_start":53,"line_end":53,"column_start":5,"column_end":18},"name":"total_balance","qualname":"::traits::tokens::currency::Currency::total_balance","value":"pub fn total_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The combined balance of `who`.\n","sig":null,"attributes":[{"value":"/ The combined balance of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571733,"byte_end":571767,"line_start":52,"line_end":52,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572013,"byte_end":572022,"line_start":57,"line_end":57,"column_start":5,"column_end":14},"name":"can_slash","qualname":"::traits::tokens::currency::Currency::can_slash","value":"pub fn can_slash(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Same result as `slash(who, value)` (but without the side-effects) assuming there are no\n balance changes in the meantime and only the reserved balance is not taken into account.\n","sig":null,"attributes":[{"value":"/ Same result as `slash(who, value)` (but without the side-effects) assuming there are no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571823,"byte_end":571914,"line_start":55,"line_end":55,"column_start":2,"column_end":93}},{"value":"/ balance changes in the meantime and only the reserved balance is not taken into account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":571916,"byte_end":572008,"line_start":56,"line_end":56,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572125,"byte_end":572139,"line_start":60,"line_end":60,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::tokens::currency::Currency::total_issuance","value":"pub fn total_issuance() -> Self::Balance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572073,"byte_end":572120,"line_start":59,"line_end":59,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3752},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572292,"byte_end":572307,"line_start":64,"line_end":64,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::tokens::currency::Currency::minimum_balance","value":"pub fn minimum_balance() -> Self::Balance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have. This is equivalent to the `Balances`\n module's `ExistentialDeposit`.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have. This is equivalent to the `Balances`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572162,"byte_end":572251,"line_start":62,"line_end":62,"column_start":2,"column_end":91}},{"value":"/ module's `ExistentialDeposit`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572253,"byte_end":572287,"line_start":63,"line_end":63,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572644,"byte_end":572648,"line_start":71,"line_end":71,"column_start":5,"column_end":9},"name":"burn","qualname":"::traits::tokens::currency::Currency::burn","value":"pub fn burn(Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572330,"byte_end":572426,"line_start":66,"line_end":66,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572428,"byte_end":572509,"line_start":67,"line_end":67,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572511,"byte_end":572514,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572516,"byte_end":572608,"line_start":69,"line_end":69,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572610,"byte_end":572639,"line_start":70,"line_end":70,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573062,"byte_end":573067,"line_start":79,"line_end":79,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::tokens::currency::Currency::issue","value":"pub fn issue(Self::Balance) -> Self::NegativeImbalance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572702,"byte_end":572795,"line_start":73,"line_end":73,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572797,"byte_end":572875,"line_start":74,"line_end":74,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572877,"byte_end":572927,"line_start":75,"line_end":75,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572929,"byte_end":572932,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":572934,"byte_end":573027,"line_start":77,"line_end":77,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573029,"byte_end":573057,"line_start":78,"line_end":78,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3755},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573311,"byte_end":573315,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"pair","qualname":"::traits::tokens::currency::Currency::pair","value":"pub fn pair(Self::Balance)\n-> (Self::PositiveImbalance, Self::NegativeImbalance)","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Produce a pair of imbalances that cancel each other out exactly.","sig":null,"attributes":[{"value":"/ Produce a pair of imbalances that cancel each other out exactly.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573121,"byte_end":573189,"line_start":81,"line_end":81,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573191,"byte_end":573194,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ This is just the same as burning and issuing the same amount and has no effect on the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573196,"byte_end":573285,"line_start":83,"line_end":83,"column_start":2,"column_end":91}},{"value":"/ total issuance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573287,"byte_end":573306,"line_start":84,"line_end":84,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573990,"byte_end":574002,"line_start":98,"line_end":98,"column_start":5,"column_end":17},"name":"free_balance","qualname":"::traits::tokens::currency::Currency::free_balance","value":"pub fn free_balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" The 'free' balance of a given account.","sig":null,"attributes":[{"value":"/ The 'free' balance of a given account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573452,"byte_end":573494,"line_start":89,"line_end":89,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573496,"byte_end":573499,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ This is the only balance that matters in terms of most operations on tokens. It alone","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573501,"byte_end":573590,"line_start":91,"line_end":91,"column_start":2,"column_end":91}},{"value":"/ is used to determine the balance when in the contract execution environment. When this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573592,"byte_end":573682,"line_start":92,"line_end":92,"column_start":2,"column_end":92}},{"value":"/ balance falls below the value of `ExistentialDeposit`, then the 'current account' is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573684,"byte_end":573772,"line_start":93,"line_end":93,"column_start":2,"column_end":90}},{"value":"/ deleted: specifically `FreeBalance`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573774,"byte_end":573814,"line_start":94,"line_end":94,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573816,"byte_end":573819,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573821,"byte_end":573911,"line_start":96,"line_end":96,"column_start":2,"column_end":92}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":573913,"byte_end":573985,"line_start":97,"line_end":97,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3757},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574255,"byte_end":574274,"line_start":104,"line_end":104,"column_start":5,"column_end":24},"name":"ensure_can_withdraw","qualname":"::traits::tokens::currency::Currency::ensure_can_withdraw","value":"pub fn ensure_can_withdraw(&AccountId, Self::Balance, WithdrawReasons,\nSelf::Balance) -> DispatchResult","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Returns `Ok` iff the account is able to make a withdrawal of the given amount\n for the given reason. Basically, it's just a dry-run of `withdraw`.","sig":null,"attributes":[{"value":"/ Returns `Ok` iff the account is able to make a withdrawal of the given amount","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574040,"byte_end":574121,"line_start":100,"line_end":100,"column_start":2,"column_end":83}},{"value":"/ for the given reason. Basically, it's just a dry-run of `withdraw`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574123,"byte_end":574194,"line_start":101,"line_end":101,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574196,"byte_end":574199,"line_start":102,"line_end":102,"column_start":2,"column_end":5}},{"value":"/ `Err(...)` with the reason why not otherwise.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574201,"byte_end":574250,"line_start":103,"line_end":103,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3758},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574633,"byte_end":574641,"line_start":117,"line_end":117,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::tokens::currency::Currency::transfer","value":"pub fn transfer(&AccountId, &AccountId, Self::Balance, ExistenceRequirement)\n-> DispatchResult","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Transfer some liquid free balance to another staker.","sig":null,"attributes":[{"value":"/ Transfer some liquid free balance to another staker.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574436,"byte_end":574492,"line_start":113,"line_end":113,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574494,"byte_end":574497,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ This is a very high-level function. It will ensure all appropriate fees are paid","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574499,"byte_end":574583,"line_start":115,"line_end":115,"column_start":2,"column_end":86}},{"value":"/ and no imbalance in the system remains.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574585,"byte_end":574628,"line_start":116,"line_end":116,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575146,"byte_end":575151,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::tokens::currency::Currency::slash","value":"pub fn slash(&AccountId, Self::Balance)\n-> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`, preferring to deduct from the\n free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`, preferring to deduct from the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574780,"byte_end":574871,"line_start":124,"line_end":124,"column_start":2,"column_end":93}},{"value":"/ free balance. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574873,"byte_end":574917,"line_start":125,"line_end":125,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574919,"byte_end":574922,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574924,"byte_end":574992,"line_start":127,"line_end":127,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574994,"byte_end":574997,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":574999,"byte_end":575090,"line_start":129,"line_end":129,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575092,"byte_end":575141,"line_start":130,"line_end":130,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3760},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575361,"byte_end":575382,"line_start":136,"line_end":136,"column_start":5,"column_end":26},"name":"deposit_into_existing","qualname":"::traits::tokens::currency::Currency::deposit_into_existing","value":"pub fn deposit_into_existing(&AccountId, Self::Balance)\n-> Result<Self::PositiveImbalance, DispatchError>","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Mints `value` to the free balance of `who`.","sig":null,"attributes":[{"value":"/ Mints `value` to the free balance of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575238,"byte_end":575285,"line_start":133,"line_end":133,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575287,"byte_end":575290,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an Err returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575292,"byte_end":575356,"line_start":135,"line_end":135,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3761},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575592,"byte_end":575613,"line_start":143,"line_end":143,"column_start":5,"column_end":26},"name":"resolve_into_existing","qualname":"::traits::tokens::currency::Currency::resolve_into_existing","value":"pub fn resolve_into_existing(&AccountId, Self::NegativeImbalance)\n-> Result<(), Self::NegativeImbalance>","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575483,"byte_end":575573,"line_start":141,"line_end":141,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575575,"byte_end":575587,"line_start":142,"line_end":142,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3762},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575982,"byte_end":575998,"line_start":157,"line_end":157,"column_start":5,"column_end":21},"name":"deposit_creating","qualname":"::traits::tokens::currency::Currency::deposit_creating","value":"pub fn deposit_creating(&AccountId, Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","sig":null,"attributes":[{"value":"/ Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575864,"byte_end":575955,"line_start":154,"line_end":154,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575957,"byte_end":575960,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ Infallible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":575962,"byte_end":575977,"line_start":156,"line_end":156,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576177,"byte_end":576193,"line_start":161,"line_end":161,"column_start":5,"column_end":21},"name":"resolve_creating","qualname":"::traits::tokens::currency::Currency::resolve_creating","value":"pub fn resolve_creating(&AccountId, Self::NegativeImbalance)","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576068,"byte_end":576158,"line_start":159,"line_end":159,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576160,"byte_end":576172,"line_start":160,"line_end":160,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3764},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576755,"byte_end":576763,"line_start":174,"line_end":174,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::tokens::currency::Currency::withdraw","value":"pub fn withdraw(&AccountId, Self::Balance, WithdrawReasons,\nExistenceRequirement) -> Result<Self::NegativeImbalance, DispatchError>","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Removes some free balance from `who` account for `reason` if possible. If `liveness` is\n `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","sig":null,"attributes":[{"value":"/ Removes some free balance from `who` account for `reason` if possible. If `liveness` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576328,"byte_end":576419,"line_start":166,"line_end":166,"column_start":2,"column_end":93}},{"value":"/ `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576421,"byte_end":576500,"line_start":167,"line_end":167,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576502,"byte_end":576505,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ This checks any locks, vesting, and liquidity requirements. If the removal is not possible,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576507,"byte_end":576602,"line_start":169,"line_end":169,"column_start":2,"column_end":97}},{"value":"/ then it returns `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576604,"byte_end":576630,"line_start":170,"line_end":170,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576632,"byte_end":576635,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576637,"byte_end":576733,"line_start":172,"line_end":172,"column_start":2,"column_end":98}},{"value":"/ is `value`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576735,"byte_end":576750,"line_start":173,"line_end":173,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577022,"byte_end":577028,"line_start":182,"line_end":182,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::tokens::currency::Currency::settle","value":"pub fn settle(&AccountId, Self::PositiveImbalance, WithdrawReasons,\nExistenceRequirement) -> Result<(), Self::PositiveImbalance>","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.\n","sig":null,"attributes":[{"value":"/ Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":576926,"byte_end":577017,"line_start":181,"line_end":181,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577602,"byte_end":577622,"line_start":200,"line_end":200,"column_start":5,"column_end":25},"name":"make_free_balance_be","qualname":"::traits::tokens::currency::Currency::make_free_balance_be","value":"pub fn make_free_balance_be(&AccountId, Self::Balance)\n-> SignedImbalance<Self::Balance, Self::PositiveImbalance>","parent":{"krate":0,"index":3744},"children":[],"decl_id":null,"docs":" Ensure an account's free balance equals some value; this will create the account\n if needed.","sig":null,"attributes":[{"value":"/ Ensure an account's free balance equals some value; this will create the account","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577347,"byte_end":577431,"line_start":195,"line_end":195,"column_start":2,"column_end":86}},{"value":"/ if needed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577433,"byte_end":577447,"line_start":196,"line_end":196,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577449,"byte_end":577452,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ Returns a signed imbalance and status to indicate if the account was successfully updated or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577454,"byte_end":577550,"line_start":198,"line_end":198,"column_start":2,"column_end":98}},{"value":"/ update has led to killing of the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577552,"byte_end":577597,"line_start":199,"line_end":199,"column_start":2,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577869,"byte_end":577884,"line_start":208,"line_end":208,"column_start":12,"column_end":27},"name":"TotalIssuanceOf","qualname":"::traits::tokens::currency::TotalIssuanceOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" A non-const `Get` implementation parameterised by a `Currency` impl which provides the result\n of `total_issuance`.\n","sig":null,"attributes":[{"value":"/ A non-const `Get` implementation parameterised by a `Currency` impl which provides the result","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577735,"byte_end":577832,"line_start":206,"line_end":206,"column_start":1,"column_end":98}},{"value":"/ of `total_issuance`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577833,"byte_end":577857,"line_start":207,"line_end":207,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3799},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fungible","qualname":"::traits::tokens::fungible","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","parent":null,"children":[{"krate":0,"index":3800},{"krate":0,"index":3801},{"krate":0,"index":3802},{"krate":0,"index":3805},{"krate":0,"index":3808},{"krate":0,"index":3811},{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3817},{"krate":0,"index":3820},{"krate":0,"index":3823},{"krate":0,"index":3826},{"krate":0,"index":3924},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3998},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4005},{"krate":0,"index":4008},{"krate":0,"index":4011},{"krate":0,"index":4014},{"krate":0,"index":4023},{"krate":0,"index":4029},{"krate":0,"index":4032},{"krate":0,"index":4036},{"krate":0,"index":4041},{"krate":0,"index":4044},{"krate":0,"index":4048},{"krate":0,"index":4054},{"krate":0,"index":4065},{"krate":0,"index":4071},{"krate":0,"index":4076},{"krate":0,"index":4082},{"krate":0,"index":4089}],"decl_id":null,"docs":" The traits for dealing with a single fungible token class and any associated types.\n","sig":null,"attributes":[{"value":"/ The traits for dealing with a single fungible token class and any associated types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":593972,"byte_end":594059,"line_start":18,"line_end":18,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":3864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606674,"byte_end":606682,"line_start":36,"line_end":36,"column_start":11,"column_end":19},"name":"Balanced","qualname":"::traits::tokens::fungible::balanced::Balanced","value":"Balanced<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3868},{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875}],"decl_id":null,"docs":" A fungible token class where any creation and deletion of tokens is semi-explicit and where the\n total supply is maintained automatically.","sig":null,"attributes":[{"value":"/ A fungible token class where any creation and deletion of tokens is semi-explicit and where the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606436,"byte_end":606535,"line_start":32,"line_end":32,"column_start":1,"column_end":100}},{"value":"/ total supply is maintained automatically.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606536,"byte_end":606581,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606582,"byte_end":606585,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This is auto-implemented when a token class has `Unbalanced` implemented.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606586,"byte_end":606663,"line_start":35,"line_end":35,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":3866},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606820,"byte_end":606830,"line_start":38,"line_end":38,"column_start":7,"column_end":17},"name":"OnDropDebt","qualname":"::traits::tokens::fungible::balanced::Balanced::OnDropDebt","value":"type OnDropDebt: HandleImbalanceDrop<Self::Balance>;","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" The type for managing what happens when an instance of `Debt` is dropped without being used.\n","sig":null,"attributes":[{"value":"/ The type for managing what happens when an instance of `Debt` is dropped without being used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606717,"byte_end":606813,"line_start":37,"line_end":37,"column_start":2,"column_end":98}}]},{"kind":"Type","id":{"krate":0,"index":3867},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606979,"byte_end":606991,"line_start":41,"line_end":41,"column_start":7,"column_end":19},"name":"OnDropCredit","qualname":"::traits::tokens::fungible::balanced::Balanced::OnDropCredit","value":"type OnDropCredit: HandleImbalanceDrop<Self::Balance>;","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" The type for managing what happens when an instance of `Credit` is dropped without being\n used.\n","sig":null,"attributes":[{"value":"/ The type for managing what happens when an instance of `Credit` is dropped without being","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606869,"byte_end":606961,"line_start":39,"line_end":39,"column_start":2,"column_end":94}},{"value":"/ used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606963,"byte_end":606972,"line_start":40,"line_end":40,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3868},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607345,"byte_end":607352,"line_start":48,"line_end":48,"column_start":5,"column_end":12},"name":"rescind","qualname":"::traits::tokens::fungible::balanced::Balanced::rescind","value":"pub fn rescind(Self::Balance) -> DebtOf<AccountId, Self>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607031,"byte_end":607127,"line_start":43,"line_end":43,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607129,"byte_end":607210,"line_start":44,"line_end":44,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607212,"byte_end":607215,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607217,"byte_end":607309,"line_start":46,"line_end":46,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607311,"byte_end":607340,"line_start":47,"line_end":47,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3869},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607766,"byte_end":607771,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::tokens::fungible::balanced::Balanced::issue","value":"pub fn issue(Self::Balance) -> CreditOf<AccountId, Self>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607406,"byte_end":607499,"line_start":50,"line_end":50,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607501,"byte_end":607579,"line_start":51,"line_end":51,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607581,"byte_end":607631,"line_start":52,"line_end":52,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607633,"byte_end":607636,"line_start":53,"line_end":53,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607638,"byte_end":607731,"line_start":54,"line_end":54,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607733,"byte_end":607761,"line_start":55,"line_end":55,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608017,"byte_end":608021,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"pair","qualname":"::traits::tokens::fungible::balanced::Balanced::pair","value":"pub fn pair(Self::Balance)\n-> (DebtOf<AccountId, Self>, CreditOf<AccountId, Self>)","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Produce a pair of imbalances that cancel each other out exactly.","sig":null,"attributes":[{"value":"/ Produce a pair of imbalances that cancel each other out exactly.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607827,"byte_end":607895,"line_start":58,"line_end":58,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607897,"byte_end":607900,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ This is just the same as burning and issuing the same amount and has no effect on the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607902,"byte_end":607991,"line_start":60,"line_end":60,"column_start":2,"column_end":91}},{"value":"/ total issuance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":607993,"byte_end":608012,"line_start":61,"line_end":61,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608472,"byte_end":608477,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::tokens::fungible::balanced::Balanced::slash","value":"pub fn slash(&AccountId, Self::Balance)\n-> (CreditOf<AccountId, Self>, Self::Balance)","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608155,"byte_end":608243,"line_start":66,"line_end":66,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608245,"byte_end":608248,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608250,"byte_end":608318,"line_start":68,"line_end":68,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608320,"byte_end":608323,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608325,"byte_end":608416,"line_start":70,"line_end":70,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608418,"byte_end":608467,"line_start":71,"line_end":71,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3872},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608857,"byte_end":608864,"line_start":79,"line_end":79,"column_start":5,"column_end":12},"name":"deposit","qualname":"::traits::tokens::fungible::balanced::Balanced::deposit","value":"pub fn deposit(&AccountId, Self::Balance)\n-> Result<DebtOf<AccountId, Self>, DispatchError>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Mints exactly `value` into the account of `who`.","sig":null,"attributes":[{"value":"/ Mints exactly `value` into the account of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608567,"byte_end":608619,"line_start":74,"line_end":74,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608621,"byte_end":608624,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an `Err` returned. This could happen because it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608626,"byte_end":608721,"line_start":76,"line_end":76,"column_start":2,"column_end":97}},{"value":"/ the account doesn't yet exist and it isn't possible to create it under the current","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608723,"byte_end":608809,"line_start":77,"line_end":77,"column_start":2,"column_end":88}},{"value":"/ circumstances and with `value` in it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608811,"byte_end":608852,"line_start":78,"line_end":78,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3873},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609343,"byte_end":609351,"line_start":91,"line_end":91,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::tokens::fungible::balanced::Balanced::withdraw","value":"pub fn withdraw(&AccountId, Self::Balance)\n-> Result<CreditOf<AccountId, Self>, DispatchError>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Removes `value` balance from `who` account if possible.","sig":null,"attributes":[{"value":"/ Removes `value` balance from `who` account if possible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":608965,"byte_end":609024,"line_start":84,"line_end":84,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609026,"byte_end":609029,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ If the removal is not possible, then it returns `Err` and nothing is changed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609031,"byte_end":609112,"line_start":86,"line_end":86,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609114,"byte_end":609117,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609119,"byte_end":609215,"line_start":88,"line_end":88,"column_start":2,"column_end":98}},{"value":"/ is no less than `value`. It may be more in the case that removing it reduced it below","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609217,"byte_end":609306,"line_start":89,"line_end":89,"column_start":2,"column_end":91}},{"value":"/ `Self::minimum_balance()`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609308,"byte_end":609338,"line_start":90,"line_end":90,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609838,"byte_end":609845,"line_start":103,"line_end":103,"column_start":5,"column_end":12},"name":"resolve","qualname":"::traits::tokens::fungible::balanced::Balanced::resolve","value":"pub fn resolve(&AccountId, CreditOf<AccountId, Self>)\n-> Result<(), CreditOf<AccountId, Self>>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" The balance of `who` is increased in order to counter `credit`. If the whole of `credit`\n cannot be countered, then nothing is changed and the original `credit` is returned in an\n `Err`.","sig":null,"attributes":[{"value":"/ The balance of `who` is increased in order to counter `credit`. If the whole of `credit`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609497,"byte_end":609589,"line_start":97,"line_end":97,"column_start":2,"column_end":94}},{"value":"/ cannot be countered, then nothing is changed and the original `credit` is returned in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609591,"byte_end":609683,"line_start":98,"line_end":98,"column_start":2,"column_end":94}},{"value":"/ `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609685,"byte_end":609695,"line_start":99,"line_end":99,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609697,"byte_end":609700,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ Please note: If `credit.peek()` is less than `Self::minimum_balance()`, then `who` must","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609702,"byte_end":609793,"line_start":101,"line_end":101,"column_start":2,"column_end":93}},{"value":"/ already exist for this to succeed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":609795,"byte_end":609833,"line_start":102,"line_end":102,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3875},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":610417,"byte_end":610423,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::tokens::fungible::balanced::Balanced::settle","value":"pub fn settle(&AccountId, DebtOf<AccountId, Self>)\n-> Result<CreditOf<AccountId, Self>, DebtOf<AccountId, Self>>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" The balance of `who` is decreased in order to counter `debt`. If the whole of `debt`\n cannot be countered, then nothing is changed and the original `debt` is returned in an\n `Err`.\n","sig":null,"attributes":[{"value":"/ The balance of `who` is decreased in order to counter `debt`. If the whole of `debt`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":610220,"byte_end":610308,"line_start":117,"line_end":117,"column_start":2,"column_end":90}},{"value":"/ cannot be countered, then nothing is changed and the original `debt` is returned in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":610310,"byte_end":610400,"line_start":118,"line_end":118,"column_start":2,"column_end":92}},{"value":"/ `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":610402,"byte_end":610412,"line_start":119,"line_end":119,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3876},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611496,"byte_end":611506,"line_start":149,"line_end":149,"column_start":11,"column_end":21},"name":"Unbalanced","qualname":"::traits::tokens::fungible::balanced::Unbalanced","value":"Unbalanced<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3880},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883}],"decl_id":null,"docs":" A fungible token class where the balance can be set arbitrarily.","sig":null,"attributes":[{"value":"/ A fungible token class where the balance can be set arbitrarily.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":610996,"byte_end":611064,"line_start":141,"line_end":141,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611065,"byte_end":611068,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ **WARNING**","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611069,"byte_end":611084,"line_start":143,"line_end":143,"column_start":1,"column_end":16}},{"value":"/ Do not use this directly unless you want trouble, since it allows you to alter account balances","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611085,"byte_end":611184,"line_start":144,"line_end":144,"column_start":1,"column_end":100}},{"value":"/ without keeping the issuance up to date. It has no safeguards against accidentally creating","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611185,"byte_end":611280,"line_start":145,"line_end":145,"column_start":1,"column_end":96}},{"value":"/ token imbalances in your system leading to accidental imflation or deflation. It's really just","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611281,"byte_end":611379,"line_start":146,"line_end":146,"column_start":1,"column_end":99}},{"value":"/ for the underlying datatype to implement so the user gets the much safer `Balanced` trait to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611380,"byte_end":611476,"line_start":147,"line_end":147,"column_start":1,"column_end":97}},{"value":"/ use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611477,"byte_end":611485,"line_start":148,"line_end":148,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3878},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611718,"byte_end":611729,"line_start":152,"line_end":152,"column_start":5,"column_end":16},"name":"set_balance","qualname":"::traits::tokens::fungible::balanced::Unbalanced::set_balance","value":"pub fn set_balance(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Set the balance of `who` to `amount`. If this cannot be done for some reason (e.g.\n because the account cannot be created or an overflow) then an `Err` is returned.\n","sig":null,"attributes":[{"value":"/ Set the balance of `who` to `amount`. If this cannot be done for some reason (e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611541,"byte_end":611627,"line_start":150,"line_end":150,"column_start":2,"column_end":88}},{"value":"/ because the account cannot be created or an overflow) then an `Err` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611629,"byte_end":611713,"line_start":151,"line_end":151,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611835,"byte_end":611853,"line_start":155,"line_end":155,"column_start":5,"column_end":23},"name":"set_total_issuance","qualname":"::traits::tokens::fungible::balanced::Unbalanced::set_total_issuance","value":"pub fn set_total_issuance(Self::Balance)","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Set the total issuance to `amount`.\n","sig":null,"attributes":[{"value":"/ Set the total issuance to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611791,"byte_end":611830,"line_start":154,"line_end":154,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3880},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612202,"byte_end":612218,"line_start":162,"line_end":162,"column_start":5,"column_end":21},"name":"decrease_balance","qualname":"::traits::tokens::fungible::balanced::Unbalanced::decrease_balance","value":"pub fn decrease_balance(&AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Reduce the balance of `who` by `amount`. If it cannot be reduced by that amount for\n some reason, return `Err` and don't reduce it at all. If Ok, return the imbalance.","sig":null,"attributes":[{"value":"/ Reduce the balance of `who` by `amount`. If it cannot be reduced by that amount for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611880,"byte_end":611967,"line_start":157,"line_end":157,"column_start":2,"column_end":89}},{"value":"/ some reason, return `Err` and don't reduce it at all. If Ok, return the imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611969,"byte_end":612055,"line_start":158,"line_end":158,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612057,"byte_end":612060,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance may be up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612062,"byte_end":612139,"line_start":160,"line_end":160,"column_start":2,"column_end":79}},{"value":"/ `Self::minimum_balance() - 1` greater than `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612141,"byte_end":612197,"line_start":161,"line_end":161,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3881},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":613015,"byte_end":613039,"line_start":187,"line_end":187,"column_start":5,"column_end":29},"name":"decrease_balance_at_most","qualname":"::traits::tokens::fungible::balanced::Unbalanced::decrease_balance_at_most","value":"pub fn decrease_balance_at_most(&AccountId, Self::Balance) -> Self::Balance","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Reduce the balance of `who` by the most that is possible, up to `amount`.","sig":null,"attributes":[{"value":"/ Reduce the balance of `who` by the most that is possible, up to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612726,"byte_end":612803,"line_start":181,"line_end":181,"column_start":2,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612805,"byte_end":612808,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance may be up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612810,"byte_end":612887,"line_start":183,"line_end":183,"column_start":2,"column_end":79}},{"value":"/ `Self::minimum_balance() - 1` greater than `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612889,"byte_end":612945,"line_start":184,"line_end":184,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612947,"byte_end":612950,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ Return the imbalance by which the account was reduced.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":612952,"byte_end":613010,"line_start":186,"line_end":186,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614273,"byte_end":614289,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"increase_balance","qualname":"::traits::tokens::fungible::balanced::Unbalanced::increase_balance","value":"pub fn increase_balance(&AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Increase the balance of `who` by `amount`. If it cannot be increased by that amount\n for some reason, return `Err` and don't increase it at all. If Ok, return the imbalance.","sig":null,"attributes":[{"value":"/ Increase the balance of `who` by `amount`. If it cannot be increased by that amount","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":613935,"byte_end":614022,"line_start":216,"line_end":216,"column_start":2,"column_end":89}},{"value":"/ for some reason, return `Err` and don't increase it at all. If Ok, return the imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614024,"byte_end":614116,"line_start":217,"line_end":217,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614118,"byte_end":614121,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and an error will be returned if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614123,"byte_end":614193,"line_start":219,"line_end":219,"column_start":2,"column_end":72}},{"value":"/ `amount < Self::minimum_balance()` when the account of `who` is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614195,"byte_end":614268,"line_start":220,"line_end":220,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3883},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614981,"byte_end":615005,"line_start":242,"line_end":242,"column_start":5,"column_end":29},"name":"increase_balance_at_most","qualname":"::traits::tokens::fungible::balanced::Unbalanced::increase_balance_at_most","value":"pub fn increase_balance_at_most(&AccountId, Self::Balance) -> Self::Balance","parent":{"krate":0,"index":3876},"children":[],"decl_id":null,"docs":" Increase the balance of `who` by the most that is possible, up to `amount`.","sig":null,"attributes":[{"value":"/ Increase the balance of `who` by the most that is possible, up to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614688,"byte_end":614767,"line_start":236,"line_end":236,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614769,"byte_end":614772,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance will be zero in the case that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614774,"byte_end":614868,"line_start":238,"line_end":238,"column_start":2,"column_end":96}},{"value":"/ `amount < Self::minimum_balance()`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614870,"byte_end":614909,"line_start":239,"line_end":239,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614911,"byte_end":614914,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ Return the imbalance by which the account was increased.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":614916,"byte_end":614976,"line_start":241,"line_end":241,"column_start":2,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3884},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615599,"byte_end":615615,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"IncreaseIssuance","qualname":"::traits::tokens::fungible::balanced::IncreaseIssuance","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple handler for an imbalance drop which increases the total issuance of the system by the\n imbalance amount. Used for leftover debt.\n","sig":null,"attributes":[{"value":"/ Simple handler for an imbalance drop which increases the total issuance of the system by the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615445,"byte_end":615541,"line_start":258,"line_end":258,"column_start":1,"column_end":97}},{"value":"/ imbalance amount. Used for leftover debt.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615542,"byte_end":615587,"line_start":259,"line_end":259,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3893},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":616035,"byte_end":616051,"line_start":271,"line_end":271,"column_start":12,"column_end":28},"name":"DecreaseIssuance","qualname":"::traits::tokens::fungible::balanced::DecreaseIssuance","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple handler for an imbalance drop which decreases the total issuance of the system by the\n imbalance amount. Used for leftover credit.\n","sig":null,"attributes":[{"value":"/ Simple handler for an imbalance drop which decreases the total issuance of the system by the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615879,"byte_end":615975,"line_start":269,"line_end":269,"column_start":1,"column_end":97}},{"value":"/ imbalance amount. Used for leftover credit.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615976,"byte_end":616023,"line_start":270,"line_end":270,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3953},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620509,"byte_end":620528,"line_start":28,"line_end":28,"column_start":11,"column_end":30},"name":"HandleImbalanceDrop","qualname":"::traits::tokens::fungible::imbalance::HandleImbalanceDrop","value":"HandleImbalanceDrop<Balance>","parent":null,"children":[{"krate":0,"index":3955}],"decl_id":null,"docs":" Handler for when an imbalance gets dropped. This could handle either a credit (negative) or\n debt (positive) imbalance.\n","sig":null,"attributes":[{"value":"/ Handler for when an imbalance gets dropped. This could handle either a credit (negative) or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620372,"byte_end":620467,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ debt (positive) imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620468,"byte_end":620498,"line_start":27,"line_end":27,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3955},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620615,"byte_end":620621,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"handle","qualname":"::traits::tokens::fungible::imbalance::HandleImbalanceDrop::handle","value":"pub fn handle(Balance)","parent":{"krate":0,"index":3953},"children":[],"decl_id":null,"docs":" Some something with the imbalance's value which is being dropped.\n","sig":null,"attributes":[{"value":"/ Some something with the imbalance's value which is being dropped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620541,"byte_end":620610,"line_start":29,"line_end":29,"column_start":2,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":20389},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621069,"byte_end":621078,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"Imbalance","qualname":"::traits::tokens::fungible::imbalance::Imbalance","value":"Imbalance {  }","parent":null,"children":[{"krate":0,"index":20393},{"krate":0,"index":20394}],"decl_id":null,"docs":" An imbalance in the system, representing a divergence of recorded token supply from the sum of\n the balances of all accounts. This is `must_use` in order to ensure it gets handled (placing\n into an account, settling from an account or altering the supply).","sig":null,"attributes":[{"value":"/ An imbalance in the system, representing a divergence of recorded token supply from the sum of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620643,"byte_end":620741,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ the balances of all accounts. This is `must_use` in order to ensure it gets handled (placing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620742,"byte_end":620838,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ into an account, settling from an account or altering the supply).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620839,"byte_end":620909,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620910,"byte_end":620913,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Importantly, it has a special `Drop` impl, and cannot be created outside of this module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":620914,"byte_end":621006,"line_start":37,"line_end":37,"column_start":1,"column_end":93}},{"value":"must_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621007,"byte_end":621018,"line_start":38,"line_end":38,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":3988},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":623612,"byte_end":623618,"line_start":138,"line_end":138,"column_start":10,"column_end":16},"name":"DebtOf","qualname":"::traits::tokens::fungible::imbalance::DebtOf","value":"Imbalance<<B as Inspect<AccountId>>::Balance,\n<B as Balanced<AccountId>>::OnDropDebt,\n<B as Balanced<AccountId>>::OnDropCredit>","parent":null,"children":[],"decl_id":null,"docs":" Imbalance implying that the total_issuance value is less than the sum of all account balances.\n","sig":null,"attributes":[{"value":"/ Imbalance implying that the total_issuance value is less than the sum of all account balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":623504,"byte_end":623602,"line_start":137,"line_end":137,"column_start":1,"column_end":99}}]},{"kind":"Type","id":{"krate":0,"index":3991},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":623965,"byte_end":623973,"line_start":147,"line_end":147,"column_start":10,"column_end":18},"name":"CreditOf","qualname":"::traits::tokens::fungible::imbalance::CreditOf","value":"Imbalance<<B as Inspect<AccountId>>::Balance,\n<B as Balanced<AccountId>>::OnDropCredit,\n<B as Balanced<AccountId>>::OnDropDebt>","parent":null,"children":[],"decl_id":null,"docs":" Imbalance implying that the total_issuance value is greater than the sum of all account\n balances.\n","sig":null,"attributes":[{"value":"/ Imbalance implying that the total_issuance value is greater than the sum of all account","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":623850,"byte_end":623941,"line_start":145,"line_end":145,"column_start":1,"column_end":92}},{"value":"/ balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":623942,"byte_end":623955,"line_start":146,"line_end":146,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":4014},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594481,"byte_end":594488,"line_start":36,"line_end":36,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::fungible::Inspect","value":"Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4022}],"decl_id":null,"docs":" Trait for providing balance-inspection access to a fungible asset.\n","sig":null,"attributes":[{"value":"/ Trait for providing balance-inspection access to a fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594400,"byte_end":594470,"line_start":35,"line_end":35,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":4016},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594565,"byte_end":594572,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::tokens::fungible::Inspect::Balance","value":"type Balance: Balance;","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" Scalar type for representing balance of an account.\n","sig":null,"attributes":[{"value":"/ Scalar type for representing balance of an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594503,"byte_end":594558,"line_start":37,"line_end":37,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4017},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594637,"byte_end":594651,"line_start":41,"line_end":41,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::tokens::fungible::Inspect::total_issuance","value":"pub fn total_issuance() -> Self::Balance","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594585,"byte_end":594632,"line_start":40,"line_end":40,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4018},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594731,"byte_end":594746,"line_start":44,"line_end":44,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::tokens::fungible::Inspect::minimum_balance","value":"pub fn minimum_balance() -> Self::Balance","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594674,"byte_end":594726,"line_start":43,"line_end":43,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4019},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594803,"byte_end":594810,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"balance","qualname":"::traits::tokens::fungible::Inspect::balance","value":"pub fn balance(&AccountId) -> Self::Balance","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" Get the balance of `who`.\n","sig":null,"attributes":[{"value":"/ Get the balance of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594769,"byte_end":594798,"line_start":46,"line_end":46,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":4020},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594926,"byte_end":594943,"line_start":50,"line_end":50,"column_start":5,"column_end":22},"name":"reducible_balance","qualname":"::traits::tokens::fungible::Inspect::reducible_balance","value":"pub fn reducible_balance(&AccountId, bool) -> Self::Balance","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" Get the maximum amount that `who` can withdraw/transfer successfully.\n","sig":null,"attributes":[{"value":"/ Get the maximum amount that `who` can withdraw/transfer successfully.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594848,"byte_end":594921,"line_start":49,"line_end":49,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":4021},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595076,"byte_end":595087,"line_start":53,"line_end":53,"column_start":5,"column_end":16},"name":"can_deposit","qualname":"::traits::tokens::fungible::Inspect::can_deposit","value":"pub fn can_deposit(&AccountId, Self::Balance) -> DepositConsequence","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" Returns `true` if the balance of `who` may be increased by `amount`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the balance of `who` may be increased by `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":594999,"byte_end":595071,"line_start":52,"line_end":52,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4022},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595268,"byte_end":595280,"line_start":57,"line_end":57,"column_start":5,"column_end":17},"name":"can_withdraw","qualname":"::traits::tokens::fungible::Inspect::can_withdraw","value":"pub fn can_withdraw(&AccountId, Self::Balance)\n-> WithdrawConsequence<Self::Balance>","parent":{"krate":0,"index":4014},"children":[],"decl_id":null,"docs":" Returns `Failed` if the balance of `who` may not be decreased by `amount`, otherwise\n the consequence.\n","sig":null,"attributes":[{"value":"/ Returns `Failed` if the balance of `who` may not be decreased by `amount`, otherwise","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595153,"byte_end":595241,"line_start":55,"line_end":55,"column_start":2,"column_end":90}},{"value":"/ the consequence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595243,"byte_end":595263,"line_start":56,"line_end":56,"column_start":2,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":4023},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595429,"byte_end":595435,"line_start":61,"line_end":61,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::fungible::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028}],"decl_id":null,"docs":" Trait for providing an ERC-20 style fungible asset.\n","sig":null,"attributes":[{"value":"/ Trait for providing an ERC-20 style fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595363,"byte_end":595418,"line_start":60,"line_end":60,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4025},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595627,"byte_end":595636,"line_start":64,"line_end":64,"column_start":5,"column_end":14},"name":"mint_into","qualname":"::traits::tokens::fungible::Mutate::mint_into","value":"pub fn mint_into(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4023},"children":[],"decl_id":null,"docs":" Increase the balance of `who` by exactly `amount`, minting new tokens. If that isn't\n possible then an `Err` is returned and nothing is changed.\n","sig":null,"attributes":[{"value":"/ Increase the balance of `who` by exactly `amount`, minting new tokens. If that isn't","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595470,"byte_end":595558,"line_start":62,"line_end":62,"column_start":2,"column_end":90}},{"value":"/ possible then an `Err` is returned and nothing is changed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595560,"byte_end":595622,"line_start":63,"line_end":63,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":4026},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595986,"byte_end":595995,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"burn_from","qualname":"::traits::tokens::fungible::Mutate::burn_from","value":"pub fn burn_from(&AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4023},"children":[],"decl_id":null,"docs":" Decrease the balance of `who` by at least `amount`, possibly slightly more in the case of\n minimum_balance requirements, burning the tokens. If that isn't possible then an `Err` is\n returned and nothing is changed. If successful, the amount of tokens reduced is returned.\n","sig":null,"attributes":[{"value":"/ Decrease the balance of `who` by at least `amount`, possibly slightly more in the case of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595698,"byte_end":595791,"line_start":66,"line_end":66,"column_start":2,"column_end":95}},{"value":"/ minimum_balance requirements, burning the tokens. If that isn't possible then an `Err` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595793,"byte_end":595886,"line_start":67,"line_end":67,"column_start":2,"column_end":95}},{"value":"/ returned and nothing is changed. If successful, the amount of tokens reduced is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595888,"byte_end":595981,"line_start":68,"line_end":68,"column_start":2,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":4027},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596499,"byte_end":596504,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::tokens::fungible::Mutate::slash","value":"pub fn slash(&AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4023},"children":[],"decl_id":null,"docs":" Attempt to reduce the balance of `who` by as much as possible up to `amount`, and possibly\n slightly more due to minimum_balance requirements. If no decrease is possible then an `Err`\n is returned and nothing is changed. If successful, the amount of tokens reduced is returned.","sig":null,"attributes":[{"value":"/ Attempt to reduce the balance of `who` by as much as possible up to `amount`, and possibly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596079,"byte_end":596173,"line_start":71,"line_end":71,"column_start":2,"column_end":96}},{"value":"/ slightly more due to minimum_balance requirements. If no decrease is possible then an `Err`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596175,"byte_end":596270,"line_start":72,"line_end":72,"column_start":2,"column_end":97}},{"value":"/ is returned and nothing is changed. If successful, the amount of tokens reduced is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596272,"byte_end":596368,"line_start":73,"line_end":73,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596370,"byte_end":596373,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ The default implementation just uses `withdraw` along with `reducible_balance` to ensure","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596375,"byte_end":596467,"line_start":75,"line_end":75,"column_start":2,"column_end":94}},{"value":"/ that is doesn't fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596469,"byte_end":596494,"line_start":76,"line_end":76,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4028},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596817,"byte_end":596825,"line_start":83,"line_end":83,"column_start":5,"column_end":13},"name":"teleport","qualname":"::traits::tokens::fungible::Mutate::teleport","value":"pub fn teleport(&AccountId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4023},"children":[],"decl_id":null,"docs":" Transfer funds from one account into another. The default implementation uses `mint_into`\n and `burn_from` and may generate unwanted events.\n","sig":null,"attributes":[{"value":"/ Transfer funds from one account into another. The default implementation uses `mint_into`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596664,"byte_end":596757,"line_start":81,"line_end":81,"column_start":2,"column_end":95}},{"value":"/ and `burn_from` and may generate unwanted events.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":596759,"byte_end":596812,"line_start":82,"line_end":82,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":4029},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597672,"byte_end":597680,"line_start":109,"line_end":109,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::traits::tokens::fungible::Transfer","value":"Transfer<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4031}],"decl_id":null,"docs":" Trait for providing a fungible asset which can only be transferred.\n","sig":null,"attributes":[{"value":"/ Trait for providing a fungible asset which can only be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597590,"byte_end":597661,"line_start":108,"line_end":108,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":4031},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597769,"byte_end":597777,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::tokens::fungible::Transfer::transfer","value":"pub fn transfer(&AccountId, &AccountId, Self::Balance, bool)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" Transfer funds from one account into another.\n","sig":null,"attributes":[{"value":"/ Transfer funds from one account into another.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597715,"byte_end":597764,"line_start":110,"line_end":110,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":4032},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597988,"byte_end":597999,"line_start":120,"line_end":120,"column_start":11,"column_end":22},"name":"InspectHold","qualname":"::traits::tokens::fungible::InspectHold","value":"InspectHold<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4034},{"krate":0,"index":4035}],"decl_id":null,"docs":" Trait for inspecting a fungible asset which can be reserved.\n","sig":null,"attributes":[{"value":"/ Trait for inspecting a fungible asset which can be reserved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597913,"byte_end":597977,"line_start":119,"line_end":119,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":4034},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598084,"byte_end":598099,"line_start":122,"line_end":122,"column_start":5,"column_end":20},"name":"balance_on_hold","qualname":"::traits::tokens::fungible::InspectHold::balance_on_hold","value":"pub fn balance_on_hold(&AccountId) -> Self::Balance","parent":{"krate":0,"index":4032},"children":[],"decl_id":null,"docs":" Amount of funds held in reserve by `who`.\n","sig":null,"attributes":[{"value":"/ Amount of funds held in reserve by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598034,"byte_end":598079,"line_start":121,"line_end":121,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4035},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598216,"byte_end":598224,"line_start":125,"line_end":125,"column_start":5,"column_end":13},"name":"can_hold","qualname":"::traits::tokens::fungible::InspectHold::can_hold","value":"pub fn can_hold(&AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":4032},"children":[],"decl_id":null,"docs":" Check to see if some `amount` of funds of `who` may be placed on hold.\n","sig":null,"attributes":[{"value":"/ Check to see if some `amount` of funds of `who` may be placed on hold.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598137,"byte_end":598211,"line_start":124,"line_end":124,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":4036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598350,"byte_end":598360,"line_start":129,"line_end":129,"column_start":11,"column_end":21},"name":"MutateHold","qualname":"::traits::tokens::fungible::MutateHold","value":"MutateHold<AccountId>: InspectHold<AccountId> + Transfer<AccountId>","parent":null,"children":[{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4040}],"decl_id":null,"docs":" Trait for mutating a fungible asset which can be reserved.\n","sig":null,"attributes":[{"value":"/ Trait for mutating a fungible asset which can be reserved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598277,"byte_end":598339,"line_start":128,"line_end":128,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4038},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598460,"byte_end":598464,"line_start":131,"line_end":131,"column_start":5,"column_end":9},"name":"hold","qualname":"::traits::tokens::fungible::MutateHold::hold","value":"pub fn hold(&AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4036},"children":[],"decl_id":null,"docs":" Hold some funds in an account.\n","sig":null,"attributes":[{"value":"/ Hold some funds in an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598421,"byte_end":598455,"line_start":130,"line_end":130,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4039},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598803,"byte_end":598810,"line_start":139,"line_end":139,"column_start":5,"column_end":12},"name":"release","qualname":"::traits::tokens::fungible::MutateHold::release","value":"pub fn release(&AccountId, Self::Balance, bool)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4036},"children":[],"decl_id":null,"docs":" Release up to `amount` held funds in an account.","sig":null,"attributes":[{"value":"/ Release up to `amount` held funds in an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598526,"byte_end":598578,"line_start":133,"line_end":133,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598580,"byte_end":598583,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ The actual amount released is returned with `Ok`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598585,"byte_end":598638,"line_start":135,"line_end":135,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598640,"byte_end":598643,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ If `best_effort` is `true`, then the amount actually unreserved and returned as the inner","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598645,"byte_end":598738,"line_start":137,"line_end":137,"column_start":2,"column_end":95}},{"value":"/ value of `Ok` may be smaller than the `amount` passed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598740,"byte_end":598798,"line_start":138,"line_end":138,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4040},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599455,"byte_end":599468,"line_start":156,"line_end":156,"column_start":5,"column_end":18},"name":"transfer_held","qualname":"::traits::tokens::fungible::MutateHold::transfer_held","value":"pub fn transfer_held(&AccountId, &AccountId, Self::Balance, bool, bool)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4036},"children":[],"decl_id":null,"docs":" Transfer held funds into a destination account.","sig":null,"attributes":[{"value":"/ Transfer held funds into a destination account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598923,"byte_end":598974,"line_start":145,"line_end":145,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598976,"byte_end":598979,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ If `on_hold` is `true`, then the destination account must already exist and the assets","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598981,"byte_end":599071,"line_start":147,"line_end":147,"column_start":2,"column_end":92}},{"value":"/ transferred will still be on hold in the destination account. If not, then the destination","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599073,"byte_end":599167,"line_start":148,"line_end":148,"column_start":2,"column_end":96}},{"value":"/ account need not already exist, but must be creatable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599169,"byte_end":599227,"line_start":149,"line_end":149,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599229,"byte_end":599232,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ If `best_effort` is `true`, then an amount less than `amount` may be transferred without","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599234,"byte_end":599326,"line_start":151,"line_end":151,"column_start":2,"column_end":94}},{"value":"/ error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599328,"byte_end":599338,"line_start":152,"line_end":152,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599340,"byte_end":599343,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ The actual amount transferred is returned, or `Err` in the case of error and nothing is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599345,"byte_end":599436,"line_start":154,"line_end":154,"column_start":2,"column_end":93}},{"value":"/ changed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599438,"byte_end":599450,"line_start":155,"line_end":155,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":4041},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599695,"byte_end":599707,"line_start":166,"line_end":166,"column_start":11,"column_end":23},"name":"BalancedHold","qualname":"::traits::tokens::fungible::BalancedHold","value":"BalancedHold<AccountId>: Balanced<AccountId> + MutateHold<AccountId>","parent":null,"children":[{"krate":0,"index":4043}],"decl_id":null,"docs":" Trait for slashing a fungible asset which can be reserved.\n","sig":null,"attributes":[{"value":"/ Trait for slashing a fungible asset which can be reserved.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599622,"byte_end":599684,"line_start":165,"line_end":165,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4043},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600074,"byte_end":600084,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"slash_held","qualname":"::traits::tokens::fungible::BalancedHold::slash_held","value":"pub fn slash_held(&AccountId, Self::Balance)\n-> (CreditOf<AccountId, Self>, Self::Balance)","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" Reduce the balance of some funds on hold in an account.","sig":null,"attributes":[{"value":"/ Reduce the balance of some funds on hold in an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599767,"byte_end":599826,"line_start":167,"line_end":167,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599828,"byte_end":599831,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599833,"byte_end":599901,"line_start":169,"line_end":169,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599903,"byte_end":599906,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ As much funds that are on hold up to `amount` will be deducted as possible. If this is less","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599908,"byte_end":600003,"line_start":171,"line_end":171,"column_start":2,"column_end":97}},{"value":"/ than `amount`, then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600005,"byte_end":600069,"line_start":172,"line_end":172,"column_start":2,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4048},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600717,"byte_end":600723,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"ItemOf","qualname":"::traits::tokens::fungible::ItemOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Convert a `fungibles` trait implementation into a `fungible` trait implementation by identifying\n a single item.\n","sig":null,"attributes":[{"value":"/ Convert a `fungibles` trait implementation into a `fungible` trait implementation by identifying","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600586,"byte_end":600686,"line_start":192,"line_end":192,"column_start":1,"column_end":101}},{"value":"/ a single item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600687,"byte_end":600705,"line_start":193,"line_end":193,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":4099},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fungibles","qualname":"::traits::tokens::fungibles","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","parent":null,"children":[{"krate":0,"index":4100},{"krate":0,"index":4101},{"krate":0,"index":4102},{"krate":0,"index":4105},{"krate":0,"index":4108},{"krate":0,"index":4109},{"krate":0,"index":4110},{"krate":0,"index":4113},{"krate":0,"index":4116},{"krate":0,"index":4119},{"krate":0,"index":4122},{"krate":0,"index":4133},{"krate":0,"index":4230},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4249},{"krate":0,"index":4252},{"krate":0,"index":4318},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4328},{"krate":0,"index":4331},{"krate":0,"index":4341},{"krate":0,"index":4346},{"krate":0,"index":4352},{"krate":0,"index":4355},{"krate":0,"index":4359},{"krate":0,"index":4364},{"krate":0,"index":4367},{"krate":0,"index":4371},{"krate":0,"index":4374}],"decl_id":null,"docs":" The traits for sets of fungible tokens and any associated types.\n","sig":null,"attributes":[{"value":"/ The traits for sets of fungible tokens and any associated types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":624891,"byte_end":624959,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":4122},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approvals","qualname":"::traits::tokens::fungibles::approvals","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","parent":null,"children":[{"krate":0,"index":4123},{"krate":0,"index":4126},{"krate":0,"index":4129}],"decl_id":null,"docs":" Inspect and Mutate traits for Asset approvals\n","sig":null,"attributes":[{"value":"/ Inspect and Mutate traits for Asset approvals","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635514,"byte_end":635563,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":4126},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635612,"byte_end":635619,"line_start":21,"line_end":21,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::fungibles::approvals::Inspect","value":"Inspect<AccountId>: super::Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4128}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635732,"byte_end":635741,"line_start":23,"line_end":23,"column_start":5,"column_end":14},"name":"allowance","qualname":"::traits::tokens::fungibles::approvals::Inspect::allowance","value":"pub fn allowance(Self::AssetId, &AccountId, &AccountId) -> Self::Balance","parent":{"krate":0,"index":4126},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4129},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635836,"byte_end":635842,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::fungibles::approvals::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4131},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635957,"byte_end":635964,"line_start":28,"line_end":28,"column_start":5,"column_end":12},"name":"approve","qualname":"::traits::tokens::fungibles::approvals::Mutate::approve","value":"pub fn approve(Self::AssetId, &AccountId, &AccountId, Self::Balance)\n-> DispatchResult","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4132},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":636169,"byte_end":636182,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"transfer_from","qualname":"::traits::tokens::fungibles::approvals::Mutate::transfer_from","value":"pub fn transfer_from(Self::AssetId, &AccountId, &AccountId, &AccountId,\nSelf::Balance) -> DispatchResult","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4170},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637654,"byte_end":637662,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"Balanced","qualname":"::traits::tokens::fungibles::balanced::Balanced","value":"Balanced<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4176},{"krate":0,"index":4177},{"krate":0,"index":4178},{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181}],"decl_id":null,"docs":" A fungible token class where any creation and deletion of tokens is semi-explicit and where the\n total supply is maintained automatically.","sig":null,"attributes":[{"value":"/ A fungible token class where any creation and deletion of tokens is semi-explicit and where the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637416,"byte_end":637515,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/ total supply is maintained automatically.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637516,"byte_end":637561,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637562,"byte_end":637565,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This is auto-implemented when a token class has `Unbalanced` implemented.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637566,"byte_end":637643,"line_start":36,"line_end":36,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":4172},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637800,"byte_end":637810,"line_start":39,"line_end":39,"column_start":7,"column_end":17},"name":"OnDropDebt","qualname":"::traits::tokens::fungibles::balanced::Balanced::OnDropDebt","value":"type OnDropDebt: HandleImbalanceDrop<Self::AssetId, Self::Balance>;","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" The type for managing what happens when an instance of `Debt` is dropped without being used.\n","sig":null,"attributes":[{"value":"/ The type for managing what happens when an instance of `Debt` is dropped without being used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637697,"byte_end":637793,"line_start":38,"line_end":38,"column_start":2,"column_end":98}}]},{"kind":"Type","id":{"krate":0,"index":4173},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637974,"byte_end":637986,"line_start":42,"line_end":42,"column_start":7,"column_end":19},"name":"OnDropCredit","qualname":"::traits::tokens::fungibles::balanced::Balanced::OnDropCredit","value":"type OnDropCredit: HandleImbalanceDrop<Self::AssetId, Self::Balance>;","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" The type for managing what happens when an instance of `Credit` is dropped without being\n used.\n","sig":null,"attributes":[{"value":"/ The type for managing what happens when an instance of `Credit` is dropped without being","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637864,"byte_end":637956,"line_start":40,"line_end":40,"column_start":2,"column_end":94}},{"value":"/ used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637958,"byte_end":637967,"line_start":41,"line_end":41,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4174},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638355,"byte_end":638362,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"name":"rescind","qualname":"::traits::tokens::fungibles::balanced::Balanced::rescind","value":"pub fn rescind(Self::AssetId, Self::Balance) -> DebtOf<AccountId, Self>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638041,"byte_end":638137,"line_start":44,"line_end":44,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638139,"byte_end":638220,"line_start":45,"line_end":45,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638222,"byte_end":638225,"line_start":46,"line_end":46,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638227,"byte_end":638319,"line_start":47,"line_end":47,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638321,"byte_end":638350,"line_start":48,"line_end":48,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638798,"byte_end":638803,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::tokens::fungibles::balanced::Balanced::issue","value":"pub fn issue(Self::AssetId, Self::Balance) -> CreditOf<AccountId, Self>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638438,"byte_end":638531,"line_start":51,"line_end":51,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638533,"byte_end":638611,"line_start":52,"line_end":52,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638613,"byte_end":638663,"line_start":53,"line_end":53,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638665,"byte_end":638668,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638670,"byte_end":638763,"line_start":55,"line_end":55,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638765,"byte_end":638793,"line_start":56,"line_end":56,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4176},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639071,"byte_end":639075,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"pair","qualname":"::traits::tokens::fungibles::balanced::Balanced::pair","value":"pub fn pair(Self::AssetId, Self::Balance)\n-> (DebtOf<AccountId, Self>, CreditOf<AccountId, Self>)","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Produce a pair of imbalances that cancel each other out exactly.","sig":null,"attributes":[{"value":"/ Produce a pair of imbalances that cancel each other out exactly.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638881,"byte_end":638949,"line_start":59,"line_end":59,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638951,"byte_end":638954,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ This is just the same as burning and issuing the same amount and has no effect on the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":638956,"byte_end":639045,"line_start":61,"line_end":61,"column_start":2,"column_end":91}},{"value":"/ total issuance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639047,"byte_end":639066,"line_start":62,"line_end":62,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4177},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639619,"byte_end":639624,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::tokens::fungibles::balanced::Balanced::slash","value":"pub fn slash(Self::AssetId, &AccountId, Self::Balance)\n-> (CreditOf<AccountId, Self>, Self::Balance)","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`, preferring to deduct from the\n free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`, preferring to deduct from the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639253,"byte_end":639344,"line_start":70,"line_end":70,"column_start":2,"column_end":93}},{"value":"/ free balance. This function cannot fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639346,"byte_end":639390,"line_start":71,"line_end":71,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639392,"byte_end":639395,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639397,"byte_end":639465,"line_start":73,"line_end":73,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639467,"byte_end":639470,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639472,"byte_end":639563,"line_start":75,"line_end":75,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639565,"byte_end":639614,"line_start":76,"line_end":76,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4178},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640044,"byte_end":640051,"line_start":88,"line_end":88,"column_start":5,"column_end":12},"name":"deposit","qualname":"::traits::tokens::fungibles::balanced::Balanced::deposit","value":"pub fn deposit(Self::AssetId, &AccountId, Self::Balance)\n-> Result<DebtOf<AccountId, Self>, DispatchError>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Mints exactly `value` into the `asset` account of `who`.","sig":null,"attributes":[{"value":"/ Mints exactly `value` into the `asset` account of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639746,"byte_end":639806,"line_start":83,"line_end":83,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639808,"byte_end":639811,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an `Err` returned. This could happen because it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639813,"byte_end":639908,"line_start":85,"line_end":85,"column_start":2,"column_end":97}},{"value":"/ the account doesn't yet exist and it isn't possible to create it under the current","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639910,"byte_end":639996,"line_start":86,"line_end":86,"column_start":2,"column_end":88}},{"value":"/ circumstances and with `value` in it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":639998,"byte_end":640039,"line_start":87,"line_end":87,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":4179},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640567,"byte_end":640575,"line_start":101,"line_end":101,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::tokens::fungibles::balanced::Balanced::withdraw","value":"pub fn withdraw(Self::AssetId, &AccountId, Self::Balance)\n-> Result<CreditOf<AccountId, Self>, DispatchError>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" Removes `value` free `asset` balance from `who` account if possible.","sig":null,"attributes":[{"value":"/ Removes `value` free `asset` balance from `who` account if possible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640176,"byte_end":640248,"line_start":94,"line_end":94,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640250,"byte_end":640253,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ If the removal is not possible, then it returns `Err` and nothing is changed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640255,"byte_end":640336,"line_start":96,"line_end":96,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640338,"byte_end":640341,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640343,"byte_end":640439,"line_start":98,"line_end":98,"column_start":2,"column_end":98}},{"value":"/ is no less than `value`. It may be more in the case that removing it reduced it below","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640441,"byte_end":640530,"line_start":99,"line_end":99,"column_start":2,"column_end":91}},{"value":"/ `Self::minimum_balance()`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640532,"byte_end":640562,"line_start":100,"line_end":100,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4180},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641086,"byte_end":641093,"line_start":114,"line_end":114,"column_start":5,"column_end":12},"name":"resolve","qualname":"::traits::tokens::fungibles::balanced::Balanced::resolve","value":"pub fn resolve(&AccountId, CreditOf<AccountId, Self>)\n-> Result<(), CreditOf<AccountId, Self>>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" The balance of `who` is increased in order to counter `credit`. If the whole of `credit`\n cannot be countered, then nothing is changed and the original `credit` is returned in an\n `Err`.","sig":null,"attributes":[{"value":"/ The balance of `who` is increased in order to counter `credit`. If the whole of `credit`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640745,"byte_end":640837,"line_start":108,"line_end":108,"column_start":2,"column_end":94}},{"value":"/ cannot be countered, then nothing is changed and the original `credit` is returned in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640839,"byte_end":640931,"line_start":109,"line_end":109,"column_start":2,"column_end":94}},{"value":"/ `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640933,"byte_end":640943,"line_start":110,"line_end":110,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640945,"byte_end":640948,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ Please note: If `credit.peek()` is less than `Self::minimum_balance()`, then `who` must","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":640950,"byte_end":641041,"line_start":112,"line_end":112,"column_start":2,"column_end":93}},{"value":"/ already exist for this to succeed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641043,"byte_end":641081,"line_start":113,"line_end":113,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":4181},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641789,"byte_end":641795,"line_start":135,"line_end":135,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::tokens::fungibles::balanced::Balanced::settle","value":"pub fn settle(&AccountId, DebtOf<AccountId, Self>)\n-> Result<CreditOf<AccountId, Self>, DebtOf<AccountId, Self>>","parent":{"krate":0,"index":4170},"children":[],"decl_id":null,"docs":" The balance of `who` is decreased in order to counter `debt`. If the whole of `debt`\n cannot be countered, then nothing is changed and the original `debt` is returned in an\n `Err`.\n","sig":null,"attributes":[{"value":"/ The balance of `who` is decreased in order to counter `debt`. If the whole of `debt`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641592,"byte_end":641680,"line_start":132,"line_end":132,"column_start":2,"column_end":90}},{"value":"/ cannot be countered, then nothing is changed and the original `debt` is returned in an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641682,"byte_end":641772,"line_start":133,"line_end":133,"column_start":2,"column_end":92}},{"value":"/ `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":641774,"byte_end":641784,"line_start":134,"line_end":134,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643051,"byte_end":643061,"line_start":169,"line_end":169,"column_start":11,"column_end":21},"name":"Unbalanced","qualname":"::traits::tokens::fungibles::balanced::Unbalanced","value":"Unbalanced<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4188},{"krate":0,"index":4189}],"decl_id":null,"docs":" A fungible token class where the balance can be set arbitrarily.","sig":null,"attributes":[{"value":"/ A fungible token class where the balance can be set arbitrarily.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642551,"byte_end":642619,"line_start":161,"line_end":161,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642620,"byte_end":642623,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ **WARNING**","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642624,"byte_end":642639,"line_start":163,"line_end":163,"column_start":1,"column_end":16}},{"value":"/ Do not use this directly unless you want trouble, since it allows you to alter account balances","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642640,"byte_end":642739,"line_start":164,"line_end":164,"column_start":1,"column_end":100}},{"value":"/ without keeping the issuance up to date. It has no safeguards against accidentally creating","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642740,"byte_end":642835,"line_start":165,"line_end":165,"column_start":1,"column_end":96}},{"value":"/ token imbalances in your system leading to accidental imflation or deflation. It's really just","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642836,"byte_end":642934,"line_start":166,"line_end":166,"column_start":1,"column_end":99}},{"value":"/ for the underlying datatype to implement so the user gets the much safer `Balanced` trait to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":642935,"byte_end":643031,"line_start":167,"line_end":167,"column_start":1,"column_end":97}},{"value":"/ use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643032,"byte_end":643040,"line_start":168,"line_end":168,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":4184},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643281,"byte_end":643292,"line_start":172,"line_end":172,"column_start":5,"column_end":16},"name":"set_balance","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::set_balance","value":"pub fn set_balance(Self::AssetId, &AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Set the `asset` balance of `who` to `amount`. If this cannot be done for some reason (e.g.\n because the account cannot be created or an overflow) then an `Err` is returned.\n","sig":null,"attributes":[{"value":"/ Set the `asset` balance of `who` to `amount`. If this cannot be done for some reason (e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643096,"byte_end":643190,"line_start":170,"line_end":170,"column_start":2,"column_end":96}},{"value":"/ because the account cannot be created or an overflow) then an `Err` is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643192,"byte_end":643276,"line_start":171,"line_end":171,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":4185},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643431,"byte_end":643449,"line_start":175,"line_end":175,"column_start":5,"column_end":23},"name":"set_total_issuance","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::set_total_issuance","value":"pub fn set_total_issuance(Self::AssetId, Self::Balance)","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Set the total issuance of `asset` to `amount`.\n","sig":null,"attributes":[{"value":"/ Set the total issuance of `asset` to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643376,"byte_end":643426,"line_start":174,"line_end":174,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4186},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643828,"byte_end":643844,"line_start":182,"line_end":182,"column_start":5,"column_end":21},"name":"decrease_balance","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::decrease_balance","value":"pub fn decrease_balance(Self::AssetId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Reduce the `asset` balance of `who` by `amount`. If it cannot be reduced by that amount for\n some reason, return `Err` and don't reduce it at all. If Ok, return the imbalance.","sig":null,"attributes":[{"value":"/ Reduce the `asset` balance of `who` by `amount`. If it cannot be reduced by that amount for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643498,"byte_end":643593,"line_start":177,"line_end":177,"column_start":2,"column_end":97}},{"value":"/ some reason, return `Err` and don't reduce it at all. If Ok, return the imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643595,"byte_end":643681,"line_start":178,"line_end":178,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643683,"byte_end":643686,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance may be up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643688,"byte_end":643765,"line_start":180,"line_end":180,"column_start":2,"column_end":79}},{"value":"/ `Self::minimum_balance() - 1` greater than `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643767,"byte_end":643823,"line_start":181,"line_end":181,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4187},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644692,"byte_end":644716,"line_start":208,"line_end":208,"column_start":5,"column_end":29},"name":"decrease_balance_at_most","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::decrease_balance_at_most","value":"pub fn decrease_balance_at_most(Self::AssetId, &AccountId, Self::Balance)\n-> Self::Balance","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Reduce the `asset` balance of `who` by the most that is possible, up to `amount`.","sig":null,"attributes":[{"value":"/ Reduce the `asset` balance of `who` by the most that is possible, up to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644395,"byte_end":644480,"line_start":202,"line_end":202,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644482,"byte_end":644485,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance may be up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644487,"byte_end":644564,"line_start":204,"line_end":204,"column_start":2,"column_end":79}},{"value":"/ `Self::minimum_balance() - 1` greater than `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644566,"byte_end":644622,"line_start":205,"line_end":205,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644624,"byte_end":644627,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ Return the imbalance by which the account was reduced.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":644629,"byte_end":644687,"line_start":207,"line_end":207,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4188},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646016,"byte_end":646032,"line_start":246,"line_end":246,"column_start":5,"column_end":21},"name":"increase_balance","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::increase_balance","value":"pub fn increase_balance(Self::AssetId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Increase the `asset` balance of `who` by `amount`. If it cannot be increased by that amount\n for some reason, return `Err` and don't increase it at all. If Ok, return the imbalance.","sig":null,"attributes":[{"value":"/ Increase the `asset` balance of `who` by `amount`. If it cannot be increased by that amount","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":645670,"byte_end":645765,"line_start":241,"line_end":241,"column_start":2,"column_end":97}},{"value":"/ for some reason, return `Err` and don't increase it at all. If Ok, return the imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":645767,"byte_end":645859,"line_start":242,"line_end":242,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":645861,"byte_end":645864,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and an error will be returned if","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":645866,"byte_end":645936,"line_start":244,"line_end":244,"column_start":2,"column_end":72}},{"value":"/ `amount < Self::minimum_balance()` when the account of `who` is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":645938,"byte_end":646011,"line_start":245,"line_end":245,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":4189},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646775,"byte_end":646799,"line_start":268,"line_end":268,"column_start":5,"column_end":29},"name":"increase_balance_at_most","qualname":"::traits::tokens::fungibles::balanced::Unbalanced::increase_balance_at_most","value":"pub fn increase_balance_at_most(Self::AssetId, &AccountId, Self::Balance)\n-> Self::Balance","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Increase the `asset` balance of `who` by the most that is possible, up to `amount`.","sig":null,"attributes":[{"value":"/ Increase the `asset` balance of `who` by the most that is possible, up to `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646474,"byte_end":646561,"line_start":262,"line_end":262,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646563,"byte_end":646566,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ Minimum balance will be respected and the returned imbalance will be zero in the case that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646568,"byte_end":646662,"line_start":264,"line_end":264,"column_start":2,"column_end":96}},{"value":"/ `amount < Self::minimum_balance()`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646664,"byte_end":646703,"line_start":265,"line_end":265,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646705,"byte_end":646708,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ Return the imbalance by which the account was increased.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":646710,"byte_end":646770,"line_start":267,"line_end":267,"column_start":2,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":4190},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647444,"byte_end":647460,"line_start":290,"line_end":290,"column_start":12,"column_end":28},"name":"IncreaseIssuance","qualname":"::traits::tokens::fungibles::balanced::IncreaseIssuance","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple handler for an imbalance drop which increases the total issuance of the system by the\n imbalance amount. Used for leftover debt.\n","sig":null,"attributes":[{"value":"/ Simple handler for an imbalance drop which increases the total issuance of the system by the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647290,"byte_end":647386,"line_start":288,"line_end":288,"column_start":1,"column_end":97}},{"value":"/ imbalance amount. Used for leftover debt.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647387,"byte_end":647432,"line_start":289,"line_end":289,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4199},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647923,"byte_end":647939,"line_start":301,"line_end":301,"column_start":12,"column_end":28},"name":"DecreaseIssuance","qualname":"::traits::tokens::fungibles::balanced::DecreaseIssuance","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple handler for an imbalance drop which decreases the total issuance of the system by the\n imbalance amount. Used for leftover credit.\n","sig":null,"attributes":[{"value":"/ Simple handler for an imbalance drop which decreases the total issuance of the system by the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647767,"byte_end":647863,"line_start":299,"line_end":299,"column_start":1,"column_end":97}},{"value":"/ imbalance amount. Used for leftover credit.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647864,"byte_end":647911,"line_start":300,"line_end":300,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":4230},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"metadata","qualname":"::traits::tokens::fungibles::metadata","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","parent":null,"children":[{"krate":0,"index":4231},{"krate":0,"index":4234},{"krate":0,"index":4237},{"krate":0,"index":4242}],"decl_id":null,"docs":" Inspect and Mutate traits for Asset metadata\n","sig":null,"attributes":[{"value":"/ Inspect and Mutate traits for Asset metadata","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652231,"byte_end":652279,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":4237},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652351,"byte_end":652358,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::fungibles::metadata::Inspect","value":"Inspect<AccountId>: super::Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4239},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652432,"byte_end":652436,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::tokens::fungibles::metadata::Inspect::name","value":"pub fn name(Self::AssetId) -> Vec<u8>","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652506,"byte_end":652512,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"symbol","qualname":"::traits::tokens::fungibles::metadata::Inspect::symbol","value":"pub fn symbol(Self::AssetId) -> Vec<u8>","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4241},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652584,"byte_end":652592,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"decimals","qualname":"::traits::tokens::fungibles::metadata::Inspect::decimals","value":"pub fn decimals(Self::AssetId) -> u8","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4242},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652635,"byte_end":652641,"line_start":32,"line_end":32,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::fungibles::metadata::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4244}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4244},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652734,"byte_end":652737,"line_start":34,"line_end":34,"column_start":5,"column_end":8},"name":"set","qualname":"::traits::tokens::fungibles::metadata::Mutate::set","value":"pub fn set(Self::AssetId, &AccountId, Vec<u8>, Vec<u8>, u8) -> DispatchResult","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4282},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654011,"byte_end":654030,"line_start":32,"line_end":32,"column_start":11,"column_end":30},"name":"HandleImbalanceDrop","qualname":"::traits::tokens::fungibles::imbalance::HandleImbalanceDrop","value":"HandleImbalanceDrop<AssetId, Balance>","parent":null,"children":[{"krate":0,"index":4285}],"decl_id":null,"docs":" Handler for when an imbalance gets dropped. This could handle either a credit (negative) or\n debt (positive) imbalance.\n","sig":null,"attributes":[{"value":"/ Handler for when an imbalance gets dropped. This could handle either a credit (negative) or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":653874,"byte_end":653969,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ debt (positive) imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":653970,"byte_end":654000,"line_start":31,"line_end":31,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":4285},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654055,"byte_end":654061,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"name":"handle","qualname":"::traits::tokens::fungibles::imbalance::HandleImbalanceDrop::handle","value":"pub fn handle(AssetId, Balance)","parent":{"krate":0,"index":4282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20419},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654525,"byte_end":654534,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"Imbalance","qualname":"::traits::tokens::fungibles::imbalance::Imbalance","value":"Imbalance {  }","parent":null,"children":[{"krate":0,"index":20424},{"krate":0,"index":20425},{"krate":0,"index":20426}],"decl_id":null,"docs":" An imbalance in the system, representing a divergence of recorded token supply from the sum of\n the balances of all accounts. This is `must_use` in order to ensure it gets handled (placing\n into an account, settling from an account or altering the supply).","sig":null,"attributes":[{"value":"/ An imbalance in the system, representing a divergence of recorded token supply from the sum of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654099,"byte_end":654197,"line_start":36,"line_end":36,"column_start":1,"column_end":99}},{"value":"/ the balances of all accounts. This is `must_use` in order to ensure it gets handled (placing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654198,"byte_end":654294,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/ into an account, settling from an account or altering the supply).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654295,"byte_end":654365,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654366,"byte_end":654369,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Importantly, it has a special `Drop` impl, and cannot be created outside of this module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654370,"byte_end":654462,"line_start":40,"line_end":40,"column_start":1,"column_end":93}},{"value":"must_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654463,"byte_end":654474,"line_start":41,"line_end":41,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655487,"byte_end":655491,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"zero","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::zero","value":"pub fn zero(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4305},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655688,"byte_end":655697,"line_start":96,"line_end":96,"column_start":9,"column_end":18},"name":"drop_zero","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4306},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655835,"byte_end":655840,"line_start":105,"line_end":105,"column_start":9,"column_end":14},"name":"split","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::split","value":"pub fn split(Self, B) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4307},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":656081,"byte_end":656086,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"merge","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::merge","value":"pub fn merge(Self, Self) -> Result<Self, (Self, Self)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4308},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":656325,"byte_end":656332,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"name":"subsume","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::subsume","value":"pub fn subsume(&mut Self, Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4309},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":656552,"byte_end":656558,"line_start":130,"line_end":130,"column_start":9,"column_end":15},"name":"offset","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::offset","value":"pub fn offset(Self, Imbalance<A, B, OppositeOnDrop, OnDrop>)\n->\n    Result<SameOrOther<Self, Imbalance<A, B, OppositeOnDrop, OnDrop>>,\n    (Self, Imbalance<A, B, OppositeOnDrop, OnDrop>)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4310},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657167,"byte_end":657171,"line_start":153,"line_end":153,"column_start":9,"column_end":13},"name":"peek","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::peek","value":"pub fn peek(&Self) -> B","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4311},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657212,"byte_end":657217,"line_start":157,"line_end":157,"column_start":9,"column_end":14},"name":"asset","qualname":"<Imbalance<A, B, OnDrop, OppositeOnDrop>>::asset","value":"pub fn asset(&Self) -> A","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4312},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657359,"byte_end":657365,"line_start":163,"line_end":163,"column_start":10,"column_end":16},"name":"DebtOf","qualname":"::traits::tokens::fungibles::imbalance::DebtOf","value":"Imbalance<<B as Inspect<AccountId>>::AssetId,\n<B as Inspect<AccountId>>::Balance, <B as Balanced<AccountId>>::OnDropDebt,\n<B as Balanced<AccountId>>::OnDropCredit>","parent":null,"children":[],"decl_id":null,"docs":" Imbalance implying that the total_issuance value is less than the sum of all account balances.\n","sig":null,"attributes":[{"value":"/ Imbalance implying that the total_issuance value is less than the sum of all account balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657251,"byte_end":657349,"line_start":162,"line_end":162,"column_start":1,"column_end":99}}]},{"kind":"Type","id":{"krate":0,"index":4315},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657749,"byte_end":657757,"line_start":173,"line_end":173,"column_start":10,"column_end":18},"name":"CreditOf","qualname":"::traits::tokens::fungibles::imbalance::CreditOf","value":"Imbalance<<B as Inspect<AccountId>>::AssetId,\n<B as Inspect<AccountId>>::Balance, <B as Balanced<AccountId>>::OnDropCredit,\n<B as Balanced<AccountId>>::OnDropDebt>","parent":null,"children":[],"decl_id":null,"docs":" Imbalance implying that the total_issuance value is greater than the sum of all account\n balances.\n","sig":null,"attributes":[{"value":"/ Imbalance implying that the total_issuance value is greater than the sum of all account","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657634,"byte_end":657725,"line_start":171,"line_end":171,"column_start":1,"column_end":92}},{"value":"/ balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":657726,"byte_end":657739,"line_start":172,"line_end":172,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":4331},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625396,"byte_end":625403,"line_start":36,"line_end":36,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::fungibles::Inspect","value":"Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4333},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4336},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":4339},{"krate":0,"index":4340}],"decl_id":null,"docs":" Trait for providing balance-inspection access to a set of named fungible assets.\n","sig":null,"attributes":[{"value":"/ Trait for providing balance-inspection access to a set of named fungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625301,"byte_end":625385,"line_start":35,"line_end":35,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":4333},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625479,"byte_end":625486,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"name":"AssetId","qualname":"::traits::tokens::fungibles::Inspect::AssetId","value":"type AssetId: AssetId;","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Means of identifying one asset class from another.\n","sig":null,"attributes":[{"value":"/ Means of identifying one asset class from another.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625418,"byte_end":625472,"line_start":37,"line_end":37,"column_start":2,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":4334},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625561,"byte_end":625568,"line_start":41,"line_end":41,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::tokens::fungibles::Inspect::Balance","value":"type Balance: Balance;","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Scalar type for representing balance of an account.\n","sig":null,"attributes":[{"value":"/ Scalar type for representing balance of an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625499,"byte_end":625554,"line_start":40,"line_end":40,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4335},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625633,"byte_end":625647,"line_start":44,"line_end":44,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::tokens::fungibles::Inspect::total_issuance","value":"pub fn total_issuance(Self::AssetId) -> Self::Balance","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625581,"byte_end":625628,"line_start":43,"line_end":43,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4336},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625747,"byte_end":625762,"line_start":47,"line_end":47,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::tokens::fungibles::Inspect::minimum_balance","value":"pub fn minimum_balance(Self::AssetId) -> Self::Balance","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625690,"byte_end":625742,"line_start":46,"line_end":46,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4337},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625847,"byte_end":625854,"line_start":50,"line_end":50,"column_start":5,"column_end":12},"name":"balance","qualname":"::traits::tokens::fungibles::Inspect::balance","value":"pub fn balance(Self::AssetId, &AccountId) -> Self::Balance","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Get the `asset` balance of `who`.\n","sig":null,"attributes":[{"value":"/ Get the `asset` balance of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625805,"byte_end":625842,"line_start":49,"line_end":49,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4338},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626003,"byte_end":626020,"line_start":53,"line_end":53,"column_start":5,"column_end":22},"name":"reducible_balance","qualname":"::traits::tokens::fungibles::Inspect::reducible_balance","value":"pub fn reducible_balance(Self::AssetId, &AccountId, bool) -> Self::Balance","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Get the maximum amount of `asset` that `who` can withdraw/transfer successfully.\n","sig":null,"attributes":[{"value":"/ Get the maximum amount of `asset` that `who` can withdraw/transfer successfully.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625914,"byte_end":625998,"line_start":52,"line_end":52,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":4339},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626183,"byte_end":626194,"line_start":56,"line_end":56,"column_start":5,"column_end":16},"name":"can_deposit","qualname":"::traits::tokens::fungibles::Inspect::can_deposit","value":"pub fn can_deposit(Self::AssetId, &AccountId, Self::Balance)\n-> DepositConsequence","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Returns `true` if the `asset` balance of `who` may be increased by `amount`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `asset` balance of `who` may be increased by `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626098,"byte_end":626178,"line_start":55,"line_end":55,"column_start":2,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":4340},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626415,"byte_end":626427,"line_start":64,"line_end":64,"column_start":5,"column_end":17},"name":"can_withdraw","qualname":"::traits::tokens::fungibles::Inspect::can_withdraw","value":"pub fn can_withdraw(Self::AssetId, &AccountId, Self::Balance)\n-> WithdrawConsequence<Self::Balance>","parent":{"krate":0,"index":4331},"children":[],"decl_id":null,"docs":" Returns `Failed` if the `asset` balance of `who` may not be decreased by `amount`, otherwise\n the consequence.\n","sig":null,"attributes":[{"value":"/ Returns `Failed` if the `asset` balance of `who` may not be decreased by `amount`, otherwise","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626292,"byte_end":626388,"line_start":62,"line_end":62,"column_start":2,"column_end":98}},{"value":"/ the consequence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626390,"byte_end":626410,"line_start":63,"line_end":63,"column_start":2,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":4341},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626606,"byte_end":626621,"line_start":72,"line_end":72,"column_start":11,"column_end":26},"name":"InspectMetadata","qualname":"::traits::tokens::fungibles::InspectMetadata","value":"InspectMetadata<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4343},{"krate":0,"index":4344},{"krate":0,"index":4345}],"decl_id":null,"docs":" Trait for reading metadata from a fungible asset.\n","sig":null,"attributes":[{"value":"/ Trait for reading metadata from a fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626542,"byte_end":626595,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4343},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626693,"byte_end":626697,"line_start":74,"line_end":74,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::tokens::fungibles::InspectMetadata::name","value":"pub fn name(&Self::AssetId) -> Vec<u8>","parent":{"krate":0,"index":4341},"children":[],"decl_id":null,"docs":" Return the name of an asset.\n","sig":null,"attributes":[{"value":"/ Return the name of an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626656,"byte_end":626688,"line_start":73,"line_end":73,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4344},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626774,"byte_end":626780,"line_start":77,"line_end":77,"column_start":5,"column_end":11},"name":"symbol","qualname":"::traits::tokens::fungibles::InspectMetadata::symbol","value":"pub fn symbol(&Self::AssetId) -> Vec<u8>","parent":{"krate":0,"index":4341},"children":[],"decl_id":null,"docs":" Return the symbol of an asset.\n","sig":null,"attributes":[{"value":"/ Return the symbol of an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626735,"byte_end":626769,"line_start":76,"line_end":76,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4345},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626859,"byte_end":626867,"line_start":80,"line_end":80,"column_start":5,"column_end":13},"name":"decimals","qualname":"::traits::tokens::fungibles::InspectMetadata::decimals","value":"pub fn decimals(&Self::AssetId) -> u8","parent":{"krate":0,"index":4341},"children":[],"decl_id":null,"docs":" Return the decimals of an asset.\n","sig":null,"attributes":[{"value":"/ Return the decimals of an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626818,"byte_end":626854,"line_start":79,"line_end":79,"column_start":2,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":4346},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627002,"byte_end":627008,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::fungibles::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4348},{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351}],"decl_id":null,"docs":" Trait for providing a set of named fungible assets which can be created and destroyed.\n","sig":null,"attributes":[{"value":"/ Trait for providing a set of named fungible assets which can be created and destroyed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626901,"byte_end":626991,"line_start":83,"line_end":83,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":4348},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627526,"byte_end":627535,"line_start":94,"line_end":94,"column_start":5,"column_end":14},"name":"mint_into","qualname":"::traits::tokens::fungibles::Mutate::mint_into","value":"pub fn mint_into(Self::AssetId, &AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4346},"children":[],"decl_id":null,"docs":" Attempt to increase the `asset` balance of `who` by `amount`.","sig":null,"attributes":[{"value":"/ Attempt to increase the `asset` balance of `who` by `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627043,"byte_end":627108,"line_start":85,"line_end":85,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627110,"byte_end":627113,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ If not possible then don't do anything. Possible reasons for failure include:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627115,"byte_end":627196,"line_start":87,"line_end":87,"column_start":2,"column_end":83}},{"value":"/ - Minimum balance not met.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627198,"byte_end":627228,"line_start":88,"line_end":88,"column_start":2,"column_end":32}},{"value":"/ - Account cannot be created (e.g. because there is no provider reference and/or the asset","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627230,"byte_end":627323,"line_start":89,"line_end":89,"column_start":2,"column_end":95}},{"value":"/   isn't considered worth anything).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627325,"byte_end":627364,"line_start":90,"line_end":90,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627366,"byte_end":627369,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ Since this is an operation which should be possible to take alone, if successful it will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627371,"byte_end":627463,"line_start":92,"line_end":92,"column_start":2,"column_end":94}},{"value":"/ increase the overall supply of the underlying token.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627465,"byte_end":627521,"line_start":93,"line_end":93,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4349},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628517,"byte_end":628526,"line_start":110,"line_end":110,"column_start":5,"column_end":14},"name":"burn_from","qualname":"::traits::tokens::fungibles::Mutate::burn_from","value":"pub fn burn_from(Self::AssetId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4346},"children":[],"decl_id":null,"docs":" Attempt to reduce the `asset` balance of `who` by `amount`.","sig":null,"attributes":[{"value":"/ Attempt to reduce the `asset` balance of `who` by `amount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627619,"byte_end":627682,"line_start":96,"line_end":96,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627684,"byte_end":627687,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ If not possible then don't do anything. Possible reasons for failure include:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627689,"byte_end":627770,"line_start":98,"line_end":98,"column_start":2,"column_end":83}},{"value":"/ - Less funds in the account than `amount`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627772,"byte_end":627817,"line_start":99,"line_end":99,"column_start":2,"column_end":47}},{"value":"/ - Liquidity requirements (locks, reservations) prevent the funds from being removed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627819,"byte_end":627906,"line_start":100,"line_end":100,"column_start":2,"column_end":89}},{"value":"/ - Operation would require destroying the account and it is required to stay alive (e.g.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627908,"byte_end":627999,"line_start":101,"line_end":101,"column_start":2,"column_end":93}},{"value":"/   because it's providing a needed provider reference).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628001,"byte_end":628059,"line_start":102,"line_end":102,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628061,"byte_end":628064,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ Since this is an operation which should be possible to take alone, if successful it will","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628066,"byte_end":628158,"line_start":104,"line_end":104,"column_start":2,"column_end":94}},{"value":"/ reduce the overall supply of the underlying token.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628160,"byte_end":628214,"line_start":105,"line_end":105,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628216,"byte_end":628219,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ Due to minimum balance requirements, it's possible that the amount withdrawn could be up to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628221,"byte_end":628316,"line_start":107,"line_end":107,"column_start":2,"column_end":97}},{"value":"/ `Self::minimum_balance() - 1` more than the `amount`. The total amount withdrawn is returned","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628318,"byte_end":628414,"line_start":108,"line_end":108,"column_start":2,"column_end":98}},{"value":"/ in an `Ok` result. This may be safely ignored if you don't mind the overall supply reducing.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628416,"byte_end":628512,"line_start":109,"line_end":109,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":4350},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":629075,"byte_end":629080,"line_start":123,"line_end":123,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::tokens::fungibles::Mutate::slash","value":"pub fn slash(Self::AssetId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4346},"children":[],"decl_id":null,"docs":" Attempt to reduce the `asset` balance of `who` by as much as possible up to `amount`, and\n possibly slightly more due to minimum_balance requirements. If no decrease is possible then\n an `Err` is returned and nothing is changed. If successful, the amount of tokens reduced is\n returned.","sig":null,"attributes":[{"value":"/ Attempt to reduce the `asset` balance of `who` by as much as possible up to `amount`, and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628642,"byte_end":628735,"line_start":116,"line_end":116,"column_start":2,"column_end":95}},{"value":"/ possibly slightly more due to minimum_balance requirements. If no decrease is possible then","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628737,"byte_end":628832,"line_start":117,"line_end":117,"column_start":2,"column_end":97}},{"value":"/ an `Err` is returned and nothing is changed. If successful, the amount of tokens reduced is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628834,"byte_end":628929,"line_start":118,"line_end":118,"column_start":2,"column_end":97}},{"value":"/ returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628931,"byte_end":628944,"line_start":119,"line_end":119,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628946,"byte_end":628949,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The default implementation just uses `withdraw` along with `reducible_balance` to ensure","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":628951,"byte_end":629043,"line_start":121,"line_end":121,"column_start":2,"column_end":94}},{"value":"/ that is doesn't fail.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":629045,"byte_end":629070,"line_start":122,"line_end":122,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4351},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":629439,"byte_end":629447,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"teleport","qualname":"::traits::tokens::fungibles::Mutate::teleport","value":"pub fn teleport(Self::AssetId, &AccountId, &AccountId, Self::Balance)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4346},"children":[],"decl_id":null,"docs":" Transfer funds from one account into another. The default implementation uses `mint_into`\n and `burn_from` and may generate unwanted events.\n","sig":null,"attributes":[{"value":"/ Transfer funds from one account into another. The default implementation uses `mint_into`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":629286,"byte_end":629379,"line_start":131,"line_end":131,"column_start":2,"column_end":95}},{"value":"/ and `burn_from` and may generate unwanted events.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":629381,"byte_end":629434,"line_start":132,"line_end":132,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":4352},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630367,"byte_end":630375,"line_start":160,"line_end":160,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::traits::tokens::fungibles::Transfer","value":"Transfer<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4354}],"decl_id":null,"docs":" Trait for providing a set of named fungible assets which can only be transferred.\n","sig":null,"attributes":[{"value":"/ Trait for providing a set of named fungible assets which can only be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630271,"byte_end":630356,"line_start":159,"line_end":159,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":4354},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630464,"byte_end":630472,"line_start":162,"line_end":162,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::tokens::fungibles::Transfer::transfer","value":"pub fn transfer(Self::AssetId, &AccountId, &AccountId, Self::Balance, bool)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4352},"children":[],"decl_id":null,"docs":" Transfer funds from one account into another.\n","sig":null,"attributes":[{"value":"/ Transfer funds from one account into another.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630410,"byte_end":630459,"line_start":161,"line_end":161,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":4355},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630727,"byte_end":630738,"line_start":172,"line_end":172,"column_start":11,"column_end":22},"name":"InspectHold","qualname":"::traits::tokens::fungibles::InspectHold","value":"InspectHold<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4357},{"krate":0,"index":4358}],"decl_id":null,"docs":" Trait for inspecting a set of named fungible assets which can be placed on hold.\n","sig":null,"attributes":[{"value":"/ Trait for inspecting a set of named fungible assets which can be placed on hold.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630632,"byte_end":630716,"line_start":171,"line_end":171,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":4357},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630811,"byte_end":630826,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"balance_on_hold","qualname":"::traits::tokens::fungibles::InspectHold::balance_on_hold","value":"pub fn balance_on_hold(Self::AssetId, &AccountId) -> Self::Balance","parent":{"krate":0,"index":4355},"children":[],"decl_id":null,"docs":" Amount of funds held in hold.\n","sig":null,"attributes":[{"value":"/ Amount of funds held in hold.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630773,"byte_end":630806,"line_start":173,"line_end":173,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4358},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630972,"byte_end":630980,"line_start":177,"line_end":177,"column_start":5,"column_end":13},"name":"can_hold","qualname":"::traits::tokens::fungibles::InspectHold::can_hold","value":"pub fn can_hold(Self::AssetId, &AccountId, Self::Balance) -> bool","parent":{"krate":0,"index":4355},"children":[],"decl_id":null,"docs":" Check to see if some `amount` of `asset` may be held on the account of `who`.\n","sig":null,"attributes":[{"value":"/ Check to see if some `amount` of `asset` may be held on the account of `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630886,"byte_end":630967,"line_start":176,"line_end":176,"column_start":2,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":4359},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631148,"byte_end":631158,"line_start":181,"line_end":181,"column_start":11,"column_end":21},"name":"MutateHold","qualname":"::traits::tokens::fungibles::MutateHold","value":"MutateHold<AccountId>: InspectHold<AccountId> + Transfer<AccountId>","parent":null,"children":[{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363}],"decl_id":null,"docs":" Trait for mutating a set of named fungible assets which can be placed on hold.\n","sig":null,"attributes":[{"value":"/ Trait for mutating a set of named fungible assets which can be placed on hold.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631055,"byte_end":631137,"line_start":180,"line_end":180,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":4361},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631258,"byte_end":631262,"line_start":183,"line_end":183,"column_start":5,"column_end":9},"name":"hold","qualname":"::traits::tokens::fungibles::MutateHold::hold","value":"pub fn hold(Self::AssetId, &AccountId, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4359},"children":[],"decl_id":null,"docs":" Hold some funds in an account.\n","sig":null,"attributes":[{"value":"/ Hold some funds in an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631219,"byte_end":631253,"line_start":182,"line_end":182,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4362},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631565,"byte_end":631572,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"release","qualname":"::traits::tokens::fungibles::MutateHold::release","value":"pub fn release(Self::AssetId, &AccountId, Self::Balance, bool)\n-> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4359},"children":[],"decl_id":null,"docs":" Release some funds in an account from being on hold.","sig":null,"attributes":[{"value":"/ Release some funds in an account from being on hold.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631346,"byte_end":631402,"line_start":185,"line_end":185,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631404,"byte_end":631407,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ If `best_effort` is `true`, then the amount actually released and returned as the inner","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631409,"byte_end":631500,"line_start":187,"line_end":187,"column_start":2,"column_end":93}},{"value":"/ value of `Ok` may be smaller than the `amount` passed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631502,"byte_end":631560,"line_start":188,"line_end":188,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4363},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632241,"byte_end":632254,"line_start":207,"line_end":207,"column_start":5,"column_end":18},"name":"transfer_held","qualname":"::traits::tokens::fungibles::MutateHold::transfer_held","value":"pub fn transfer_held(Self::AssetId, &AccountId, &AccountId, Self::Balance,\nbool, bool) -> Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":4359},"children":[],"decl_id":null,"docs":" Transfer held funds into a destination account.","sig":null,"attributes":[{"value":"/ Transfer held funds into a destination account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631709,"byte_end":631760,"line_start":196,"line_end":196,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631762,"byte_end":631765,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ If `on_hold` is `true`, then the destination account must already exist and the assets","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631767,"byte_end":631857,"line_start":198,"line_end":198,"column_start":2,"column_end":92}},{"value":"/ transferred will still be on hold in the destination account. If not, then the destination","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631859,"byte_end":631953,"line_start":199,"line_end":199,"column_start":2,"column_end":96}},{"value":"/ account need not already exist, but must be creatable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631955,"byte_end":632013,"line_start":200,"line_end":200,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632015,"byte_end":632018,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ If `best_effort` is `true`, then an amount less than `amount` may be transferred without","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632020,"byte_end":632112,"line_start":202,"line_end":202,"column_start":2,"column_end":94}},{"value":"/ error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632114,"byte_end":632124,"line_start":203,"line_end":203,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632126,"byte_end":632129,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ The actual amount transferred is returned, or `Err` in the case of error and nothing is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632131,"byte_end":632222,"line_start":205,"line_end":205,"column_start":2,"column_end":93}},{"value":"/ changed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632224,"byte_end":632236,"line_start":206,"line_end":206,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":4364},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632524,"byte_end":632536,"line_start":218,"line_end":218,"column_start":11,"column_end":23},"name":"BalancedHold","qualname":"::traits::tokens::fungibles::BalancedHold","value":"BalancedHold<AccountId>: Balanced<AccountId> + MutateHold<AccountId>","parent":null,"children":[{"krate":0,"index":4366}],"decl_id":null,"docs":" Trait for mutating one of several types of fungible assets which can be held.\n","sig":null,"attributes":[{"value":"/ Trait for mutating one of several types of fungible assets which can be held.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632432,"byte_end":632513,"line_start":217,"line_end":217,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":4366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632874,"byte_end":632884,"line_start":225,"line_end":225,"column_start":5,"column_end":15},"name":"slash_held","qualname":"::traits::tokens::fungibles::BalancedHold::slash_held","value":"pub fn slash_held(Self::AssetId, &AccountId, Self::Balance)\n-> (CreditOf<AccountId, Self>, Self::Balance)","parent":{"krate":0,"index":4364},"children":[],"decl_id":null,"docs":" Release and slash some funds in an account.","sig":null,"attributes":[{"value":"/ Release and slash some funds in an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632596,"byte_end":632643,"line_start":219,"line_end":219,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632645,"byte_end":632648,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632650,"byte_end":632718,"line_start":221,"line_end":221,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632720,"byte_end":632723,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `amount` will be deducted as possible. If this is less than `amount`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632725,"byte_end":632818,"line_start":223,"line_end":223,"column_start":2,"column_end":95}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632820,"byte_end":632869,"line_start":224,"line_end":224,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":4371},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633528,"byte_end":633534,"line_start":247,"line_end":247,"column_start":11,"column_end":17},"name":"Create","qualname":"::traits::tokens::fungibles::Create","value":"Create<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4373}],"decl_id":null,"docs":" Trait for providing the ability to create new fungible assets.\n","sig":null,"attributes":[{"value":"/ Trait for providing the ability to create new fungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633451,"byte_end":633517,"line_start":246,"line_end":246,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":4373},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633606,"byte_end":633612,"line_start":249,"line_end":249,"column_start":5,"column_end":11},"name":"create","qualname":"::traits::tokens::fungibles::Create::create","value":"pub fn create(Self::AssetId, AccountId, bool, Self::Balance) -> DispatchResult","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" Create a new fungible asset.\n","sig":null,"attributes":[{"value":"/ Create a new fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633569,"byte_end":633601,"line_start":248,"line_end":248,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":4374},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633816,"byte_end":633823,"line_start":258,"line_end":258,"column_start":11,"column_end":18},"name":"Destroy","qualname":"::traits::tokens::fungibles::Destroy","value":"Destroy<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4376},{"krate":0,"index":4377},{"krate":0,"index":4378}],"decl_id":null,"docs":" Trait for providing the ability to destroy existing fungible assets.\n","sig":null,"attributes":[{"value":"/ Trait for providing the ability to destroy existing fungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633733,"byte_end":633805,"line_start":257,"line_end":257,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":4376},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633913,"byte_end":633927,"line_start":260,"line_end":260,"column_start":7,"column_end":21},"name":"DestroyWitness","qualname":"::traits::tokens::fungibles::Destroy::DestroyWitness","value":"type DestroyWitness;","parent":{"krate":0,"index":4374},"children":[],"decl_id":null,"docs":" The witness data needed to destroy an asset.\n","sig":null,"attributes":[{"value":"/ The witness data needed to destroy an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633858,"byte_end":633906,"line_start":259,"line_end":259,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4377},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634004,"byte_end":634023,"line_start":263,"line_end":263,"column_start":5,"column_end":24},"name":"get_destroy_witness","qualname":"::traits::tokens::fungibles::Destroy::get_destroy_witness","value":"pub fn get_destroy_witness(&Self::AssetId) -> Option<Self::DestroyWitness>","parent":{"krate":0,"index":4374},"children":[],"decl_id":null,"docs":" Provide the appropriate witness data needed to destroy an asset.\n","sig":null,"attributes":[{"value":"/ Provide the appropriate witness data needed to destroy an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633931,"byte_end":633999,"line_start":262,"line_end":262,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4378},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634671,"byte_end":634678,"line_start":275,"line_end":275,"column_start":5,"column_end":12},"name":"destroy","qualname":"::traits::tokens::fungibles::Destroy::destroy","value":"pub fn destroy(Self::AssetId, Self::DestroyWitness, Option<AccountId>)\n-> Result<Self::DestroyWitness, DispatchError>","parent":{"krate":0,"index":4374},"children":[],"decl_id":null,"docs":" Destroy an existing fungible asset.\n * `id`: The `AssetId` to be destroyed.\n * `witness`: Any witness data that needs to be provided to complete the operation\n   successfully.\n * `maybe_check_owner`: An optional account id that can be used to authorize the destroy\n   command. If not provided, we will not do any authorization checks before destroying the\n   asset.","sig":null,"attributes":[{"value":"/ Destroy an existing fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634079,"byte_end":634118,"line_start":265,"line_end":265,"column_start":2,"column_end":41}},{"value":"/ * `id`: The `AssetId` to be destroyed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634120,"byte_end":634162,"line_start":266,"line_end":266,"column_start":2,"column_end":44}},{"value":"/ * `witness`: Any witness data that needs to be provided to complete the operation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634164,"byte_end":634249,"line_start":267,"line_end":267,"column_start":2,"column_end":87}},{"value":"/   successfully.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634251,"byte_end":634270,"line_start":268,"line_end":268,"column_start":2,"column_end":21}},{"value":"/ * `maybe_check_owner`: An optional account id that can be used to authorize the destroy","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634272,"byte_end":634363,"line_start":269,"line_end":269,"column_start":2,"column_end":93}},{"value":"/   command. If not provided, we will not do any authorization checks before destroying the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634365,"byte_end":634458,"line_start":270,"line_end":270,"column_start":2,"column_end":95}},{"value":"/   asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634460,"byte_end":634472,"line_start":271,"line_end":271,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634474,"byte_end":634477,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ If successful, this function will return the actual witness data from the destroyed asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634479,"byte_end":634573,"line_start":273,"line_end":273,"column_start":2,"column_end":96}},{"value":"/ This may be different than the witness data provided, and can be used to refund weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":634575,"byte_end":634666,"line_start":274,"line_end":274,"column_start":2,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":4379},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imbalance","qualname":"::traits::tokens::imbalance","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","parent":null,"children":[{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4384},{"krate":0,"index":4387},{"krate":0,"index":4390},{"krate":0,"index":4393},{"krate":0,"index":4407},{"krate":0,"index":4443},{"krate":0,"index":4481},{"krate":0,"index":4484},{"krate":0,"index":4487},{"krate":0,"index":4490},{"krate":0,"index":4508}],"decl_id":null,"docs":" The imbalance trait type and its associates, which handles keeps everything adding up properly\n with unbalanced operations.\n","sig":null,"attributes":[{"value":"/ The imbalance trait type and its associates, which handles keeps everything adding up properly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":658712,"byte_end":658810,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ with unbalanced operations.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":658811,"byte_end":658842,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":4397},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667078,"byte_end":667090,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"OnUnbalanced","qualname":"::traits::tokens::imbalance::on_unbalanced::OnUnbalanced","value":"OnUnbalanced<Imbalance: TryDrop>","parent":null,"children":[{"krate":0,"index":4399},{"krate":0,"index":4403},{"krate":0,"index":4404}],"decl_id":null,"docs":" Handler for when some currency \"account\" decreased in balance for\n some reason.","sig":null,"attributes":[{"value":"/ Handler for when some currency \"account\" decreased in balance for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666705,"byte_end":666774,"line_start":22,"line_end":22,"column_start":1,"column_end":70}},{"value":"/ some reason.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666775,"byte_end":666791,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666792,"byte_end":666795,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The only reason at present for an increase would be for validator rewards, but","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666796,"byte_end":666878,"line_start":25,"line_end":25,"column_start":1,"column_end":83}},{"value":"/ there may be other reasons in the future or for other chains.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666879,"byte_end":666944,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666945,"byte_end":666948,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Reasons for decreases include:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666949,"byte_end":666983,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666984,"byte_end":666987,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ - Someone got slashed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":666988,"byte_end":667014,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/ - Someone paid for a transaction to be included.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667015,"byte_end":667067,"line_start":31,"line_end":31,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":4399},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667328,"byte_end":667342,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"name":"on_unbalanceds","qualname":"::traits::tokens::imbalance::on_unbalanced::OnUnbalanced::on_unbalanceds","value":"pub fn on_unbalanceds<B, impl Iterator<Item = Imbalance>: Iterator<Item =\nImbalance>>(impl Iterator<Item = Imbalance>) where\nImbalance: crate::traits::Imbalance<B>","parent":{"krate":0,"index":4397},"children":[],"decl_id":null,"docs":" Handler for some imbalances. The different imbalances might have different origins or\n meanings, dependent on the context. Will default to simply calling on_unbalanced for all\n of them. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalances. The different imbalances might have different origins or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667114,"byte_end":667203,"line_start":33,"line_end":33,"column_start":2,"column_end":91}},{"value":"/ meanings, dependent on the context. Will default to simply calling on_unbalanced for all","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667205,"byte_end":667297,"line_start":34,"line_end":34,"column_start":2,"column_end":94}},{"value":"/ of them. Infallible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667299,"byte_end":667323,"line_start":35,"line_end":35,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":4403},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667567,"byte_end":667580,"line_start":44,"line_end":44,"column_start":5,"column_end":18},"name":"on_unbalanced","qualname":"::traits::tokens::imbalance::on_unbalanced::OnUnbalanced::on_unbalanced","value":"pub fn on_unbalanced(Imbalance)","parent":{"krate":0,"index":4397},"children":[],"decl_id":null,"docs":" Handler for some imbalance. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalance. Infallible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667519,"byte_end":667562,"line_start":43,"line_end":43,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":4404},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667787,"byte_end":667808,"line_start":50,"line_end":50,"column_start":5,"column_end":26},"name":"on_nonzero_unbalanced","qualname":"::traits::tokens::imbalance::on_unbalanced::OnUnbalanced::on_nonzero_unbalanced","value":"pub fn on_nonzero_unbalanced(Imbalance)","parent":{"krate":0,"index":4397},"children":[],"decl_id":null,"docs":" Actually handle a non-zero imbalance. You probably want to implement this rather than\n `on_unbalanced`.\n","sig":null,"attributes":[{"value":"/ Actually handle a non-zero imbalance. You probably want to implement this rather than","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667671,"byte_end":667760,"line_start":48,"line_end":48,"column_start":2,"column_end":91}},{"value":"/ `on_unbalanced`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/on_unbalanced.rs","byte_start":667762,"byte_end":667782,"line_start":49,"line_end":49,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4430},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669052,"byte_end":669060,"line_start":29,"line_end":29,"column_start":2,"column_end":10},"name":"Positive","qualname":"::traits::tokens::imbalance::signed_imbalance::SignedImbalance::Positive","value":"SignedImbalance::Positive(PositiveImbalance)","parent":{"krate":0,"index":4427},"children":[],"decl_id":null,"docs":" A positive imbalance (funds have been created but none destroyed).\n","sig":null,"attributes":[{"value":"/ A positive imbalance (funds have been created but none destroyed).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":668980,"byte_end":669050,"line_start":28,"line_end":28,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4433},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669154,"byte_end":669162,"line_start":31,"line_end":31,"column_start":2,"column_end":10},"name":"Negative","qualname":"::traits::tokens::imbalance::signed_imbalance::SignedImbalance::Negative","value":"SignedImbalance::Negative(PositiveImbalance::Opposite)","parent":{"krate":0,"index":4427},"children":[],"decl_id":null,"docs":" A negative imbalance (funds have been destroyed but none created).\n","sig":null,"attributes":[{"value":"/ A negative imbalance (funds have been destroyed but none created).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669082,"byte_end":669152,"line_start":30,"line_end":30,"column_start":2,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":4427},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":668925,"byte_end":668940,"line_start":27,"line_end":27,"column_start":10,"column_end":25},"name":"SignedImbalance","qualname":"::traits::tokens::imbalance::signed_imbalance::SignedImbalance","value":"pub enum SignedImbalance<B, PositiveImbalance: Imbalance<B>> {\n    Positive(PositiveImbalance),\n    Negative(PositiveImbalance::Opposite),\n}","parent":null,"children":[{"krate":0,"index":4430},{"krate":0,"index":4433}],"decl_id":null,"docs":" Either a positive or a negative imbalance.\n","sig":null,"attributes":[{"value":"/ Either a positive or a negative imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":668869,"byte_end":668915,"line_start":26,"line_end":26,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4440},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669460,"byte_end":669464,"line_start":41,"line_end":41,"column_start":9,"column_end":13},"name":"zero","qualname":"<SignedImbalance<B, P>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Positive` instance of `Self` whose value is zero.\n","sig":null,"attributes":[{"value":"/ Create a `Positive` instance of `Self` whose value is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669388,"byte_end":669451,"line_start":40,"line_end":40,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":4441},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669614,"byte_end":669623,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"name":"drop_zero","qualname":"<SignedImbalance<B, P>>::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":" Drop `Self` if and only if it is equal to zero. Return `Err` with `Self` if not.\n","sig":null,"attributes":[{"value":"/ Drop `Self` if and only if it is equal to zero. Return `Err` with `Self` if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669521,"byte_end":669605,"line_start":45,"line_end":45,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":4442},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669938,"byte_end":669943,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"merge","qualname":"<SignedImbalance<B, P>>::merge","value":"pub fn merge(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669846,"byte_end":669918,"line_start":53,"line_end":53,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669920,"byte_end":669929,"line_start":54,"line_end":54,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":4464},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/split_two_ways.rs","byte_start":671633,"byte_end":671645,"line_start":26,"line_end":26,"column_start":12,"column_end":24},"name":"SplitTwoWays","qualname":"::traits::tokens::imbalance::split_two_ways::SplitTwoWays","value":"","parent":null,"children":[],"decl_id":null,"docs":" Split an unbalanced amount two ways between a common divisor.\n","sig":null,"attributes":[{"value":"/ Split an unbalanced amount two ways between a common divisor.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/split_two_ways.rs","byte_start":671556,"byte_end":671621,"line_start":25,"line_end":25,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":4490},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660632,"byte_end":660641,"line_start":61,"line_end":61,"column_start":11,"column_end":20},"name":"Imbalance","qualname":"::traits::tokens::imbalance::Imbalance","value":"Imbalance<Balance>: Sized + TryDrop + Default","parent":null,"children":[{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507}],"decl_id":null,"docs":" A trait for a not-quite Linear Type that tracks an imbalance.","sig":null,"attributes":[{"value":"/ A trait for a not-quite Linear Type that tracks an imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659132,"byte_end":659197,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659198,"byte_end":659201,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Functions that alter account balances return an object of this trait to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659202,"byte_end":659277,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ express how much account balances have been altered in aggregate. If","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659278,"byte_end":659350,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/ dropped, the currency system will take some default steps to deal with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659351,"byte_end":659425,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ the imbalance (`balances` module simply reduces or increases its","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659426,"byte_end":659494,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ total issuance). Your module should generally handle it in some way,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659495,"byte_end":659567,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/ good practice is to do so in a configurable manner using an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659568,"byte_end":659631,"line_start":39,"line_end":39,"column_start":1,"column_end":64}},{"value":"/ `OnUnbalanced` type for each situation in which your module needs to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659632,"byte_end":659704,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/ handle an imbalance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659705,"byte_end":659729,"line_start":41,"line_end":41,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659730,"byte_end":659733,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Imbalances can either be Positive (funds were added somewhere without","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659734,"byte_end":659807,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ being subtracted elsewhere - e.g. a reward) or Negative (funds deducted","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659808,"byte_end":659883,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ somewhere without an equal and opposite addition - e.g. a slash or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659884,"byte_end":659954,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"/ system fee payment).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659955,"byte_end":659979,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659980,"byte_end":659983,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Since they are unsigned, the actual type is always Positive or Negative.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":659984,"byte_end":660060,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ The trait makes no distinction except to define the `Opposite` type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660061,"byte_end":660133,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660134,"byte_end":660137,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ New instances of zero value can be created (`zero`) and destroyed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660138,"byte_end":660207,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/ (`drop_zero`).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660208,"byte_end":660226,"line_start":52,"line_end":52,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660227,"byte_end":660230,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Existing instances can be `split` and merged either consuming `self` with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660231,"byte_end":660308,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ `merge` or mutating `self` with `subsume`. If the target is an `Option`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660309,"byte_end":660385,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ then `maybe_merge` and `maybe_subsume` might work better. Instances can","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660386,"byte_end":660461,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ also be `offset` with an `Opposite` that is less than or equal to in value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660462,"byte_end":660541,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660542,"byte_end":660545,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ You can always retrieve the raw balance value using `peek`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660546,"byte_end":660609,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"must_use","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660610,"byte_end":660621,"line_start":60,"line_end":60,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":4492},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660743,"byte_end":660751,"line_start":63,"line_end":63,"column_start":7,"column_end":15},"name":"Opposite","qualname":"::traits::tokens::imbalance::Imbalance::Opposite","value":"type Opposite: Imbalance<Balance>;","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" The oppositely imbalanced type. They come in pairs.\n","sig":null,"attributes":[{"value":"/ The oppositely imbalanced type. They come in pairs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660681,"byte_end":660736,"line_start":62,"line_end":62,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4493},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660838,"byte_end":660842,"line_start":66,"line_end":66,"column_start":5,"column_end":9},"name":"zero","qualname":"::traits::tokens::imbalance::Imbalance::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" The zero imbalance. Can be destroyed with `drop_zero`.\n","sig":null,"attributes":[{"value":"/ The zero imbalance. Can be destroyed with `drop_zero`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660775,"byte_end":660833,"line_start":65,"line_end":65,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660932,"byte_end":660941,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"drop_zero","qualname":"::traits::tokens::imbalance::Imbalance::drop_zero","value":"pub fn drop_zero(Self) -> Result<(), Self>","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its `self.value()` is zero.\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its `self.value()` is zero.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660856,"byte_end":660927,"line_start":68,"line_end":68,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4495},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661122,"byte_end":661127,"line_start":73,"line_end":73,"column_start":5,"column_end":10},"name":"split","qualname":"::traits::tokens::imbalance::Imbalance::split","value":"pub fn split(Self, Balance) -> (Self, Self)","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the first\n is guaranteed to be at most `amount` and the second will be the remainder.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the first","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660971,"byte_end":661037,"line_start":71,"line_end":71,"column_start":2,"column_end":68}},{"value":"/ is guaranteed to be at most `amount` and the second will be the remainder.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661039,"byte_end":661117,"line_start":72,"line_end":72,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661488,"byte_end":661494,"line_start":80,"line_end":80,"column_start":5,"column_end":11},"name":"ration","qualname":"::traits::tokens::imbalance::Imbalance::ration","value":"pub fn ration(Self, u32, u32) -> (Self, Self) where Balance: From<u32> +\nSaturating + Div<Output = Balance>","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the amounts returned will be in\n approximately the same ratio as `first`:`second`.","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the amounts returned will be in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661170,"byte_end":661258,"line_start":75,"line_end":75,"column_start":2,"column_end":90}},{"value":"/ approximately the same ratio as `first`:`second`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661260,"byte_end":661313,"line_start":76,"line_end":76,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661315,"byte_end":661318,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ NOTE: This requires up to `first + second` room for a multiply, and `first + second` should","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661320,"byte_end":661415,"line_start":78,"line_end":78,"column_start":2,"column_end":97}},{"value":"/ fit into a `u32`. Overflow will safely saturate in both cases.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661417,"byte_end":661483,"line_start":79,"line_end":79,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":4497},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662022,"byte_end":662033,"line_start":96,"line_end":96,"column_start":5,"column_end":16},"name":"split_merge","qualname":"::traits::tokens::imbalance::Imbalance::split_merge","value":"pub fn split_merge(Self, Balance, (Self, Self)) -> (Self, Self)","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661821,"byte_end":661907,"line_start":92,"line_end":92,"column_start":2,"column_end":88}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661909,"byte_end":661957,"line_start":93,"line_end":93,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661959,"byte_end":661962,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":661964,"byte_end":662017,"line_start":95,"line_end":95,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4498},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662376,"byte_end":662388,"line_start":105,"line_end":105,"column_start":5,"column_end":17},"name":"ration_merge","qualname":"::traits::tokens::imbalance::Imbalance::ration_merge","value":"pub fn ration_merge(Self, u32, u32, (Self, Self)) -> (Self, Self) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662178,"byte_end":662261,"line_start":101,"line_end":101,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662263,"byte_end":662311,"line_start":102,"line_end":102,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662313,"byte_end":662316,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662318,"byte_end":662371,"line_start":104,"line_end":104,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4499},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662825,"byte_end":662841,"line_start":117,"line_end":117,"column_start":5,"column_end":21},"name":"split_merge_into","qualname":"::traits::tokens::imbalance::Imbalance::split_merge_into","value":"pub fn split_merge_into(Self, Balance, &mut (Self, Self))","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise into two pre-existing Imbalance refs.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662616,"byte_end":662702,"line_start":113,"line_end":113,"column_start":2,"column_end":88}},{"value":"/ element-wise into two pre-existing Imbalance refs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662704,"byte_end":662758,"line_start":114,"line_end":114,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662760,"byte_end":662763,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `subsume`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662765,"byte_end":662820,"line_start":116,"line_end":116,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4500},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663178,"byte_end":663195,"line_start":127,"line_end":127,"column_start":5,"column_end":22},"name":"ration_merge_into","qualname":"::traits::tokens::imbalance::Imbalance::ration_merge_into","value":"pub fn ration_merge_into(Self, u32, u32, &mut (Self, Self)) where\nBalance: From<u32> + Saturating + Div<Output = Balance>","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":662980,"byte_end":663063,"line_start":123,"line_end":123,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663065,"byte_end":663113,"line_start":124,"line_end":124,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663115,"byte_end":663118,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663120,"byte_end":663173,"line_start":126,"line_end":126,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4501},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663505,"byte_end":663510,"line_start":138,"line_end":138,"column_start":5,"column_end":10},"name":"merge","qualname":"::traits::tokens::imbalance::Imbalance::merge","value":"pub fn merge(Self, Self) -> Self","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663417,"byte_end":663489,"line_start":136,"line_end":136,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663491,"byte_end":663500,"line_start":137,"line_end":137,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663662,"byte_end":663672,"line_start":142,"line_end":142,"column_start":5,"column_end":15},"name":"merge_into","qualname":"::traits::tokens::imbalance::Imbalance::merge_into","value":"pub fn merge_into(Self, &mut Self)","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self to mutate `other` so that it combines both. Just like `subsume`, only with\n reversed arguments.\n","sig":null,"attributes":[{"value":"/ Consume self to mutate `other` so that it combines both. Just like `subsume`, only with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663541,"byte_end":663632,"line_start":140,"line_end":140,"column_start":2,"column_end":93}},{"value":"/ reversed arguments.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663634,"byte_end":663657,"line_start":141,"line_end":141,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":4503},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663820,"byte_end":663831,"line_start":148,"line_end":148,"column_start":5,"column_end":16},"name":"maybe_merge","qualname":"::traits::tokens::imbalance::Imbalance::maybe_merge","value":"pub fn maybe_merge(Self, Option<Self>) -> Self","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume `self` and maybe an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and maybe an `other` to return a new instance that combines","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663726,"byte_end":663804,"line_start":146,"line_end":146,"column_start":2,"column_end":80}},{"value":"/ both.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663806,"byte_end":663815,"line_start":147,"line_end":147,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4504},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664030,"byte_end":664037,"line_start":158,"line_end":158,"column_start":5,"column_end":12},"name":"subsume","qualname":"::traits::tokens::imbalance::Imbalance::subsume","value":"pub fn subsume(&mut Self, Self)","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":663941,"byte_end":664014,"line_start":156,"line_end":156,"column_start":2,"column_end":75}},{"value":"/ both.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664016,"byte_end":664025,"line_start":157,"line_end":157,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4505},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664160,"byte_end":664173,"line_start":162,"line_end":162,"column_start":5,"column_end":18},"name":"maybe_subsume","qualname":"::traits::tokens::imbalance::Imbalance::maybe_subsume","value":"pub fn maybe_subsume(&mut Self, Option<Self>)","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Maybe consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Maybe consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664065,"byte_end":664144,"line_start":160,"line_end":160,"column_start":2,"column_end":81}},{"value":"/ both.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664146,"byte_end":664155,"line_start":161,"line_end":161,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664620,"byte_end":664626,"line_start":175,"line_end":175,"column_start":5,"column_end":11},"name":"offset","qualname":"::traits::tokens::imbalance::Imbalance::offset","value":"pub fn offset(Self, Self::Opposite) -> SameOrOther<Self, Self::Opposite>","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" Consume self and along with an opposite counterpart to return\n a combined result.","sig":null,"attributes":[{"value":"/ Consume self and along with an opposite counterpart to return","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664263,"byte_end":664328,"line_start":168,"line_end":168,"column_start":2,"column_end":67}},{"value":"/ a combined result.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664330,"byte_end":664352,"line_start":169,"line_end":169,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664354,"byte_end":664357,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` along with a new instance of `Self` if this instance has a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664359,"byte_end":664434,"line_start":171,"line_end":171,"column_start":2,"column_end":77}},{"value":"/ greater value than the `other`. Otherwise returns `Err` with an instance of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664436,"byte_end":664515,"line_start":172,"line_end":172,"column_start":2,"column_end":81}},{"value":"/ the `Opposite`. In both cases the value represents the combination of `self`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664517,"byte_end":664597,"line_start":173,"line_end":173,"column_start":2,"column_end":82}},{"value":"/ and `other`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664599,"byte_end":664615,"line_start":174,"line_end":174,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":4507},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664727,"byte_end":664731,"line_start":178,"line_end":178,"column_start":5,"column_end":9},"name":"peek","qualname":"::traits::tokens::imbalance::Imbalance::peek","value":"pub fn peek(&Self) -> Balance","parent":{"krate":0,"index":4490},"children":[],"decl_id":null,"docs":" The raw value of self.\n","sig":null,"attributes":[{"value":"/ The raw value of self.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":664696,"byte_end":664722,"line_start":177,"line_end":177,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20458},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673505,"byte_end":673512,"line_start":31,"line_end":31,"column_start":2,"column_end":9},"name":"NoFunds","qualname":"::traits::tokens::misc::WithdrawConsequence::NoFunds","value":"WithdrawConsequence::NoFunds","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" Withdraw could not happen since the amount to be withdrawn is less than the total funds in\n the account.\n","sig":null,"attributes":[{"value":"/ Withdraw could not happen since the amount to be withdrawn is less than the total funds in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673391,"byte_end":673485,"line_start":29,"line_end":29,"column_start":2,"column_end":96}},{"value":"/ the account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673487,"byte_end":673503,"line_start":30,"line_end":30,"column_start":2,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20460},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673666,"byte_end":673674,"line_start":34,"line_end":34,"column_start":2,"column_end":10},"name":"WouldDie","qualname":"::traits::tokens::misc::WithdrawConsequence::WouldDie","value":"WithdrawConsequence::WouldDie","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" The withdraw would mean the account dying when it needs to exist (usually because it is a\n provider and there are consumer references on it).\n","sig":null,"attributes":[{"value":"/ The withdraw would mean the account dying when it needs to exist (usually because it is a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673515,"byte_end":673608,"line_start":32,"line_end":32,"column_start":2,"column_end":95}},{"value":"/ provider and there are consumer references on it).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673610,"byte_end":673664,"line_start":33,"line_end":33,"column_start":2,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20462},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673792,"byte_end":673804,"line_start":37,"line_end":37,"column_start":2,"column_end":14},"name":"UnknownAsset","qualname":"::traits::tokens::misc::WithdrawConsequence::UnknownAsset","value":"WithdrawConsequence::UnknownAsset","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" The asset is unknown. Usually because an `AssetId` has been presented which doesn't exist\n on the system.\n","sig":null,"attributes":[{"value":"/ The asset is unknown. Usually because an `AssetId` has been presented which doesn't exist","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673677,"byte_end":673770,"line_start":35,"line_end":35,"column_start":2,"column_end":95}},{"value":"/ on the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673772,"byte_end":673790,"line_start":36,"line_end":36,"column_start":2,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20464},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673924,"byte_end":673933,"line_start":40,"line_end":40,"column_start":2,"column_end":11},"name":"Underflow","qualname":"::traits::tokens::misc::WithdrawConsequence::Underflow","value":"WithdrawConsequence::Underflow","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" There has been an underflow in the system. This is indicative of a corrupt state and\n likely unrecoverable.\n","sig":null,"attributes":[{"value":"/ There has been an underflow in the system. This is indicative of a corrupt state and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673807,"byte_end":673895,"line_start":38,"line_end":38,"column_start":2,"column_end":90}},{"value":"/ likely unrecoverable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673897,"byte_end":673922,"line_start":39,"line_end":39,"column_start":2,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20466},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674052,"byte_end":674060,"line_start":43,"line_end":43,"column_start":2,"column_end":10},"name":"Overflow","qualname":"::traits::tokens::misc::WithdrawConsequence::Overflow","value":"WithdrawConsequence::Overflow","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" There has been an overflow in the system. This is indicative of a corrupt state and\n likely unrecoverable.\n","sig":null,"attributes":[{"value":"/ There has been an overflow in the system. This is indicative of a corrupt state and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673936,"byte_end":674023,"line_start":41,"line_end":41,"column_start":2,"column_end":89}},{"value":"/ likely unrecoverable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674025,"byte_end":674050,"line_start":42,"line_end":42,"column_start":2,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20468},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674139,"byte_end":674145,"line_start":45,"line_end":45,"column_start":2,"column_end":8},"name":"Frozen","qualname":"::traits::tokens::misc::WithdrawConsequence::Frozen","value":"WithdrawConsequence::Frozen","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" Not enough of the funds in the account are unavailable for withdrawal.\n","sig":null,"attributes":[{"value":"/ Not enough of the funds in the account are unavailable for withdrawal.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674063,"byte_end":674137,"line_start":44,"line_end":44,"column_start":2,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20470},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674282,"byte_end":674295,"line_start":48,"line_end":48,"column_start":2,"column_end":15},"name":"ReducedToZero","qualname":"::traits::tokens::misc::WithdrawConsequence::ReducedToZero","value":"WithdrawConsequence::ReducedToZero(Balance)","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" Account balance would reduce to zero, potentially destroying it. The parameter is the\n amount of balance which is destroyed.\n","sig":null,"attributes":[{"value":"/ Account balance would reduce to zero, potentially destroying it. The parameter is the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674148,"byte_end":674237,"line_start":46,"line_end":46,"column_start":2,"column_end":91}},{"value":"/ amount of balance which is destroyed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674239,"byte_end":674280,"line_start":47,"line_end":47,"column_start":2,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20473},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674344,"byte_end":674351,"line_start":50,"line_end":50,"column_start":2,"column_end":9},"name":"Success","qualname":"::traits::tokens::misc::WithdrawConsequence::Success","value":"WithdrawConsequence::Success","parent":{"krate":0,"index":20456},"children":[],"decl_id":null,"docs":" Account continued in existence.\n","sig":null,"attributes":[{"value":"/ Account continued in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674307,"byte_end":674342,"line_start":49,"line_end":49,"column_start":2,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":20456},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673359,"byte_end":673378,"line_start":28,"line_end":28,"column_start":10,"column_end":29},"name":"WithdrawConsequence","qualname":"::traits::tokens::misc::WithdrawConsequence","value":"pub enum WithdrawConsequence<Balance> {\n    NoFunds,\n    WouldDie,\n    UnknownAsset,\n    Underflow,\n    Overflow,\n    Frozen,\n    ReducedToZero(Balance),\n    Success,\n}","parent":null,"children":[{"krate":0,"index":20458},{"krate":0,"index":20460},{"krate":0,"index":20462},{"krate":0,"index":20464},{"krate":0,"index":20466},{"krate":0,"index":20468},{"krate":0,"index":20470},{"krate":0,"index":20473}],"decl_id":null,"docs":" One of a number of consequences of withdrawing a fungible from an account.\n","sig":null,"attributes":[{"value":"/ One of a number of consequences of withdrawing a fungible from an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":673233,"byte_end":673311,"line_start":26,"line_end":26,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4562},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674558,"byte_end":674569,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"name":"into_result","qualname":"<WithdrawConsequence<Balance>>::into_result","value":"pub fn into_result(Self) -> Result<Balance, DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Convert the type into a `Result` with `DispatchError` as the error or the additional\n `Balance` by which the account will be reduced.\n","sig":null,"attributes":[{"value":"/ Convert the type into a `Result` with `DispatchError` as the error or the additional","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674408,"byte_end":674496,"line_start":54,"line_end":54,"column_start":2,"column_end":90}},{"value":"/ `Balance` by which the account will be reduced.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674498,"byte_end":674549,"line_start":55,"line_end":55,"column_start":2,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20492},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675401,"byte_end":675413,"line_start":77,"line_end":77,"column_start":2,"column_end":14},"name":"BelowMinimum","qualname":"::traits::tokens::misc::DepositConsequence::BelowMinimum","value":"DepositConsequence::BelowMinimum","parent":{"krate":0,"index":20491},"children":[],"decl_id":null,"docs":" Deposit couldn't happen due to the amount being too low. This is usually because the\n account doesn't yet exist and the deposit wouldn't bring it to at least the minimum needed\n for existance.\n","sig":null,"attributes":[{"value":"/ Deposit couldn't happen due to the amount being too low. This is usually because the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675195,"byte_end":675283,"line_start":74,"line_end":74,"column_start":2,"column_end":90}},{"value":"/ account doesn't yet exist and the deposit wouldn't bring it to at least the minimum needed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675285,"byte_end":675379,"line_start":75,"line_end":75,"column_start":2,"column_end":96}},{"value":"/ for existance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675381,"byte_end":675399,"line_start":76,"line_end":76,"column_start":2,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20494},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675558,"byte_end":675570,"line_start":80,"line_end":80,"column_start":2,"column_end":14},"name":"CannotCreate","qualname":"::traits::tokens::misc::DepositConsequence::CannotCreate","value":"DepositConsequence::CannotCreate","parent":{"krate":0,"index":20491},"children":[],"decl_id":null,"docs":" Deposit cannot happen since the account cannot be created (usually because it's a consumer\n and there exists no provider reference).\n","sig":null,"attributes":[{"value":"/ Deposit cannot happen since the account cannot be created (usually because it's a consumer","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675416,"byte_end":675510,"line_start":78,"line_end":78,"column_start":2,"column_end":96}},{"value":"/ and there exists no provider reference).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675512,"byte_end":675556,"line_start":79,"line_end":79,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20496},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675688,"byte_end":675700,"line_start":83,"line_end":83,"column_start":2,"column_end":14},"name":"UnknownAsset","qualname":"::traits::tokens::misc::DepositConsequence::UnknownAsset","value":"DepositConsequence::UnknownAsset","parent":{"krate":0,"index":20491},"children":[],"decl_id":null,"docs":" The asset is unknown. Usually because an `AssetId` has been presented which doesn't exist\n on the system.\n","sig":null,"attributes":[{"value":"/ The asset is unknown. Usually because an `AssetId` has been presented which doesn't exist","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675573,"byte_end":675666,"line_start":81,"line_end":81,"column_start":2,"column_end":95}},{"value":"/ on the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675668,"byte_end":675686,"line_start":82,"line_end":82,"column_start":2,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20498},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675904,"byte_end":675912,"line_start":87,"line_end":87,"column_start":2,"column_end":10},"name":"Overflow","qualname":"::traits::tokens::misc::DepositConsequence::Overflow","value":"DepositConsequence::Overflow","parent":{"krate":0,"index":20491},"children":[],"decl_id":null,"docs":" An overflow would occur. This is practically unexpected, but could happen in test systems\n with extremely small balance types or balances that approach the max value of the balance\n type.\n","sig":null,"attributes":[{"value":"/ An overflow would occur. This is practically unexpected, but could happen in test systems","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675703,"byte_end":675796,"line_start":84,"line_end":84,"column_start":2,"column_end":95}},{"value":"/ with extremely small balance types or balances that approach the max value of the balance","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675798,"byte_end":675891,"line_start":85,"line_end":85,"column_start":2,"column_end":95}},{"value":"/ type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675893,"byte_end":675902,"line_start":86,"line_end":86,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20500},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675952,"byte_end":675959,"line_start":89,"line_end":89,"column_start":2,"column_end":9},"name":"Success","qualname":"::traits::tokens::misc::DepositConsequence::Success","value":"DepositConsequence::Success","parent":{"krate":0,"index":20491},"children":[],"decl_id":null,"docs":" Account continued in existence.\n","sig":null,"attributes":[{"value":"/ Account continued in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675915,"byte_end":675950,"line_start":88,"line_end":88,"column_start":2,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":20491},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675173,"byte_end":675191,"line_start":73,"line_end":73,"column_start":10,"column_end":28},"name":"DepositConsequence","qualname":"::traits::tokens::misc::DepositConsequence","value":"pub enum DepositConsequence {\n    BelowMinimum,\n    CannotCreate,\n    UnknownAsset,\n    Overflow,\n    Success,\n}","parent":null,"children":[{"krate":0,"index":20492},{"krate":0,"index":20494},{"krate":0,"index":20496},{"krate":0,"index":20498},{"krate":0,"index":20500}],"decl_id":null,"docs":" One of a number of consequences of withdrawing a fungible from an account.\n","sig":null,"attributes":[{"value":"/ One of a number of consequences of withdrawing a fungible from an account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675047,"byte_end":675125,"line_start":71,"line_end":71,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4565},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676068,"byte_end":676079,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"into_result","qualname":"<DepositConsequence>::into_result","value":"pub fn into_result(Self) -> Result<(), DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Convert the type into a `Result` with `TokenError` as the error.\n","sig":null,"attributes":[{"value":"/ Convert the type into a `Result` with `TokenError` as the error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675991,"byte_end":676059,"line_start":93,"line_end":93,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20512},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676799,"byte_end":676808,"line_start":113,"line_end":113,"column_start":2,"column_end":11},"name":"KeepAlive","qualname":"::traits::tokens::misc::ExistenceRequirement::KeepAlive","value":"ExistenceRequirement::KeepAlive","parent":{"krate":0,"index":20511},"children":[],"decl_id":null,"docs":" Operation must not result in the account going out of existence.","sig":null,"attributes":[{"value":"/ Operation must not result in the account going out of existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676554,"byte_end":676622,"line_start":109,"line_end":109,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676624,"byte_end":676627,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ Note this implies that if the account never existed in the first place, then the operation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676629,"byte_end":676723,"line_start":111,"line_end":111,"column_start":2,"column_end":96}},{"value":"/ may legitimately leave the account unchanged and still non-existent.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676725,"byte_end":676797,"line_start":112,"line_end":112,"column_start":2,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20514},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676872,"byte_end":676882,"line_start":115,"line_end":115,"column_start":2,"column_end":12},"name":"AllowDeath","qualname":"::traits::tokens::misc::ExistenceRequirement::AllowDeath","value":"ExistenceRequirement::AllowDeath","parent":{"krate":0,"index":20511},"children":[],"decl_id":null,"docs":" Operation may result in account going out of existence.\n","sig":null,"attributes":[{"value":"/ Operation may result in account going out of existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676811,"byte_end":676870,"line_start":114,"line_end":114,"column_start":2,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":20511},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676530,"byte_end":676550,"line_start":108,"line_end":108,"column_start":10,"column_end":30},"name":"ExistenceRequirement","qualname":"::traits::tokens::misc::ExistenceRequirement","value":"pub enum ExistenceRequirement { KeepAlive, AllowDeath, }","parent":null,"children":[{"krate":0,"index":20512},{"krate":0,"index":20514}],"decl_id":null,"docs":" Simple boolean for whether an account needs to be kept in existence.\n","sig":null,"attributes":[{"value":"/ Simple boolean for whether an account needs to be kept in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676410,"byte_end":676482,"line_start":106,"line_end":106,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20526},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677090,"byte_end":677094,"line_start":122,"line_end":122,"column_start":2,"column_end":6},"name":"Free","qualname":"::traits::tokens::misc::BalanceStatus::Free","value":"BalanceStatus::Free","parent":{"krate":0,"index":20525},"children":[],"decl_id":null,"docs":" Funds are free, as corresponding to `free` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are free, as corresponding to `free` item in Balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677024,"byte_end":677088,"line_start":121,"line_end":121,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20528},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677171,"byte_end":677179,"line_start":124,"line_end":124,"column_start":2,"column_end":10},"name":"Reserved","qualname":"::traits::tokens::misc::BalanceStatus::Reserved","value":"BalanceStatus::Reserved","parent":{"krate":0,"index":20525},"children":[],"decl_id":null,"docs":" Funds are reserved, as corresponding to `reserved` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are reserved, as corresponding to `reserved` item in Balances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677097,"byte_end":677169,"line_start":123,"line_end":123,"column_start":2,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":20525},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677007,"byte_end":677020,"line_start":120,"line_end":120,"column_start":10,"column_end":23},"name":"BalanceStatus","qualname":"::traits::tokens::misc::BalanceStatus","value":"pub enum BalanceStatus { Free, Reserved, }","parent":null,"children":[{"krate":0,"index":20526},{"krate":0,"index":20528}],"decl_id":null,"docs":" Status of funds.\n","sig":null,"attributes":[{"value":"/ Status of funds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":676887,"byte_end":676907,"line_start":118,"line_end":118,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":20570},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677294,"byte_end":677309,"line_start":130,"line_end":130,"column_start":13,"column_end":28},"name":"WithdrawReasons","qualname":"::traits::tokens::misc::WithdrawReasons","value":"WithdrawReasons {  }","parent":null,"children":[{"krate":0,"index":20571}],"decl_id":null,"docs":" Reasons for moving funds out of an account.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20607},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677378,"byte_end":677397,"line_start":132,"line_end":132,"column_start":9,"column_end":28},"name":"TRANSACTION_PAYMENT","qualname":"::traits::tokens::misc::WithdrawReasons::TRANSACTION_PAYMENT","value":"Self","parent":{"krate":0,"index":20606},"children":[],"decl_id":null,"docs":" In order to pay for (system) transaction costs.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20608},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677458,"byte_end":677466,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"name":"TRANSFER","qualname":"::traits::tokens::misc::WithdrawReasons::TRANSFER","value":"Self","parent":{"krate":0,"index":20606},"children":[],"decl_id":null,"docs":" In order to transfer ownership.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20609},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677562,"byte_end":677569,"line_start":136,"line_end":136,"column_start":9,"column_end":16},"name":"RESERVE","qualname":"::traits::tokens::misc::WithdrawReasons::RESERVE","value":"Self","parent":{"krate":0,"index":20606},"children":[],"decl_id":null,"docs":" In order to reserve some funds for a later return or repatriation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20610},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677646,"byte_end":677649,"line_start":138,"line_end":138,"column_start":9,"column_end":12},"name":"FEE","qualname":"::traits::tokens::misc::WithdrawReasons::FEE","value":"Self","parent":{"krate":0,"index":20606},"children":[],"decl_id":null,"docs":" In order to pay some other (higher-level) fees.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20611},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677733,"byte_end":677736,"line_start":140,"line_end":140,"column_start":9,"column_end":12},"name":"TIP","qualname":"::traits::tokens::misc::WithdrawReasons::TIP","value":"Self","parent":{"krate":0,"index":20606},"children":[],"decl_id":null,"docs":" In order to tip a validator for transaction inclusion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4568},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678138,"byte_end":678144,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"name":"except","qualname":"<WithdrawReasons>::except","value":"pub fn except(WithdrawReasons) -> WithdrawReasons","parent":null,"children":[],"decl_id":null,"docs":" Choose all variants except for `one`.","sig":null,"attributes":[{"value":"/ Choose all variants except for `one`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677781,"byte_end":677822,"line_start":145,"line_end":145,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677824,"byte_end":677827,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677829,"byte_end":677840,"line_start":147,"line_end":147,"column_start":2,"column_end":13}},{"value":"/ # use frame_support::traits::WithdrawReasons;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677842,"byte_end":677891,"line_start":148,"line_end":148,"column_start":2,"column_end":51}},{"value":"/ # fn main() {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677893,"byte_end":677910,"line_start":149,"line_end":149,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677912,"byte_end":677927,"line_start":150,"line_end":150,"column_start":2,"column_end":17}},{"value":"/ \tWithdrawReasons::FEE | WithdrawReasons::TRANSFER | WithdrawReasons::RESERVE | WithdrawReasons::TIP,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677929,"byte_end":678033,"line_start":151,"line_end":151,"column_start":2,"column_end":106}},{"value":"/ \tWithdrawReasons::except(WithdrawReasons::TRANSACTION_PAYMENT),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678035,"byte_end":678102,"line_start":152,"line_end":152,"column_start":2,"column_end":69}},{"value":"/ \t);","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678104,"byte_end":678111,"line_start":153,"line_end":153,"column_start":2,"column_end":9}},{"value":"/ # }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678113,"byte_end":678120,"line_start":154,"line_end":154,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678122,"byte_end":678129,"line_start":155,"line_end":155,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":4569},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678356,"byte_end":678363,"line_start":164,"line_end":164,"column_start":11,"column_end":18},"name":"AssetId","qualname":"::traits::tokens::misc::AssetId","value":"AssetId: FullCodec + Copy + Eq + PartialEq + Debug + scale_info::TypeInfo","parent":null,"children":[],"decl_id":null,"docs":" Simple amalgamation trait to collect together properties for an AssetId under one roof.\n","sig":null,"attributes":[{"value":"/ Simple amalgamation trait to collect together properties for an AssetId under one roof.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678254,"byte_end":678345,"line_start":163,"line_end":163,"column_start":1,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":4572},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678626,"byte_end":678633,"line_start":168,"line_end":168,"column_start":11,"column_end":18},"name":"Balance","qualname":"::traits::tokens::misc::Balance","value":"Balance: AtLeast32BitUnsigned + FullCodec + Copy + Default + Debug +\nscale_info::TypeInfo","parent":null,"children":[],"decl_id":null,"docs":" Simple amalgamation trait to collect together properties for a Balance under one roof.\n","sig":null,"attributes":[{"value":"/ Simple amalgamation trait to collect together properties for a Balance under one roof.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678525,"byte_end":678615,"line_start":167,"line_end":167,"column_start":1,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":4575},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678893,"byte_end":678910,"line_start":178,"line_end":178,"column_start":11,"column_end":28},"name":"BalanceConversion","qualname":"::traits::tokens::misc::BalanceConversion","value":"BalanceConversion<InBalance, AssetId, OutBalance>","parent":null,"children":[{"krate":0,"index":4579},{"krate":0,"index":4580}],"decl_id":null,"docs":" Converts a balance value into an asset balance.\n","sig":null,"attributes":[{"value":"/ Converts a balance value into an asset balance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678831,"byte_end":678882,"line_start":177,"line_end":177,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":4579},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678951,"byte_end":678956,"line_start":179,"line_end":179,"column_start":7,"column_end":12},"name":"Error","qualname":"::traits::tokens::misc::BalanceConversion::Error","value":"type Error;","parent":{"krate":0,"index":4575},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4580},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678962,"byte_end":678978,"line_start":180,"line_end":180,"column_start":5,"column_end":21},"name":"to_asset_balance","qualname":"::traits::tokens::misc::BalanceConversion::to_asset_balance","value":"pub fn to_asset_balance(InBalance, AssetId) -> Result<OutBalance, Self::Error>","parent":{"krate":0,"index":4575},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4581},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nonfungible","qualname":"::traits::tokens::nonfungible","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","parent":null,"children":[{"krate":0,"index":4582},{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4589},{"krate":0,"index":4592},{"krate":0,"index":4593},{"krate":0,"index":4594},{"krate":0,"index":4596},{"krate":0,"index":4597},{"krate":0,"index":4599},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4614},{"krate":0,"index":4618},{"krate":0,"index":4628},{"krate":0,"index":4631},{"krate":0,"index":4637},{"krate":0,"index":4648},{"krate":0,"index":4654},{"krate":0,"index":4664}],"decl_id":null,"docs":" Traits for dealing with a single non-fungible asset class.","sig":null,"attributes":[{"value":"/ Traits for dealing with a single non-fungible asset class.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":679743,"byte_end":679805,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":679806,"byte_end":679809,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This assumes a single level namespace identified by `Inspect::InstanceId`, and could","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":679810,"byte_end":679898,"line_start":20,"line_end":20,"column_start":1,"column_end":89}},{"value":"/ reasonably be implemented by pallets which wants to expose a single collection of NFT-like","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":679899,"byte_end":679993,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ objects.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":679994,"byte_end":680006,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680007,"byte_end":680010,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ For an NFT API which has dual-level namespacing, the traits in `nonfungibles` are better to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680011,"byte_end":680106,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680107,"byte_end":680115,"line_start":25,"line_end":25,"column_start":1,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":4603},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680371,"byte_end":680378,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::nonfungible::Inspect","value":"Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4605},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4608},{"krate":0,"index":4613}],"decl_id":null,"docs":" Trait for providing an interface to a read-only NFT-like set of asset instances.\n","sig":null,"attributes":[{"value":"/ Trait for providing an interface to a read-only NFT-like set of asset instances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680276,"byte_end":680360,"line_start":33,"line_end":33,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":4605},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680443,"byte_end":680453,"line_start":36,"line_end":36,"column_start":7,"column_end":17},"name":"InstanceId","qualname":"::traits::tokens::nonfungible::Inspect::InstanceId","value":"type InstanceId;","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Type for identifying an asset instance.\n","sig":null,"attributes":[{"value":"/ Type for identifying an asset instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680393,"byte_end":680436,"line_start":35,"line_end":35,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":4606},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680563,"byte_end":680568,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"owner","qualname":"::traits::tokens::nonfungible::Inspect::owner","value":"pub fn owner(&Self::InstanceId) -> Option<AccountId>","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Returns the owner of asset `instance`, or `None` if the asset doesn't exist or has no\n owner.\n","sig":null,"attributes":[{"value":"/ Returns the owner of asset `instance`, or `None` if the asset doesn't exist or has no","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680457,"byte_end":680546,"line_start":38,"line_end":38,"column_start":2,"column_end":91}},{"value":"/ owner.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680548,"byte_end":680558,"line_start":39,"line_end":39,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4607},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680760,"byte_end":680769,"line_start":45,"line_end":45,"column_start":5,"column_end":14},"name":"attribute","qualname":"::traits::tokens::nonfungible::Inspect::attribute","value":"pub fn attribute(&Self::InstanceId, &[u8]) -> Option<Vec<u8>>","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Returns the attribute value of `instance` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the attribute value of `instance` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680622,"byte_end":680691,"line_start":42,"line_end":42,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680693,"byte_end":680696,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ By default this is `None`; no attributes are defined.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680698,"byte_end":680755,"line_start":44,"line_end":44,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4608},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680995,"byte_end":681010,"line_start":52,"line_end":52,"column_start":5,"column_end":20},"name":"typed_attribute","qualname":"::traits::tokens::nonfungible::Inspect::typed_attribute","value":"pub fn typed_attribute<K: Encode, V: Decode>(&Self::InstanceId, &K)\n-> Option<V>","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Returns the strongly-typed attribute value of `instance` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the strongly-typed attribute value of `instance` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680846,"byte_end":680930,"line_start":49,"line_end":49,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680932,"byte_end":680935,"line_start":50,"line_end":50,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":680937,"byte_end":680990,"line_start":51,"line_end":51,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4613},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681328,"byte_end":681340,"line_start":60,"line_end":60,"column_start":5,"column_end":17},"name":"can_transfer","qualname":"::traits::tokens::nonfungible::Inspect::can_transfer","value":"pub fn can_transfer(&Self::InstanceId) -> bool","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Returns `true` if the asset `instance` may be transferred.","sig":null,"attributes":[{"value":"/ Returns `true` if the asset `instance` may be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681191,"byte_end":681253,"line_start":57,"line_end":57,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681255,"byte_end":681258,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ Default implementation is that all assets are transferable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681260,"byte_end":681323,"line_start":59,"line_end":59,"column_start":2,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":4614},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681513,"byte_end":681530,"line_start":67,"line_end":67,"column_start":11,"column_end":28},"name":"InspectEnumerable","qualname":"::traits::tokens::nonfungible::InspectEnumerable","value":"InspectEnumerable<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4616},{"krate":0,"index":4617}],"decl_id":null,"docs":" Interface for enumerating assets in existence or owned by a given account over a collection\n of NFTs.\n","sig":null,"attributes":[{"value":"/ Interface for enumerating assets in existence or owned by a given account over a collection","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681394,"byte_end":681489,"line_start":65,"line_end":65,"column_start":1,"column_end":96}},{"value":"/ of NFTs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681490,"byte_end":681502,"line_start":66,"line_end":66,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":4616},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681644,"byte_end":681653,"line_start":69,"line_end":69,"column_start":5,"column_end":14},"name":"instances","qualname":"::traits::tokens::nonfungible::InspectEnumerable::instances","value":"pub fn instances() -> Box<dyn Iterator<Item = Self::InstanceId>>","parent":{"krate":0,"index":4614},"children":[],"decl_id":null,"docs":" Returns an iterator of the instances of an asset `class` in existence.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the instances of an asset `class` in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681565,"byte_end":681639,"line_start":68,"line_end":68,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4617},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681787,"byte_end":681792,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"owned","qualname":"::traits::tokens::nonfungible::InspectEnumerable::owned","value":"pub fn owned(&AccountId) -> Box<dyn Iterator<Item = Self::InstanceId>>","parent":{"krate":0,"index":4614},"children":[],"decl_id":null,"docs":" Returns an iterator of the asset instances of all classes owned by `who`.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the asset instances of all classes owned by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681705,"byte_end":681782,"line_start":71,"line_end":71,"column_start":2,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":4618},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681995,"byte_end":682001,"line_start":77,"line_end":77,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::nonfungible::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4620},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4623}],"decl_id":null,"docs":" Trait for providing an interface for NFT-like assets which may be minted, burned and/or have\n attributes set on them.\n","sig":null,"attributes":[{"value":"/ Trait for providing an interface for NFT-like assets which may be minted, burned and/or have","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681860,"byte_end":681956,"line_start":75,"line_end":75,"column_start":1,"column_end":97}},{"value":"/ attributes set on them.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681957,"byte_end":681984,"line_start":76,"line_end":76,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4620},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682150,"byte_end":682159,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"mint_into","qualname":"::traits::tokens::nonfungible::Mutate::mint_into","value":"pub fn mint_into(&Self::InstanceId, &AccountId) -> DispatchResult","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":" Mint some asset `instance` to be owned by `who`.","sig":null,"attributes":[{"value":"/ Mint some asset `instance` to be owned by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682036,"byte_end":682088,"line_start":78,"line_end":78,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682090,"byte_end":682093,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682095,"byte_end":682145,"line_start":80,"line_end":80,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4621},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682364,"byte_end":682373,"line_start":88,"line_end":88,"column_start":5,"column_end":14},"name":"burn_from","qualname":"::traits::tokens::nonfungible::Mutate::burn_from","value":"pub fn burn_from(&Self::InstanceId) -> DispatchResult","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":" Burn some asset `instance`.","sig":null,"attributes":[{"value":"/ Burn some asset `instance`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682271,"byte_end":682302,"line_start":85,"line_end":85,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682304,"byte_end":682307,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682309,"byte_end":682359,"line_start":87,"line_end":87,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4622},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682583,"byte_end":682596,"line_start":95,"line_end":95,"column_start":5,"column_end":18},"name":"set_attribute","qualname":"::traits::tokens::nonfungible::Mutate::set_attribute","value":"pub fn set_attribute(&Self::InstanceId, &[u8], &[u8]) -> DispatchResult","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":" Set attribute `value` of asset `instance`'s `key`.","sig":null,"attributes":[{"value":"/ Set attribute `value` of asset `instance`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682467,"byte_end":682521,"line_start":92,"line_end":92,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682523,"byte_end":682526,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682528,"byte_end":682578,"line_start":94,"line_end":94,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4623},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682865,"byte_end":682884,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"set_typed_attribute","qualname":"::traits::tokens::nonfungible::Mutate::set_typed_attribute","value":"pub fn set_typed_attribute<K: Encode, V: Encode>(&Self::InstanceId, &K, &V)\n-> DispatchResult","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":" Attempt to set the strongly-typed attribute `value` of `instance`'s `key`.","sig":null,"attributes":[{"value":"/ Attempt to set the strongly-typed attribute `value` of `instance`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682718,"byte_end":682796,"line_start":99,"line_end":99,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682798,"byte_end":682801,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `set_attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682803,"byte_end":682860,"line_start":101,"line_end":101,"column_start":2,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":4628},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683172,"byte_end":683180,"line_start":112,"line_end":112,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::traits::tokens::nonfungible::Transfer","value":"Transfer<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4630}],"decl_id":null,"docs":" Trait for providing a non-fungible set of assets which can only be transferred.\n","sig":null,"attributes":[{"value":"/ Trait for providing a non-fungible set of assets which can only be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683078,"byte_end":683161,"line_start":111,"line_end":111,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":4630},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683277,"byte_end":683285,"line_start":114,"line_end":114,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::tokens::nonfungible::Transfer::transfer","value":"pub fn transfer(&Self::InstanceId, &AccountId) -> DispatchResult","parent":{"krate":0,"index":4628},"children":[],"decl_id":null,"docs":" Transfer asset `instance` into `destination` account.\n","sig":null,"attributes":[{"value":"/ Transfer asset `instance` into `destination` account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683215,"byte_end":683272,"line_start":113,"line_end":113,"column_start":2,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4631},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683493,"byte_end":683499,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"ItemOf","qualname":"::traits::tokens::nonfungible::ItemOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" Convert a `fungibles` trait implementation into a `fungible` trait implementation by identifying\n a single item.\n","sig":null,"attributes":[{"value":"/ Convert a `fungibles` trait implementation into a `fungible` trait implementation by identifying","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683362,"byte_end":683462,"line_start":117,"line_end":117,"column_start":1,"column_end":101}},{"value":"/ a single item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683463,"byte_end":683481,"line_start":118,"line_end":118,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":4669},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nonfungibles","qualname":"::traits::tokens::nonfungibles","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","parent":null,"children":[{"krate":0,"index":4670},{"krate":0,"index":4671},{"krate":0,"index":4674},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4684},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":4707},{"krate":0,"index":4713},{"krate":0,"index":4716},{"krate":0,"index":4721},{"krate":0,"index":4737}],"decl_id":null,"docs":" Traits for dealing with multiple collections of non-fungible assets.","sig":null,"attributes":[{"value":"/ Traits for dealing with multiple collections of non-fungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":686932,"byte_end":687004,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687005,"byte_end":687008,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This assumes a dual-level namespace identified by `Inspect::InstanceId`, and could","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687009,"byte_end":687095,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ reasonably be implemented by pallets which want to expose multiple independent collections of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687096,"byte_end":687193,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"/ NFT-like objects.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687194,"byte_end":687215,"line_start":22,"line_end":22,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687216,"byte_end":687219,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ For an NFT API which has single-level namespacing, the traits in `nonfungible` are better to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687220,"byte_end":687316,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687317,"byte_end":687325,"line_start":25,"line_end":25,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687326,"byte_end":687329,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of these traits may be converted to implementations of corresponding","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687330,"byte_end":687418,"line_start":27,"line_end":27,"column_start":1,"column_end":89}},{"value":"/ `nonfungible` traits by using the `nonfungible::ItemOf` type adapter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687419,"byte_end":687492,"line_start":28,"line_end":28,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":4688},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687729,"byte_end":687736,"line_start":36,"line_end":36,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::traits::tokens::nonfungibles::Inspect","value":"Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4700},{"krate":0,"index":4701},{"krate":0,"index":4706}],"decl_id":null,"docs":" Trait for providing an interface to many read-only NFT-like sets of asset instances.\n","sig":null,"attributes":[{"value":"/ Trait for providing an interface to many read-only NFT-like sets of asset instances.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687630,"byte_end":687718,"line_start":35,"line_end":35,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":4690},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687801,"byte_end":687811,"line_start":38,"line_end":38,"column_start":7,"column_end":17},"name":"InstanceId","qualname":"::traits::tokens::nonfungibles::Inspect::InstanceId","value":"type InstanceId;","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Type for identifying an asset instance.\n","sig":null,"attributes":[{"value":"/ Type for identifying an asset instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687751,"byte_end":687794,"line_start":37,"line_end":37,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":4691},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687932,"byte_end":687939,"line_start":42,"line_end":42,"column_start":7,"column_end":14},"name":"ClassId","qualname":"::traits::tokens::nonfungibles::Inspect::ClassId","value":"type ClassId;","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Type for identifying an asset class (an identifier for an independent collection of asset\n instances).\n","sig":null,"attributes":[{"value":"/ Type for identifying an asset class (an identifier for an independent collection of asset","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687815,"byte_end":687908,"line_start":40,"line_end":40,"column_start":2,"column_end":95}},{"value":"/ instances).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687910,"byte_end":687925,"line_start":41,"line_end":41,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":4692},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688070,"byte_end":688075,"line_start":46,"line_end":46,"column_start":5,"column_end":10},"name":"owner","qualname":"::traits::tokens::nonfungibles::Inspect::owner","value":"pub fn owner(&Self::ClassId, &Self::InstanceId) -> Option<AccountId>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the owner of asset `instance` of `class`, or `None` if the asset doesn't exist (or\n somehow has no owner).\n","sig":null,"attributes":[{"value":"/ Returns the owner of asset `instance` of `class`, or `None` if the asset doesn't exist (or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":687943,"byte_end":688037,"line_start":44,"line_end":44,"column_start":2,"column_end":96}},{"value":"/ somehow has no owner).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688039,"byte_end":688065,"line_start":45,"line_end":45,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4693},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688362,"byte_end":688373,"line_start":51,"line_end":51,"column_start":5,"column_end":16},"name":"class_owner","qualname":"::traits::tokens::nonfungibles::Inspect::class_owner","value":"pub fn class_owner(&Self::ClassId) -> Option<AccountId>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the owner of the asset `class`, if there is one. For many NFTs this may not make\n any sense, so users of this API should not be surprised to find an asset class results in\n `None` here.\n","sig":null,"attributes":[{"value":"/ Returns the owner of the asset `class`, if there is one. For many NFTs this may not make","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688152,"byte_end":688244,"line_start":48,"line_end":48,"column_start":2,"column_end":94}},{"value":"/ any sense, so users of this API should not be surprised to find an asset class results in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688246,"byte_end":688339,"line_start":49,"line_end":49,"column_start":2,"column_end":95}},{"value":"/ `None` here.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688341,"byte_end":688357,"line_start":50,"line_end":50,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688582,"byte_end":688591,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"attribute","qualname":"::traits::tokens::nonfungibles::Inspect::attribute","value":"pub fn attribute(&Self::ClassId, &Self::InstanceId, &[u8]) -> Option<Vec<u8>>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the attribute value of `instance` of `class` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the attribute value of `instance` of `class` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688433,"byte_end":688513,"line_start":55,"line_end":55,"column_start":2,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688515,"byte_end":688518,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ By default this is `None`; no attributes are defined.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688520,"byte_end":688577,"line_start":57,"line_end":57,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4695},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688862,"byte_end":688877,"line_start":69,"line_end":69,"column_start":5,"column_end":20},"name":"typed_attribute","qualname":"::traits::tokens::nonfungibles::Inspect::typed_attribute","value":"pub fn typed_attribute<K: Encode,\nV: Decode>(&Self::ClassId, &Self::InstanceId, &K) -> Option<V>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the strongly-typed attribute value of `instance` of `class` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the strongly-typed attribute value of `instance` of `class` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688702,"byte_end":688797,"line_start":66,"line_end":66,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688799,"byte_end":688802,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":688804,"byte_end":688857,"line_start":68,"line_end":68,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4700},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689233,"byte_end":689248,"line_start":81,"line_end":81,"column_start":5,"column_end":20},"name":"class_attribute","qualname":"::traits::tokens::nonfungibles::Inspect::class_attribute","value":"pub fn class_attribute(&Self::ClassId, &[u8]) -> Option<Vec<u8>>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the attribute value of `class` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the attribute value of `class` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689098,"byte_end":689164,"line_start":78,"line_end":78,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689166,"byte_end":689169,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ By default this is `None`; no attributes are defined.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689171,"byte_end":689228,"line_start":80,"line_end":80,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4701},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689471,"byte_end":689492,"line_start":88,"line_end":88,"column_start":5,"column_end":26},"name":"typed_class_attribute","qualname":"::traits::tokens::nonfungibles::Inspect::typed_class_attribute","value":"pub fn typed_class_attribute<K: Encode, V: Decode>(&Self::ClassId, &K)\n-> Option<V>","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns the strongly-typed attribute value of `class` corresponding to `key`.","sig":null,"attributes":[{"value":"/ Returns the strongly-typed attribute value of `class` corresponding to `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689319,"byte_end":689400,"line_start":85,"line_end":85,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689402,"byte_end":689405,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `class_attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689407,"byte_end":689466,"line_start":87,"line_end":87,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4706},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689818,"byte_end":689830,"line_start":96,"line_end":96,"column_start":5,"column_end":17},"name":"can_transfer","qualname":"::traits::tokens::nonfungibles::Inspect::can_transfer","value":"pub fn can_transfer(&Self::ClassId, &Self::InstanceId) -> bool","parent":{"krate":0,"index":4688},"children":[],"decl_id":null,"docs":" Returns `true` if the asset `instance` of `class` may be transferred.","sig":null,"attributes":[{"value":"/ Returns `true` if the asset `instance` of `class` may be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689670,"byte_end":689743,"line_start":93,"line_end":93,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689745,"byte_end":689748,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ Default implementation is that all assets are transferable.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689750,"byte_end":689813,"line_start":95,"line_end":95,"column_start":2,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":4707},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690031,"byte_end":690048,"line_start":103,"line_end":103,"column_start":11,"column_end":28},"name":"InspectEnumerable","qualname":"::traits::tokens::nonfungibles::InspectEnumerable","value":"InspectEnumerable<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4711},{"krate":0,"index":4712}],"decl_id":null,"docs":" Interface for enumerating assets in existence or owned by a given account over many collections\n of NFTs.\n","sig":null,"attributes":[{"value":"/ Interface for enumerating assets in existence or owned by a given account over many collections","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":689908,"byte_end":690007,"line_start":101,"line_end":101,"column_start":1,"column_end":100}},{"value":"/ of NFTs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690008,"byte_end":690020,"line_start":102,"line_end":102,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":4709},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690146,"byte_end":690153,"line_start":105,"line_end":105,"column_start":5,"column_end":12},"name":"classes","qualname":"::traits::tokens::nonfungibles::InspectEnumerable::classes","value":"pub fn classes() -> Box<dyn Iterator<Item = Self::ClassId>>","parent":{"krate":0,"index":4707},"children":[],"decl_id":null,"docs":" Returns an iterator of the asset classes in existence.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the asset classes in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690083,"byte_end":690141,"line_start":104,"line_end":104,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":4710},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690281,"byte_end":690290,"line_start":108,"line_end":108,"column_start":5,"column_end":14},"name":"instances","qualname":"::traits::tokens::nonfungibles::InspectEnumerable::instances","value":"pub fn instances(&Self::ClassId) -> Box<dyn Iterator<Item = Self::InstanceId>>","parent":{"krate":0,"index":4707},"children":[],"decl_id":null,"docs":" Returns an iterator of the instances of an asset `class` in existence.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the instances of an asset `class` in existence.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690202,"byte_end":690276,"line_start":107,"line_end":107,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4711},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690445,"byte_end":690450,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"owned","qualname":"::traits::tokens::nonfungibles::InspectEnumerable::owned","value":"pub fn owned(&AccountId)\n-> Box<dyn Iterator<Item = (Self::ClassId, Self::InstanceId)>>","parent":{"krate":0,"index":4707},"children":[],"decl_id":null,"docs":" Returns an iterator of the asset instances of all classes owned by `who`.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the asset instances of all classes owned by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690363,"byte_end":690440,"line_start":110,"line_end":110,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4712},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690612,"byte_end":690626,"line_start":114,"line_end":114,"column_start":5,"column_end":19},"name":"owned_in_class","qualname":"::traits::tokens::nonfungibles::InspectEnumerable::owned_in_class","value":"pub fn owned_in_class(&Self::ClassId, &AccountId)\n-> Box<dyn Iterator<Item = Self::InstanceId>>","parent":{"krate":0,"index":4707},"children":[],"decl_id":null,"docs":" Returns an iterator of the asset instances of `class` owned by `who`.\n","sig":null,"attributes":[{"value":"/ Returns an iterator of the asset instances of `class` owned by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690534,"byte_end":690607,"line_start":113,"line_end":113,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":4713},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690812,"byte_end":690818,"line_start":121,"line_end":121,"column_start":11,"column_end":17},"name":"Create","qualname":"::traits::tokens::nonfungibles::Create","value":"Create<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4715}],"decl_id":null,"docs":" Trait for providing the ability to create classes of nonfungible assets.\n","sig":null,"attributes":[{"value":"/ Trait for providing the ability to create classes of nonfungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690725,"byte_end":690801,"line_start":120,"line_end":120,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":4715},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690945,"byte_end":690957,"line_start":123,"line_end":123,"column_start":5,"column_end":17},"name":"create_class","qualname":"::traits::tokens::nonfungibles::Create::create_class","value":"pub fn create_class(&Self::ClassId, &AccountId, &AccountId) -> DispatchResult","parent":{"krate":0,"index":4713},"children":[],"decl_id":null,"docs":" Create a `class` of nonfungible assets to be owned by `who` and managed by `admin`.\n","sig":null,"attributes":[{"value":"/ Create a `class` of nonfungible assets to be owned by `who` and managed by `admin`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690853,"byte_end":690940,"line_start":122,"line_end":122,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":4716},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691127,"byte_end":691134,"line_start":127,"line_end":127,"column_start":11,"column_end":18},"name":"Destroy","qualname":"::traits::tokens::nonfungibles::Destroy","value":"Destroy<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4718},{"krate":0,"index":4719},{"krate":0,"index":4720}],"decl_id":null,"docs":" Trait for providing the ability to destroy classes of nonfungible assets.\n","sig":null,"attributes":[{"value":"/ Trait for providing the ability to destroy classes of nonfungible assets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691039,"byte_end":691116,"line_start":126,"line_end":126,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":4718},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691224,"byte_end":691238,"line_start":129,"line_end":129,"column_start":7,"column_end":21},"name":"DestroyWitness","qualname":"::traits::tokens::nonfungibles::Destroy::DestroyWitness","value":"type DestroyWitness;","parent":{"krate":0,"index":4716},"children":[],"decl_id":null,"docs":" The witness data needed to destroy an asset.\n","sig":null,"attributes":[{"value":"/ The witness data needed to destroy an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691169,"byte_end":691217,"line_start":128,"line_end":128,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4719},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691315,"byte_end":691334,"line_start":132,"line_end":132,"column_start":5,"column_end":24},"name":"get_destroy_witness","qualname":"::traits::tokens::nonfungibles::Destroy::get_destroy_witness","value":"pub fn get_destroy_witness(&Self::ClassId) -> Option<Self::DestroyWitness>","parent":{"krate":0,"index":4716},"children":[],"decl_id":null,"docs":" Provide the appropriate witness data needed to destroy an asset.\n","sig":null,"attributes":[{"value":"/ Provide the appropriate witness data needed to destroy an asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691242,"byte_end":691310,"line_start":131,"line_end":131,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4720},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691988,"byte_end":691995,"line_start":144,"line_end":144,"column_start":5,"column_end":12},"name":"destroy","qualname":"::traits::tokens::nonfungibles::Destroy::destroy","value":"pub fn destroy(Self::ClassId, Self::DestroyWitness, Option<AccountId>)\n-> Result<Self::DestroyWitness, DispatchError>","parent":{"krate":0,"index":4716},"children":[],"decl_id":null,"docs":" Destroy an existing fungible asset.\n * `class`: The `ClassId` to be destroyed.\n * `witness`: Any witness data that needs to be provided to complete the operation\n   successfully.\n * `maybe_check_owner`: An optional account id that can be used to authorize the destroy\n   command. If not provided, we will not do any authorization checks before destroying the\n   asset.","sig":null,"attributes":[{"value":"/ Destroy an existing fungible asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691393,"byte_end":691432,"line_start":134,"line_end":134,"column_start":2,"column_end":41}},{"value":"/ * `class`: The `ClassId` to be destroyed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691434,"byte_end":691479,"line_start":135,"line_end":135,"column_start":2,"column_end":47}},{"value":"/ * `witness`: Any witness data that needs to be provided to complete the operation","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691481,"byte_end":691566,"line_start":136,"line_end":136,"column_start":2,"column_end":87}},{"value":"/   successfully.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691568,"byte_end":691587,"line_start":137,"line_end":137,"column_start":2,"column_end":21}},{"value":"/ * `maybe_check_owner`: An optional account id that can be used to authorize the destroy","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691589,"byte_end":691680,"line_start":138,"line_end":138,"column_start":2,"column_end":93}},{"value":"/   command. If not provided, we will not do any authorization checks before destroying the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691682,"byte_end":691775,"line_start":139,"line_end":139,"column_start":2,"column_end":95}},{"value":"/   asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691777,"byte_end":691789,"line_start":140,"line_end":140,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691791,"byte_end":691794,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ If successful, this function will return the actual witness data from the destroyed asset.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691796,"byte_end":691890,"line_start":142,"line_end":142,"column_start":2,"column_end":96}},{"value":"/ This may be different than the witness data provided, and can be used to refund weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691892,"byte_end":691983,"line_start":143,"line_end":143,"column_start":2,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":4721},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692303,"byte_end":692309,"line_start":153,"line_end":153,"column_start":11,"column_end":17},"name":"Mutate","qualname":"::traits::tokens::nonfungibles::Mutate","value":"Mutate<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4723},{"krate":0,"index":4724},{"krate":0,"index":4725},{"krate":0,"index":4726},{"krate":0,"index":4731},{"krate":0,"index":4732}],"decl_id":null,"docs":" Trait for providing an interface for multiple classes of NFT-like assets which may be minted,\n burned and/or have attributes set on them.\n","sig":null,"attributes":[{"value":"/ Trait for providing an interface for multiple classes of NFT-like assets which may be minted,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692148,"byte_end":692245,"line_start":151,"line_end":151,"column_start":1,"column_end":98}},{"value":"/ burned and/or have attributes set on them.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692246,"byte_end":692292,"line_start":152,"line_end":152,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4723},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692469,"byte_end":692478,"line_start":157,"line_end":157,"column_start":5,"column_end":14},"name":"mint_into","qualname":"::traits::tokens::nonfungibles::Mutate::mint_into","value":"pub fn mint_into(&Self::ClassId, &Self::InstanceId, &AccountId)\n-> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Mint some asset `instance` of `class` to be owned by `who`.","sig":null,"attributes":[{"value":"/ Mint some asset `instance` of `class` to be owned by `who`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692344,"byte_end":692407,"line_start":154,"line_end":154,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692409,"byte_end":692412,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692414,"byte_end":692464,"line_start":156,"line_end":156,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4724},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692728,"byte_end":692737,"line_start":168,"line_end":168,"column_start":5,"column_end":14},"name":"burn_from","qualname":"::traits::tokens::nonfungibles::Mutate::burn_from","value":"pub fn burn_from(&Self::ClassId, &Self::InstanceId) -> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Burn some asset `instance` of `class`.","sig":null,"attributes":[{"value":"/ Burn some asset `instance` of `class`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692624,"byte_end":692666,"line_start":165,"line_end":165,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692668,"byte_end":692671,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692673,"byte_end":692723,"line_start":167,"line_end":167,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4725},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692982,"byte_end":692995,"line_start":175,"line_end":175,"column_start":5,"column_end":18},"name":"set_attribute","qualname":"::traits::tokens::nonfungibles::Mutate::set_attribute","value":"pub fn set_attribute(&Self::ClassId, &Self::InstanceId, &[u8], &[u8])\n-> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Set attribute `value` of asset `instance` of `class`'s `key`.","sig":null,"attributes":[{"value":"/ Set attribute `value` of asset `instance` of `class`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692855,"byte_end":692920,"line_start":172,"line_end":172,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692922,"byte_end":692925,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692927,"byte_end":692977,"line_start":174,"line_end":174,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4726},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693311,"byte_end":693330,"line_start":187,"line_end":187,"column_start":5,"column_end":24},"name":"set_typed_attribute","qualname":"::traits::tokens::nonfungibles::Mutate::set_typed_attribute","value":"pub fn set_typed_attribute<K: Encode,\nV: Encode>(&Self::ClassId, &Self::InstanceId, &K, &V) -> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Attempt to set the strongly-typed attribute `value` of `instance` of `class`'s `key`.","sig":null,"attributes":[{"value":"/ Attempt to set the strongly-typed attribute `value` of `instance` of `class`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693153,"byte_end":693242,"line_start":184,"line_end":184,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693244,"byte_end":693247,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `set_attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693249,"byte_end":693306,"line_start":186,"line_end":186,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4731},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693668,"byte_end":693687,"line_start":199,"line_end":199,"column_start":5,"column_end":24},"name":"set_class_attribute","qualname":"::traits::tokens::nonfungibles::Mutate::set_class_attribute","value":"pub fn set_class_attribute(&Self::ClassId, &[u8], &[u8]) -> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Set attribute `value` of asset `class`'s `key`.","sig":null,"attributes":[{"value":"/ Set attribute `value` of asset `class`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693555,"byte_end":693606,"line_start":196,"line_end":196,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693608,"byte_end":693611,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ By default, this is not a supported operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693613,"byte_end":693663,"line_start":198,"line_end":198,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4732},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693947,"byte_end":693972,"line_start":206,"line_end":206,"column_start":5,"column_end":30},"name":"set_typed_class_attribute","qualname":"::traits::tokens::nonfungibles::Mutate::set_typed_class_attribute","value":"pub fn set_typed_class_attribute<K: Encode, V: Encode>(&Self::ClassId, &K, &V)\n-> DispatchResult","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Attempt to set the strongly-typed attribute `value` of `class`'s `key`.","sig":null,"attributes":[{"value":"/ Attempt to set the strongly-typed attribute `value` of `class`'s `key`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693803,"byte_end":693878,"line_start":203,"line_end":203,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693880,"byte_end":693883,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ By default this just attempts to use `set_attribute`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":693885,"byte_end":693942,"line_start":205,"line_end":205,"column_start":2,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":4737},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":694258,"byte_end":694266,"line_start":216,"line_end":216,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::traits::tokens::nonfungibles::Transfer","value":"Transfer<AccountId>: Inspect<AccountId>","parent":null,"children":[{"krate":0,"index":4739}],"decl_id":null,"docs":" Trait for providing a non-fungible sets of assets which can only be transferred.\n","sig":null,"attributes":[{"value":"/ Trait for providing a non-fungible sets of assets which can only be transferred.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":694163,"byte_end":694247,"line_start":215,"line_end":215,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":4739},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":694374,"byte_end":694382,"line_start":218,"line_end":218,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::tokens::nonfungibles::Transfer::transfer","value":"pub fn transfer(&Self::ClassId, &Self::InstanceId, &AccountId)\n-> DispatchResult","parent":{"krate":0,"index":4737},"children":[],"decl_id":null,"docs":" Transfer asset `instance` of `class` into `destination` account.\n","sig":null,"attributes":[{"value":"/ Transfer asset `instance` of `class` into `destination` account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":694301,"byte_end":694369,"line_start":217,"line_end":217,"column_start":2,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":4822},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695363,"byte_end":695371,"line_start":23,"line_end":23,"column_start":11,"column_end":19},"name":"Contains","qualname":"::traits::members::Contains","value":"Contains<T>","parent":null,"children":[{"krate":0,"index":4824}],"decl_id":null,"docs":" A trait for querying whether a type can be said to \"contain\" a value.\n","sig":null,"attributes":[{"value":"/ A trait for querying whether a type can be said to \"contain\" a value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695279,"byte_end":695352,"line_start":22,"line_end":22,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4824},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695440,"byte_end":695448,"line_start":25,"line_end":25,"column_start":5,"column_end":13},"name":"contains","qualname":"::traits::members::Contains::contains","value":"pub fn contains(&T) -> bool","parent":{"krate":0,"index":4822},"children":[],"decl_id":null,"docs":" Return `true` if this \"contains\" the given value `t`.\n","sig":null,"attributes":[{"value":"/ Return `true` if this \"contains\" the given value `t`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695378,"byte_end":695435,"line_start":24,"line_end":24,"column_start":2,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4825},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695538,"byte_end":695548,"line_start":29,"line_end":29,"column_start":10,"column_end":20},"name":"Everything","qualname":"::traits::members::Everything","value":"pub enum Everything { }","parent":null,"children":[],"decl_id":null,"docs":" A [`Contains`] implementation that contains every value.\n","sig":null,"attributes":[{"value":"/ A [`Contains`] implementation that contains every value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695468,"byte_end":695528,"line_start":28,"line_end":28,"column_start":1,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":4829},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695699,"byte_end":695706,"line_start":37,"line_end":37,"column_start":10,"column_end":17},"name":"Nothing","qualname":"::traits::members::Nothing","value":"pub enum Nothing { }","parent":null,"children":[],"decl_id":null,"docs":" A [`Contains`] implementation that contains no value.\n","sig":null,"attributes":[{"value":"/ A [`Contains`] implementation that contains no value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695632,"byte_end":695689,"line_start":36,"line_end":36,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":4833},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695840,"byte_end":695848,"line_start":45,"line_end":45,"column_start":10,"column_end":18},"name":"AllowAll","qualname":"::traits::members::AllowAll","value":"Everything","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `Everything` instead\"","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695788,"byte_end":695830,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":4834},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695912,"byte_end":695919,"line_start":47,"line_end":47,"column_start":10,"column_end":17},"name":"DenyAll","qualname":"::traits::members::DenyAll","value":"Nothing","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `Nothing` instead\"","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695863,"byte_end":695902,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":4835},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695982,"byte_end":695988,"line_start":49,"line_end":49,"column_start":11,"column_end":17},"name":"Filter","qualname":"::traits::members::Filter","value":"Filter<T>","parent":null,"children":[{"krate":0,"index":4837}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `Contains` instead\"","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695931,"byte_end":695971,"line_start":48,"line_end":48,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":4837},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695998,"byte_end":696004,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::members::Filter::filter","value":"pub fn filter(&T) -> bool","parent":{"krate":0,"index":4835},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4843},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697077,"byte_end":697090,"line_start":100,"line_end":100,"column_start":11,"column_end":24},"name":"SortedMembers","qualname":"::traits::members::SortedMembers","value":"SortedMembers<T: Ord>","parent":null,"children":[{"krate":0,"index":4845},{"krate":0,"index":4846},{"krate":0,"index":4847}],"decl_id":null,"docs":" A trait for a set which can enumerate its members in order.\n","sig":null,"attributes":[{"value":"/ A trait for a set which can enumerate its members in order.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697003,"byte_end":697066,"line_start":99,"line_end":99,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":4845},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697159,"byte_end":697173,"line_start":102,"line_end":102,"column_start":5,"column_end":19},"name":"sorted_members","qualname":"::traits::members::SortedMembers::sorted_members","value":"pub fn sorted_members() -> Vec<T>","parent":{"krate":0,"index":4843},"children":[],"decl_id":null,"docs":" Get a vector of all members in the set, ordered.\n","sig":null,"attributes":[{"value":"/ Get a vector of all members in the set, ordered.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697102,"byte_end":697154,"line_start":101,"line_end":101,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4846},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697251,"byte_end":697259,"line_start":105,"line_end":105,"column_start":5,"column_end":13},"name":"contains","qualname":"::traits::members::SortedMembers::contains","value":"pub fn contains(&T) -> bool","parent":{"krate":0,"index":4843},"children":[],"decl_id":null,"docs":" Return `true` if this \"contains\" the given value `t`.\n","sig":null,"attributes":[{"value":"/ Return `true` if this \"contains\" the given value `t`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697189,"byte_end":697246,"line_start":104,"line_end":104,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4847},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697376,"byte_end":697381,"line_start":110,"line_end":110,"column_start":5,"column_end":10},"name":"count","qualname":"::traits::members::SortedMembers::count","value":"pub fn count() -> usize","parent":{"krate":0,"index":4843},"children":[],"decl_id":null,"docs":" Get the number of items in the set.\n","sig":null,"attributes":[{"value":"/ Get the number of items in the set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697332,"byte_end":697371,"line_start":109,"line_end":109,"column_start":2,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":4848},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697790,"byte_end":697800,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"AsContains","qualname":"::traits::members::AsContains","value":"","parent":null,"children":[],"decl_id":null,"docs":" Adapter struct for turning an `OrderedMembership` impl into a `Contains` impl.\n","sig":null,"attributes":[{"value":"/ Adapter struct for turning an `OrderedMembership` impl into a `Contains` impl.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697696,"byte_end":697778,"line_start":124,"line_end":124,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":4856},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698046,"byte_end":698053,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"IsInVec","qualname":"::traits::members::IsInVec","value":"","parent":null,"children":[],"decl_id":null,"docs":" Trivial utility for implementing `Contains`/`OrderedMembership` with a `Vec`.\n","sig":null,"attributes":[{"value":"/ Trivial utility for implementing `Contains`/`OrderedMembership` with a `Vec`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697953,"byte_end":698034,"line_start":132,"line_end":132,"column_start":1,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":4868},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698449,"byte_end":698468,"line_start":148,"line_end":148,"column_start":11,"column_end":30},"name":"ContainsLengthBound","qualname":"::traits::members::ContainsLengthBound","value":"ContainsLengthBound","parent":null,"children":[{"krate":0,"index":4869},{"krate":0,"index":4870}],"decl_id":null,"docs":" A trait for querying bound for the length of an implementation of `Contains`\n","sig":null,"attributes":[{"value":"/ A trait for querying bound for the length of an implementation of `Contains`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698358,"byte_end":698438,"line_start":147,"line_end":147,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4869},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698517,"byte_end":698524,"line_start":150,"line_end":150,"column_start":5,"column_end":12},"name":"min_len","qualname":"::traits::members::ContainsLengthBound::min_len","value":"pub fn min_len() -> usize","parent":{"krate":0,"index":4868},"children":[],"decl_id":null,"docs":" Minimum number of elements contained\n","sig":null,"attributes":[{"value":"/ Minimum number of elements contained","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698472,"byte_end":698512,"line_start":149,"line_end":149,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4870},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698583,"byte_end":698590,"line_start":152,"line_end":152,"column_start":5,"column_end":12},"name":"max_len","qualname":"::traits::members::ContainsLengthBound::max_len","value":"pub fn max_len() -> usize","parent":{"krate":0,"index":4868},"children":[],"decl_id":null,"docs":" Maximum number of elements contained\n","sig":null,"attributes":[{"value":"/ Maximum number of elements contained","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698538,"byte_end":698578,"line_start":151,"line_end":151,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":4871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698697,"byte_end":698714,"line_start":156,"line_end":156,"column_start":11,"column_end":28},"name":"InitializeMembers","qualname":"::traits::members::InitializeMembers","value":"InitializeMembers<AccountId>","parent":null,"children":[{"krate":0,"index":4873}],"decl_id":null,"docs":" Trait for type that can handle the initialization of account IDs at genesis.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle the initialization of account IDs at genesis.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698606,"byte_end":698686,"line_start":155,"line_end":155,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4873},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698784,"byte_end":698802,"line_start":158,"line_end":158,"column_start":5,"column_end":23},"name":"initialize_members","qualname":"::traits::members::InitializeMembers::initialize_members","value":"pub fn initialize_members(&[AccountId])","parent":{"krate":0,"index":4871},"children":[],"decl_id":null,"docs":" Initialize the members to the given `members`.\n","sig":null,"attributes":[{"value":"/ Initialize the members to the given `members`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698729,"byte_end":698779,"line_start":157,"line_end":157,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":4877},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698996,"byte_end":699009,"line_start":166,"line_end":166,"column_start":11,"column_end":24},"name":"ChangeMembers","qualname":"::traits::members::ChangeMembers","value":"ChangeMembers<AccountId: Clone + Ord>","parent":null,"children":[{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":4881},{"krate":0,"index":4882},{"krate":0,"index":4883},{"krate":0,"index":4884}],"decl_id":null,"docs":" Trait for type that can handle incremental changes to a set of account IDs.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle incremental changes to a set of account IDs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698906,"byte_end":698985,"line_start":165,"line_end":165,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4879},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699242,"byte_end":699256,"line_start":171,"line_end":171,"column_start":5,"column_end":19},"name":"change_members","qualname":"::traits::members::ChangeMembers::change_members","value":"pub fn change_members(&[AccountId], &[AccountId], Vec<AccountId>)","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" A number of members `incoming` just joined the set and replaced some `outgoing` ones. The\n new set is given by `new`, and need not be sorted.","sig":null,"attributes":[{"value":"/ A number of members `incoming` just joined the set and replaced some `outgoing` ones. The","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699037,"byte_end":699130,"line_start":167,"line_end":167,"column_start":2,"column_end":95}},{"value":"/ new set is given by `new`, and need not be sorted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699132,"byte_end":699186,"line_start":168,"line_end":168,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699188,"byte_end":699191,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699193,"byte_end":699237,"line_start":170,"line_end":170,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4880},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699721,"byte_end":699742,"line_start":182,"line_end":182,"column_start":5,"column_end":26},"name":"change_members_sorted","qualname":"::traits::members::ChangeMembers::change_members_sorted","value":"pub fn change_members_sorted(&[AccountId], &[AccountId], &[AccountId])","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The\n new set is thus given by `sorted_new` and **must be sorted**.","sig":null,"attributes":[{"value":"/ A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699412,"byte_end":699507,"line_start":176,"line_end":176,"column_start":2,"column_end":97}},{"value":"/ new set is thus given by `sorted_new` and **must be sorted**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699509,"byte_end":699574,"line_start":177,"line_end":177,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699576,"byte_end":699579,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ NOTE: This is the only function that needs to be implemented in `ChangeMembers`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699581,"byte_end":699665,"line_start":179,"line_end":179,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699667,"byte_end":699670,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699672,"byte_end":699716,"line_start":181,"line_end":181,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4881},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":700019,"byte_end":700037,"line_start":192,"line_end":192,"column_start":5,"column_end":23},"name":"set_members_sorted","qualname":"::traits::members::ChangeMembers::set_members_sorted","value":"pub fn set_members_sorted(&[AccountId], &[AccountId])","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it\n to call `change_members_sorted`.","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699830,"byte_end":699925,"line_start":188,"line_end":188,"column_start":2,"column_end":97}},{"value":"/ to call `change_members_sorted`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699927,"byte_end":699963,"line_start":189,"line_end":189,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699965,"byte_end":699968,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":699970,"byte_end":700014,"line_start":191,"line_end":191,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4882},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":700396,"byte_end":700423,"line_start":200,"line_end":200,"column_start":5,"column_end":32},"name":"compute_members_diff_sorted","qualname":"::traits::members::ChangeMembers::compute_members_diff_sorted","value":"pub fn compute_members_diff_sorted(&[AccountId], &[AccountId])\n-> (Vec<AccountId>, Vec<AccountId>)","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" Compute diff between new and old members; they **must already be sorted**.","sig":null,"attributes":[{"value":"/ Compute diff between new and old members; they **must already be sorted**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":700264,"byte_end":700342,"line_start":197,"line_end":197,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":700344,"byte_end":700347,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ Returns incoming and outgoing members.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":700349,"byte_end":700391,"line_start":199,"line_end":199,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4883},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":701290,"byte_end":701299,"line_start":235,"line_end":235,"column_start":5,"column_end":14},"name":"set_prime","qualname":"::traits::members::ChangeMembers::set_prime","value":"pub fn set_prime(Option<AccountId>)","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" Set the prime member.\n","sig":null,"attributes":[{"value":"/ Set the prime member.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":701260,"byte_end":701285,"line_start":234,"line_end":234,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4884},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":701363,"byte_end":701372,"line_start":238,"line_end":238,"column_start":5,"column_end":14},"name":"get_prime","qualname":"::traits::members::ChangeMembers::get_prime","value":"pub fn get_prime() -> Option<AccountId>","parent":{"krate":0,"index":4877},"children":[],"decl_id":null,"docs":" Get the current prime.\n","sig":null,"attributes":[{"value":"/ Get the current prime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":701332,"byte_end":701358,"line_start":237,"line_end":237,"column_start":2,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":4971},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702793,"byte_end":702805,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"ValidatorSet","qualname":"::traits::validation::ValidatorSet","value":"ValidatorSet<AccountId>","parent":null,"children":[{"krate":0,"index":4973},{"krate":0,"index":4974},{"krate":0,"index":4975},{"krate":0,"index":4976}],"decl_id":null,"docs":" A trait for online node inspection in a session.","sig":null,"attributes":[{"value":"/ A trait for online node inspection in a session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702653,"byte_end":702705,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702706,"byte_end":702709,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Something that can give information about the current validator set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702710,"byte_end":702782,"line_start":31,"line_end":31,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":4973},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702879,"byte_end":702890,"line_start":34,"line_end":34,"column_start":7,"column_end":18},"name":"ValidatorId","qualname":"::traits::validation::ValidatorSet::ValidatorId","value":"type ValidatorId: Parameter + MaxEncodedLen;","parent":{"krate":0,"index":4971},"children":[],"decl_id":null,"docs":" Type for representing validator id in a session.\n","sig":null,"attributes":[{"value":"/ Type for representing validator id in a session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702820,"byte_end":702872,"line_start":33,"line_end":33,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":4974},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702982,"byte_end":702995,"line_start":36,"line_end":36,"column_start":7,"column_end":20},"name":"ValidatorIdOf","qualname":"::traits::validation::ValidatorSet::ValidatorIdOf","value":"type ValidatorIdOf: Convert<AccountId, Option<Self::ValidatorId>>;","parent":{"krate":0,"index":4971},"children":[],"decl_id":null,"docs":" A type for converting `AccountId` to `ValidatorId`.\n","sig":null,"attributes":[{"value":"/ A type for converting `AccountId` to `ValidatorId`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":702920,"byte_end":702975,"line_start":35,"line_end":35,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4975},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703085,"byte_end":703098,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"session_index","qualname":"::traits::validation::ValidatorSet::session_index","value":"pub fn session_index() -> SessionIndex","parent":{"krate":0,"index":4971},"children":[],"decl_id":null,"docs":" Returns current session index.\n","sig":null,"attributes":[{"value":"/ Returns current session index.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703046,"byte_end":703080,"line_start":38,"line_end":38,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4976},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703166,"byte_end":703176,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"validators","qualname":"::traits::validation::ValidatorSet::validators","value":"pub fn validators() -> Vec<Self::ValidatorId>","parent":{"krate":0,"index":4971},"children":[],"decl_id":null,"docs":" Returns the active set of validators.\n","sig":null,"attributes":[{"value":"/ Returns the active set of validators.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703120,"byte_end":703161,"line_start":41,"line_end":41,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":4977},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703273,"byte_end":703303,"line_start":46,"line_end":46,"column_start":11,"column_end":41},"name":"ValidatorSetWithIdentification","qualname":"::traits::validation::ValidatorSetWithIdentification","value":"ValidatorSetWithIdentification<AccountId>: ValidatorSet<AccountId>","parent":null,"children":[{"krate":0,"index":4979},{"krate":0,"index":4980}],"decl_id":null,"docs":" [`ValidatorSet`] combined with an identification.\n","sig":null,"attributes":[{"value":"/ [`ValidatorSet`] combined with an identification.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703209,"byte_end":703262,"line_start":45,"line_end":45,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":4979},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703391,"byte_end":703405,"line_start":48,"line_end":48,"column_start":7,"column_end":21},"name":"Identification","qualname":"::traits::validation::ValidatorSetWithIdentification::Identification","value":"type Identification: Parameter;","parent":{"krate":0,"index":4977},"children":[],"decl_id":null,"docs":" Full identification of `ValidatorId`.\n","sig":null,"attributes":[{"value":"/ Full identification of `ValidatorId`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703343,"byte_end":703384,"line_start":47,"line_end":47,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":4980},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703486,"byte_end":703502,"line_start":50,"line_end":50,"column_start":7,"column_end":23},"name":"IdentificationOf","qualname":"::traits::validation::ValidatorSetWithIdentification::IdentificationOf","value":"type IdentificationOf: Convert<Self::ValidatorId, Option<Self::Identification>>;","parent":{"krate":0,"index":4977},"children":[],"decl_id":null,"docs":" A type for converting `ValidatorId` to `Identification`.\n","sig":null,"attributes":[{"value":"/ A type for converting `ValidatorId` to `Identification`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703419,"byte_end":703479,"line_start":49,"line_end":49,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":4981},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703687,"byte_end":703697,"line_start":55,"line_end":55,"column_start":11,"column_end":21},"name":"FindAuthor","qualname":"::traits::validation::FindAuthor","value":"FindAuthor<Author>","parent":null,"children":[{"krate":0,"index":4983}],"decl_id":null,"docs":" A trait for finding the author of a block header based on the `PreRuntime` digests contained\n within it.\n","sig":null,"attributes":[{"value":"/ A trait for finding the author of a block header based on the `PreRuntime` digests contained","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703565,"byte_end":703661,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/ within it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703662,"byte_end":703676,"line_start":54,"line_end":54,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":4983},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703778,"byte_end":703789,"line_start":57,"line_end":57,"column_start":5,"column_end":16},"name":"find_author","qualname":"::traits::validation::FindAuthor::find_author","value":"pub fn find_author<'a, I>(I) -> Option<Author> where I: 'a + IntoIterator<Item\n= (ConsensusEngineId, &'a [u8])>","parent":{"krate":0,"index":4981},"children":[],"decl_id":null,"docs":" Find the author of a block based on the pre-runtime digests.\n","sig":null,"attributes":[{"value":"/ Find the author of a block based on the pre-runtime digests.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703709,"byte_end":703773,"line_start":56,"line_end":56,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":4991},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704140,"byte_end":704150,"line_start":72,"line_end":72,"column_start":11,"column_end":21},"name":"VerifySeal","qualname":"::traits::validation::VerifySeal","value":"VerifySeal<Header, Author>","parent":null,"children":[{"krate":0,"index":4994}],"decl_id":null,"docs":" A trait for verifying the seal of a header and returning the author.\n","sig":null,"attributes":[{"value":"/ A trait for verifying the seal of a header and returning the author.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704057,"byte_end":704129,"line_start":71,"line_end":71,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4994},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704225,"byte_end":704236,"line_start":74,"line_end":74,"column_start":5,"column_end":16},"name":"verify_seal","qualname":"::traits::validation::VerifySeal::verify_seal","value":"pub fn verify_seal(&Header) -> Result<Option<Author>, &'static str>","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":" Verify a header and return the author, if any.\n","sig":null,"attributes":[{"value":"/ Verify a header and return the author, if any.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704170,"byte_end":704220,"line_start":73,"line_end":73,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":4995},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704353,"byte_end":704370,"line_start":78,"line_end":78,"column_start":11,"column_end":28},"name":"OneSessionHandler","qualname":"::traits::validation::OneSessionHandler","value":"OneSessionHandler<ValidatorId>: BoundToRuntimeAppPublic","parent":null,"children":[{"krate":0,"index":4997},{"krate":0,"index":4998},{"krate":0,"index":5001},{"krate":0,"index":5004},{"krate":0,"index":5005}],"decl_id":null,"docs":" A session handler for specific key type.\n","sig":null,"attributes":[{"value":"/ A session handler for specific key type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704298,"byte_end":704342,"line_start":77,"line_end":77,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":4997},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704445,"byte_end":704448,"line_start":80,"line_end":80,"column_start":7,"column_end":10},"name":"Key","qualname":"::traits::validation::OneSessionHandler::Key","value":"type Key: Decode + RuntimeAppPublic;","parent":{"krate":0,"index":4995},"children":[],"decl_id":null,"docs":" The key type expected.\n","sig":null,"attributes":[{"value":"/ The key type expected.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704412,"byte_end":704438,"line_start":79,"line_end":79,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4998},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704736,"byte_end":704754,"line_start":86,"line_end":86,"column_start":5,"column_end":23},"name":"on_genesis_session","qualname":"::traits::validation::OneSessionHandler::on_genesis_session","value":"pub fn on_genesis_session<'a, I: 'a>(I) where I: Iterator<Item =\n(&'a ValidatorId, Self::Key)>, ValidatorId: 'a","parent":{"krate":0,"index":4995},"children":[],"decl_id":null,"docs":" The given validator set will be used for the genesis session.\n It is guaranteed that the given validator set will also be used\n for the second session, therefore the first call to `on_new_session`\n should provide the same validator set.\n","sig":null,"attributes":[{"value":"/ The given validator set will be used for the genesis session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704479,"byte_end":704544,"line_start":82,"line_end":82,"column_start":2,"column_end":67}},{"value":"/ It is guaranteed that the given validator set will also be used","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704546,"byte_end":704613,"line_start":83,"line_end":83,"column_start":2,"column_end":69}},{"value":"/ for the second session, therefore the first call to `on_new_session`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704615,"byte_end":704687,"line_start":84,"line_end":84,"column_start":2,"column_end":74}},{"value":"/ should provide the same validator set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704689,"byte_end":704731,"line_start":85,"line_end":85,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5001},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705283,"byte_end":705297,"line_start":100,"line_end":100,"column_start":5,"column_end":19},"name":"on_new_session","qualname":"::traits::validation::OneSessionHandler::on_new_session","value":"pub fn on_new_session<'a, I: 'a>(bool, I, I) where I: Iterator<Item =\n(&'a ValidatorId, Self::Key)>, ValidatorId: 'a","parent":{"krate":0,"index":4995},"children":[],"decl_id":null,"docs":" Session set has changed; act appropriately. Note that this can be called\n before initialization of your module.","sig":null,"attributes":[{"value":"/ Session set has changed; act appropriately. Note that this can be called","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704861,"byte_end":704937,"line_start":91,"line_end":91,"column_start":2,"column_end":78}},{"value":"/ before initialization of your module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704939,"byte_end":704980,"line_start":92,"line_end":92,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704982,"byte_end":704985,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ `changed` is true when at least one of the session keys","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704987,"byte_end":705046,"line_start":94,"line_end":94,"column_start":2,"column_end":61}},{"value":"/ or the underlying economic identities/distribution behind one the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705048,"byte_end":705117,"line_start":95,"line_end":95,"column_start":2,"column_end":71}},{"value":"/ session keys has changed, false otherwise.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705119,"byte_end":705165,"line_start":96,"line_end":96,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705167,"byte_end":705170,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ The `validators` are the validators of the incoming session, and `queued_validators`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705172,"byte_end":705260,"line_start":98,"line_end":98,"column_start":2,"column_end":90}},{"value":"/ will follow.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705262,"byte_end":705278,"line_start":99,"line_end":99,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5004},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705617,"byte_end":705641,"line_start":109,"line_end":109,"column_start":5,"column_end":29},"name":"on_before_session_ending","qualname":"::traits::validation::OneSessionHandler::on_before_session_ending","value":"pub fn on_before_session_ending()","parent":{"krate":0,"index":4995},"children":[],"decl_id":null,"docs":" A notification for end of the session.","sig":null,"attributes":[{"value":"/ A notification for end of the session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705441,"byte_end":705483,"line_start":105,"line_end":105,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705485,"byte_end":705488,"line_start":106,"line_end":106,"column_start":2,"column_end":5}},{"value":"/ Note it is triggered before any `SessionManager::end_session` handlers,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705490,"byte_end":705565,"line_start":107,"line_end":107,"column_start":2,"column_end":77}},{"value":"/ so we can still affect the validator set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705567,"byte_end":705612,"line_start":108,"line_end":108,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5005},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705727,"byte_end":705738,"line_start":112,"line_end":112,"column_start":5,"column_end":16},"name":"on_disabled","qualname":"::traits::validation::OneSessionHandler::on_disabled","value":"pub fn on_disabled(u32)","parent":{"krate":0,"index":4995},"children":[],"decl_id":null,"docs":" A validator got disabled. Act accordingly until a new session begins.\n","sig":null,"attributes":[{"value":"/ A validator got disabled. Act accordingly until a new session begins.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705649,"byte_end":705722,"line_start":111,"line_end":111,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":5006},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706320,"byte_end":706347,"line_start":124,"line_end":124,"column_start":11,"column_end":38},"name":"EstimateNextSessionRotation","qualname":"::traits::validation::EstimateNextSessionRotation","value":"EstimateNextSessionRotation<BlockNumber>","parent":null,"children":[{"krate":0,"index":5008},{"krate":0,"index":5009},{"krate":0,"index":5010}],"decl_id":null,"docs":" Something that can estimate at which block the next session rotation will happen (i.e. a new\n session starts).","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next session rotation will happen (i.e. a new","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705766,"byte_end":705862,"line_start":115,"line_end":115,"column_start":1,"column_end":97}},{"value":"/ session starts).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705863,"byte_end":705883,"line_start":116,"line_end":116,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705884,"byte_end":705887,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The accuracy of the estimates is dependent on the specific implementation, but in order to get","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705888,"byte_end":705986,"line_start":118,"line_end":118,"column_start":1,"column_end":99}},{"value":"/ the best estimate possible these methods should be called throughout the duration of the session","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":705987,"byte_end":706087,"line_start":119,"line_end":119,"column_start":1,"column_end":101}},{"value":"/ (rather than calling once and storing the result).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706088,"byte_end":706142,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706143,"byte_end":706146,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This should be the same logical unit that dictates `ShouldEndSession` to the session module. No","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706147,"byte_end":706246,"line_start":122,"line_end":122,"column_start":1,"column_end":100}},{"value":"/ assumptions are made about the scheduling of the sessions.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706247,"byte_end":706309,"line_start":123,"line_end":123,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5008},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706455,"byte_end":706477,"line_start":128,"line_end":128,"column_start":5,"column_end":27},"name":"average_session_length","qualname":"::traits::validation::EstimateNextSessionRotation::average_session_length","value":"pub fn average_session_length() -> BlockNumber","parent":{"krate":0,"index":5006},"children":[],"decl_id":null,"docs":" Return the average length of a session.","sig":null,"attributes":[{"value":"/ Return the average length of a session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706364,"byte_end":706407,"line_start":125,"line_end":125,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706409,"byte_end":706412,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ This may or may not be accurate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706414,"byte_end":706450,"line_start":127,"line_end":127,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5009},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706638,"byte_end":706671,"line_start":133,"line_end":133,"column_start":5,"column_end":38},"name":"estimate_current_session_progress","qualname":"::traits::validation::EstimateNextSessionRotation::estimate_current_session_progress","value":"pub fn estimate_current_session_progress(BlockNumber)\n-> (Option<Permill>, Weight)","parent":{"krate":0,"index":5006},"children":[],"decl_id":null,"docs":" Return an estimate of the current session progress.","sig":null,"attributes":[{"value":"/ Return an estimate of the current session progress.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706498,"byte_end":706553,"line_start":130,"line_end":130,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706555,"byte_end":706558,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706560,"byte_end":706633,"line_start":132,"line_end":132,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5010},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706893,"byte_end":706923,"line_start":138,"line_end":138,"column_start":5,"column_end":35},"name":"estimate_next_session_rotation","qualname":"::traits::validation::EstimateNextSessionRotation::estimate_next_session_rotation","value":"pub fn estimate_next_session_rotation(BlockNumber)\n-> (Option<BlockNumber>, Weight)","parent":{"krate":0,"index":5006},"children":[],"decl_id":null,"docs":" Return the block number at which the next session rotation is estimated to happen.","sig":null,"attributes":[{"value":"/ Return the block number at which the next session rotation is estimated to happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706722,"byte_end":706808,"line_start":135,"line_end":135,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706810,"byte_end":706813,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":706815,"byte_end":706888,"line_start":137,"line_end":137,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":5016},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707989,"byte_end":708011,"line_start":165,"line_end":165,"column_start":11,"column_end":33},"name":"EstimateNextNewSession","qualname":"::traits::validation::EstimateNextNewSession","value":"EstimateNextNewSession<BlockNumber>","parent":null,"children":[{"krate":0,"index":5018},{"krate":0,"index":5019}],"decl_id":null,"docs":" Something that can estimate at which block scheduling of the next session will happen (i.e when\n we will try to fetch new validators).","sig":null,"attributes":[{"value":"/ Something that can estimate at which block scheduling of the next session will happen (i.e when","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707345,"byte_end":707444,"line_start":155,"line_end":155,"column_start":1,"column_end":100}},{"value":"/ we will try to fetch new validators).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707445,"byte_end":707486,"line_start":156,"line_end":156,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707487,"byte_end":707490,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This only refers to the point when we fetch the next session details and not when we enact them","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707491,"byte_end":707590,"line_start":158,"line_end":158,"column_start":1,"column_end":100}},{"value":"/ (for enactment there's `EstimateNextSessionRotation`). With `pallet-session` this should be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707591,"byte_end":707686,"line_start":159,"line_end":159,"column_start":1,"column_end":96}},{"value":"/ triggered whenever `SessionManager::new_session` is called.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707687,"byte_end":707750,"line_start":160,"line_end":160,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707751,"byte_end":707754,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ For example, if we are using a staking module this would be the block when the session module","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707755,"byte_end":707852,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ would ask staking what the next validator set will be, as such this must always be implemented","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707853,"byte_end":707951,"line_start":163,"line_end":163,"column_start":1,"column_end":99}},{"value":"/ by the session module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":707952,"byte_end":707978,"line_start":164,"line_end":164,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":5018},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708119,"byte_end":708141,"line_start":169,"line_end":169,"column_start":5,"column_end":27},"name":"average_session_length","qualname":"::traits::validation::EstimateNextNewSession::average_session_length","value":"pub fn average_session_length() -> BlockNumber","parent":{"krate":0,"index":5016},"children":[],"decl_id":null,"docs":" Return the average length of a session.","sig":null,"attributes":[{"value":"/ Return the average length of a session.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708028,"byte_end":708071,"line_start":166,"line_end":166,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708073,"byte_end":708076,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ This may or may not be accurate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708078,"byte_end":708114,"line_start":168,"line_end":168,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5019},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708328,"byte_end":708353,"line_start":174,"line_end":174,"column_start":5,"column_end":30},"name":"estimate_next_new_session","qualname":"::traits::validation::EstimateNextNewSession::estimate_next_new_session","value":"pub fn estimate_next_new_session(BlockNumber) -> (Option<BlockNumber>, Weight)","parent":{"krate":0,"index":5016},"children":[],"decl_id":null,"docs":" Return the block number at which the next new session is estimated to happen.","sig":null,"attributes":[{"value":"/ Return the block number at which the next new session is estimated to happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708162,"byte_end":708243,"line_start":171,"line_end":171,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708245,"byte_end":708248,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708250,"byte_end":708323,"line_start":173,"line_end":173,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":5024},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708799,"byte_end":708818,"line_start":190,"line_end":190,"column_start":11,"column_end":30},"name":"KeyOwnerProofSystem","qualname":"::traits::validation::KeyOwnerProofSystem","value":"KeyOwnerProofSystem<Key>","parent":null,"children":[{"krate":0,"index":5026},{"krate":0,"index":5027},{"krate":0,"index":5028},{"krate":0,"index":5029}],"decl_id":null,"docs":" Something which can compute and check proofs of\n a historical key owner and return full identification data of that\n key owner.\n","sig":null,"attributes":[{"value":"/ Something which can compute and check proofs of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708651,"byte_end":708702,"line_start":187,"line_end":187,"column_start":1,"column_end":52}},{"value":"/ a historical key owner and return full identification data of that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708703,"byte_end":708773,"line_start":188,"line_end":188,"column_start":1,"column_end":71}},{"value":"/ key owner.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708774,"byte_end":708788,"line_start":189,"line_end":189,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":5026},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708869,"byte_end":708874,"line_start":192,"line_end":192,"column_start":7,"column_end":12},"name":"Proof","qualname":"::traits::validation::KeyOwnerProofSystem::Proof","value":"type Proof: Codec;","parent":{"krate":0,"index":5024},"children":[],"decl_id":null,"docs":" The proof of membership itself.\n","sig":null,"attributes":[{"value":"/ The proof of membership itself.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708827,"byte_end":708862,"line_start":191,"line_end":191,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":5027},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708956,"byte_end":708975,"line_start":194,"line_end":194,"column_start":7,"column_end":26},"name":"IdentificationTuple","qualname":"::traits::validation::KeyOwnerProofSystem::IdentificationTuple","value":"type IdentificationTuple: Codec;","parent":{"krate":0,"index":5024},"children":[],"decl_id":null,"docs":" The full identification of a key owner and the stash account.\n","sig":null,"attributes":[{"value":"/ The full identification of a key owner and the stash account.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708884,"byte_end":708949,"line_start":193,"line_end":193,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5028},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709267,"byte_end":709272,"line_start":203,"line_end":203,"column_start":5,"column_end":10},"name":"prove","qualname":"::traits::validation::KeyOwnerProofSystem::prove","value":"pub fn prove(Key) -> Option<Self::Proof>","parent":{"krate":0,"index":5024},"children":[],"decl_id":null,"docs":" Prove membership of a key owner in the current block-state.","sig":null,"attributes":[{"value":"/ Prove membership of a key owner in the current block-state.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":708986,"byte_end":709049,"line_start":196,"line_end":196,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709051,"byte_end":709054,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ This should typically only be called off-chain, since it may be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709056,"byte_end":709123,"line_start":198,"line_end":198,"column_start":2,"column_end":69}},{"value":"/ computationally heavy.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709125,"byte_end":709151,"line_start":199,"line_end":199,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709153,"byte_end":709156,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ Returns `Some` iff the key owner referred to by the given `key` is a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709158,"byte_end":709230,"line_start":201,"line_end":201,"column_start":2,"column_end":74}},{"value":"/ member of the current set.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709232,"byte_end":709262,"line_start":202,"line_end":202,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":5029},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709425,"byte_end":709436,"line_start":207,"line_end":207,"column_start":5,"column_end":16},"name":"check_proof","qualname":"::traits::validation::KeyOwnerProofSystem::check_proof","value":"pub fn check_proof(Key, Self::Proof) -> Option<Self::IdentificationTuple>","parent":{"krate":0,"index":5024},"children":[],"decl_id":null,"docs":" Check a proof of membership on-chain. Return `Some` iff the proof is\n valid and recent enough to check.\n","sig":null,"attributes":[{"value":"/ Check a proof of membership on-chain. Return `Some` iff the proof is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709309,"byte_end":709381,"line_start":205,"line_end":205,"column_start":2,"column_end":74}},{"value":"/ valid and recent enough to check.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709383,"byte_end":709420,"line_start":206,"line_end":206,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":5036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710174,"byte_end":710182,"line_start":228,"line_end":228,"column_start":11,"column_end":19},"name":"Lateness","qualname":"::traits::validation::Lateness","value":"Lateness<N>","parent":null,"children":[{"krate":0,"index":5038}],"decl_id":null,"docs":" Trait to be used by block producing consensus engine modules to determine\n how late the current block is (e.g. in a slot-based proposal mechanism how\n many slots were skipped since the previous block).\n","sig":null,"attributes":[{"value":"/ Trait to be used by block producing consensus engine modules to determine","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":709952,"byte_end":710029,"line_start":225,"line_end":225,"column_start":1,"column_end":78}},{"value":"/ how late the current block is (e.g. in a slot-based proposal mechanism how","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710030,"byte_end":710108,"line_start":226,"line_end":226,"column_start":1,"column_end":79}},{"value":"/ many slots were skipped since the previous block).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710109,"byte_end":710163,"line_start":227,"line_end":227,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5038},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710285,"byte_end":710293,"line_start":231,"line_end":231,"column_start":5,"column_end":13},"name":"lateness","qualname":"::traits::validation::Lateness::lateness","value":"pub fn lateness(&Self) -> N","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Returns a generic measure of how late the current block is compared to\n its parent.\n","sig":null,"attributes":[{"value":"/ Returns a generic measure of how late the current block is compared to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710189,"byte_end":710263,"line_start":229,"line_end":229,"column_start":2,"column_end":76}},{"value":"/ its parent.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710265,"byte_end":710280,"line_start":230,"line_end":230,"column_start":2,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":5042},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710602,"byte_end":710623,"line_start":243,"line_end":243,"column_start":11,"column_end":32},"name":"ValidatorRegistration","qualname":"::traits::validation::ValidatorRegistration","value":"ValidatorRegistration<ValidatorId>","parent":null,"children":[{"krate":0,"index":5044}],"decl_id":null,"docs":" Implementors of this trait provide information about whether or not some validator has\n been registered with them. The [Session module](../../pallet_session/index.html) is an\n implementor.\n","sig":null,"attributes":[{"value":"/ Implementors of this trait provide information about whether or not some validator has","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710393,"byte_end":710483,"line_start":240,"line_end":240,"column_start":1,"column_end":91}},{"value":"/ been registered with them. The [Session module](../../pallet_session/index.html) is an","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710484,"byte_end":710574,"line_start":241,"line_end":241,"column_start":1,"column_end":91}},{"value":"/ implementor.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710575,"byte_end":710591,"line_start":242,"line_end":242,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":5044},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710752,"byte_end":710765,"line_start":246,"line_end":246,"column_start":5,"column_end":18},"name":"is_registered","qualname":"::traits::validation::ValidatorRegistration::is_registered","value":"pub fn is_registered(&ValidatorId) -> bool","parent":{"krate":0,"index":5042},"children":[],"decl_id":null,"docs":" Returns true if the provided validator ID has been registered with the implementing runtime\n module\n","sig":null,"attributes":[{"value":"/ Returns true if the provided validator ID has been registered with the implementing runtime","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710640,"byte_end":710735,"line_start":244,"line_end":244,"column_start":2,"column_end":97}},{"value":"/ module","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710737,"byte_end":710747,"line_start":245,"line_end":245,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":5045},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710960,"byte_end":710978,"line_start":251,"line_end":251,"column_start":11,"column_end":29},"name":"DisabledValidators","qualname":"::traits::validation::DisabledValidators","value":"DisabledValidators","parent":null,"children":[{"krate":0,"index":5046}],"decl_id":null,"docs":" Trait used to check whether a given validator is currently disabled and should not be\n participating in consensus (e.g. because they equivocated).\n","sig":null,"attributes":[{"value":"/ Trait used to check whether a given validator is currently disabled and should not be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710796,"byte_end":710885,"line_start":249,"line_end":249,"column_start":1,"column_end":90}},{"value":"/ participating in consensus (e.g. because they equivocated).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710886,"byte_end":710949,"line_start":250,"line_end":250,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":5046},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":711039,"byte_end":711050,"line_start":253,"line_end":253,"column_start":5,"column_end":16},"name":"is_disabled","qualname":"::traits::validation::DisabledValidators::is_disabled","value":"pub fn is_disabled(u32) -> bool","parent":{"krate":0,"index":5045},"children":[],"decl_id":null,"docs":" Returns true if the given validator is disabled.\n","sig":null,"attributes":[{"value":"/ Returns true if the given validator is disabled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":710982,"byte_end":711034,"line_start":252,"line_end":252,"column_start":2,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":5090},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712055,"byte_end":712066,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"FilterStack","qualname":"::traits::filter::FilterStack","value":"FilterStack<T>: Contains<T>","parent":null,"children":[{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5095},{"krate":0,"index":5096},{"krate":0,"index":5097}],"decl_id":null,"docs":" Trait to add a constraint onto the filter.\n","sig":null,"attributes":[{"value":"/ Trait to add a constraint onto the filter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":711998,"byte_end":712044,"line_start":23,"line_end":23,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":5092},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712132,"byte_end":712137,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"name":"Stack","qualname":"::traits::filter::FilterStack::Stack","value":"type Stack;","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" The type used to archive the stack.\n","sig":null,"attributes":[{"value":"/ The type used to archive the stack.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712086,"byte_end":712125,"line_start":25,"line_end":25,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5093},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712189,"byte_end":712193,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"push","qualname":"::traits::filter::FilterStack::push","value":"pub fn push<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n'static>(impl Fn(&T) -> bool + 'static)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add a new `constraint` onto the filter.\n","sig":null,"attributes":[{"value":"/ Add a new `constraint` onto the filter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712141,"byte_end":712184,"line_start":28,"line_end":28,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":5095},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712330,"byte_end":712333,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"name":"pop","qualname":"::traits::filter::FilterStack::pop","value":"pub fn pop()","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Removes the most recently pushed, and not-yet-popped, constraint from the filter.\n","sig":null,"attributes":[{"value":"/ Removes the most recently pushed, and not-yet-popped, constraint from the filter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712240,"byte_end":712325,"line_start":31,"line_end":31,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":5096},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712423,"byte_end":712427,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"take","qualname":"::traits::filter::FilterStack::take","value":"pub fn take() -> Self::Stack","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Clear the filter, returning a value that may be used later to `restore` it.\n","sig":null,"attributes":[{"value":"/ Clear the filter, returning a value that may be used later to `restore` it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712339,"byte_end":712418,"line_start":34,"line_end":34,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":5097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712509,"byte_end":712516,"line_start":38,"line_end":38,"column_start":5,"column_end":12},"name":"restore","qualname":"::traits::filter::FilterStack::restore","value":"pub fn restore(Self::Stack)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Restore the filter from a previous `take` operation.\n","sig":null,"attributes":[{"value":"/ Restore the filter from a previous `take` operation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712448,"byte_end":712504,"line_start":37,"line_end":37,"column_start":2,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712637,"byte_end":712653,"line_start":42,"line_end":42,"column_start":12,"column_end":28},"name":"FilterStackGuard","qualname":"::traits::filter::FilterStackGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for pushing a constraint to a `FilterStack` and popping when dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for pushing a constraint to a `FilterStack` and popping when dropped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712541,"byte_end":712625,"line_start":41,"line_end":41,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":5103},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712821,"byte_end":712837,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"ClearFilterGuard","qualname":"::traits::filter::ClearFilterGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when\n dropped.\n","sig":null,"attributes":[{"value":"/ Guard type for clearing all pushed constraints from a `FilterStack` and reinstating them when","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712699,"byte_end":712796,"line_start":44,"line_end":44,"column_start":1,"column_end":98}},{"value":"/ dropped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712797,"byte_end":712809,"line_start":45,"line_end":45,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":5112},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713082,"byte_end":713085,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"new","qualname":"<FilterStackGuard<F, T>>::new","value":"pub fn new<impl Fn(&T) -> bool + 'static: Fn(&T) -> bool +\n'static>(impl Fn(&T) -> bool + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712949,"byte_end":713042,"line_start":49,"line_end":49,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713044,"byte_end":713073,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":5121},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713475,"byte_end":713478,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<ClearFilterGuard<F, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when\n this instance is dropped.\n","sig":null,"attributes":[{"value":"/ Create a new instance, adding a new `constraint` onto the filter `T`, and popping it when","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713342,"byte_end":713435,"line_start":64,"line_end":64,"column_start":2,"column_end":95}},{"value":"/ this instance is dropped.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713437,"byte_end":713466,"line_start":65,"line_end":65,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":5126},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713798,"byte_end":713812,"line_start":80,"line_end":80,"column_start":11,"column_end":25},"name":"InstanceFilter","qualname":"::traits::filter::InstanceFilter","value":"InstanceFilter<T>: Sized + Send + Sync","parent":null,"children":[{"krate":0,"index":5128},{"krate":0,"index":5129}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type, given an instance of itself.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type, given an instance of itself.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713688,"byte_end":713787,"line_start":79,"line_end":79,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":5128},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713937,"byte_end":713943,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::filter::InstanceFilter::filter","value":"pub fn filter(&Self, &T) -> bool","parent":{"krate":0,"index":5126},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713840,"byte_end":713932,"line_start":81,"line_end":81,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":5129},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":714047,"byte_end":714058,"line_start":85,"line_end":85,"column_start":5,"column_end":16},"name":"is_superset","qualname":"::traits::filter::InstanceFilter::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":{"krate":0,"index":5126},"children":[],"decl_id":null,"docs":" Determines whether `self` matches at least everything that `_o` does.\n","sig":null,"attributes":[{"value":"/ Determines whether `self` matches at least everything that `_o` does.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713969,"byte_end":714042,"line_start":84,"line_end":84,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":21232},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":716723,"byte_end":716736,"line_start":187,"line_end":187,"column_start":11,"column_end":24},"name":"IntegrityTest","qualname":"::traits::filter::IntegrityTest","value":"IntegrityTest","parent":null,"children":[{"krate":0,"index":21233}],"decl_id":null,"docs":" Type that provide some integrity tests.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21233},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":716844,"byte_end":716858,"line_start":191,"line_end":191,"column_start":5,"column_end":19},"name":"integrity_test","qualname":"::traits::filter::IntegrityTest::integrity_test","value":"pub fn integrity_test()","parent":{"krate":0,"index":21232},"children":[],"decl_id":null,"docs":" Run integrity test.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5240},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721006,"byte_end":721023,"line_start":31,"line_end":31,"column_start":9,"column_end":26},"name":"defensive_prelude","qualname":"::traits::misc::defensive_prelude","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","parent":null,"children":[{"krate":0,"index":5241},{"krate":0,"index":5242},{"krate":0,"index":5245},{"krate":0,"index":5248}],"decl_id":null,"docs":" Prelude module for all defensive traits to be imported at once.\n","sig":null,"attributes":[{"value":"/ Prelude module for all defensive traits to be imported at once.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":720930,"byte_end":720997,"line_start":30,"line_end":30,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":5251},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722165,"byte_end":722174,"line_start":52,"line_end":52,"column_start":11,"column_end":20},"name":"Defensive","qualname":"::traits::misc::Defensive","value":"Defensive<T>","parent":null,"children":[{"krate":0,"index":5253},{"krate":0,"index":5254},{"krate":0,"index":5256},{"krate":0,"index":5257}],"decl_id":null,"docs":" A trait to handle errors and options when you are really sure that a condition must hold, but\n not brave enough to `expect` on it, or a default fallback value makes more sense.","sig":null,"attributes":[{"value":"/ A trait to handle errors and options when you are really sure that a condition must hold, but","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721092,"byte_end":721189,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/ not brave enough to `expect` on it, or a default fallback value makes more sense.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721190,"byte_end":721275,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721276,"byte_end":721279,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This trait mostly focuses on methods that eventually unwrap the inner value. See","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721280,"byte_end":721364,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ [`DefensiveResult`] and [`DefensiveOption`] for methods that specifically apply to the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721365,"byte_end":721455,"line_start":39,"line_end":39,"column_start":1,"column_end":91}},{"value":"/ respective types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721456,"byte_end":721477,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721478,"byte_end":721481,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Each function in this trait will have two side effects, aside from behaving exactly as the name","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721482,"byte_end":721581,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/ would suggest:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721582,"byte_end":721600,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721601,"byte_end":721604,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ 1. It panics on `#[debug_assertions]`, so if the infallible code is reached in any of the tests,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721605,"byte_end":721705,"line_start":45,"line_end":45,"column_start":1,"column_end":101}},{"value":"/    you realize.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721706,"byte_end":721725,"line_start":46,"line_end":46,"column_start":1,"column_end":20}},{"value":"/ 2. It will log an error using the runtime logging system. This might help you detect such bugs","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721726,"byte_end":721824,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/    in production as well. Note that the log message, as of now, are not super expressive. Your","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721825,"byte_end":721923,"line_start":48,"line_end":48,"column_start":1,"column_end":99}},{"value":"/    best shot of fully diagnosing the error would be to infer the block number of which the log","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":721924,"byte_end":722022,"line_start":49,"line_end":49,"column_start":1,"column_end":99}},{"value":"/    message was emitted, then re-execute that block using `check-block` or `try-runtime`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722023,"byte_end":722114,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/    subcommands in substrate client.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722115,"byte_end":722154,"line_start":51,"line_end":51,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5253},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722291,"byte_end":722310,"line_start":55,"line_end":55,"column_start":5,"column_end":24},"name":"defensive_unwrap_or","qualname":"::traits::misc::Defensive::defensive_unwrap_or","value":"pub fn defensive_unwrap_or(Self, T) -> T","parent":{"krate":0,"index":5251},"children":[],"decl_id":null,"docs":" Exactly the same as `unwrap_or`, but it does the defensive warnings explained in the trait\n docs.\n","sig":null,"attributes":[{"value":"/ Exactly the same as `unwrap_or`, but it does the defensive warnings explained in the trait","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722181,"byte_end":722275,"line_start":53,"line_end":53,"column_start":2,"column_end":96}},{"value":"/ docs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722277,"byte_end":722286,"line_start":54,"line_end":54,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":5254},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722450,"byte_end":722474,"line_start":59,"line_end":59,"column_start":5,"column_end":29},"name":"defensive_unwrap_or_else","qualname":"::traits::misc::Defensive::defensive_unwrap_or_else","value":"pub fn defensive_unwrap_or_else<F: FnOnce() -> T>(Self, F) -> T","parent":{"krate":0,"index":5251},"children":[],"decl_id":null,"docs":" Exactly the same as `unwrap_or_else`, but it does the defensive warnings explained in the\n trait docs.\n","sig":null,"attributes":[{"value":"/ Exactly the same as `unwrap_or_else`, but it does the defensive warnings explained in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722335,"byte_end":722428,"line_start":57,"line_end":57,"column_start":2,"column_end":95}},{"value":"/ trait docs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722430,"byte_end":722445,"line_start":58,"line_end":58,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":5256},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722631,"byte_end":722658,"line_start":63,"line_end":63,"column_start":5,"column_end":32},"name":"defensive_unwrap_or_default","qualname":"::traits::misc::Defensive::defensive_unwrap_or_default","value":"pub fn defensive_unwrap_or_default(Self) -> T where T: Default","parent":{"krate":0,"index":5251},"children":[],"decl_id":null,"docs":" Exactly the same as `unwrap_or_default`, but it does the defensive warnings explained in the\n trait docs.\n","sig":null,"attributes":[{"value":"/ Exactly the same as `unwrap_or_default`, but it does the defensive warnings explained in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722513,"byte_end":722609,"line_start":61,"line_end":61,"column_start":2,"column_end":98}},{"value":"/ trait docs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722611,"byte_end":722626,"line_start":62,"line_end":62,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":5257},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723000,"byte_end":723009,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"defensive","qualname":"::traits::misc::Defensive::defensive","value":"pub fn defensive(Self) -> Self","parent":{"krate":0,"index":5251},"children":[],"decl_id":null,"docs":" Does not alter the inner value at all, but it will log warnings if the inner value is `None`\n or `Err`.","sig":null,"attributes":[{"value":"/ Does not alter the inner value at all, but it will log warnings if the inner value is `None`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722693,"byte_end":722789,"line_start":67,"line_end":67,"column_start":2,"column_end":98}},{"value":"/ or `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722791,"byte_end":722804,"line_start":68,"line_end":68,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722806,"byte_end":722809,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ In some ways, this is like  `.defensive_map(|x| x)`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722811,"byte_end":722867,"line_start":70,"line_end":70,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722869,"byte_end":722872,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ This is useful as:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722874,"byte_end":722896,"line_start":72,"line_end":72,"column_start":2,"column_end":24}},{"value":"/ ```nocompile","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722898,"byte_end":722914,"line_start":73,"line_end":73,"column_start":2,"column_end":18}},{"value":"/ if let Some(inner) = maybe_value().defensive() {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722916,"byte_end":722968,"line_start":74,"line_end":74,"column_start":2,"column_end":54}},{"value":"/ \t \t..","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722970,"byte_end":722979,"line_start":75,"line_end":75,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722981,"byte_end":722986,"line_start":76,"line_end":76,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":722988,"byte_end":722995,"line_start":77,"line_end":77,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":5258},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723120,"byte_end":723135,"line_start":82,"line_end":82,"column_start":11,"column_end":26},"name":"DefensiveResult","qualname":"::traits::misc::DefensiveResult","value":"DefensiveResult<T, E>","parent":null,"children":[{"krate":0,"index":5261},{"krate":0,"index":5264},{"krate":0,"index":5268},{"krate":0,"index":5269}],"decl_id":null,"docs":" Subset of methods similar to [`Defensive`] that can only work for a `Result`.\n","sig":null,"attributes":[{"value":"/ Subset of methods similar to [`Defensive`] that can only work for a `Result`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723028,"byte_end":723109,"line_start":81,"line_end":81,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":5261},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723279,"byte_end":723296,"line_start":85,"line_end":85,"column_start":5,"column_end":22},"name":"defensive_map_err","qualname":"::traits::misc::DefensiveResult::defensive_map_err","value":"pub fn defensive_map_err<F, O: FnOnce(E) -> F>(Self, O) -> Result<T, F>","parent":{"krate":0,"index":5258},"children":[],"decl_id":null,"docs":" Defensively map the error into another return type, but you are really sure that this\n conversion should never be needed.\n","sig":null,"attributes":[{"value":"/ Defensively map the error into another return type, but you are really sure that this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723145,"byte_end":723234,"line_start":83,"line_end":83,"column_start":2,"column_end":91}},{"value":"/ conversion should never be needed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723236,"byte_end":723274,"line_start":84,"line_end":84,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5264},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723491,"byte_end":723512,"line_start":89,"line_end":89,"column_start":5,"column_end":26},"name":"defensive_map_or_else","qualname":"::traits::misc::DefensiveResult::defensive_map_or_else","value":"pub fn defensive_map_or_else<U, D: FnOnce(E) -> U, F: FnOnce(T) ->\nU>(Self, D, F) -> U","parent":{"krate":0,"index":5258},"children":[],"decl_id":null,"docs":" Defensively map and unpack the value to something else (`U`), or call the default callback\n if `Err`, which should never happen.\n","sig":null,"attributes":[{"value":"/ Defensively map and unpack the value to something else (`U`), or call the default callback","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723350,"byte_end":723444,"line_start":87,"line_end":87,"column_start":2,"column_end":96}},{"value":"/ if `Err`, which should never happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723446,"byte_end":723486,"line_start":88,"line_end":88,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":5268},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723720,"byte_end":723732,"line_start":93,"line_end":93,"column_start":5,"column_end":17},"name":"defensive_ok","qualname":"::traits::misc::DefensiveResult::defensive_ok","value":"pub fn defensive_ok(Self) -> Option<T>","parent":{"krate":0,"index":5258},"children":[],"decl_id":null,"docs":" Defensively transform this result into an option, discarding the `Err` variant if it\n happens, which should never happen.\n","sig":null,"attributes":[{"value":"/ Defensively transform this result into an option, discarding the `Err` variant if it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723586,"byte_end":723674,"line_start":91,"line_end":91,"column_start":2,"column_end":90}},{"value":"/ happens, which should never happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723676,"byte_end":723715,"line_start":92,"line_end":92,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5269},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723870,"byte_end":723883,"line_start":97,"line_end":97,"column_start":5,"column_end":18},"name":"defensive_map","qualname":"::traits::misc::DefensiveResult::defensive_map","value":"pub fn defensive_map<U, F: FnOnce(T) -> U>(Self, F) -> Result<U, E>","parent":{"krate":0,"index":5258},"children":[],"decl_id":null,"docs":" Exactly the same as `map`, but it prints the appropriate warnings if the value being mapped\n is `Err`.\n","sig":null,"attributes":[{"value":"/ Exactly the same as `map`, but it prints the appropriate warnings if the value being mapped","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723755,"byte_end":723850,"line_start":95,"line_end":95,"column_start":2,"column_end":97}},{"value":"/ is `Err`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723852,"byte_end":723865,"line_start":96,"line_end":96,"column_start":2,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":5272},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724030,"byte_end":724045,"line_start":101,"line_end":101,"column_start":11,"column_end":26},"name":"DefensiveOption","qualname":"::traits::misc::DefensiveOption","value":"DefensiveOption<T>","parent":null,"children":[{"krate":0,"index":5274},{"krate":0,"index":5278},{"krate":0,"index":5281}],"decl_id":null,"docs":" Subset of methods similar to [`Defensive`] that can only work for a `Option`.\n","sig":null,"attributes":[{"value":"/ Subset of methods similar to [`Defensive`] that can only work for a `Option`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":723938,"byte_end":724019,"line_start":100,"line_end":100,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":5274},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724194,"byte_end":724215,"line_start":104,"line_end":104,"column_start":5,"column_end":26},"name":"defensive_map_or_else","qualname":"::traits::misc::DefensiveOption::defensive_map_or_else","value":"pub fn defensive_map_or_else<U, D: FnOnce() -> U, F: FnOnce(T) ->\nU>(Self, D, F) -> U","parent":{"krate":0,"index":5272},"children":[],"decl_id":null,"docs":" Potentially map and unpack the value to something else (`U`), or call the default callback\n if `None`, which should never happen.\n","sig":null,"attributes":[{"value":"/ Potentially map and unpack the value to something else (`U`), or call the default callback","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724052,"byte_end":724146,"line_start":102,"line_end":102,"column_start":2,"column_end":96}},{"value":"/ if `None`, which should never happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724148,"byte_end":724189,"line_start":103,"line_end":103,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":5278},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724343,"byte_end":724363,"line_start":107,"line_end":107,"column_start":5,"column_end":25},"name":"defensive_ok_or_else","qualname":"::traits::misc::DefensiveOption::defensive_ok_or_else","value":"pub fn defensive_ok_or_else<E, F: FnOnce() -> E>(Self, F) -> Result<T, E>","parent":{"krate":0,"index":5272},"children":[],"decl_id":null,"docs":" Defensively transform this option to a result.\n","sig":null,"attributes":[{"value":"/ Defensively transform this option to a result.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724288,"byte_end":724338,"line_start":106,"line_end":106,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":5281},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724534,"byte_end":724547,"line_start":111,"line_end":111,"column_start":5,"column_end":18},"name":"defensive_map","qualname":"::traits::misc::DefensiveOption::defensive_map","value":"pub fn defensive_map<U, F: FnOnce(T) -> U>(Self, F) -> Option<U>","parent":{"krate":0,"index":5272},"children":[],"decl_id":null,"docs":" Exactly the same as `map`, but it prints the appropriate warnings if the value being mapped\n is `None`.\n","sig":null,"attributes":[{"value":"/ Exactly the same as `map`, but it prints the appropriate warnings if the value being mapped","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724418,"byte_end":724513,"line_start":109,"line_end":109,"column_start":2,"column_end":97}},{"value":"/ is `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724515,"byte_end":724529,"line_start":110,"line_end":110,"column_start":2,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":5329},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729680,"byte_end":729699,"line_start":357,"line_end":357,"column_start":11,"column_end":30},"name":"DefensiveSaturating","qualname":"::traits::misc::DefensiveSaturating","value":"DefensiveSaturating","parent":null,"children":[{"krate":0,"index":5330},{"krate":0,"index":5331},{"krate":0,"index":5332}],"decl_id":null,"docs":" A variant of [`Defensive`] with the same rationale, for the arithmetic operations where in\n case an infallible operation fails, it saturates.\n","sig":null,"attributes":[{"value":"/ A variant of [`Defensive`] with the same rationale, for the arithmetic operations where in","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729521,"byte_end":729615,"line_start":355,"line_end":355,"column_start":1,"column_end":95}},{"value":"/ case an infallible operation fails, it saturates.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729616,"byte_end":729669,"line_start":356,"line_end":356,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5330},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729747,"byte_end":729771,"line_start":359,"line_end":359,"column_start":5,"column_end":29},"name":"defensive_saturating_add","qualname":"::traits::misc::DefensiveSaturating::defensive_saturating_add","value":"pub fn defensive_saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":5329},"children":[],"decl_id":null,"docs":" Add `self` and `other` defensively.\n","sig":null,"attributes":[{"value":"/ Add `self` and `other` defensively.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729703,"byte_end":729742,"line_start":358,"line_end":358,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5331},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729851,"byte_end":729875,"line_start":361,"line_end":361,"column_start":5,"column_end":29},"name":"defensive_saturating_sub","qualname":"::traits::misc::DefensiveSaturating::defensive_saturating_sub","value":"pub fn defensive_saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":5329},"children":[],"decl_id":null,"docs":" Subtract `other` from `self` defensively.\n","sig":null,"attributes":[{"value":"/ Subtract `other` from `self` defensively.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729801,"byte_end":729846,"line_start":360,"line_end":360,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5332},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729954,"byte_end":729978,"line_start":363,"line_end":363,"column_start":5,"column_end":29},"name":"defensive_saturating_mul","qualname":"::traits::misc::DefensiveSaturating::defensive_saturating_mul","value":"pub fn defensive_saturating_mul(Self, Self) -> Self","parent":{"krate":0,"index":5329},"children":[],"decl_id":null,"docs":" Multiply `self` and `other` defensively.\n","sig":null,"attributes":[{"value":"/ Multiply `self` and `other` defensively.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":729905,"byte_end":729949,"line_start":362,"line_end":362,"column_start":2,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":5341},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730718,"byte_end":730728,"line_start":381,"line_end":381,"column_start":11,"column_end":21},"name":"TryCollect","qualname":"::traits::misc::TryCollect","value":"TryCollect<C>","parent":null,"children":[{"krate":0,"index":5343},{"krate":0,"index":5344}],"decl_id":null,"docs":" Try and collect into a collection `C`.\n","sig":null,"attributes":[{"value":"/ Try and collect into a collection `C`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730665,"byte_end":730707,"line_start":380,"line_end":380,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":5343},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730740,"byte_end":730745,"line_start":382,"line_end":382,"column_start":7,"column_end":12},"name":"Error","qualname":"::traits::misc::TryCollect::Error","value":"type Error;","parent":{"krate":0,"index":5341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5344},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730987,"byte_end":730998,"line_start":387,"line_end":387,"column_start":5,"column_end":16},"name":"try_collect","qualname":"::traits::misc::TryCollect::try_collect","value":"pub fn try_collect(Self) -> Result<C, Self::Error>","parent":{"krate":0,"index":5341},"children":[],"decl_id":null,"docs":" Consume self and try to collect the results into `C`.","sig":null,"attributes":[{"value":"/ Consume self and try to collect the results into `C`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730748,"byte_end":730805,"line_start":383,"line_end":383,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730807,"byte_end":730810,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ This is useful in preventing the undesirable `.collect().try_into()` call chain on","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730812,"byte_end":730898,"line_start":385,"line_end":385,"column_start":2,"column_end":88}},{"value":"/ collections that need to be converted into a bounded type (e.g. `BoundedVec`).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730900,"byte_end":730982,"line_start":386,"line_end":386,"column_start":2,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":5345},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731092,"byte_end":731095,"line_start":391,"line_end":391,"column_start":11,"column_end":14},"name":"Len","qualname":"::traits::misc::Len","value":"Len","parent":null,"children":[{"krate":0,"index":5346}],"decl_id":null,"docs":" Anything that can have a `::len()` method.\n","sig":null,"attributes":[{"value":"/ Anything that can have a `::len()` method.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731035,"byte_end":731081,"line_start":390,"line_end":390,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5346},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731139,"byte_end":731142,"line_start":393,"line_end":393,"column_start":5,"column_end":8},"name":"len","qualname":"::traits::misc::Len::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":5345},"children":[],"decl_id":null,"docs":" Return the length of data type.\n","sig":null,"attributes":[{"value":"/ Return the length of data type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731099,"byte_end":731134,"line_start":392,"line_end":392,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":5350},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731445,"byte_end":731448,"line_start":408,"line_end":408,"column_start":11,"column_end":14},"name":"Get","qualname":"::traits::misc::Get","value":"Get<T>","parent":null,"children":[{"krate":0,"index":5352}],"decl_id":null,"docs":" A trait for querying a single value from a type.","sig":null,"attributes":[{"value":"/ A trait for querying a single value from a type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731327,"byte_end":731379,"line_start":405,"line_end":405,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731380,"byte_end":731383,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ It is not required that the value is constant.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731384,"byte_end":731434,"line_start":407,"line_end":407,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":5352},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731489,"byte_end":731492,"line_start":410,"line_end":410,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::misc::Get::get","value":"pub fn get() -> T","parent":{"krate":0,"index":5350},"children":[],"decl_id":null,"docs":" Return the current value.\n","sig":null,"attributes":[{"value":"/ Return the current value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731455,"byte_end":731484,"line_start":409,"line_end":409,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5356},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731663,"byte_end":731673,"line_start":420,"line_end":420,"column_start":12,"column_end":22},"name":"GetDefault","qualname":"::traits::misc::GetDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implement Get by returning Default for any type that implements Default.\n","sig":null,"attributes":[{"value":"/ Implement Get by returning Default for any type that implements Default.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731575,"byte_end":731651,"line_start":419,"line_end":419,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":21767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732079,"byte_end":732088,"line_start":444,"line_end":444,"column_start":17,"column_end":26},"name":"ConstBool","qualname":"::traits::misc::ConstBool","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21779},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732113,"byte_end":732120,"line_start":445,"line_end":445,"column_start":17,"column_end":24},"name":"ConstU8","qualname":"::traits::misc::ConstU8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21791},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732143,"byte_end":732151,"line_start":446,"line_end":446,"column_start":17,"column_end":25},"name":"ConstU16","qualname":"::traits::misc::ConstU16","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21803},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732175,"byte_end":732183,"line_start":447,"line_end":447,"column_start":17,"column_end":25},"name":"ConstU32","qualname":"::traits::misc::ConstU32","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21815},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732207,"byte_end":732215,"line_start":448,"line_end":448,"column_start":17,"column_end":25},"name":"ConstU64","qualname":"::traits::misc::ConstU64","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21827},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732239,"byte_end":732248,"line_start":449,"line_end":449,"column_start":17,"column_end":26},"name":"ConstU128","qualname":"::traits::misc::ConstU128","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21839},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732273,"byte_end":732280,"line_start":450,"line_end":450,"column_start":17,"column_end":24},"name":"ConstI8","qualname":"::traits::misc::ConstI8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21851},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732303,"byte_end":732311,"line_start":451,"line_end":451,"column_start":17,"column_end":25},"name":"ConstI16","qualname":"::traits::misc::ConstI16","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732335,"byte_end":732343,"line_start":452,"line_end":452,"column_start":17,"column_end":25},"name":"ConstI32","qualname":"::traits::misc::ConstI32","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21875},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732367,"byte_end":732375,"line_start":453,"line_end":453,"column_start":17,"column_end":25},"name":"ConstI64","qualname":"::traits::misc::ConstI64","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":21887},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732399,"byte_end":732408,"line_start":454,"line_end":454,"column_start":17,"column_end":26},"name":"ConstI128","qualname":"::traits::misc::ConstI128","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5362},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732522,"byte_end":732529,"line_start":457,"line_end":457,"column_start":11,"column_end":18},"name":"TryDrop","qualname":"::traits::misc::TryDrop","value":"TryDrop: Sized","parent":null,"children":[{"krate":0,"index":5363}],"decl_id":null,"docs":" A type for which some values make sense to be able to drop without further consideration.\n","sig":null,"attributes":[{"value":"/ A type for which some values make sense to be able to drop without further consideration.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732418,"byte_end":732511,"line_start":456,"line_end":456,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":5363},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732625,"byte_end":732633,"line_start":459,"line_end":459,"column_start":5,"column_end":13},"name":"try_drop","qualname":"::traits::misc::TryDrop::try_drop","value":"pub fn try_drop(Self) -> Result<(), Self>","parent":{"krate":0,"index":5362},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its value represents \"no-operation\".\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its value represents \"no-operation\".","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732540,"byte_end":732620,"line_start":458,"line_end":458,"column_start":2,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5369},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733005,"byte_end":733009,"line_start":473,"line_end":473,"column_start":2,"column_end":6},"name":"None","qualname":"::traits::misc::SameOrOther::None","value":"SameOrOther::None","parent":{"krate":0,"index":5366},"children":[],"decl_id":null,"docs":" No item.\n","sig":null,"attributes":[{"value":"/ No item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732991,"byte_end":733003,"line_start":472,"line_end":472,"column_start":2,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5371},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733097,"byte_end":733101,"line_start":475,"line_end":475,"column_start":2,"column_end":6},"name":"Same","qualname":"::traits::misc::SameOrOther::Same","value":"SameOrOther::Same(A)","parent":{"krate":0,"index":5366},"children":[],"decl_id":null,"docs":" An item of the same type as the `Self` on which the return function was called.\n","sig":null,"attributes":[{"value":"/ An item of the same type as the `Self` on which the return function was called.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733012,"byte_end":733095,"line_start":474,"line_end":474,"column_start":2,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5374},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733196,"byte_end":733201,"line_start":477,"line_end":477,"column_start":2,"column_end":7},"name":"Other","qualname":"::traits::misc::SameOrOther::Other","value":"SameOrOther::Other(B)","parent":{"krate":0,"index":5366},"children":[],"decl_id":null,"docs":" An item of the opposite type to the `Self` on which the return function was called.\n","sig":null,"attributes":[{"value":"/ An item of the opposite type to the `Self` on which the return function was called.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733107,"byte_end":733194,"line_start":476,"line_end":476,"column_start":2,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":5366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732970,"byte_end":732981,"line_start":471,"line_end":471,"column_start":10,"column_end":21},"name":"SameOrOther","qualname":"::traits::misc::SameOrOther","value":"pub enum SameOrOther<A, B> { None, Same(A), Other(B), }","parent":null,"children":[{"krate":0,"index":5369},{"krate":0,"index":5371},{"krate":0,"index":5374}],"decl_id":null,"docs":" Return type used when we need to return one of two items, each of the opposite direction or\n sign, with one (`Same`) being of the same type as the `self` or primary argument of the function\n that returned it.\n","sig":null,"attributes":[{"value":"/ Return type used when we need to return one of two items, each of the opposite direction or","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732742,"byte_end":732837,"line_start":468,"line_end":468,"column_start":1,"column_end":96}},{"value":"/ sign, with one (`Same`) being of the same type as the `self` or primary argument of the function","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732838,"byte_end":732938,"line_start":469,"line_end":469,"column_start":1,"column_end":101}},{"value":"/ that returned it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732939,"byte_end":732960,"line_start":470,"line_end":470,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":5384},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733522,"byte_end":733530,"line_start":493,"line_end":493,"column_start":9,"column_end":17},"name":"try_same","qualname":"<SameOrOther<A, B>>::try_same","value":"pub fn try_same(Self) -> Result<A, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Ok` with the inner value of `Same` if `self` is that, otherwise returns `Err` with\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns `Ok` with the inner value of `Same` if `self` is that, otherwise returns `Err` with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733405,"byte_end":733500,"line_start":491,"line_end":491,"column_start":2,"column_end":97}},{"value":"/ `self`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733502,"byte_end":733513,"line_start":492,"line_end":492,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":5385},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733750,"byte_end":733759,"line_start":502,"line_end":502,"column_start":9,"column_end":18},"name":"try_other","qualname":"<SameOrOther<A, B>>::try_other","value":"pub fn try_other(Self) -> Result<B, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Ok` with the inner value of `Other` if `self` is that, otherwise returns `Err` with\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns `Ok` with the inner value of `Other` if `self` is that, otherwise returns `Err` with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733632,"byte_end":733728,"line_start":500,"line_end":500,"column_start":2,"column_end":98}},{"value":"/ `self`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733730,"byte_end":733741,"line_start":501,"line_end":501,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":5386},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733945,"byte_end":733953,"line_start":510,"line_end":510,"column_start":9,"column_end":17},"name":"try_none","qualname":"<SameOrOther<A, B>>::try_none","value":"pub fn try_none(Self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Ok` if `self` is `None`, otherwise returns `Err` with `self`.\n","sig":null,"attributes":[{"value":"/ Returns `Ok` if `self` is `None`, otherwise returns `Err` with `self`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733862,"byte_end":733936,"line_start":509,"line_end":509,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5387},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734061,"byte_end":734065,"line_start":517,"line_end":517,"column_start":9,"column_end":13},"name":"same","qualname":"<SameOrOther<A, B>>::same","value":"pub fn same(Self) -> Result<A, B> where A: Default","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5388},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734255,"byte_end":734260,"line_start":528,"line_end":528,"column_start":9,"column_end":14},"name":"other","qualname":"<SameOrOther<A, B>>::other","value":"pub fn other(Self) -> Result<B, A> where B: Default","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":21893},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734553,"byte_end":734565,"line_start":542,"line_end":542,"column_start":11,"column_end":23},"name":"OnNewAccount","qualname":"::traits::misc::OnNewAccount","value":"OnNewAccount<AccountId>","parent":null,"children":[{"krate":0,"index":21895}],"decl_id":null,"docs":" Handler for when a new account has been created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21895},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734629,"byte_end":734643,"line_start":544,"line_end":544,"column_start":5,"column_end":19},"name":"on_new_account","qualname":"::traits::misc::OnNewAccount::on_new_account","value":"pub fn on_new_account(&AccountId)","parent":{"krate":0,"index":21893},"children":[],"decl_id":null,"docs":" A new account `who` has been registered.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22454},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734767,"byte_end":734782,"line_start":549,"line_end":549,"column_start":11,"column_end":26},"name":"OnKilledAccount","qualname":"::traits::misc::OnKilledAccount","value":"OnKilledAccount<AccountId>","parent":null,"children":[{"krate":0,"index":22456}],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22456},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734847,"byte_end":734864,"line_start":551,"line_end":551,"column_start":5,"column_end":22},"name":"on_killed_account","qualname":"::traits::misc::OnKilledAccount::on_killed_account","value":"pub fn on_killed_account(&AccountId)","parent":{"krate":0,"index":22454},"children":[],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5389},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734956,"byte_end":734970,"line_start":555,"line_end":555,"column_start":11,"column_end":25},"name":"HandleLifetime","qualname":"::traits::misc::HandleLifetime","value":"HandleLifetime<T>","parent":null,"children":[{"krate":0,"index":5391},{"krate":0,"index":5392}],"decl_id":null,"docs":" A simple, generic one-parameter event notifier/handler.\n","sig":null,"attributes":[{"value":"/ A simple, generic one-parameter event notifier/handler.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734886,"byte_end":734945,"line_start":554,"line_end":554,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5391},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735009,"byte_end":735016,"line_start":557,"line_end":557,"column_start":5,"column_end":12},"name":"created","qualname":"::traits::misc::HandleLifetime::created","value":"pub fn created(&T) -> Result<(), DispatchError>","parent":{"krate":0,"index":5389},"children":[],"decl_id":null,"docs":" An account was created.\n","sig":null,"attributes":[{"value":"/ An account was created.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":734977,"byte_end":735004,"line_start":556,"line_end":556,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5392},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735101,"byte_end":735107,"line_start":562,"line_end":562,"column_start":5,"column_end":11},"name":"killed","qualname":"::traits::misc::HandleLifetime::killed","value":"pub fn killed(&T) -> Result<(), DispatchError>","parent":{"krate":0,"index":5389},"children":[],"decl_id":null,"docs":" An account was killed.\n","sig":null,"attributes":[{"value":"/ An account was killed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735070,"byte_end":735096,"line_start":561,"line_end":561,"column_start":2,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":5395},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735209,"byte_end":735213,"line_start":569,"line_end":569,"column_start":11,"column_end":15},"name":"Time","qualname":"::traits::misc::Time","value":"Time","parent":null,"children":[{"krate":0,"index":5396},{"krate":0,"index":5397}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5396},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735222,"byte_end":735228,"line_start":570,"line_end":570,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::misc::Time::Moment","value":"type Moment: sp_arithmetic::traits::AtLeast32Bit + Parameter + Default + Copy;","parent":{"krate":0,"index":5395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5397},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735301,"byte_end":735304,"line_start":572,"line_end":572,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::misc::Time::now","value":"pub fn now() -> Self::Moment","parent":{"krate":0,"index":5395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5398},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735371,"byte_end":735379,"line_start":576,"line_end":576,"column_start":11,"column_end":19},"name":"UnixTime","qualname":"::traits::misc::UnixTime","value":"UnixTime","parent":null,"children":[{"krate":0,"index":5399}],"decl_id":null,"docs":" Trait to deal with unix time.\n","sig":null,"attributes":[{"value":"/ Trait to deal with unix time.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735327,"byte_end":735360,"line_start":575,"line_end":575,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5399},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735439,"byte_end":735442,"line_start":578,"line_end":578,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::misc::UnixTime::now","value":"pub fn now() -> core::time::Duration","parent":{"krate":0,"index":5398},"children":[],"decl_id":null,"docs":" Return duration since `SystemTime::UNIX_EPOCH`.\n","sig":null,"attributes":[{"value":"/ Return duration since `SystemTime::UNIX_EPOCH`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735383,"byte_end":735434,"line_start":577,"line_end":577,"column_start":2,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":5400},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735626,"byte_end":735632,"line_start":584,"line_end":584,"column_start":11,"column_end":17},"name":"IsType","qualname":"::traits::misc::IsType","value":"IsType<T>: Into<T> + From<T>","parent":null,"children":[{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5405}],"decl_id":null,"docs":" Trait to be used when types are exactly same.","sig":null,"attributes":[{"value":"/ Trait to be used when types are exactly same.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735473,"byte_end":735522,"line_start":581,"line_end":581,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735523,"byte_end":735526,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ This allow to convert back and forth from type, a reference and a mutable reference.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735527,"byte_end":735615,"line_start":583,"line_end":583,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":5402},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735682,"byte_end":735690,"line_start":586,"line_end":586,"column_start":5,"column_end":13},"name":"from_ref","qualname":"::traits::misc::IsType::from_ref","value":"pub fn from_ref(&T) -> &Self","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735658,"byte_end":735677,"line_start":585,"line_end":585,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":5403},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735734,"byte_end":735742,"line_start":589,"line_end":589,"column_start":5,"column_end":13},"name":"into_ref","qualname":"::traits::misc::IsType::into_ref","value":"pub fn into_ref(&Self) -> &T","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Cast reference.\n","sig":null,"attributes":[{"value":"/ Cast reference.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735710,"byte_end":735729,"line_start":588,"line_end":588,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":5404},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735791,"byte_end":735799,"line_start":592,"line_end":592,"column_start":5,"column_end":13},"name":"from_mut","qualname":"::traits::misc::IsType::from_mut","value":"pub fn from_mut(&mut T) -> &mut Self","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735759,"byte_end":735786,"line_start":591,"line_end":591,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5405},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735859,"byte_end":735867,"line_start":595,"line_end":595,"column_start":5,"column_end":13},"name":"into_mut","qualname":"::traits::misc::IsType::into_mut","value":"pub fn into_mut(&mut Self) -> &mut T","parent":{"krate":0,"index":5400},"children":[],"decl_id":null,"docs":" Cast mutable reference.\n","sig":null,"attributes":[{"value":"/ Cast mutable reference.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735827,"byte_end":735854,"line_start":594,"line_end":594,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":5412},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737226,"byte_end":737235,"line_start":655,"line_end":655,"column_start":11,"column_end":20},"name":"IsSubType","qualname":"::traits::misc::IsSubType","value":"IsSubType<T>","parent":null,"children":[{"krate":0,"index":5414}],"decl_id":null,"docs":" Something that can be checked to be a of sub type `T`.","sig":null,"attributes":[{"value":"/ Something that can be checked to be a of sub type `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736090,"byte_end":736148,"line_start":613,"line_end":613,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736149,"byte_end":736152,"line_start":614,"line_end":614,"column_start":1,"column_end":4}},{"value":"/ This is useful for enums where each variant encapsulates a different sub type, and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736153,"byte_end":736239,"line_start":615,"line_end":615,"column_start":1,"column_end":87}},{"value":"/ you need access to these sub types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736240,"byte_end":736279,"line_start":616,"line_end":616,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736280,"byte_end":736283,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ For example, in FRAME, this trait is implemented for the runtime `Call` enum. Pallets use this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736284,"byte_end":736382,"line_start":618,"line_end":618,"column_start":1,"column_end":99}},{"value":"/ to check if a certain call is an instance of the local pallet's `Call` enum.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736383,"byte_end":736463,"line_start":619,"line_end":619,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736464,"byte_end":736467,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736468,"byte_end":736481,"line_start":621,"line_end":621,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736482,"byte_end":736485,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736486,"byte_end":736493,"line_start":623,"line_end":623,"column_start":1,"column_end":8}},{"value":"/ # use frame_support::traits::IsSubType;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736494,"byte_end":736537,"line_start":624,"line_end":624,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736538,"byte_end":736541,"line_start":625,"line_end":625,"column_start":1,"column_end":4}},{"value":"/ enum Test {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736542,"byte_end":736557,"line_start":626,"line_end":626,"column_start":1,"column_end":16}},{"value":"/     String(String),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736558,"byte_end":736581,"line_start":627,"line_end":627,"column_start":1,"column_end":24}},{"value":"/     U32(u32),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736582,"byte_end":736599,"line_start":628,"line_end":628,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736600,"byte_end":736605,"line_start":629,"line_end":629,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736606,"byte_end":736609,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ impl IsSubType<String> for Test {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736610,"byte_end":736647,"line_start":631,"line_end":631,"column_start":1,"column_end":38}},{"value":"/     fn is_sub_type(&self) -> Option<&String> {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736648,"byte_end":736698,"line_start":632,"line_end":632,"column_start":1,"column_end":51}},{"value":"/         match self {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736699,"byte_end":736723,"line_start":633,"line_end":633,"column_start":1,"column_end":25}},{"value":"/             Self::String(ref r) => Some(r),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736724,"byte_end":736771,"line_start":634,"line_end":634,"column_start":1,"column_end":48}},{"value":"/             _ => None,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736772,"byte_end":736798,"line_start":635,"line_end":635,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736799,"byte_end":736812,"line_start":636,"line_end":636,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736813,"byte_end":736822,"line_start":637,"line_end":637,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736823,"byte_end":736828,"line_start":638,"line_end":638,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736829,"byte_end":736832,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ impl IsSubType<u32> for Test {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736833,"byte_end":736867,"line_start":640,"line_end":640,"column_start":1,"column_end":35}},{"value":"/     fn is_sub_type(&self) -> Option<&u32> {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736868,"byte_end":736915,"line_start":641,"line_end":641,"column_start":1,"column_end":48}},{"value":"/         match self {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736916,"byte_end":736940,"line_start":642,"line_end":642,"column_start":1,"column_end":25}},{"value":"/             Self::U32(ref r) => Some(r),","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736941,"byte_end":736985,"line_start":643,"line_end":643,"column_start":1,"column_end":45}},{"value":"/             _ => None,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":736986,"byte_end":737012,"line_start":644,"line_end":644,"column_start":1,"column_end":27}},{"value":"/         }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737013,"byte_end":737026,"line_start":645,"line_end":645,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737027,"byte_end":737036,"line_start":646,"line_end":646,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737037,"byte_end":737042,"line_start":647,"line_end":647,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737043,"byte_end":737046,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737047,"byte_end":737062,"line_start":649,"line_end":649,"column_start":1,"column_end":16}},{"value":"/     let data = Test::String(\"test\".into());","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737063,"byte_end":737110,"line_start":650,"line_end":650,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737111,"byte_end":737114,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(\"test\", IsSubType::<String>::is_sub_type(&data).unwrap().as_str());","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737115,"byte_end":737201,"line_start":652,"line_end":652,"column_start":1,"column_end":87}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737202,"byte_end":737207,"line_start":653,"line_end":653,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737208,"byte_end":737215,"line_start":654,"line_end":654,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5414},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737310,"byte_end":737321,"line_start":657,"line_end":657,"column_start":5,"column_end":16},"name":"is_sub_type","qualname":"::traits::misc::IsSubType::is_sub_type","value":"pub fn is_sub_type(&Self) -> Option<&T>","parent":{"krate":0,"index":5412},"children":[],"decl_id":null,"docs":" Returns `Some(_)` if `self` is an instance of sub type `T`.\n","sig":null,"attributes":[{"value":"/ Returns `Some(_)` if `self` is an instance of sub type `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737242,"byte_end":737305,"line_start":656,"line_end":656,"column_start":2,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":5415},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737573,"byte_end":737585,"line_start":664,"line_end":664,"column_start":11,"column_end":23},"name":"ExecuteBlock","qualname":"::traits::misc::ExecuteBlock","value":"ExecuteBlock<Block: BlockT>","parent":null,"children":[{"krate":0,"index":5417}],"decl_id":null,"docs":" Something that can execute a given block.","sig":null,"attributes":[{"value":"/ Something that can execute a given block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737347,"byte_end":737392,"line_start":660,"line_end":660,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737393,"byte_end":737396,"line_start":661,"line_end":661,"column_start":1,"column_end":4}},{"value":"/ Executing a block means that all extrinsics in a given block will be executed and the resulting","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737397,"byte_end":737496,"line_start":662,"line_end":662,"column_start":1,"column_end":100}},{"value":"/ header will be checked against the header of the given block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737497,"byte_end":737562,"line_start":663,"line_end":663,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5417},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737868,"byte_end":737881,"line_start":673,"line_end":673,"column_start":5,"column_end":18},"name":"execute_block","qualname":"::traits::misc::ExecuteBlock::execute_block","value":"pub fn execute_block(Block)","parent":{"krate":0,"index":5415},"children":[],"decl_id":null,"docs":" Execute the given `block`.","sig":null,"attributes":[{"value":"/ Execute the given `block`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737604,"byte_end":737634,"line_start":665,"line_end":665,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737636,"byte_end":737639,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ This will execute all extrinsics in the block and check that the resulting header is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737641,"byte_end":737729,"line_start":667,"line_end":667,"column_start":2,"column_end":90}},{"value":"/ correct.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737731,"byte_end":737743,"line_start":668,"line_end":668,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737745,"byte_end":737748,"line_start":669,"line_end":669,"column_start":2,"column_end":5}},{"value":"/ # Panic","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737750,"byte_end":737761,"line_start":670,"line_end":670,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737763,"byte_end":737766,"line_start":671,"line_end":671,"column_start":2,"column_end":5}},{"value":"/ Panics when an extrinsics panics or the resulting header doesn't match the expected header.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737768,"byte_end":737863,"line_start":672,"line_end":672,"column_start":2,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":5418},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737968,"byte_end":737980,"line_start":677,"line_end":677,"column_start":11,"column_end":23},"name":"PrivilegeCmp","qualname":"::traits::misc::PrivilegeCmp","value":"PrivilegeCmp<Origin>","parent":null,"children":[{"krate":0,"index":5420}],"decl_id":null,"docs":" Something that can compare privileges of two origins.\n","sig":null,"attributes":[{"value":"/ Something that can compare privileges of two origins.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737900,"byte_end":737957,"line_start":676,"line_end":676,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5420},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738193,"byte_end":738206,"line_start":683,"line_end":683,"column_start":5,"column_end":18},"name":"cmp_privilege","qualname":"::traits::misc::PrivilegeCmp::cmp_privilege","value":"pub fn cmp_privilege(&Origin, &Origin) -> Option<Ordering>","parent":{"krate":0,"index":5418},"children":[],"decl_id":null,"docs":" Compare the `left` to the `right` origin.","sig":null,"attributes":[{"value":"/ Compare the `left` to the `right` origin.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":737992,"byte_end":738037,"line_start":678,"line_end":678,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738039,"byte_end":738042,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ The returned ordering should be from the pov of the `left` origin.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738044,"byte_end":738114,"line_start":680,"line_end":680,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738116,"byte_end":738119,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ Should return `None` when it can not compare the given origins.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738121,"byte_end":738188,"line_start":682,"line_end":682,"column_start":2,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":5421},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738420,"byte_end":738438,"line_start":689,"line_end":689,"column_start":12,"column_end":30},"name":"EqualPrivilegeOnly","qualname":"::traits::misc::EqualPrivilegeOnly","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of [`PrivilegeCmp`] that only checks for equal origins.","sig":null,"attributes":[{"value":"/ Implementation of [`PrivilegeCmp`] that only checks for equal origins.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738262,"byte_end":738336,"line_start":686,"line_end":686,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738337,"byte_end":738340,"line_start":687,"line_end":687,"column_start":1,"column_end":4}},{"value":"/ This means it will either return [`Ordering::Equal`] or `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738341,"byte_end":738408,"line_start":688,"line_end":688,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":23015},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739180,"byte_end":739194,"line_start":707,"line_end":707,"column_start":11,"column_end":25},"name":"OffchainWorker","qualname":"::traits::misc::OffchainWorker","value":"OffchainWorker<BlockNumber>","parent":null,"children":[{"krate":0,"index":23017}],"decl_id":null,"docs":" Off-chain computation trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23017},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739550,"byte_end":739565,"line_start":714,"line_end":714,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::misc::OffchainWorker::offchain_worker","value":"pub fn offchain_worker(BlockNumber)","parent":{"krate":0,"index":23015},"children":[],"decl_id":null,"docs":" This function is being called after every block import (when fully synced).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5427},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739723,"byte_end":739730,"line_start":719,"line_end":719,"column_start":12,"column_end":19},"name":"Backing","qualname":"::traits::misc::Backing","value":"Backing { approvals, eligible }","parent":null,"children":[{"krate":0,"index":5428},{"krate":0,"index":5429}],"decl_id":null,"docs":" Some amount of backing from a group. The precise definition of what it means to \"back\" something\n is left flexible.\n","sig":null,"attributes":[{"value":"/ Some amount of backing from a group. The precise definition of what it means to \"back\" something","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739589,"byte_end":739689,"line_start":717,"line_end":717,"column_start":1,"column_end":101}},{"value":"/ is left flexible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739690,"byte_end":739711,"line_start":718,"line_end":718,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":5428},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739801,"byte_end":739810,"line_start":721,"line_end":721,"column_start":6,"column_end":15},"name":"approvals","qualname":"::traits::misc::Backing::approvals","value":"u32","parent":{"krate":0,"index":5427},"children":[],"decl_id":null,"docs":" The number of members of the group that back some motion.\n","sig":null,"attributes":[{"value":"/ The number of members of the group that back some motion.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739734,"byte_end":739795,"line_start":720,"line_end":720,"column_start":2,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5429},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739861,"byte_end":739869,"line_start":723,"line_end":723,"column_start":6,"column_end":14},"name":"eligible","qualname":"::traits::misc::Backing::eligible","value":"u32","parent":{"krate":0,"index":5427},"children":[],"decl_id":null,"docs":" The total count of group members.\n","sig":null,"attributes":[{"value":"/ The total count of group members.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739818,"byte_end":739855,"line_start":722,"line_end":722,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":5430},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739936,"byte_end":739946,"line_start":727,"line_end":727,"column_start":11,"column_end":21},"name":"GetBacking","qualname":"::traits::misc::GetBacking","value":"GetBacking","parent":null,"children":[{"krate":0,"index":5431}],"decl_id":null,"docs":" Retrieve the backing from an object's ref.\n","sig":null,"attributes":[{"value":"/ Retrieve the backing from an object's ref.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739879,"byte_end":739925,"line_start":726,"line_end":726,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740088,"byte_end":740099,"line_start":730,"line_end":730,"column_start":5,"column_end":16},"name":"get_backing","qualname":"::traits::misc::GetBacking::get_backing","value":"pub fn get_backing(&Self) -> Option<Backing>","parent":{"krate":0,"index":5430},"children":[],"decl_id":null,"docs":" Returns `Some` `Backing` if `self` represents a fractional/groupwise backing of some\n implicit motion. `None` if it does not.\n","sig":null,"attributes":[{"value":"/ Returns `Some` `Backing` if `self` represents a fractional/groupwise backing of some","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":739950,"byte_end":740038,"line_start":728,"line_end":728,"column_start":2,"column_end":90}},{"value":"/ implicit motion. `None` if it does not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740040,"byte_end":740083,"line_start":729,"line_end":729,"column_start":2,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":5432},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740291,"byte_end":740314,"line_start":736,"line_end":736,"column_start":11,"column_end":34},"name":"EnsureInherentsAreFirst","qualname":"::traits::misc::EnsureInherentsAreFirst","value":"EnsureInherentsAreFirst<Block>","parent":null,"children":[{"krate":0,"index":5434}],"decl_id":null,"docs":" A trait to ensure the inherent are before non-inherent in a block.","sig":null,"attributes":[{"value":"/ A trait to ensure the inherent are before non-inherent in a block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740130,"byte_end":740200,"line_start":733,"line_end":733,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740201,"byte_end":740204,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ This is typically implemented on runtime, through `construct_runtime!`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740205,"byte_end":740280,"line_start":735,"line_end":735,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740506,"byte_end":740532,"line_start":740,"line_end":740,"column_start":5,"column_end":31},"name":"ensure_inherents_are_first","qualname":"::traits::misc::EnsureInherentsAreFirst::ensure_inherents_are_first","value":"pub fn ensure_inherents_are_first(&Block) -> Result<(), u32>","parent":{"krate":0,"index":5432},"children":[],"decl_id":null,"docs":" Ensure the position of inherent is correct, i.e. they are before non-inherents.","sig":null,"attributes":[{"value":"/ Ensure the position of inherent is correct, i.e. they are before non-inherents.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740325,"byte_end":740408,"line_start":737,"line_end":737,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740410,"byte_end":740413,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ On error return the index of the inherent with invalid position (counting from 0).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740415,"byte_end":740501,"line_start":739,"line_end":739,"column_start":2,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":5435},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740634,"byte_end":740647,"line_start":744,"line_end":744,"column_start":11,"column_end":24},"name":"ExtrinsicCall","qualname":"::traits::misc::ExtrinsicCall","value":"ExtrinsicCall: sp_runtime::traits::Extrinsic","parent":null,"children":[{"krate":0,"index":5436}],"decl_id":null,"docs":" An extrinsic on which we can get access to call.\n","sig":null,"attributes":[{"value":"/ An extrinsic on which we can get access to call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740571,"byte_end":740623,"line_start":743,"line_end":743,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":5436},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740721,"byte_end":740725,"line_start":746,"line_end":746,"column_start":5,"column_end":9},"name":"call","qualname":"::traits::misc::ExtrinsicCall::call","value":"pub fn call(&Self) -> &Self::Call","parent":{"krate":0,"index":5435},"children":[],"decl_id":null,"docs":" Get the call of the extrinsic.\n","sig":null,"attributes":[{"value":"/ Get the call of the extrinsic.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740682,"byte_end":740716,"line_start":745,"line_end":745,"column_start":2,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":5447},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741352,"byte_end":741367,"line_start":772,"line_end":772,"column_start":11,"column_end":26},"name":"EstimateCallFee","qualname":"::traits::misc::EstimateCallFee","value":"EstimateCallFee<Call, Balance>","parent":null,"children":[{"krate":0,"index":5450}],"decl_id":null,"docs":" Something that can estimate the fee of a (frame-based) call.","sig":null,"attributes":[{"value":"/ Something that can estimate the fee of a (frame-based) call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741187,"byte_end":741251,"line_start":769,"line_end":769,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741252,"byte_end":741255,"line_start":770,"line_end":770,"column_start":1,"column_end":4}},{"value":"/ Typically, the same pallet that will charge transaction fees will implement this.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741256,"byte_end":741341,"line_start":771,"line_end":771,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":5450},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741541,"byte_end":741558,"line_start":777,"line_end":777,"column_start":5,"column_end":22},"name":"estimate_call_fee","qualname":"::traits::misc::EstimateCallFee::estimate_call_fee","value":"pub fn estimate_call_fee(&Call, crate::weights::PostDispatchInfo) -> Balance","parent":{"krate":0,"index":5447},"children":[],"decl_id":null,"docs":" Estimate the fee of this call.","sig":null,"attributes":[{"value":"/ Estimate the fee of this call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741386,"byte_end":741420,"line_start":773,"line_end":773,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741422,"byte_end":741425,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ The dispatch info and the length is deduced from the call. The post info can optionally be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741427,"byte_end":741521,"line_start":775,"line_end":775,"column_start":2,"column_end":96}},{"value":"/ provided.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741523,"byte_end":741536,"line_start":776,"line_end":776,"column_start":2,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":23596},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742270,"byte_end":742283,"line_start":794,"line_end":794,"column_start":12,"column_end":25},"name":"WrapperOpaque","qualname":"::traits::misc::WrapperOpaque","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for any type `T` which implement encode/decode in a way compatible with `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A wrapper for any type `T` which implement encode/decode in a way compatible with `Vec<u8>`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741879,"byte_end":741975,"line_start":788,"line_end":788,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741976,"byte_end":741979,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ The encoding is the encoding of `T` prepended with the compact encoding of its size in bytes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741980,"byte_end":742077,"line_start":790,"line_end":790,"column_start":1,"column_end":98}},{"value":"/ Thus the encoded value can be decoded as a `Vec<u8>`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742078,"byte_end":742135,"line_start":791,"line_end":791,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":23599},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742287,"byte_end":742292,"line_start":794,"line_end":794,"column_start":29,"column_end":34},"name":"0","qualname":"::traits::misc::WrapperOpaque::0","value":"T","parent":{"krate":0,"index":23596},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":23629},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744523,"byte_end":744540,"line_start":871,"line_end":871,"column_start":12,"column_end":29},"name":"WrapperKeepOpaque","qualname":"::traits::misc::WrapperKeepOpaque","value":"WrapperKeepOpaque {  }","parent":null,"children":[{"krate":0,"index":23631},{"krate":0,"index":23632}],"decl_id":null,"docs":" A wrapper for any type `T` which implement encode/decode in a way compatible with `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A wrapper for any type `T` which implement encode/decode in a way compatible with `Vec<u8>`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744049,"byte_end":744145,"line_start":864,"line_end":864,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744146,"byte_end":744149,"line_start":865,"line_end":865,"column_start":1,"column_end":4}},{"value":"/ This type is similar to [`WrapperOpaque`], but it differs in the way it stores the type `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744150,"byte_end":744246,"line_start":866,"line_end":866,"column_start":1,"column_end":97}},{"value":"/ While [`WrapperOpaque`] stores the decoded type, the [`WrapperKeepOpaque`] stores the type only","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744247,"byte_end":744346,"line_start":867,"line_end":867,"column_start":1,"column_end":100}},{"value":"/ in its opaque format, aka as a `Vec<u8>`. To access the real type `T` [`Self::try_decode`] needs","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744347,"byte_end":744447,"line_start":868,"line_end":868,"column_start":1,"column_end":101}},{"value":"/ to be used.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744448,"byte_end":744463,"line_start":869,"line_end":869,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":5489},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744763,"byte_end":744773,"line_start":880,"line_end":880,"column_start":9,"column_end":19},"name":"try_decode","qualname":"<WrapperKeepOpaque<T>>::try_decode","value":"pub fn try_decode(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Try to decode the wrapped type from the inner `data`.","sig":null,"attributes":[{"value":"/ Try to decode the wrapped type from the inner `data`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744648,"byte_end":744705,"line_start":877,"line_end":877,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744707,"byte_end":744710,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the decoding failed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744712,"byte_end":744754,"line_start":879,"line_end":879,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5490},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744894,"byte_end":744905,"line_start":885,"line_end":885,"column_start":9,"column_end":20},"name":"encoded_len","qualname":"<WrapperKeepOpaque<T>>::encoded_len","value":"pub fn encoded_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the encoded `T`.\n","sig":null,"attributes":[{"value":"/ Returns the length of the encoded `T`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744843,"byte_end":744885,"line_start":884,"line_end":884,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5491},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744985,"byte_end":744992,"line_start":890,"line_end":890,"column_start":9,"column_end":16},"name":"encoded","qualname":"<WrapperKeepOpaque<T>>::encoded","value":"pub fn encoded(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded data.\n","sig":null,"attributes":[{"value":"/ Returns the encoded data.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744947,"byte_end":744976,"line_start":889,"line_end":889,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":5492},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745079,"byte_end":745091,"line_start":895,"line_end":895,"column_start":9,"column_end":21},"name":"from_encoded","qualname":"<WrapperKeepOpaque<T>>::from_encoded","value":"pub fn from_encoded(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create from the given encoded `data`.\n","sig":null,"attributes":[{"value":"/ Create from the given encoded `data`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745029,"byte_end":745070,"line_start":894,"line_end":894,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":5521},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746638,"byte_end":746654,"line_start":952,"line_end":952,"column_start":11,"column_end":27},"name":"PreimageProvider","qualname":"::traits::misc::PreimageProvider","value":"PreimageProvider<Hash>","parent":null,"children":[{"krate":0,"index":5523},{"krate":0,"index":5524},{"krate":0,"index":5525},{"krate":0,"index":5526},{"krate":0,"index":5527}],"decl_id":null,"docs":" A interface for looking up preimages from their hash on chain.\n","sig":null,"attributes":[{"value":"/ A interface for looking up preimages from their hash on chain.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746561,"byte_end":746627,"line_start":951,"line_end":951,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5523},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746791,"byte_end":746804,"line_start":956,"line_end":956,"column_start":5,"column_end":18},"name":"have_preimage","qualname":"::traits::misc::PreimageProvider::have_preimage","value":"pub fn have_preimage(&Hash) -> bool","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":" Returns whether a preimage exists for a given hash.","sig":null,"attributes":[{"value":"/ Returns whether a preimage exists for a given hash.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746664,"byte_end":746719,"line_start":953,"line_end":953,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746721,"byte_end":746724,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ A value of `true` implies that `get_preimage` is `Some`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746726,"byte_end":746786,"line_start":955,"line_end":955,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5524},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746876,"byte_end":746888,"line_start":959,"line_end":959,"column_start":5,"column_end":17},"name":"get_preimage","qualname":"::traits::misc::PreimageProvider::get_preimage","value":"pub fn get_preimage(&Hash) -> Option<Vec<u8>>","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":" Returns the preimage for a given hash.\n","sig":null,"attributes":[{"value":"/ Returns the preimage for a given hash.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746829,"byte_end":746871,"line_start":958,"line_end":958,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5525},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746992,"byte_end":747010,"line_start":962,"line_end":962,"column_start":5,"column_end":23},"name":"preimage_requested","qualname":"::traits::misc::PreimageProvider::preimage_requested","value":"pub fn preimage_requested(&Hash) -> bool","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":" Returns whether a preimage request exists for a given hash.\n","sig":null,"attributes":[{"value":"/ Returns whether a preimage request exists for a given hash.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746924,"byte_end":746987,"line_start":961,"line_end":961,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":5526},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747157,"byte_end":747173,"line_start":966,"line_end":966,"column_start":5,"column_end":21},"name":"request_preimage","qualname":"::traits::misc::PreimageProvider::request_preimage","value":"pub fn request_preimage(&Hash)","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":" Request that someone report a preimage. Providers use this to optimise the economics for\n preimage reporting.\n","sig":null,"attributes":[{"value":"/ Request that someone report a preimage. Providers use this to optimise the economics for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747035,"byte_end":747127,"line_start":964,"line_end":964,"column_start":2,"column_end":94}},{"value":"/ preimage reporting.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747129,"byte_end":747152,"line_start":965,"line_end":965,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":5527},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747234,"byte_end":747252,"line_start":969,"line_end":969,"column_start":5,"column_end":23},"name":"unrequest_preimage","qualname":"::traits::misc::PreimageProvider::unrequest_preimage","value":"pub fn unrequest_preimage(&Hash)","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":" Cancel a previous preimage request.\n","sig":null,"attributes":[{"value":"/ Cancel a previous preimage request.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747190,"byte_end":747229,"line_start":968,"line_end":968,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":5535},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747841,"byte_end":747858,"line_start":991,"line_end":991,"column_start":11,"column_end":28},"name":"PreimageRecipient","qualname":"::traits::misc::PreimageRecipient","value":"PreimageRecipient<Hash>: PreimageProvider<Hash>","parent":null,"children":[{"krate":0,"index":5537},{"krate":0,"index":5538},{"krate":0,"index":5539}],"decl_id":null,"docs":" A interface for managing preimages to hashes on chain.","sig":null,"attributes":[{"value":"/ A interface for managing preimages to hashes on chain.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747547,"byte_end":747605,"line_start":986,"line_end":986,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747606,"byte_end":747609,"line_start":987,"line_end":987,"column_start":1,"column_end":4}},{"value":"/ Note that this API does not assume any underlying user is calling, and thus","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747610,"byte_end":747689,"line_start":988,"line_end":988,"column_start":1,"column_end":80}},{"value":"/ does not handle any preimage ownership or fees. Other system level logic that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747690,"byte_end":747771,"line_start":989,"line_end":989,"column_start":1,"column_end":82}},{"value":"/ uses this API should implement that on their own side.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747772,"byte_end":747830,"line_start":990,"line_end":990,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":5537},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747930,"byte_end":747937,"line_start":993,"line_end":993,"column_start":7,"column_end":14},"name":"MaxSize","qualname":"::traits::misc::PreimageRecipient::MaxSize","value":"type MaxSize: Get<u32>;","parent":{"krate":0,"index":5535},"children":[],"decl_id":null,"docs":" Maximum size of a preimage.\n","sig":null,"attributes":[{"value":"/ Maximum size of a preimage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747892,"byte_end":747923,"line_start":992,"line_end":992,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":5538},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747999,"byte_end":748012,"line_start":996,"line_end":996,"column_start":5,"column_end":18},"name":"note_preimage","qualname":"::traits::misc::PreimageRecipient::note_preimage","value":"pub fn note_preimage(crate::BoundedVec<u8, Self::MaxSize>)","parent":{"krate":0,"index":5535},"children":[],"decl_id":null,"docs":" Store the bytes of a preimage on chain.\n","sig":null,"attributes":[{"value":"/ Store the bytes of a preimage on chain.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747951,"byte_end":747994,"line_start":995,"line_end":995,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":5539},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":748264,"byte_end":748279,"line_start":1001,"line_end":1001,"column_start":5,"column_end":20},"name":"unnote_preimage","qualname":"::traits::misc::PreimageRecipient::unnote_preimage","value":"pub fn unnote_preimage(&Hash)","parent":{"krate":0,"index":5535},"children":[],"decl_id":null,"docs":" Clear a previously noted preimage. This is infallible and should be treated more like a\n hint - if it was not previously noted or if it is now requested, then this will not do\n anything.\n","sig":null,"attributes":[{"value":"/ Clear a previously noted preimage. This is infallible and should be treated more like a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":748061,"byte_end":748152,"line_start":998,"line_end":998,"column_start":2,"column_end":93}},{"value":"/ hint - if it was not previously noted or if it is now requested, then this will not do","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":748154,"byte_end":748244,"line_start":999,"line_end":999,"column_start":2,"column_end":92}},{"value":"/ anything.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":748246,"byte_end":748259,"line_start":1000,"line_end":1000,"column_start":2,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":5679},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":750923,"byte_end":750932,"line_start":26,"line_end":26,"column_start":11,"column_end":20},"name":"StoredMap","qualname":"::traits::stored_map::StoredMap","value":"StoredMap<K, T: Default>","parent":null,"children":[{"krate":0,"index":5682},{"krate":0,"index":5683},{"krate":0,"index":5687},{"krate":0,"index":5691},{"krate":0,"index":5695},{"krate":0,"index":5697}],"decl_id":null,"docs":" An abstraction of a value stored within storage, but possibly as part of a larger composite\n item.\n","sig":null,"attributes":[{"value":"/ An abstraction of a value stored within storage, but possibly as part of a larger composite","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":750807,"byte_end":750902,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":750903,"byte_end":750912,"line_start":25,"line_end":25,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":5682},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751058,"byte_end":751061,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::stored_map::StoredMap::get","value":"pub fn get(&K) -> T","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Get the item, or its default if it doesn't yet exist; we make no distinction between the\n two.\n","sig":null,"attributes":[{"value":"/ Get the item, or its default if it doesn't yet exist; we make no distinction between the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":750951,"byte_end":751043,"line_start":27,"line_end":27,"column_start":2,"column_end":94}},{"value":"/ two.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751045,"byte_end":751053,"line_start":28,"line_end":28,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":5683},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751449,"byte_end":751466,"line_start":35,"line_end":35,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::traits::stored_map::StoredMap::try_mutate_exists","value":"pub fn try_mutate_exists<R, E: From<DispatchError>,\nimpl FnOnce(&mut Option<T>) -> Result<R, E>: FnOnce(&mut Option<T>) ->\nResult<R, E>>(&K, impl FnOnce(&mut Option<T>) -> Result<R, E>) -> Result<R, E>","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is\n returned. It is removed or reset to default value if it has been mutated to `None`.\n `f` will always be called with an option representing if the storage item exists (`Some<V>`)\n or if the storage item does not exist (`None`), independent of the `QueryType`.\n","sig":null,"attributes":[{"value":"/ Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751077,"byte_end":751172,"line_start":31,"line_end":31,"column_start":2,"column_end":97}},{"value":"/ returned. It is removed or reset to default value if it has been mutated to `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751174,"byte_end":751261,"line_start":32,"line_end":32,"column_start":2,"column_end":89}},{"value":"/ `f` will always be called with an option representing if the storage item exists (`Some<V>`)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751263,"byte_end":751359,"line_start":33,"line_end":33,"column_start":2,"column_end":98}},{"value":"/ or if the storage item does not exist (`None`), independent of the `QueryType`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751361,"byte_end":751444,"line_start":34,"line_end":34,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5687},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751657,"byte_end":751663,"line_start":43,"line_end":43,"column_start":5,"column_end":11},"name":"mutate","qualname":"::traits::stored_map::StoredMap::mutate","value":"pub fn mutate<R, impl FnOnce(&mut T) -> R: FnOnce(&mut T) ->\nR>(&K, impl FnOnce(&mut T) -> R) -> Result<R, DispatchError>","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Mutate the item.\n","sig":null,"attributes":[{"value":"/ Mutate the item.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751632,"byte_end":751652,"line_start":42,"line_end":42,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":5691},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752142,"byte_end":752155,"line_start":58,"line_end":58,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::traits::stored_map::StoredMap::mutate_exists","value":"pub fn mutate_exists<R,\nimpl FnOnce(&mut Option<T>) -> R: FnOnce(&mut Option<T>) ->\nR>(&K, impl FnOnce(&mut Option<T>) -> R) -> Result<R, DispatchError>","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Mutate the item, removing or resetting to default value if it has been mutated to `None`.","sig":null,"attributes":[{"value":"/ Mutate the item, removing or resetting to default value if it has been mutated to `None`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":751970,"byte_end":752063,"line_start":55,"line_end":55,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752065,"byte_end":752068,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ This is infallible as long as the value does not get destroyed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752070,"byte_end":752137,"line_start":57,"line_end":57,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5695},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752352,"byte_end":752358,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"insert","qualname":"::traits::stored_map::StoredMap::insert","value":"pub fn insert(&K, T) -> Result<(), DispatchError>","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Set the item to something new.\n","sig":null,"attributes":[{"value":"/ Set the item to something new.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752313,"byte_end":752347,"line_start":62,"line_end":62,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5697},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752531,"byte_end":752537,"line_start":68,"line_end":68,"column_start":5,"column_end":11},"name":"remove","qualname":"::traits::stored_map::StoredMap::remove","value":"pub fn remove(&K) -> Result<(), DispatchError>","parent":{"krate":0,"index":5679},"children":[],"decl_id":null,"docs":" Remove the item or otherwise replace it with its default value; we don't care which.\n","sig":null,"attributes":[{"value":"/ Remove the item or otherwise replace it with its default value; we don't care which.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752438,"byte_end":752526,"line_start":67,"line_end":67,"column_start":2,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":5699},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753525,"byte_end":753539,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"StorageMapShim","qualname":"::traits::stored_map::StorageMapShim","value":"","parent":null,"children":[],"decl_id":null,"docs":" A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this\n wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this\n would break the ability to have custom impls of `StoredValue`. The other workaround is to\n implement it directly in the macro.","sig":null,"attributes":[{"value":"/ A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752622,"byte_end":752718,"line_start":73,"line_end":73,"column_start":1,"column_end":97}},{"value":"/ wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752719,"byte_end":752814,"line_start":74,"line_end":74,"column_start":1,"column_end":96}},{"value":"/ would break the ability to have custom impls of `StoredValue`. The other workaround is to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752815,"byte_end":752908,"line_start":75,"line_end":75,"column_start":1,"column_end":94}},{"value":"/ implement it directly in the macro.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752909,"byte_end":752948,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752949,"byte_end":752952,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This form has the advantage that two additional types are provides, `Created` and `Removed`,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":752953,"byte_end":753049,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"/ which are both generic events that can be tied to handlers to do something in the case of being","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753050,"byte_end":753149,"line_start":79,"line_end":79,"column_start":1,"column_end":100}},{"value":"/ about to create an account where one didn't previously exist (at all; not just where it used to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753150,"byte_end":753249,"line_start":80,"line_end":80,"column_start":1,"column_end":100}},{"value":"/ be the default value), or where the account is being removed or reset back to the default value","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753250,"byte_end":753349,"line_start":81,"line_end":81,"column_start":1,"column_end":100}},{"value":"/ where previously it did exist (though may have been in a default state). This works well with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753350,"byte_end":753447,"line_start":82,"line_end":82,"column_start":1,"column_end":98}},{"value":"/ system module's `CallOnCreatedAccount` and `CallKillAccount`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753448,"byte_end":753513,"line_start":83,"line_end":83,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":5734},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756112,"byte_end":756122,"line_start":26,"line_end":26,"column_start":11,"column_end":21},"name":"Randomness","qualname":"::traits::randomness::Randomness","value":"Randomness<Output, BlockNumber>","parent":null,"children":[{"krate":0,"index":5737},{"krate":0,"index":5738}],"decl_id":null,"docs":" A trait that is able to provide randomness.","sig":null,"attributes":[{"value":"/ A trait that is able to provide randomness.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":755753,"byte_end":755800,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":755801,"byte_end":755804,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Being a deterministic blockchain, real randomness is difficult to come by, different","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":755805,"byte_end":755893,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ implementations of this trait will provide different security guarantees. At best,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":755894,"byte_end":755980,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/ this will be randomness which was hard to predict a long time ago, but that has become","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":755981,"byte_end":756071,"line_start":24,"line_end":24,"column_start":1,"column_end":91}},{"value":"/ easy to predict recently.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756072,"byte_end":756101,"line_start":25,"line_end":25,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5737},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756827,"byte_end":756833,"line_start":38,"line_end":38,"column_start":5,"column_end":11},"name":"random","qualname":"::traits::randomness::Randomness::random","value":"pub fn random(&[u8]) -> (Output, BlockNumber)","parent":{"krate":0,"index":5734},"children":[],"decl_id":null,"docs":" Get the most recently determined random seed, along with the time in the past\n since when it was determinable by chain observers.","sig":null,"attributes":[{"value":"/ Get the most recently determined random seed, along with the time in the past","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756147,"byte_end":756228,"line_start":27,"line_end":27,"column_start":2,"column_end":83}},{"value":"/ since when it was determinable by chain observers.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756230,"byte_end":756284,"line_start":28,"line_end":28,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756286,"byte_end":756289,"line_start":29,"line_end":29,"column_start":2,"column_end":5}},{"value":"/ `subject` is a context identifier and allows you to get a different result to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756291,"byte_end":756372,"line_start":30,"line_end":30,"column_start":2,"column_end":83}},{"value":"/ other callers of this function; use it like `random(&b\"my context\"[..])`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756374,"byte_end":756451,"line_start":31,"line_end":31,"column_start":2,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756453,"byte_end":756456,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ NOTE: The returned seed should only be used to distinguish commitments made before","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756458,"byte_end":756544,"line_start":33,"line_end":33,"column_start":2,"column_end":88}},{"value":"/ the returned block number. If the block number is too early (i.e. commitments were","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756546,"byte_end":756632,"line_start":34,"line_end":34,"column_start":2,"column_end":88}},{"value":"/ made afterwards), then ensure no further commitments may be made and repeatedly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756634,"byte_end":756717,"line_start":35,"line_end":35,"column_start":2,"column_end":85}},{"value":"/ call this on later blocks until the block number returned is later than the latest","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756719,"byte_end":756805,"line_start":36,"line_end":36,"column_start":2,"column_end":88}},{"value":"/ commitment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756807,"byte_end":756822,"line_start":37,"line_end":37,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":5738},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757512,"byte_end":757523,"line_start":51,"line_end":51,"column_start":5,"column_end":16},"name":"random_seed","qualname":"::traits::randomness::Randomness::random_seed","value":"pub fn random_seed() -> (Output, BlockNumber)","parent":{"krate":0,"index":5734},"children":[],"decl_id":null,"docs":" Get the basic random seed.","sig":null,"attributes":[{"value":"/ Get the basic random seed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756878,"byte_end":756908,"line_start":40,"line_end":40,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756910,"byte_end":756913,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ In general you won't want to use this, but rather `Self::random` which allows","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756915,"byte_end":756996,"line_start":42,"line_end":42,"column_start":2,"column_end":83}},{"value":"/ you to give a subject for the random result and whose value will be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":756998,"byte_end":757069,"line_start":43,"line_end":43,"column_start":2,"column_end":73}},{"value":"/ independently low-influence random from any other such seeds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757071,"byte_end":757136,"line_start":44,"line_end":44,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757138,"byte_end":757141,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ NOTE: The returned seed should only be used to distinguish commitments made before","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757143,"byte_end":757229,"line_start":46,"line_end":46,"column_start":2,"column_end":88}},{"value":"/ the returned block number. If the block number is too early (i.e. commitments were","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757231,"byte_end":757317,"line_start":47,"line_end":47,"column_start":2,"column_end":88}},{"value":"/ made afterwards), then ensure no further commitments may be made and repeatedly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757319,"byte_end":757402,"line_start":48,"line_end":48,"column_start":2,"column_end":85}},{"value":"/ call this on later blocks until the block number returned is later than the latest","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757404,"byte_end":757490,"line_start":49,"line_end":49,"column_start":2,"column_end":88}},{"value":"/ commitment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/randomness.rs","byte_start":757492,"byte_end":757507,"line_start":50,"line_end":50,"column_start":2,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":5754},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758650,"byte_end":758660,"line_start":28,"line_end":28,"column_start":11,"column_end":21},"name":"PalletInfo","qualname":"::traits::metadata::PalletInfo","value":"PalletInfo","parent":null,"children":[{"krate":0,"index":5755},{"krate":0,"index":5757},{"krate":0,"index":5759},{"krate":0,"index":5761}],"decl_id":null,"docs":" Provides information about the pallet itself and its setup in the runtime.","sig":null,"attributes":[{"value":"/ Provides information about the pallet itself and its setup in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758434,"byte_end":758512,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758513,"byte_end":758516,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ An implementor should be able to provide information about each pallet that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758517,"byte_end":758596,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ is configured in `construct_runtime!`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758597,"byte_end":758639,"line_start":27,"line_end":27,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":5755},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758746,"byte_end":758751,"line_start":30,"line_end":30,"column_start":5,"column_end":10},"name":"index","qualname":"::traits::metadata::PalletInfo::index","value":"pub fn index<P: 'static>() -> Option<usize>","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its index as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its index as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758664,"byte_end":758741,"line_start":29,"line_end":29,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":5757},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758866,"byte_end":758870,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::metadata::PalletInfo::name","value":"pub fn name<P: 'static>() -> Option<&'static str>","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its name as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its name as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758785,"byte_end":758861,"line_start":31,"line_end":31,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":5759},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759007,"byte_end":759018,"line_start":34,"line_end":34,"column_start":5,"column_end":16},"name":"module_name","qualname":"::traits::metadata::PalletInfo::module_name","value":"pub fn module_name<P: 'static>() -> Option<&'static str>","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its Rust module name as used in `construct_runtime!`.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its Rust module name as used in `construct_runtime!`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":758911,"byte_end":759002,"line_start":33,"line_end":33,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":5761},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759131,"byte_end":759144,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"crate_version","qualname":"::traits::metadata::PalletInfo::crate_version","value":"pub fn crate_version<P: 'static>() -> Option<CrateVersion>","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" Convert the given pallet `P` into its containing crate version.\n","sig":null,"attributes":[{"value":"/ Convert the given pallet `P` into its containing crate version.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759059,"byte_end":759126,"line_start":35,"line_end":35,"column_start":2,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":23653},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759318,"byte_end":759332,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"PalletInfoData","qualname":"::traits::metadata::PalletInfoData","value":"PalletInfoData { index, name, module_name, crate_version }","parent":null,"children":[{"krate":0,"index":23654},{"krate":0,"index":23655},{"krate":0,"index":23656},{"krate":0,"index":23657}],"decl_id":null,"docs":" Information regarding an instance of a pallet.\n","sig":null,"attributes":[{"value":"/ Information regarding an instance of a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759187,"byte_end":759237,"line_start":39,"line_end":39,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":23654},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759395,"byte_end":759400,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"name":"index","qualname":"::traits::metadata::PalletInfoData::index","value":"usize","parent":{"krate":0,"index":23653},"children":[],"decl_id":null,"docs":" Index of the pallet as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Index of the pallet as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759336,"byte_end":759389,"line_start":42,"line_end":42,"column_start":2,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":23655},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759468,"byte_end":759472,"line_start":45,"line_end":45,"column_start":6,"column_end":10},"name":"name","qualname":"::traits::metadata::PalletInfoData::name","value":"&'static str","parent":{"krate":0,"index":23653},"children":[],"decl_id":null,"docs":" Name of the pallet as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Name of the pallet as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759410,"byte_end":759462,"line_start":44,"line_end":44,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":23656},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759545,"byte_end":759556,"line_start":47,"line_end":47,"column_start":6,"column_end":17},"name":"module_name","qualname":"::traits::metadata::PalletInfoData::module_name","value":"&'static str","parent":{"krate":0,"index":23653},"children":[],"decl_id":null,"docs":" Name of the Rust module containing the pallet.\n","sig":null,"attributes":[{"value":"/ Name of the Rust module containing the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759489,"byte_end":759539,"line_start":46,"line_end":46,"column_start":2,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":23657},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759626,"byte_end":759639,"line_start":49,"line_end":49,"column_start":6,"column_end":19},"name":"crate_version","qualname":"::traits::metadata::PalletInfoData::crate_version","value":"traits::metadata::CrateVersion","parent":{"krate":0,"index":23653},"children":[],"decl_id":null,"docs":" Version of the crate containing the pallet.\n","sig":null,"attributes":[{"value":"/ Version of the crate containing the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759573,"byte_end":759620,"line_start":48,"line_end":48,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":5763},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759861,"byte_end":759877,"line_start":56,"line_end":56,"column_start":11,"column_end":27},"name":"PalletInfoAccess","qualname":"::traits::metadata::PalletInfoAccess","value":"PalletInfoAccess","parent":null,"children":[{"krate":0,"index":5764},{"krate":0,"index":5765},{"krate":0,"index":5766},{"krate":0,"index":5767}],"decl_id":null,"docs":" Provides information about the pallet itself and its setup in the runtime.","sig":null,"attributes":[{"value":"/ Provides information about the pallet itself and its setup in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759658,"byte_end":759736,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759737,"byte_end":759740,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Declare some information and access the information provided by [`PalletInfo`] for a specific","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759741,"byte_end":759838,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/ pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759839,"byte_end":759850,"line_start":55,"line_end":55,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5764},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759939,"byte_end":759944,"line_start":58,"line_end":58,"column_start":5,"column_end":10},"name":"index","qualname":"::traits::metadata::PalletInfoAccess::index","value":"pub fn index() -> usize","parent":{"krate":0,"index":5763},"children":[],"decl_id":null,"docs":" Index of the pallet as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Index of the pallet as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759881,"byte_end":759934,"line_start":57,"line_end":57,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5765},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760015,"byte_end":760019,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"name","qualname":"::traits::metadata::PalletInfoAccess::name","value":"pub fn name() -> &'static str","parent":{"krate":0,"index":5763},"children":[],"decl_id":null,"docs":" Name of the pallet as configured in the runtime.\n","sig":null,"attributes":[{"value":"/ Name of the pallet as configured in the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":759958,"byte_end":760010,"line_start":59,"line_end":59,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5766},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760095,"byte_end":760106,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"module_name","qualname":"::traits::metadata::PalletInfoAccess::module_name","value":"pub fn module_name() -> &'static str","parent":{"krate":0,"index":5763},"children":[],"decl_id":null,"docs":" Name of the Rust module containing the pallet.\n","sig":null,"attributes":[{"value":"/ Name of the Rust module containing the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760040,"byte_end":760090,"line_start":61,"line_end":61,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":5767},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760179,"byte_end":760192,"line_start":64,"line_end":64,"column_start":5,"column_end":18},"name":"crate_version","qualname":"::traits::metadata::PalletInfoAccess::crate_version","value":"pub fn crate_version() -> CrateVersion","parent":{"krate":0,"index":5763},"children":[],"decl_id":null,"docs":" Version of the crate containing the pallet.\n","sig":null,"attributes":[{"value":"/ Version of the crate containing the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760127,"byte_end":760174,"line_start":63,"line_end":63,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":5768},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760275,"byte_end":760292,"line_start":68,"line_end":68,"column_start":11,"column_end":28},"name":"PalletsInfoAccess","qualname":"::traits::metadata::PalletsInfoAccess","value":"PalletsInfoAccess","parent":null,"children":[{"krate":0,"index":5769},{"krate":0,"index":5770},{"krate":0,"index":5771}],"decl_id":null,"docs":" Provide information about a bunch of pallets.\n","sig":null,"attributes":[{"value":"/ Provide information about a bunch of pallets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760215,"byte_end":760264,"line_start":67,"line_end":67,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5769},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760437,"byte_end":760442,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"count","qualname":"::traits::metadata::PalletsInfoAccess::count","value":"pub fn count() -> usize","parent":{"krate":0,"index":5768},"children":[],"decl_id":null,"docs":" The number of pallets' information that this type represents.","sig":null,"attributes":[{"value":"/ The number of pallets' information that this type represents.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760296,"byte_end":760361,"line_start":69,"line_end":69,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760363,"byte_end":760366,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ You probably don't want this function but `infos()` instead.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760368,"byte_end":760432,"line_start":71,"line_end":71,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5770},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760630,"byte_end":760640,"line_start":79,"line_end":79,"column_start":5,"column_end":15},"name":"accumulate","qualname":"::traits::metadata::PalletsInfoAccess::accumulate","value":"pub fn accumulate(&mut Vec<PalletInfoData>)","parent":{"krate":0,"index":5768},"children":[],"decl_id":null,"docs":" Extend the given vector by all of the pallets' information that this type represents.","sig":null,"attributes":[{"value":"/ Extend the given vector by all of the pallets' information that this type represents.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760465,"byte_end":760554,"line_start":76,"line_end":76,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760556,"byte_end":760559,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ You probably don't want this function but `infos()` instead.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760561,"byte_end":760625,"line_start":78,"line_end":78,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5771},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760753,"byte_end":760758,"line_start":82,"line_end":82,"column_start":5,"column_end":10},"name":"infos","qualname":"::traits::metadata::PalletsInfoAccess::infos","value":"pub fn infos() -> Vec<PalletInfoData>","parent":{"krate":0,"index":5768},"children":[],"decl_id":null,"docs":" All of the pallets' information that this type represents.\n","sig":null,"attributes":[{"value":"/ All of the pallets' information that this type represents.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":760686,"byte_end":760748,"line_start":81,"line_end":81,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":23674},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761532,"byte_end":761544,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"CallMetadata","qualname":"::traits::metadata::CallMetadata","value":"CallMetadata { function_name, pallet_name }","parent":null,"children":[{"krate":0,"index":23675},{"krate":0,"index":23676}],"decl_id":null,"docs":" The function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ The function and pallet name of the Call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761420,"byte_end":761465,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":23675},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761579,"byte_end":761592,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"name":"function_name","qualname":"::traits::metadata::CallMetadata::function_name","value":"&'static str","parent":{"krate":0,"index":23674},"children":[],"decl_id":null,"docs":" Name of the function.\n","sig":null,"attributes":[{"value":"/ Name of the function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761548,"byte_end":761573,"line_start":113,"line_end":113,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":23676},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761668,"byte_end":761679,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"name":"pallet_name","qualname":"::traits::metadata::CallMetadata::pallet_name","value":"&'static str","parent":{"krate":0,"index":23674},"children":[],"decl_id":null,"docs":" Name of the pallet to which the function belongs.\n","sig":null,"attributes":[{"value":"/ Name of the pallet to which the function belongs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761609,"byte_end":761662,"line_start":115,"line_end":115,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":5782},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761748,"byte_end":761759,"line_start":120,"line_end":120,"column_start":11,"column_end":22},"name":"GetCallName","qualname":"::traits::metadata::GetCallName","value":"GetCallName","parent":null,"children":[{"krate":0,"index":5783},{"krate":0,"index":5784}],"decl_id":null,"docs":" Gets the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Gets the function name of the Call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761698,"byte_end":761737,"line_start":119,"line_end":119,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5783},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761798,"byte_end":761812,"line_start":122,"line_end":122,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::metadata::GetCallName::get_call_names","value":"pub fn get_call_names() -> &'static [&'static str]","parent":{"krate":0,"index":5782},"children":[],"decl_id":null,"docs":" Return all function names.\n","sig":null,"attributes":[{"value":"/ Return all function names.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761763,"byte_end":761793,"line_start":121,"line_end":121,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":5784},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761890,"byte_end":761903,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"get_call_name","qualname":"::traits::metadata::GetCallName::get_call_name","value":"pub fn get_call_name(&Self) -> &'static str","parent":{"krate":0,"index":5782},"children":[],"decl_id":null,"docs":" Return the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Return the function name of the Call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761844,"byte_end":761885,"line_start":123,"line_end":123,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":5785},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762009,"byte_end":762024,"line_start":128,"line_end":128,"column_start":11,"column_end":26},"name":"GetCallMetadata","qualname":"::traits::metadata::GetCallMetadata","value":"GetCallMetadata","parent":null,"children":[{"krate":0,"index":5786},{"krate":0,"index":5787},{"krate":0,"index":5788}],"decl_id":null,"docs":" Gets the metadata for the Call - function name and pallet name.\n","sig":null,"attributes":[{"value":"/ Gets the metadata for the Call - function name and pallet name.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":761931,"byte_end":761998,"line_start":127,"line_end":127,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5786},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762061,"byte_end":762077,"line_start":130,"line_end":130,"column_start":5,"column_end":21},"name":"get_module_names","qualname":"::traits::metadata::GetCallMetadata::get_module_names","value":"pub fn get_module_names() -> &'static [&'static str]","parent":{"krate":0,"index":5785},"children":[],"decl_id":null,"docs":" Return all module names.\n","sig":null,"attributes":[{"value":"/ Return all module names.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762028,"byte_end":762056,"line_start":129,"line_end":129,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":5787},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762167,"byte_end":762181,"line_start":132,"line_end":132,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::metadata::GetCallMetadata::get_call_names","value":"pub fn get_call_names(&str) -> &'static [&'static str]","parent":{"krate":0,"index":5785},"children":[],"decl_id":null,"docs":" Return all function names for the given `module`.\n","sig":null,"attributes":[{"value":"/ Return all function names for the given `module`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762109,"byte_end":762162,"line_start":131,"line_end":131,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5788},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762309,"byte_end":762326,"line_start":134,"line_end":134,"column_start":5,"column_end":22},"name":"get_call_metadata","qualname":"::traits::metadata::GetCallMetadata::get_call_metadata","value":"pub fn get_call_metadata(&Self) -> CallMetadata","parent":{"krate":0,"index":5785},"children":[],"decl_id":null,"docs":" Return a [`CallMetadata`], containing function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ Return a [`CallMetadata`], containing function and pallet name of the Call.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762225,"byte_end":762304,"line_start":133,"line_end":133,"column_start":2,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":23690},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762463,"byte_end":762475,"line_start":139,"line_end":139,"column_start":12,"column_end":24},"name":"CrateVersion","qualname":"::traits::metadata::CrateVersion","value":"CrateVersion { major, minor, patch }","parent":null,"children":[{"krate":0,"index":23691},{"krate":0,"index":23692},{"krate":0,"index":23693}],"decl_id":null,"docs":" The version of a crate.\n","sig":null,"attributes":[{"value":"/ The version of a crate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762354,"byte_end":762381,"line_start":137,"line_end":137,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":23691},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762520,"byte_end":762525,"line_start":141,"line_end":141,"column_start":6,"column_end":11},"name":"major","qualname":"::traits::metadata::CrateVersion::major","value":"u16","parent":{"krate":0,"index":23690},"children":[],"decl_id":null,"docs":" The major version of the crate.\n","sig":null,"attributes":[{"value":"/ The major version of the crate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762479,"byte_end":762514,"line_start":140,"line_end":140,"column_start":2,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":23692},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762574,"byte_end":762579,"line_start":143,"line_end":143,"column_start":6,"column_end":11},"name":"minor","qualname":"::traits::metadata::CrateVersion::minor","value":"u8","parent":{"krate":0,"index":23690},"children":[],"decl_id":null,"docs":" The minor version of the crate.\n","sig":null,"attributes":[{"value":"/ The minor version of the crate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762533,"byte_end":762568,"line_start":142,"line_end":142,"column_start":2,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":23693},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762627,"byte_end":762632,"line_start":145,"line_end":145,"column_start":6,"column_end":11},"name":"patch","qualname":"::traits::metadata::CrateVersion::patch","value":"u8","parent":{"krate":0,"index":23690},"children":[],"decl_id":null,"docs":" The patch version of the crate.\n","sig":null,"attributes":[{"value":"/ The patch version of the crate.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762586,"byte_end":762621,"line_start":144,"line_end":144,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5790},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762675,"byte_end":762678,"line_start":149,"line_end":149,"column_start":15,"column_end":18},"name":"new","qualname":"<CrateVersion>::new","value":"pub const fn new(u16, u8, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5797},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763384,"byte_end":763419,"line_start":172,"line_end":172,"column_start":11,"column_end":46},"name":"STORAGE_VERSION_STORAGE_KEY_POSTFIX","qualname":"::traits::metadata::STORAGE_VERSION_STORAGE_KEY_POSTFIX","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" The storage key postfix that is used to store the [`StorageVersion`] per pallet.","sig":null,"attributes":[{"value":"/ The storage key postfix that is used to store the [`StorageVersion`] per pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763155,"byte_end":763239,"line_start":168,"line_end":168,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763240,"byte_end":763243,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ The full storage key is built by using:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763244,"byte_end":763287,"line_start":170,"line_end":170,"column_start":1,"column_end":44}},{"value":"/ Twox128([`PalletInfo::name`]) ++ Twox128([`STORAGE_VERSION_STORAGE_KEY_POSTFIX`])","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763288,"byte_end":763373,"line_start":171,"line_end":171,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":23717},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763749,"byte_end":763763,"line_start":179,"line_end":179,"column_start":12,"column_end":26},"name":"StorageVersion","qualname":"::traits::metadata::StorageVersion","value":"","parent":null,"children":[],"decl_id":null,"docs":" The storage version of a pallet.","sig":null,"attributes":[{"value":"/ The storage version of a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763456,"byte_end":763492,"line_start":174,"line_end":174,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763493,"byte_end":763496,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Each storage version of a pallet is stored in the state under a fixed key. See","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763497,"byte_end":763579,"line_start":176,"line_end":176,"column_start":1,"column_end":83}},{"value":"/ [`STORAGE_VERSION_STORAGE_KEY_POSTFIX`] for how this key is built.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763580,"byte_end":763650,"line_start":177,"line_end":177,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5799},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763846,"byte_end":763849,"line_start":183,"line_end":183,"column_start":15,"column_end":18},"name":"new","qualname":"<StorageVersion>::new","value":"pub const fn new(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of `Self`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763794,"byte_end":763831,"line_start":182,"line_end":182,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":5800},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764034,"byte_end":764045,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"name":"storage_key","qualname":"<StorageVersion>::storage_key","value":"pub fn storage_key<P: PalletInfoAccess>() -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the storage key for a storage version.","sig":null,"attributes":[{"value":"/ Returns the storage key for a storage version.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763895,"byte_end":763945,"line_start":187,"line_end":187,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763947,"byte_end":763950,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ See [`STORAGE_VERSION_STORAGE_KEY_POSTFIX`] on how this key is built.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763952,"byte_end":764025,"line_start":189,"line_end":189,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5803},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764705,"byte_end":764708,"line_start":207,"line_end":207,"column_start":9,"column_end":12},"name":"put","qualname":"<StorageVersion>::put","value":"pub fn put<P: PalletInfoAccess>(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Put this storage version for the given pallet into the storage.","sig":null,"attributes":[{"value":"/ Put this storage version for the given pallet into the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764213,"byte_end":764280,"line_start":195,"line_end":195,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764282,"byte_end":764285,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ It will use the storage key that is associated with the given `Pallet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764287,"byte_end":764362,"line_start":197,"line_end":197,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764364,"byte_end":764367,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764369,"byte_end":764381,"line_start":199,"line_end":199,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764383,"byte_end":764386,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ This function will panic iff `Pallet` can not be found by `PalletInfo`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764388,"byte_end":764463,"line_start":201,"line_end":201,"column_start":2,"column_end":77}},{"value":"/ In a runtime that is put together using","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764465,"byte_end":764508,"line_start":202,"line_end":202,"column_start":2,"column_end":45}},{"value":"/ [`construct_runtime!`](crate::construct_runtime) this should never happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764510,"byte_end":764588,"line_start":203,"line_end":203,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764590,"byte_end":764593,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ It will also panic if this function isn't executed in an externalities","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764595,"byte_end":764669,"line_start":205,"line_end":205,"column_start":2,"column_end":76}},{"value":"/ provided environment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764671,"byte_end":764696,"line_start":206,"line_end":206,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":5805},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765318,"byte_end":765321,"line_start":225,"line_end":225,"column_start":9,"column_end":12},"name":"get","qualname":"<StorageVersion>::get","value":"pub fn get<P: PalletInfoAccess>() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the storage version of the given pallet from the storage.","sig":null,"attributes":[{"value":"/ Get the storage version of the given pallet from the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764828,"byte_end":764893,"line_start":213,"line_end":213,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764895,"byte_end":764898,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ It will use the storage key that is associated with the given `Pallet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764900,"byte_end":764975,"line_start":215,"line_end":215,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764977,"byte_end":764980,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764982,"byte_end":764994,"line_start":217,"line_end":217,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":764996,"byte_end":764999,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ This function will panic iff `Pallet` can not be found by `PalletInfo`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765001,"byte_end":765076,"line_start":219,"line_end":219,"column_start":2,"column_end":77}},{"value":"/ In a runtime that is put together using","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765078,"byte_end":765121,"line_start":220,"line_end":220,"column_start":2,"column_end":45}},{"value":"/ [`construct_runtime!`](crate::construct_runtime) this should never happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765123,"byte_end":765201,"line_start":221,"line_end":221,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765203,"byte_end":765206,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ It will also panic if this function isn't executed in an externalities","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765208,"byte_end":765282,"line_start":223,"line_end":223,"column_start":2,"column_end":76}},{"value":"/ provided environment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765284,"byte_end":765309,"line_start":224,"line_end":224,"column_start":2,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":5811},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766352,"byte_end":766369,"line_start":255,"line_end":255,"column_start":11,"column_end":28},"name":"GetStorageVersion","qualname":"::traits::metadata::GetStorageVersion","value":"GetStorageVersion","parent":null,"children":[{"krate":0,"index":5812},{"krate":0,"index":5813}],"decl_id":null,"docs":" Provides information about the storage version of a pallet.","sig":null,"attributes":[{"value":"/ Provides information about the storage version of a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765697,"byte_end":765760,"line_start":244,"line_end":244,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765761,"byte_end":765764,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ It differentiates between current and on-chain storage version. Both should be only out of sync","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765765,"byte_end":765864,"line_start":246,"line_end":246,"column_start":1,"column_end":100}},{"value":"/ when a new runtime upgrade was applied and the runtime migrations did not yet executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765865,"byte_end":765956,"line_start":247,"line_end":247,"column_start":1,"column_end":92}},{"value":"/ Otherwise it means that the pallet works with an unsupported storage version and unforeseen","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765957,"byte_end":766052,"line_start":248,"line_end":248,"column_start":1,"column_end":96}},{"value":"/ stuff can happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766053,"byte_end":766074,"line_start":249,"line_end":249,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766075,"byte_end":766078,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ The current storage version is the version of the pallet as supported at runtime. The active","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766079,"byte_end":766175,"line_start":251,"line_end":251,"column_start":1,"column_end":97}},{"value":"/ storage version is the version of the pallet in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766176,"byte_end":766240,"line_start":252,"line_end":252,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766241,"byte_end":766244,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ It is required to update the on-chain storage version manually when a migration was applied.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766245,"byte_end":766341,"line_start":254,"line_end":254,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":5812},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766445,"byte_end":766468,"line_start":257,"line_end":257,"column_start":5,"column_end":28},"name":"current_storage_version","qualname":"::traits::metadata::GetStorageVersion::current_storage_version","value":"pub fn current_storage_version() -> StorageVersion","parent":{"krate":0,"index":5811},"children":[],"decl_id":null,"docs":" Returns the current storage version as supported by the pallet.\n","sig":null,"attributes":[{"value":"/ Returns the current storage version as supported by the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766373,"byte_end":766440,"line_start":256,"line_end":256,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5813},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766576,"byte_end":766600,"line_start":259,"line_end":259,"column_start":5,"column_end":29},"name":"on_chain_storage_version","qualname":"::traits::metadata::GetStorageVersion::on_chain_storage_version","value":"pub fn on_chain_storage_version() -> StorageVersion","parent":{"krate":0,"index":5811},"children":[],"decl_id":null,"docs":" Returns the on-chain storage version of the pallet as stored in the storage.\n","sig":null,"attributes":[{"value":"/ Returns the on-chain storage version of the pallet as stored in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":766491,"byte_end":766571,"line_start":258,"line_end":258,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":5858},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768690,"byte_end":768702,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"OnInitialize","qualname":"::traits::hooks::OnInitialize","value":"OnInitialize<BlockNumber>","parent":null,"children":[{"krate":0,"index":5860}],"decl_id":null,"docs":" The block initialization trait.","sig":null,"attributes":[{"value":"/ The block initialization trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768486,"byte_end":768521,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768522,"byte_end":768525,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen for your pallet when the block is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768526,"byte_end":768617,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/ beginning (right before the first extrinsic is executed).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768618,"byte_end":768679,"line_start":27,"line_end":27,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5860},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769103,"byte_end":769116,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::hooks::OnInitialize::on_initialize","value":"pub fn on_initialize(BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":5858},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768719,"byte_end":768790,"line_start":29,"line_end":29,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768792,"byte_end":768795,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768797,"byte_end":768856,"line_start":31,"line_end":31,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768858,"byte_end":768861,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function is called BEFORE ANY extrinsic in a block is applied,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768863,"byte_end":768940,"line_start":33,"line_end":33,"column_start":2,"column_end":79}},{"value":"/ including inherent extrinsics. Hence for instance, if you runtime includes","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":768942,"byte_end":769020,"line_start":34,"line_end":34,"column_start":2,"column_end":80}},{"value":"/ `pallet_timestamp`, the `timestamp` is not yet up to date at this point.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769022,"byte_end":769098,"line_start":35,"line_end":35,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":24309},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769617,"byte_end":769627,"line_start":54,"line_end":54,"column_start":11,"column_end":21},"name":"OnFinalize","qualname":"::traits::hooks::OnFinalize","value":"OnFinalize<BlockNumber>","parent":null,"children":[{"krate":0,"index":24311}],"decl_id":null,"docs":" The block finalization trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24311},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769839,"byte_end":769850,"line_start":59,"line_end":59,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::hooks::OnFinalize::on_finalize","value":"pub fn on_finalize(BlockNumber)","parent":{"krate":0,"index":24309},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5861},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770086,"byte_end":770092,"line_start":66,"line_end":66,"column_start":11,"column_end":17},"name":"OnIdle","qualname":"::traits::hooks::OnIdle","value":"OnIdle<BlockNumber>","parent":null,"children":[{"krate":0,"index":5863}],"decl_id":null,"docs":" The block's on idle trait.","sig":null,"attributes":[{"value":"/ The block's on idle trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769874,"byte_end":769904,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769905,"byte_end":769908,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen for your pallet before","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769909,"byte_end":769989,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ block finalization (see `on_finalize` hook) in case any remaining weight is left.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":769990,"byte_end":770075,"line_start":65,"line_end":65,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":5863},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770505,"byte_end":770512,"line_start":74,"line_end":74,"column_start":5,"column_end":12},"name":"on_idle","qualname":"::traits::hooks::OnIdle::on_idle","value":"pub fn on_idle(BlockNumber, crate::weights::Weight) -> crate::weights::Weight","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":" The block is being finalized.\n Implement to have something happen in case there is leftover weight.\n Check the passed `remaining_weight` to make sure it is high enough to allow for\n your pallet's extra computation.","sig":null,"attributes":[{"value":"/ The block is being finalized.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770109,"byte_end":770142,"line_start":67,"line_end":67,"column_start":2,"column_end":35}},{"value":"/ Implement to have something happen in case there is leftover weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770144,"byte_end":770216,"line_start":68,"line_end":68,"column_start":2,"column_end":74}},{"value":"/ Check the passed `remaining_weight` to make sure it is high enough to allow for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770218,"byte_end":770301,"line_start":69,"line_end":69,"column_start":2,"column_end":85}},{"value":"/ your pallet's extra computation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770303,"byte_end":770339,"line_start":70,"line_end":70,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770341,"byte_end":770344,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function is called AFTER ALL extrinsics - including inherent extrinsics -","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770346,"byte_end":770434,"line_start":72,"line_end":72,"column_start":2,"column_end":90}},{"value":"/ in a block are applied but before `on_finalize` is executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":770436,"byte_end":770500,"line_start":73,"line_end":73,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":25428},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":771814,"byte_end":771823,"line_start":109,"line_end":109,"column_start":11,"column_end":20},"name":"OnGenesis","qualname":"::traits::hooks::OnGenesis","value":"OnGenesis","parent":null,"children":[{"krate":0,"index":25429}],"decl_id":null,"docs":" A trait that will be called at genesis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25429},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":771876,"byte_end":771886,"line_start":111,"line_end":111,"column_start":5,"column_end":15},"name":"on_genesis","qualname":"::traits::hooks::OnGenesis::on_genesis","value":"pub fn on_genesis()","parent":{"krate":0,"index":25428},"children":[],"decl_id":null,"docs":" Something that should happen at genesis.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5864},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773785,"byte_end":773801,"line_start":159,"line_end":159,"column_start":11,"column_end":27},"name":"OnRuntimeUpgrade","qualname":"::traits::hooks::OnRuntimeUpgrade","value":"OnRuntimeUpgrade","parent":null,"children":[{"krate":0,"index":5865}],"decl_id":null,"docs":" The runtime upgrade trait.","sig":null,"attributes":[{"value":"/ The runtime upgrade trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773605,"byte_end":773635,"line_start":155,"line_end":155,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773636,"byte_end":773639,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Implementing this lets you express what should happen when the runtime upgrades,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773640,"byte_end":773724,"line_start":157,"line_end":157,"column_start":1,"column_end":85}},{"value":"/ and changes may need to occur to your module.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773725,"byte_end":773774,"line_start":158,"line_end":158,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5865},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":774150,"byte_end":774168,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::hooks::OnRuntimeUpgrade::on_runtime_upgrade","value":"pub fn on_runtime_upgrade() -> crate::weights::Weight","parent":{"krate":0,"index":5864},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773805,"byte_end":773834,"line_start":160,"line_end":160,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773836,"byte_end":773839,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773841,"byte_end":773854,"line_start":162,"line_end":162,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773856,"byte_end":773859,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ This function will be called before we initialized any runtime state, aka `on_initialize`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773861,"byte_end":773954,"line_start":164,"line_end":164,"column_start":2,"column_end":95}},{"value":"/ wasn't called yet. So, information like the block number and any other","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":773956,"byte_end":774030,"line_start":165,"line_end":165,"column_start":2,"column_end":76}},{"value":"/ block local data are not accessible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":774032,"byte_end":774072,"line_start":166,"line_end":166,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":774074,"byte_end":774077,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":774079,"byte_end":774145,"line_start":168,"line_end":168,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":5866},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775418,"byte_end":775423,"line_start":214,"line_end":214,"column_start":11,"column_end":16},"name":"Hooks","qualname":"::traits::hooks::Hooks","value":"Hooks<BlockNumber>","parent":null,"children":[{"krate":0,"index":5868},{"krate":0,"index":5869},{"krate":0,"index":5870},{"krate":0,"index":5871},{"krate":0,"index":5872},{"krate":0,"index":5873}],"decl_id":null,"docs":" The pallet hooks trait. Implementing this lets you express some logic to execute.\n","sig":null,"attributes":[{"value":"/ The pallet hooks trait. Implementing this lets you express some logic to execute.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775322,"byte_end":775407,"line_start":213,"line_end":213,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":5868},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775514,"byte_end":775525,"line_start":216,"line_end":216,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::hooks::Hooks::on_finalize","value":"pub fn on_finalize(BlockNumber)","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.\n","sig":null,"attributes":[{"value":"/ The block is being finalized. Implement to have something happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775440,"byte_end":775509,"line_start":215,"line_end":215,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5869},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775894,"byte_end":775901,"line_start":223,"line_end":223,"column_start":5,"column_end":12},"name":"on_idle","qualname":"::traits::hooks::Hooks::on_idle","value":"pub fn on_idle(BlockNumber, crate::weights::Weight) -> crate::weights::Weight","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" This will be run when the block is being finalized (before `on_finalize`).\n Implement to have something happen using the remaining weight.\n Will not fire if the remaining weight is 0.\n Return the weight used, the hook will subtract it from current weight used\n and pass the result to the next `on_idle` hook if it exists.\n","sig":null,"attributes":[{"value":"/ This will be run when the block is being finalized (before `on_finalize`).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775548,"byte_end":775626,"line_start":218,"line_end":218,"column_start":2,"column_end":80}},{"value":"/ Implement to have something happen using the remaining weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775628,"byte_end":775694,"line_start":219,"line_end":219,"column_start":2,"column_end":68}},{"value":"/ Will not fire if the remaining weight is 0.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775696,"byte_end":775743,"line_start":220,"line_end":220,"column_start":2,"column_end":49}},{"value":"/ Return the weight used, the hook will subtract it from current weight used","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775745,"byte_end":775823,"line_start":221,"line_end":221,"column_start":2,"column_end":80}},{"value":"/ and pass the result to the next `on_idle` hook if it exists.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":775825,"byte_end":775889,"line_start":222,"line_end":222,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5870},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776149,"byte_end":776162,"line_start":233,"line_end":233,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::hooks::Hooks::on_initialize","value":"pub fn on_initialize(BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776007,"byte_end":776078,"line_start":230,"line_end":230,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776080,"byte_end":776083,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776085,"byte_end":776144,"line_start":232,"line_end":232,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":5871},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777170,"byte_end":777188,"line_start":256,"line_end":256,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::hooks::Hooks::on_runtime_upgrade","value":"pub fn on_runtime_upgrade() -> crate::weights::Weight","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776217,"byte_end":776246,"line_start":237,"line_end":237,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776248,"byte_end":776251,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ NOTE: this doesn't include all pallet logic triggered on runtime upgrade. For instance it","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776253,"byte_end":776346,"line_start":239,"line_end":239,"column_start":2,"column_end":95}},{"value":"/ doesn't include the write of the pallet version in storage. The final complete logic","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776348,"byte_end":776436,"line_start":240,"line_end":240,"column_start":2,"column_end":90}},{"value":"/ triggered on runtime upgrade is given by implementation of `OnRuntimeUpgrade` trait by","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776438,"byte_end":776528,"line_start":241,"line_end":241,"column_start":2,"column_end":92}},{"value":"/ `Pallet`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776530,"byte_end":776543,"line_start":242,"line_end":242,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776545,"byte_end":776548,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776550,"byte_end":776563,"line_start":244,"line_end":244,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776565,"byte_end":776568,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ This function will be called before we initialized any runtime state, aka `on_initialize`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776570,"byte_end":776663,"line_start":246,"line_end":246,"column_start":2,"column_end":95}},{"value":"/ wasn't called yet. So, information like the block number and any other block local data are","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776665,"byte_end":776760,"line_start":247,"line_end":247,"column_start":2,"column_end":97}},{"value":"/ not accessible.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776762,"byte_end":776781,"line_start":248,"line_end":248,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776783,"byte_end":776786,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776788,"byte_end":776854,"line_start":250,"line_end":250,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776856,"byte_end":776859,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ While this function can be freely implemented, using `on_runtime_upgrade` from inside the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776861,"byte_end":776954,"line_start":252,"line_end":252,"column_start":2,"column_end":95}},{"value":"/ pallet is discouraged and might get deprecated in the future. Alternatively, export the same","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":776956,"byte_end":777052,"line_start":253,"line_end":253,"column_start":2,"column_end":98}},{"value":"/ logic as a free-function from your pallet, and pass it to `type Executive` from the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777054,"byte_end":777141,"line_start":254,"line_end":254,"column_start":2,"column_end":89}},{"value":"/ top-level runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777143,"byte_end":777165,"line_start":255,"line_end":255,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5872},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778543,"byte_end":778558,"line_start":291,"line_end":291,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::hooks::Hooks::offchain_worker","value":"pub fn offchain_worker(BlockNumber)","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" Implementing this function on a module allows you to perform long-running tasks\n that make (by default) validators generate transactions that feed results\n of those long-running computations back on chain.","sig":null,"attributes":[{"value":"/ Implementing this function on a module allows you to perform long-running tasks","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777731,"byte_end":777814,"line_start":276,"line_end":276,"column_start":2,"column_end":85}},{"value":"/ that make (by default) validators generate transactions that feed results","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777816,"byte_end":777893,"line_start":277,"line_end":277,"column_start":2,"column_end":79}},{"value":"/ of those long-running computations back on chain.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777895,"byte_end":777948,"line_start":278,"line_end":278,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777950,"byte_end":777953,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ NOTE: This function runs off-chain, so it can access the block state,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":777955,"byte_end":778028,"line_start":280,"line_end":280,"column_start":2,"column_end":75}},{"value":"/ but cannot preform any alterations. More specifically alterations are","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778030,"byte_end":778103,"line_start":281,"line_end":281,"column_start":2,"column_end":75}},{"value":"/ not forbidden, but they are not persisted in any way after the worker","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778105,"byte_end":778178,"line_start":282,"line_end":282,"column_start":2,"column_end":75}},{"value":"/ has finished.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778180,"byte_end":778197,"line_start":283,"line_end":283,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778199,"byte_end":778202,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This function is being called after every block import (when fully synced).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778204,"byte_end":778283,"line_start":285,"line_end":285,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778285,"byte_end":778288,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ Implement this and use any of the `Offchain` `sp_io` set of APIs","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778290,"byte_end":778358,"line_start":287,"line_end":287,"column_start":2,"column_end":70}},{"value":"/ to perform off-chain computations, calls and submit transactions","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778360,"byte_end":778428,"line_start":288,"line_end":288,"column_start":2,"column_end":70}},{"value":"/ with results to trigger any on-chain changes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778430,"byte_end":778479,"line_start":289,"line_end":289,"column_start":2,"column_end":51}},{"value":"/ Any state alterations are lost and are not persisted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778481,"byte_end":778538,"line_start":290,"line_end":290,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":5873},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778685,"byte_end":778699,"line_start":296,"line_end":296,"column_start":5,"column_end":19},"name":"integrity_test","qualname":"::traits::hooks::Hooks::integrity_test","value":"pub fn integrity_test()","parent":{"krate":0,"index":5866},"children":[],"decl_id":null,"docs":" Run integrity test.","sig":null,"attributes":[{"value":"/ Run integrity test.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778581,"byte_end":778604,"line_start":293,"line_end":293,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778606,"byte_end":778609,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ The test is not executed in a externalities provided environment.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778611,"byte_end":778680,"line_start":295,"line_end":295,"column_start":2,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":5874},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778870,"byte_end":778882,"line_start":302,"line_end":302,"column_start":11,"column_end":23},"name":"GenesisBuild","qualname":"::traits::hooks::GenesisBuild","value":"GenesisBuild<T, I = ()>: Default + sp_runtime::traits::MaybeSerializeDeserialize","parent":null,"children":[{"krate":0,"index":5877},{"krate":0,"index":5878},{"krate":0,"index":5879}],"decl_id":null,"docs":" A trait to define the build function of a genesis config, T and I are placeholder for pallet\n trait and pallet instance.\n","sig":null,"attributes":[{"value":"/ A trait to define the build function of a genesis config, T and I are placeholder for pallet","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778708,"byte_end":778804,"line_start":299,"line_end":299,"column_start":1,"column_end":97}},{"value":"/ trait and pallet instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778805,"byte_end":778835,"line_start":300,"line_end":300,"column_start":1,"column_end":31}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778836,"byte_end":778859,"line_start":301,"line_end":301,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5877},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779104,"byte_end":779109,"line_start":305,"line_end":305,"column_start":5,"column_end":10},"name":"build","qualname":"::traits::hooks::GenesisBuild::build","value":"pub fn build(&Self)","parent":{"krate":0,"index":5874},"children":[],"decl_id":null,"docs":" The build function is called within an externalities allowing storage APIs.\n Thus one can write to storage using regular pallet storages.\n","sig":null,"attributes":[{"value":"/ The build function is called within an externalities allowing storage APIs.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778954,"byte_end":779033,"line_start":303,"line_end":303,"column_start":2,"column_end":81}},{"value":"/ Thus one can write to storage using regular pallet storages.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779035,"byte_end":779099,"line_start":304,"line_end":304,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5878},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779184,"byte_end":779197,"line_start":308,"line_end":308,"column_start":5,"column_end":18},"name":"build_storage","qualname":"::traits::hooks::GenesisBuild::build_storage","value":"pub fn build_storage(&Self) -> Result<sp_runtime::Storage, String>","parent":{"krate":0,"index":5874},"children":[],"decl_id":null,"docs":" Build the storage using `build` inside default storage.\n","sig":null,"attributes":[{"value":"/ Build the storage using `build` inside default storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779120,"byte_end":779179,"line_start":307,"line_end":307,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":5879},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779422,"byte_end":779440,"line_start":315,"line_end":315,"column_start":5,"column_end":23},"name":"assimilate_storage","qualname":"::traits::hooks::GenesisBuild::assimilate_storage","value":"pub fn assimilate_storage(&Self, &mut sp_runtime::Storage)\n-> Result<(), String>","parent":{"krate":0,"index":5874},"children":[],"decl_id":null,"docs":" Assimilate the storage for this module into pre-existing overlays.\n","sig":null,"attributes":[{"value":"/ Assimilate the storage for this module into pre-existing overlays.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779347,"byte_end":779417,"line_start":314,"line_end":314,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":26484},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779723,"byte_end":779737,"line_start":325,"line_end":325,"column_start":11,"column_end":25},"name":"OnTimestampSet","qualname":"::traits::hooks::OnTimestampSet","value":"OnTimestampSet<Moment>","parent":null,"children":[{"krate":0,"index":26486}],"decl_id":null,"docs":" A trait which is called when the timestamp is set in the runtime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26486},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":779791,"byte_end":779807,"line_start":327,"line_end":327,"column_start":5,"column_end":21},"name":"on_timestamp_set","qualname":"::traits::hooks::OnTimestampSet::on_timestamp_set","value":"pub fn on_timestamp_set(Moment)","parent":{"krate":0,"index":26484},"children":[],"decl_id":null,"docs":" Called when the timestamp is set.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5906},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"schedule","qualname":"::traits::schedule","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","parent":null,"children":[{"krate":0,"index":5907},{"krate":0,"index":5908},{"krate":0,"index":5911},{"krate":0,"index":5912},{"krate":0,"index":5914},{"krate":0,"index":5915},{"krate":0,"index":5917},{"krate":0,"index":5920},{"krate":0,"index":5921},{"krate":0,"index":5923},{"krate":0,"index":5924},{"krate":0,"index":5926},{"krate":0,"index":5927},{"krate":0,"index":5930},{"krate":0,"index":5933},{"krate":0,"index":5934},{"krate":0,"index":5935},{"krate":0,"index":5937},{"krate":0,"index":5938},{"krate":0,"index":5941},{"krate":0,"index":5943},{"krate":0,"index":27045},{"krate":0,"index":27053},{"krate":0,"index":27060},{"krate":0,"index":27066},{"krate":0,"index":27068},{"krate":0,"index":27071},{"krate":0,"index":27073},{"krate":0,"index":27077},{"krate":0,"index":27079},{"krate":0,"index":27082},{"krate":0,"index":27085},{"krate":0,"index":5944},{"krate":0,"index":5945},{"krate":0,"index":5946},{"krate":0,"index":27094},{"krate":0,"index":27103},{"krate":0,"index":27107},{"krate":0,"index":27110},{"krate":0,"index":27114},{"krate":0,"index":27117},{"krate":0,"index":27122},{"krate":0,"index":27131},{"krate":0,"index":27138},{"krate":0,"index":27142},{"krate":0,"index":27152},{"krate":0,"index":5947},{"krate":0,"index":27157},{"krate":0,"index":27162},{"krate":0,"index":27164},{"krate":0,"index":27165},{"krate":0,"index":27167},{"krate":0,"index":27168},{"krate":0,"index":27170},{"krate":0,"index":27175},{"krate":0,"index":27180},{"krate":0,"index":27182},{"krate":0,"index":27188},{"krate":0,"index":5951},{"krate":0,"index":5962},{"krate":0,"index":6002},{"krate":0,"index":6024},{"krate":0,"index":6025}],"decl_id":null,"docs":" Traits and associated utilities for scheduling dispatchables in FRAME.\n","sig":null,"attributes":[{"value":"/ Traits and associated utilities for scheduling dispatchables in FRAME.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":782525,"byte_end":782599,"line_start":18,"line_end":18,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":5941},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783029,"byte_end":783035,"line_start":28,"line_end":28,"column_start":10,"column_end":16},"name":"Period","qualname":"::traits::schedule::Period","value":"(BlockNumber, u32)","parent":null,"children":[],"decl_id":null,"docs":" Information relating to the period of a scheduled task. First item is the length of the\n period and the second is the number of times it should be executed in total before the task\n is considered finished and removed.\n","sig":null,"attributes":[{"value":"/ Information relating to the period of a scheduled task. First item is the length of the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":782792,"byte_end":782883,"line_start":25,"line_end":25,"column_start":1,"column_end":92}},{"value":"/ period and the second is the number of times it should be executed in total before the task","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":782884,"byte_end":782979,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ is considered finished and removed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":782980,"byte_end":783019,"line_start":27,"line_end":27,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":5943},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783200,"byte_end":783208,"line_start":32,"line_end":32,"column_start":10,"column_end":18},"name":"Priority","qualname":"::traits::schedule::Priority","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Priority with which a call is scheduled. It's just a linear amount with lowest values meaning\n higher priority.\n","sig":null,"attributes":[{"value":"/ Priority with which a call is scheduled. It's just a linear amount with lowest values meaning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783072,"byte_end":783169,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ higher priority.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783170,"byte_end":783190,"line_start":31,"line_end":31,"column_start":1,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27047},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783400,"byte_end":783402,"line_start":38,"line_end":38,"column_start":2,"column_end":4},"name":"At","qualname":"::traits::schedule::DispatchTime::At","value":"DispatchTime::At(BlockNumber)","parent":{"krate":0,"index":27045},"children":[],"decl_id":null,"docs":" At specified block.\n","sig":null,"attributes":[{"value":"/ At specified block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783375,"byte_end":783398,"line_start":37,"line_end":37,"column_start":2,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27050},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783457,"byte_end":783462,"line_start":40,"line_end":40,"column_start":2,"column_end":7},"name":"After","qualname":"::traits::schedule::DispatchTime::After","value":"DispatchTime::After(BlockNumber)","parent":{"krate":0,"index":27045},"children":[],"decl_id":null,"docs":" After specified number of blocks.\n","sig":null,"attributes":[{"value":"/ After specified number of blocks.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783418,"byte_end":783455,"line_start":39,"line_end":39,"column_start":2,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":27045},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783346,"byte_end":783358,"line_start":36,"line_end":36,"column_start":10,"column_end":22},"name":"DispatchTime","qualname":"::traits::schedule::DispatchTime","value":"pub enum DispatchTime<BlockNumber> { At(BlockNumber), After(BlockNumber), }","parent":null,"children":[{"krate":0,"index":27047},{"krate":0,"index":27050}],"decl_id":null,"docs":" The dispatch time of a scheduled task.\n","sig":null,"attributes":[{"value":"/ The dispatch time of a scheduled task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783216,"byte_end":783258,"line_start":34,"line_end":34,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":5944},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783625,"byte_end":783641,"line_start":45,"line_end":45,"column_start":11,"column_end":27},"name":"HIGHEST_PRIORITY","qualname":"::traits::schedule::HIGHEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The highest priority. We invert the value so that normal sorting will place the highest\n priority at the beginning of the list.\n","sig":null,"attributes":[{"value":"/ The highest priority. We invert the value so that normal sorting will place the highest","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783480,"byte_end":783571,"line_start":43,"line_end":43,"column_start":1,"column_end":92}},{"value":"/ priority at the beginning of the list.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783572,"byte_end":783614,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":5945},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783820,"byte_end":783833,"line_start":48,"line_end":48,"column_start":11,"column_end":24},"name":"HARD_DEADLINE","qualname":"::traits::schedule::HARD_DEADLINE","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" Anything of this value or lower will definitely be scheduled on the block that they ask for,\n even if it breaches the `MaximumWeight` limitation.\n","sig":null,"attributes":[{"value":"/ Anything of this value or lower will definitely be scheduled on the block that they ask for,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783657,"byte_end":783753,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"/ even if it breaches the `MaximumWeight` limitation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783754,"byte_end":783809,"line_start":47,"line_end":47,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":5946},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783919,"byte_end":783934,"line_start":50,"line_end":50,"column_start":11,"column_end":26},"name":"LOWEST_PRIORITY","qualname":"::traits::schedule::LOWEST_PRIORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The lowest priority. Most stuff should be around here.\n","sig":null,"attributes":[{"value":"/ The lowest priority. Most stuff should be around here.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783850,"byte_end":783908,"line_start":49,"line_end":49,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784182,"byte_end":784187,"line_start":56,"line_end":56,"column_start":2,"column_end":7},"name":"Value","qualname":"::traits::schedule::MaybeHashed::Value","value":"MaybeHashed::Value(T)","parent":{"krate":0,"index":27094},"children":[],"decl_id":null,"docs":" The value itself.\n","sig":null,"attributes":[{"value":"/ The value itself.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784159,"byte_end":784180,"line_start":55,"line_end":55,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27100},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784257,"byte_end":784261,"line_start":58,"line_end":58,"column_start":2,"column_end":6},"name":"Hash","qualname":"::traits::schedule::MaybeHashed::Hash","value":"MaybeHashed::Hash(Hash)","parent":{"krate":0,"index":27094},"children":[],"decl_id":null,"docs":" The hash of the encoded value which this value represents.\n","sig":null,"attributes":[{"value":"/ The hash of the encoded value which this value represents.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784193,"byte_end":784255,"line_start":57,"line_end":57,"column_start":2,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":27094},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784135,"byte_end":784146,"line_start":54,"line_end":54,"column_start":10,"column_end":21},"name":"MaybeHashed","qualname":"::traits::schedule::MaybeHashed","value":"pub enum MaybeHashed<T, Hash> { Value(T), Hash(Hash), }","parent":null,"children":[{"krate":0,"index":27097},{"krate":0,"index":27100}],"decl_id":null,"docs":" Type representing an encodable value or the hash of the encoding of such a value.\n","sig":null,"attributes":[{"value":"/ Type representing an encodable value or the hash of the encoding of such a value.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":783953,"byte_end":784038,"line_start":52,"line_end":52,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27158},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784563,"byte_end":784570,"line_start":71,"line_end":71,"column_start":2,"column_end":9},"name":"Unknown","qualname":"::traits::schedule::LookupError::Unknown","value":"LookupError::Unknown","parent":{"krate":0,"index":27157},"children":[],"decl_id":null,"docs":" A call of this hash was not known.\n","sig":null,"attributes":[{"value":"/ A call of this hash was not known.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784523,"byte_end":784561,"line_start":70,"line_end":70,"column_start":2,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27160},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784655,"byte_end":784664,"line_start":73,"line_end":73,"column_start":2,"column_end":11},"name":"BadFormat","qualname":"::traits::schedule::LookupError::BadFormat","value":"LookupError::BadFormat","parent":{"krate":0,"index":27157},"children":[],"decl_id":null,"docs":" The preimage for this hash was known but could not be decoded into a `Call`.\n","sig":null,"attributes":[{"value":"/ The preimage for this hash was known but could not be decoded into a `Call`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784573,"byte_end":784653,"line_start":72,"line_end":72,"column_start":2,"column_end":82}}]},{"kind":"Enum","id":{"krate":0,"index":27157},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784508,"byte_end":784519,"line_start":69,"line_end":69,"column_start":10,"column_end":21},"name":"LookupError","qualname":"::traits::schedule::LookupError","value":"pub enum LookupError { Unknown, BadFormat, }","parent":null,"children":[{"krate":0,"index":27158},{"krate":0,"index":27160}],"decl_id":null,"docs":" Error type for `MaybeHashed::lookup`.\n","sig":null,"attributes":[{"value":"/ Error type for `MaybeHashed::lookup`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784370,"byte_end":784411,"line_start":67,"line_end":67,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":5954},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784716,"byte_end":784724,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"name":"as_value","qualname":"<MaybeHashed<T, H>>::as_value","value":"pub fn as_value(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5955},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784836,"byte_end":784843,"line_start":84,"line_end":84,"column_start":9,"column_end":16},"name":"as_hash","qualname":"<MaybeHashed<T, H>>::as_hash","value":"pub fn as_hash(&Self) -> Option<&H>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5956},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784955,"byte_end":784971,"line_start":91,"line_end":91,"column_start":9,"column_end":25},"name":"ensure_requested","qualname":"<MaybeHashed<T, H>>::ensure_requested","value":"pub fn ensure_requested<P: PreimageProvider<H>>(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5958},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785112,"byte_end":785130,"line_start":98,"line_end":98,"column_start":9,"column_end":27},"name":"ensure_unrequested","qualname":"<MaybeHashed<T, H>>::ensure_unrequested","value":"pub fn ensure_unrequested<P: PreimageProvider<H>>(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5960},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785273,"byte_end":785281,"line_start":105,"line_end":105,"column_start":9,"column_end":17},"name":"resolved","qualname":"<MaybeHashed<T, H>>::resolved","value":"pub fn resolved<P: PreimageProvider<H>>(Self) -> (Self, Option<H>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5962},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785676,"byte_end":785678,"line_start":122,"line_end":122,"column_start":9,"column_end":11},"name":"v1","qualname":"::traits::schedule::v1","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","parent":null,"children":[{"krate":0,"index":5963},{"krate":0,"index":5964},{"krate":0,"index":5973},{"krate":0,"index":5982},{"krate":0,"index":5992}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5964},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785753,"byte_end":785757,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"Anon","qualname":"::traits::schedule::v1::Anon","value":"Anon<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":5968},{"krate":0,"index":5969},{"krate":0,"index":5970},{"krate":0,"index":5971},{"krate":0,"index":5972}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785698,"byte_end":785741,"line_start":125,"line_end":125,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":5968},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785860,"byte_end":785867,"line_start":128,"line_end":128,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::v1::Anon::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + Debug + TypeInfo;","parent":{"krate":0,"index":5964},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785789,"byte_end":785852,"line_start":127,"line_end":127,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5969},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786040,"byte_end":786048,"line_start":133,"line_end":133,"column_start":6,"column_end":14},"name":"schedule","qualname":"::traits::schedule::v1::Anon::schedule","value":"pub fn schedule(DispatchTime<BlockNumber>, Option<Period<BlockNumber>>,\nPriority, Origin, Call) -> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":5964},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":785924,"byte_end":786003,"line_start":130,"line_end":130,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786006,"byte_end":786009,"line_start":131,"line_end":131,"column_start":3,"column_end":6}},{"value":"/ This is not named.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786012,"byte_end":786034,"line_start":132,"line_end":132,"column_start":3,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":5970},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786771,"byte_end":786777,"line_start":151,"line_end":151,"column_start":6,"column_end":12},"name":"cancel","qualname":"::traits::schedule::v1::Anon::cancel","value":"pub fn cancel(Self::Address) -> Result<(), ()>","parent":{"krate":0,"index":5964},"children":[],"decl_id":null,"docs":" Cancel a scheduled task. If periodic, then it will cancel all further instances of that,\n also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled task. If periodic, then it will cancel all further instances of that,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786239,"byte_end":786331,"line_start":141,"line_end":141,"column_start":3,"column_end":95}},{"value":"/ also.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786334,"byte_end":786343,"line_start":142,"line_end":142,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786346,"byte_end":786349,"line_start":143,"line_end":143,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786352,"byte_end":786405,"line_start":144,"line_end":144,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786408,"byte_end":786411,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786414,"byte_end":786502,"line_start":146,"line_end":146,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786505,"byte_end":786596,"line_start":147,"line_end":147,"column_start":3,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786599,"byte_end":786602,"line_start":148,"line_end":148,"column_start":3,"column_end":6}},{"value":"/ NOTE2: This will not work to cancel periodic tasks after their initial execution. For","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786605,"byte_end":786694,"line_start":149,"line_end":149,"column_start":3,"column_end":92}},{"value":"/ that, you must name the task explicitly using the `Named` trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786697,"byte_end":786765,"line_start":150,"line_end":150,"column_start":3,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":5971},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787185,"byte_end":787195,"line_start":159,"line_end":159,"column_start":6,"column_end":16},"name":"reschedule","qualname":"::traits::schedule::v1::Anon::reschedule","value":"pub fn reschedule(Self::Address, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":5964},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block. For periodic tasks,\n this dispatch is guaranteed to succeed only before the *initial* execution; for\n others, use `reschedule_named`.","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786824,"byte_end":786904,"line_start":153,"line_end":153,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block. For periodic tasks,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786907,"byte_end":786993,"line_start":154,"line_end":154,"column_start":3,"column_end":89}},{"value":"/ this dispatch is guaranteed to succeed only before the *initial* execution; for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":786996,"byte_end":787079,"line_start":155,"line_end":155,"column_start":3,"column_end":86}},{"value":"/ others, use `reschedule_named`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787082,"byte_end":787117,"line_start":156,"line_end":156,"column_start":3,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787120,"byte_end":787123,"line_start":157,"line_end":157,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787126,"byte_end":787179,"line_start":158,"line_end":158,"column_start":3,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":5972},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787427,"byte_end":787445,"line_start":167,"line_end":167,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::v1::Anon::next_dispatch_time","value":"pub fn next_dispatch_time(Self::Address) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":5964},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787308,"byte_end":787359,"line_start":164,"line_end":164,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787362,"byte_end":787365,"line_start":165,"line_end":165,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787368,"byte_end":787421,"line_start":166,"line_end":166,"column_start":3,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":5973},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787558,"byte_end":787563,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"name":"Named","qualname":"::traits::schedule::v1::Named","value":"Named<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":5977},{"krate":0,"index":5978},{"krate":0,"index":5979},{"krate":0,"index":5980},{"krate":0,"index":5981}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787503,"byte_end":787546,"line_start":170,"line_end":170,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":5977},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787666,"byte_end":787673,"line_start":173,"line_end":173,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::v1::Named::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + sp_std::fmt::Debug;","parent":{"krate":0,"index":5973},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787595,"byte_end":787658,"line_start":172,"line_end":172,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5978},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787916,"byte_end":787930,"line_start":178,"line_end":178,"column_start":6,"column_end":20},"name":"schedule_named","qualname":"::traits::schedule::v1::Named::schedule_named","value":"pub fn schedule_named(Vec<u8>, DispatchTime<BlockNumber>,\nOption<Period<BlockNumber>>, Priority, Origin, Call)\n-> Result<Self::Address, ()>","parent":{"krate":0,"index":5973},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787732,"byte_end":787811,"line_start":175,"line_end":175,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787814,"byte_end":787817,"line_start":176,"line_end":176,"column_start":3,"column_end":6}},{"value":"/ - `id`: The identity of the task. This must be unique and will return an error if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":787820,"byte_end":787910,"line_start":177,"line_end":177,"column_start":3,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":5979},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788491,"byte_end":788503,"line_start":194,"line_end":194,"column_start":6,"column_end":18},"name":"cancel_named","qualname":"::traits::schedule::v1::Named::cancel_named","value":"pub fn cancel_named(Vec<u8>) -> Result<(), ()>","parent":{"krate":0,"index":5973},"children":[],"decl_id":null,"docs":" Cancel a scheduled, named task. If periodic, then it will cancel all further instances\n of that, also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled, named task. If periodic, then it will cancel all further instances","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788126,"byte_end":788216,"line_start":187,"line_end":187,"column_start":3,"column_end":93}},{"value":"/ of that, also.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788219,"byte_end":788237,"line_start":188,"line_end":188,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788240,"byte_end":788243,"line_start":189,"line_end":189,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788246,"byte_end":788294,"line_start":190,"line_end":190,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788297,"byte_end":788300,"line_start":191,"line_end":191,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788303,"byte_end":788391,"line_start":192,"line_end":192,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788394,"byte_end":788485,"line_start":193,"line_end":193,"column_start":3,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":5980},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788694,"byte_end":788710,"line_start":198,"line_end":198,"column_start":6,"column_end":22},"name":"reschedule_named","qualname":"::traits::schedule::v1::Named::reschedule_named","value":"pub fn reschedule_named(Vec<u8>, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":5973},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block.\n","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788539,"byte_end":788619,"line_start":196,"line_end":196,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788622,"byte_end":788688,"line_start":197,"line_end":197,"column_start":3,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5981},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788926,"byte_end":788944,"line_start":206,"line_end":206,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::v1::Named::next_dispatch_time","value":"pub fn next_dispatch_time(Vec<u8>) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":5973},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788812,"byte_end":788863,"line_start":203,"line_end":203,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788866,"byte_end":788869,"line_start":204,"line_end":204,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":788872,"byte_end":788920,"line_start":205,"line_end":205,"column_start":3,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":6002},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790679,"byte_end":790681,"line_start":277,"line_end":277,"column_start":9,"column_end":11},"name":"v2","qualname":"::traits::schedule::v2","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","parent":null,"children":[{"krate":0,"index":6003},{"krate":0,"index":6004},{"krate":0,"index":6014}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6004},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790756,"byte_end":790760,"line_start":281,"line_end":281,"column_start":12,"column_end":16},"name":"Anon","qualname":"::traits::schedule::v2::Anon","value":"Anon<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":6008},{"krate":0,"index":6009},{"krate":0,"index":6010},{"krate":0,"index":6011},{"krate":0,"index":6012},{"krate":0,"index":6013}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790701,"byte_end":790744,"line_start":280,"line_end":280,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":6008},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790863,"byte_end":790870,"line_start":283,"line_end":283,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::v2::Anon::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + Debug + TypeInfo;","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790792,"byte_end":790855,"line_start":282,"line_end":282,"column_start":3,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":6009},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790999,"byte_end":791003,"line_start":285,"line_end":285,"column_start":8,"column_end":12},"name":"Hash","qualname":"::traits::schedule::v2::Anon::Hash","value":"type Hash;","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" A means of expressing a call by the hash of its encoded data.\n","sig":null,"attributes":[{"value":"/ A means of expressing a call by the hash of its encoded data.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":790926,"byte_end":790991,"line_start":284,"line_end":284,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":6010},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791124,"byte_end":791132,"line_start":290,"line_end":290,"column_start":6,"column_end":14},"name":"schedule","qualname":"::traits::schedule::v2::Anon::schedule","value":"pub fn schedule(DispatchTime<BlockNumber>, Option<Period<BlockNumber>>,\nPriority, Origin, MaybeHashed<Call, Self::Hash>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791008,"byte_end":791087,"line_start":287,"line_end":287,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791090,"byte_end":791093,"line_start":288,"line_end":288,"column_start":3,"column_end":6}},{"value":"/ This is not named.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791096,"byte_end":791118,"line_start":289,"line_end":289,"column_start":3,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":6011},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791880,"byte_end":791886,"line_start":308,"line_end":308,"column_start":6,"column_end":12},"name":"cancel","qualname":"::traits::schedule::v2::Anon::cancel","value":"pub fn cancel(Self::Address) -> Result<(), ()>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Cancel a scheduled task. If periodic, then it will cancel all further instances of that,\n also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled task. If periodic, then it will cancel all further instances of that,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791348,"byte_end":791440,"line_start":298,"line_end":298,"column_start":3,"column_end":95}},{"value":"/ also.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791443,"byte_end":791452,"line_start":299,"line_end":299,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791455,"byte_end":791458,"line_start":300,"line_end":300,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791461,"byte_end":791514,"line_start":301,"line_end":301,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791517,"byte_end":791520,"line_start":302,"line_end":302,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791523,"byte_end":791611,"line_start":303,"line_end":303,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791614,"byte_end":791705,"line_start":304,"line_end":304,"column_start":3,"column_end":94}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791708,"byte_end":791711,"line_start":305,"line_end":305,"column_start":3,"column_end":6}},{"value":"/ NOTE2: This will not work to cancel periodic tasks after their initial execution. For","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791714,"byte_end":791803,"line_start":306,"line_end":306,"column_start":3,"column_end":92}},{"value":"/ that, you must name the task explicitly using the `Named` trait.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791806,"byte_end":791874,"line_start":307,"line_end":307,"column_start":3,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":6012},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792294,"byte_end":792304,"line_start":316,"line_end":316,"column_start":6,"column_end":16},"name":"reschedule","qualname":"::traits::schedule::v2::Anon::reschedule","value":"pub fn reschedule(Self::Address, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block. For periodic tasks,\n this dispatch is guaranteed to succeed only before the *initial* execution; for\n others, use `reschedule_named`.","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":791933,"byte_end":792013,"line_start":310,"line_end":310,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block. For periodic tasks,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792016,"byte_end":792102,"line_start":311,"line_end":311,"column_start":3,"column_end":89}},{"value":"/ this dispatch is guaranteed to succeed only before the *initial* execution; for","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792105,"byte_end":792188,"line_start":312,"line_end":312,"column_start":3,"column_end":86}},{"value":"/ others, use `reschedule_named`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792191,"byte_end":792226,"line_start":313,"line_end":313,"column_start":3,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792229,"byte_end":792232,"line_start":314,"line_end":314,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792235,"byte_end":792288,"line_start":315,"line_end":315,"column_start":3,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":6013},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792536,"byte_end":792554,"line_start":324,"line_end":324,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::v2::Anon::next_dispatch_time","value":"pub fn next_dispatch_time(Self::Address) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":6004},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792417,"byte_end":792468,"line_start":321,"line_end":321,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792471,"byte_end":792474,"line_start":322,"line_end":322,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792477,"byte_end":792530,"line_start":323,"line_end":323,"column_start":3,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":6014},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792667,"byte_end":792672,"line_start":328,"line_end":328,"column_start":12,"column_end":17},"name":"Named","qualname":"::traits::schedule::v2::Named","value":"Named<BlockNumber, Call, Origin>","parent":null,"children":[{"krate":0,"index":6018},{"krate":0,"index":6019},{"krate":0,"index":6020},{"krate":0,"index":6021},{"krate":0,"index":6022},{"krate":0,"index":6023}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792612,"byte_end":792655,"line_start":327,"line_end":327,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":6018},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792775,"byte_end":792782,"line_start":330,"line_end":330,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::v2::Named::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + sp_std::fmt::Debug;","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792704,"byte_end":792767,"line_start":329,"line_end":329,"column_start":3,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":6019},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792913,"byte_end":792917,"line_start":332,"line_end":332,"column_start":8,"column_end":12},"name":"Hash","qualname":"::traits::schedule::v2::Named::Hash","value":"type Hash;","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" A means of expressing a call by the hash of its encoded data.\n","sig":null,"attributes":[{"value":"/ A means of expressing a call by the hash of its encoded data.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792840,"byte_end":792905,"line_start":331,"line_end":331,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":6020},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793106,"byte_end":793120,"line_start":337,"line_end":337,"column_start":6,"column_end":20},"name":"schedule_named","qualname":"::traits::schedule::v2::Named::schedule_named","value":"pub fn schedule_named(Vec<u8>, DispatchTime<BlockNumber>,\nOption<Period<BlockNumber>>, Priority, Origin, MaybeHashed<Call, Self::Hash>)\n-> Result<Self::Address, ()>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" Schedule a dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":792922,"byte_end":793001,"line_start":334,"line_end":334,"column_start":3,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793004,"byte_end":793007,"line_start":335,"line_end":335,"column_start":3,"column_end":6}},{"value":"/ - `id`: The identity of the task. This must be unique and will return an error if not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793010,"byte_end":793100,"line_start":336,"line_end":336,"column_start":3,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":6021},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793706,"byte_end":793718,"line_start":353,"line_end":353,"column_start":6,"column_end":18},"name":"cancel_named","qualname":"::traits::schedule::v2::Named::cancel_named","value":"pub fn cancel_named(Vec<u8>) -> Result<(), ()>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" Cancel a scheduled, named task. If periodic, then it will cancel all further instances\n of that, also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled, named task. If periodic, then it will cancel all further instances","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793341,"byte_end":793431,"line_start":346,"line_end":346,"column_start":3,"column_end":93}},{"value":"/ of that, also.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793434,"byte_end":793452,"line_start":347,"line_end":347,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793455,"byte_end":793458,"line_start":348,"line_end":348,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793461,"byte_end":793509,"line_start":349,"line_end":349,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793512,"byte_end":793515,"line_start":350,"line_end":350,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793518,"byte_end":793606,"line_start":351,"line_end":351,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793609,"byte_end":793700,"line_start":352,"line_end":352,"column_start":3,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":6022},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793909,"byte_end":793925,"line_start":357,"line_end":357,"column_start":6,"column_end":22},"name":"reschedule_named","qualname":"::traits::schedule::v2::Named::reschedule_named","value":"pub fn reschedule_named(Vec<u8>, DispatchTime<BlockNumber>)\n-> Result<Self::Address, DispatchError>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed\n only if it is executed *before* the currently scheduled block.\n","sig":null,"attributes":[{"value":"/ Reschedule a task. For one-off tasks, this dispatch is guaranteed to succeed","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793754,"byte_end":793834,"line_start":355,"line_end":355,"column_start":3,"column_end":83}},{"value":"/ only if it is executed *before* the currently scheduled block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":793837,"byte_end":793903,"line_start":356,"line_end":356,"column_start":3,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6023},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":794141,"byte_end":794159,"line_start":365,"line_end":365,"column_start":6,"column_end":24},"name":"next_dispatch_time","qualname":"::traits::schedule::v2::Named::next_dispatch_time","value":"pub fn next_dispatch_time(Vec<u8>) -> Result<BlockNumber, ()>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" Return the next dispatch time for a given task.","sig":null,"attributes":[{"value":"/ Return the next dispatch time for a given task.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":794027,"byte_end":794078,"line_start":362,"line_end":362,"column_start":3,"column_end":54}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":794081,"byte_end":794084,"line_start":363,"line_end":363,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":794087,"byte_end":794135,"line_start":364,"line_end":364,"column_start":3,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":6030},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795328,"byte_end":795336,"line_start":29,"line_end":29,"column_start":11,"column_end":19},"name":"Instance","qualname":"::traits::storage::Instance","value":"Instance: 'static","parent":null,"children":[{"krate":0,"index":6031},{"krate":0,"index":6032}],"decl_id":null,"docs":" An instance of a pallet in the storage.","sig":null,"attributes":[{"value":"/ An instance of a pallet in the storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795029,"byte_end":795072,"line_start":22,"line_end":22,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795073,"byte_end":795076,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ It is required that these instances are unique, to support multiple instances per pallet in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795077,"byte_end":795176,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ same runtime!","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795177,"byte_end":795194,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795195,"byte_end":795198,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ E.g. for module MyModule default instance will have prefix \"MyModule\" and other instances","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795199,"byte_end":795292,"line_start":27,"line_end":27,"column_start":1,"column_end":94}},{"value":"/ \"InstanceNMyModule\".","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795293,"byte_end":795317,"line_start":28,"line_end":28,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6031},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795421,"byte_end":795427,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"PREFIX","qualname":"::traits::storage::Instance::PREFIX","value":"&'static str","parent":{"krate":0,"index":6030},"children":[],"decl_id":null,"docs":" Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"\n","sig":null,"attributes":[{"value":"/ Unique module prefix. E.g. \"InstanceNMyModule\" or \"MyModule\"","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795349,"byte_end":795413,"line_start":30,"line_end":30,"column_start":2,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":6032},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795500,"byte_end":795505,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"INDEX","qualname":"::traits::storage::Instance::INDEX","value":"u8","parent":{"krate":0,"index":6030},"children":[],"decl_id":null,"docs":" Unique numerical identifier for an instance.\n","sig":null,"attributes":[{"value":"/ Unique numerical identifier for an instance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795444,"byte_end":795492,"line_start":32,"line_end":32,"column_start":2,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":6033},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795957,"byte_end":795972,"line_start":44,"line_end":44,"column_start":11,"column_end":26},"name":"StorageInstance","qualname":"::traits::storage::StorageInstance","value":"StorageInstance","parent":null,"children":[{"krate":0,"index":6034},{"krate":0,"index":6035}],"decl_id":null,"docs":" An instance of a storage in a pallet.","sig":null,"attributes":[{"value":"/ An instance of a storage in a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795514,"byte_end":795555,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795556,"byte_end":795559,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Define an instance for an individual storage inside a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795560,"byte_end":795625,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ The pallet prefix is used to isolate the storage between pallets, and the storage prefix is","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795626,"byte_end":795721,"line_start":39,"line_end":39,"column_start":1,"column_end":96}},{"value":"/ used to isolate storages inside a pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795722,"byte_end":795767,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795768,"byte_end":795771,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ NOTE: These information can be used to define storages in pallet such as a `StorageMap` which","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795772,"byte_end":795869,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/ can use keys after `twox_128(pallet_prefix())++twox_128(STORAGE_PREFIX)`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795870,"byte_end":795946,"line_start":43,"line_end":43,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":6034},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796037,"byte_end":796050,"line_start":46,"line_end":46,"column_start":5,"column_end":18},"name":"pallet_prefix","qualname":"::traits::storage::StorageInstance::pallet_prefix","value":"pub fn pallet_prefix() -> &'static str","parent":{"krate":0,"index":6033},"children":[],"decl_id":null,"docs":" Prefix of a pallet to isolate it from other pallets.\n","sig":null,"attributes":[{"value":"/ Prefix of a pallet to isolate it from other pallets.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":795976,"byte_end":796032,"line_start":45,"line_end":45,"column_start":2,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":6035},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796155,"byte_end":796169,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"STORAGE_PREFIX","qualname":"::traits::storage::StorageInstance::STORAGE_PREFIX","value":"&'static str","parent":{"krate":0,"index":6033},"children":[],"decl_id":null,"docs":" Prefix given to a storage to isolate from other storages in the pallet.\n","sig":null,"attributes":[{"value":"/ Prefix given to a storage to isolate from other storages in the pallet.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796072,"byte_end":796147,"line_start":48,"line_end":48,"column_start":2,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":27191},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796327,"byte_end":796338,"line_start":54,"line_end":54,"column_start":12,"column_end":23},"name":"StorageInfo","qualname":"::traits::storage::StorageInfo","value":"StorageInfo { pallet_name, storage_name, prefix, max_values, max_size }","parent":null,"children":[{"krate":0,"index":27192},{"krate":0,"index":27193},{"krate":0,"index":27194},{"krate":0,"index":27195},{"krate":0,"index":27196}],"decl_id":null,"docs":" Metadata about storage from the runtime.\n","sig":null,"attributes":[{"value":"/ Metadata about storage from the runtime.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796188,"byte_end":796232,"line_start":52,"line_end":52,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":27192},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796382,"byte_end":796393,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"name":"pallet_name","qualname":"::traits::storage::StorageInfo::pallet_name","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":27191},"children":[],"decl_id":null,"docs":" Encoded string of pallet name.\n","sig":null,"attributes":[{"value":"/ Encoded string of pallet name.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796342,"byte_end":796376,"line_start":55,"line_end":55,"column_start":2,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":27193},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796446,"byte_end":796458,"line_start":58,"line_end":58,"column_start":6,"column_end":18},"name":"storage_name","qualname":"::traits::storage::StorageInfo::storage_name","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":27191},"children":[],"decl_id":null,"docs":" Encoded string of storage name.\n","sig":null,"attributes":[{"value":"/ Encoded string of storage name.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796405,"byte_end":796440,"line_start":57,"line_end":57,"column_start":2,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":27194},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796569,"byte_end":796575,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"name":"prefix","qualname":"::traits::storage::StorageInfo::prefix","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":27191},"children":[],"decl_id":null,"docs":" The prefix of the storage. All keys after the prefix are considered part of this storage.\n","sig":null,"attributes":[{"value":"/ The prefix of the storage. All keys after the prefix are considered part of this storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796470,"byte_end":796563,"line_start":59,"line_end":59,"column_start":2,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":27195},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796674,"byte_end":796684,"line_start":62,"line_end":62,"column_start":6,"column_end":16},"name":"max_values","qualname":"::traits::storage::StorageInfo::max_values","value":"std::option::Option<u32>","parent":{"krate":0,"index":27191},"children":[],"decl_id":null,"docs":" The maximum number of values in the storage, or none if no maximum specified.\n","sig":null,"attributes":[{"value":"/ The maximum number of values in the storage, or none if no maximum specified.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796587,"byte_end":796668,"line_start":61,"line_end":61,"column_start":2,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":27196},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796789,"byte_end":796797,"line_start":64,"line_end":64,"column_start":6,"column_end":14},"name":"max_size","qualname":"::traits::storage::StorageInfo::max_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":27191},"children":[],"decl_id":null,"docs":" The maximum size of key/values in the storage, or none if no maximum specified.\n","sig":null,"attributes":[{"value":"/ The maximum size of key/values in the storage, or none if no maximum specified.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796700,"byte_end":796783,"line_start":63,"line_end":63,"column_start":2,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":6036},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796929,"byte_end":796945,"line_start":70,"line_end":70,"column_start":11,"column_end":27},"name":"StorageInfoTrait","qualname":"::traits::storage::StorageInfoTrait","value":"StorageInfoTrait","parent":null,"children":[{"krate":0,"index":6037}],"decl_id":null,"docs":" A trait to give information about storage.","sig":null,"attributes":[{"value":"/ A trait to give information about storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796815,"byte_end":796861,"line_start":67,"line_end":67,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796862,"byte_end":796865,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ It can be used to calculate PoV worst case size.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796866,"byte_end":796918,"line_start":69,"line_end":69,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":6037},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":796952,"byte_end":796964,"line_start":71,"line_end":71,"column_start":5,"column_end":17},"name":"storage_info","qualname":"::traits::storage::StorageInfoTrait::storage_info","value":"pub fn storage_info() -> Vec<StorageInfo>","parent":{"krate":0,"index":6036},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6038},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797448,"byte_end":797471,"line_start":87,"line_end":87,"column_start":11,"column_end":34},"name":"PartialStorageInfoTrait","qualname":"::traits::storage::PartialStorageInfoTrait","value":"PartialStorageInfoTrait","parent":null,"children":[{"krate":0,"index":6039}],"decl_id":null,"docs":" Similar to [`StorageInfoTrait`], a trait to give partial information about storage.","sig":null,"attributes":[{"value":"/ Similar to [`StorageInfoTrait`], a trait to give partial information about storage.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797219,"byte_end":797306,"line_start":83,"line_end":83,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797307,"byte_end":797310,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This is useful when a type can give some partial information with its generic parameter doesn't","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797311,"byte_end":797410,"line_start":85,"line_end":85,"column_start":1,"column_end":100}},{"value":"/ implement some bounds.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797411,"byte_end":797437,"line_start":86,"line_end":86,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":6039},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/storage.rs","byte_start":797478,"byte_end":797498,"line_start":88,"line_end":88,"column_start":5,"column_end":25},"name":"partial_storage_info","qualname":"::traits::storage::PartialStorageInfoTrait::partial_storage_info","value":"pub fn partial_storage_info() -> Vec<StorageInfo>","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6078},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798515,"byte_end":798527,"line_start":27,"line_end":27,"column_start":11,"column_end":23},"name":"EnsureOrigin","qualname":"::traits::dispatch::EnsureOrigin","value":"EnsureOrigin<OuterOrigin>","parent":null,"children":[{"krate":0,"index":6080},{"krate":0,"index":6081},{"krate":0,"index":6083}],"decl_id":null,"docs":" Some sort of check on the origin is performed by this object.\n","sig":null,"attributes":[{"value":"/ Some sort of check on the origin is performed by this object.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798439,"byte_end":798504,"line_start":26,"line_end":26,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":6080},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798569,"byte_end":798576,"line_start":29,"line_end":29,"column_start":7,"column_end":14},"name":"Success","qualname":"::traits::dispatch::EnsureOrigin::Success","value":"type Success;","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" A return type.\n","sig":null,"attributes":[{"value":"/ A return type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798544,"byte_end":798562,"line_start":28,"line_end":28,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":6081},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798613,"byte_end":798626,"line_start":31,"line_end":31,"column_start":5,"column_end":18},"name":"ensure_origin","qualname":"::traits::dispatch::EnsureOrigin::ensure_origin","value":"pub fn ensure_origin(OuterOrigin) -> Result<Self::Success, BadOrigin>","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798579,"byte_end":798608,"line_start":30,"line_end":30,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":6083},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798764,"byte_end":798774,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"name":"try_origin","qualname":"::traits::dispatch::EnsureOrigin::try_origin","value":"pub fn try_origin(OuterOrigin) -> Result<Self::Success, OuterOrigin>","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":798730,"byte_end":798759,"line_start":34,"line_end":34,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":6084},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799258,"byte_end":799280,"line_start":48,"line_end":48,"column_start":11,"column_end":33},"name":"UnfilteredDispatchable","qualname":"::traits::dispatch::UnfilteredDispatchable","value":"UnfilteredDispatchable","parent":null,"children":[{"krate":0,"index":6085},{"krate":0,"index":6086}],"decl_id":null,"docs":" Type that can be dispatched with an origin but without checking the origin filter.","sig":null,"attributes":[{"value":"/ Type that can be dispatched with an origin but without checking the origin filter.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799038,"byte_end":799124,"line_start":44,"line_end":44,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799125,"byte_end":799128,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Implemented for pallet dispatchable type by `decl_module` and for runtime dispatchable by","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799129,"byte_end":799222,"line_start":46,"line_end":46,"column_start":1,"column_end":94}},{"value":"/ `construct_runtime`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799223,"byte_end":799247,"line_start":47,"line_end":47,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":6085},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799365,"byte_end":799371,"line_start":50,"line_end":50,"column_start":7,"column_end":13},"name":"Origin","qualname":"::traits::dispatch::UnfilteredDispatchable::Origin","value":"type Origin;","parent":{"krate":0,"index":6084},"children":[],"decl_id":null,"docs":" The origin type of the runtime, (i.e. `frame_system::Config::Origin`).\n","sig":null,"attributes":[{"value":"/ The origin type of the runtime, (i.e. `frame_system::Config::Origin`).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799284,"byte_end":799358,"line_start":49,"line_end":49,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":6086},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799441,"byte_end":799463,"line_start":53,"line_end":53,"column_start":5,"column_end":27},"name":"dispatch_bypass_filter","qualname":"::traits::dispatch::UnfilteredDispatchable::dispatch_bypass_filter","value":"pub fn dispatch_bypass_filter(Self, Self::Origin)\n-> DispatchResultWithPostInfo","parent":{"krate":0,"index":6084},"children":[],"decl_id":null,"docs":" Dispatch this call but do not check the filter in origin.\n","sig":null,"attributes":[{"value":"/ Dispatch this call but do not check the filter in origin.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799375,"byte_end":799436,"line_start":52,"line_end":52,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":6087},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799593,"byte_end":799604,"line_start":57,"line_end":57,"column_start":11,"column_end":22},"name":"OriginTrait","qualname":"::traits::dispatch::OriginTrait","value":"OriginTrait: Sized","parent":null,"children":[{"krate":0,"index":6088},{"krate":0,"index":6089},{"krate":0,"index":6090},{"krate":0,"index":6091},{"krate":0,"index":6093},{"krate":0,"index":6094},{"krate":0,"index":6096},{"krate":0,"index":6097},{"krate":0,"index":6098},{"krate":0,"index":6101},{"krate":0,"index":6102},{"krate":0,"index":6103}],"decl_id":null,"docs":" Methods available on `frame_system::Config::Origin`.\n","sig":null,"attributes":[{"value":"/ Methods available on `frame_system::Config::Origin`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799526,"byte_end":799582,"line_start":56,"line_end":56,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":6088},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799679,"byte_end":799683,"line_start":59,"line_end":59,"column_start":7,"column_end":11},"name":"Call","qualname":"::traits::dispatch::OriginTrait::Call","value":"type Call;","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Runtime call type, as in `frame_system::Config::Call`\n","sig":null,"attributes":[{"value":"/ Runtime call type, as in `frame_system::Config::Call`","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799615,"byte_end":799672,"line_start":58,"line_end":58,"column_start":2,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":6089},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799757,"byte_end":799770,"line_start":62,"line_end":62,"column_start":7,"column_end":20},"name":"PalletsOrigin","qualname":"::traits::dispatch::OriginTrait::PalletsOrigin","value":"type PalletsOrigin: Parameter + Member + Into<Self> + From<RawOrigin<Self::AccountId>>;","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" The caller origin, overarching type of all pallets origins.\n","sig":null,"attributes":[{"value":"/ The caller origin, overarching type of all pallets origins.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799687,"byte_end":799750,"line_start":61,"line_end":61,"column_start":2,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":6090},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799890,"byte_end":799899,"line_start":65,"line_end":65,"column_start":7,"column_end":16},"name":"AccountId","qualname":"::traits::dispatch::OriginTrait::AccountId","value":"type AccountId;","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" The AccountId used across the system.\n","sig":null,"attributes":[{"value":"/ The AccountId used across the system.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799842,"byte_end":799883,"line_start":64,"line_end":64,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":6091},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799939,"byte_end":799949,"line_start":68,"line_end":68,"column_start":5,"column_end":15},"name":"add_filter","qualname":"::traits::dispatch::OriginTrait::add_filter","value":"pub fn add_filter<impl Fn(&Self::Call) -> bool + 'static: Fn(&Self::Call) ->\nbool + 'static>(&mut Self, impl Fn(&Self::Call) -> bool + 'static)","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Add a filter to the origin.\n","sig":null,"attributes":[{"value":"/ Add a filter to the origin.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799903,"byte_end":799934,"line_start":67,"line_end":67,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":6093},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800101,"byte_end":800113,"line_start":71,"line_end":71,"column_start":5,"column_end":17},"name":"reset_filter","qualname":"::traits::dispatch::OriginTrait::reset_filter","value":"pub fn reset_filter(&mut Self)","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Reset origin filters to default one, i.e `frame_system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Reset origin filters to default one, i.e `frame_system::Config::BaseCallFilter`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800012,"byte_end":800096,"line_start":70,"line_end":70,"column_start":2,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":6094},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800189,"byte_end":800204,"line_start":74,"line_end":74,"column_start":5,"column_end":20},"name":"set_caller_from","qualname":"::traits::dispatch::OriginTrait::set_caller_from","value":"pub fn set_caller_from<impl Into<Self>: Into<Self>>(&mut Self,\nimpl Into<Self>)","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Replace the caller with caller from the other origin\n","sig":null,"attributes":[{"value":"/ Replace the caller with caller from the other origin","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800128,"byte_end":800184,"line_start":73,"line_end":73,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":6096},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800433,"byte_end":800444,"line_start":80,"line_end":80,"column_start":5,"column_end":16},"name":"filter_call","qualname":"::traits::dispatch::OriginTrait::filter_call","value":"pub fn filter_call(&Self, &Self::Call) -> bool","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Filter the call if caller is not root, if false is returned then the call must be filtered\n out.","sig":null,"attributes":[{"value":"/ Filter the call if caller is not root, if false is returned then the call must be filtered","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800243,"byte_end":800337,"line_start":76,"line_end":76,"column_start":2,"column_end":96}},{"value":"/ out.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800339,"byte_end":800347,"line_start":77,"line_end":77,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800349,"byte_end":800352,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ For root origin caller, the filters are bypassed and true is returned.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800354,"byte_end":800428,"line_start":79,"line_end":79,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":6097},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800506,"byte_end":800512,"line_start":83,"line_end":83,"column_start":5,"column_end":11},"name":"caller","qualname":"::traits::dispatch::OriginTrait::caller","value":"pub fn caller(&Self) -> &Self::PalletsOrigin","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Get the caller.\n","sig":null,"attributes":[{"value":"/ Get the caller.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800482,"byte_end":800501,"line_start":82,"line_end":82,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":6098},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800643,"byte_end":800658,"line_start":86,"line_end":86,"column_start":5,"column_end":20},"name":"try_with_caller","qualname":"::traits::dispatch::OriginTrait::try_with_caller","value":"pub fn try_with_caller<R,\nimpl FnOnce(Self::PalletsOrigin) -> Result<R, Self::PalletsOrigin>: FnOnce(Self::PalletsOrigin)\n->\nResult<R,\nSelf::PalletsOrigin>>(Self,\nimpl FnOnce(Self::PalletsOrigin) -> Result<R, Self::PalletsOrigin>)\n-> Result<R, Self>","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Do something with the caller, consuming self but returning it if the caller was unused.\n","sig":null,"attributes":[{"value":"/ Do something with the caller, consuming self but returning it if the caller was unused.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800547,"byte_end":800638,"line_start":85,"line_end":85,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":6101},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800852,"byte_end":800856,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"none","qualname":"::traits::dispatch::OriginTrait::none","value":"pub fn none() -> Self","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Create with system none origin and `frame_system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Create with system none origin and `frame_system::Config::BaseCallFilter`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800769,"byte_end":800847,"line_start":91,"line_end":91,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":6102},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800953,"byte_end":800957,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"root","qualname":"::traits::dispatch::OriginTrait::root","value":"pub fn root() -> Self","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Create with system root origin and `frame_system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Create with system root origin and `frame_system::Config::BaseCallFilter`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800870,"byte_end":800948,"line_start":94,"line_end":94,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":6103},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801056,"byte_end":801062,"line_start":98,"line_end":98,"column_start":5,"column_end":11},"name":"signed","qualname":"::traits::dispatch::OriginTrait::signed","value":"pub fn signed(Self::AccountId) -> Self","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" Create with system signed origin and `frame_system::Config::BaseCallFilter`.\n","sig":null,"attributes":[{"value":"/ Create with system signed origin and `frame_system::Config::BaseCallFilter`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":800971,"byte_end":801051,"line_start":97,"line_end":97,"column_start":2,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":6104},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801246,"byte_end":801257,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"EnsureOneOf","qualname":"::traits::dispatch::EnsureOneOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" The \"OR gate\" implementation of `EnsureOrigin`.","sig":null,"attributes":[{"value":"/ The \"OR gate\" implementation of `EnsureOrigin`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801096,"byte_end":801147,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801148,"byte_end":801151,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Origin check will pass if `L` or `R` origin check passes. `L` is tested first.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801152,"byte_end":801234,"line_start":103,"line_end":103,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":6160},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804332,"byte_end":804346,"line_start":42,"line_end":42,"column_start":11,"column_end":25},"name":"CurrencyToVote","qualname":"::traits::voting::CurrencyToVote","value":"CurrencyToVote<B>","parent":null,"children":[{"krate":0,"index":6162},{"krate":0,"index":6163}],"decl_id":null,"docs":" A trait similar to `Convert` to convert values from `B` an abstract balance type\n into u64 and back from u128. (This conversion is used in election and other places where complex\n calculation over balance type is needed)","sig":null,"attributes":[{"value":"/ A trait similar to `Convert` to convert values from `B` an abstract balance type","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":803679,"byte_end":803763,"line_start":30,"line_end":30,"column_start":1,"column_end":85}},{"value":"/ into u64 and back from u128. (This conversion is used in election and other places where complex","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":803764,"byte_end":803864,"line_start":31,"line_end":31,"column_start":1,"column_end":101}},{"value":"/ calculation over balance type is needed)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":803865,"byte_end":803909,"line_start":32,"line_end":32,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":803910,"byte_end":803913,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Total issuance of the currency is passed in, but an implementation of this trait may or may not","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":803914,"byte_end":804013,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ use it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804014,"byte_end":804025,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804026,"byte_end":804029,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # WARNING","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804030,"byte_end":804043,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804044,"byte_end":804047,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ the total issuance being passed in implies that the implementation must be aware of the fact","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804048,"byte_end":804144,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ that its values can affect the outcome. This implies that if the vote value is dependent on the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804145,"byte_end":804244,"line_start":40,"line_end":40,"column_start":1,"column_end":100}},{"value":"/ total issuance, it should never ber written to storage for later re-use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804245,"byte_end":804321,"line_start":41,"line_end":41,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":6162},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804385,"byte_end":804392,"line_start":44,"line_end":44,"column_start":5,"column_end":12},"name":"to_vote","qualname":"::traits::voting::CurrencyToVote::to_vote","value":"pub fn to_vote(B, B) -> u64","parent":{"krate":0,"index":6160},"children":[],"decl_id":null,"docs":" Convert balance to u64.\n","sig":null,"attributes":[{"value":"/ Convert balance to u64.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804353,"byte_end":804380,"line_start":43,"line_end":43,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6163},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804459,"byte_end":804470,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"name":"to_currency","qualname":"::traits::voting::CurrencyToVote::to_currency","value":"pub fn to_currency(u128, B) -> B","parent":{"krate":0,"index":6160},"children":[],"decl_id":null,"docs":" Convert u128 to balance.\n","sig":null,"attributes":[{"value":"/ Convert u128 to balance.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804426,"byte_end":804454,"line_start":46,"line_end":46,"column_start":2,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":6164},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805144,"byte_end":805162,"line_start":61,"line_end":61,"column_start":12,"column_end":30},"name":"U128CurrencyToVote","qualname":"::traits::voting::U128CurrencyToVote","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation of `CurrencyToVote` tailored for chain's that have a balance type of u128.","sig":null,"attributes":[{"value":"/ An implementation of `CurrencyToVote` tailored for chain's that have a balance type of u128.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804506,"byte_end":804602,"line_start":50,"line_end":50,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804603,"byte_end":804606,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The factor is the `(total_issuance / u64::MAX).max(1)`, represented as u64. Let's look at the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804607,"byte_end":804704,"line_start":52,"line_end":52,"column_start":1,"column_end":98}},{"value":"/ important cases:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804705,"byte_end":804725,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804726,"byte_end":804729,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ If the chain's total issuance is less than u64::MAX, this will always be 1, which means that","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804730,"byte_end":804826,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/ the factor will not have any effect. In this case, any account's balance is also less. Thus,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804827,"byte_end":804923,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/ both of the conversions are basically an `as`; Any balance can fit in u64.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":804924,"byte_end":805002,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805003,"byte_end":805006,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ If the chain's total issuance is more than 2*u64::MAX, then a factor might be multiplied and","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805007,"byte_end":805103,"line_start":59,"line_end":59,"column_start":1,"column_end":97}},{"value":"/ divided upon conversion.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805104,"byte_end":805132,"line_start":60,"line_end":60,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6171},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805759,"byte_end":805783,"line_start":84,"line_end":84,"column_start":12,"column_end":36},"name":"SaturatingCurrencyToVote","qualname":"::traits::voting::SaturatingCurrencyToVote","value":"","parent":null,"children":[],"decl_id":null,"docs":" A naive implementation of `CurrencyConvert` that simply saturates all conversions.","sig":null,"attributes":[{"value":"/ A naive implementation of `CurrencyConvert` that simply saturates all conversions.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805538,"byte_end":805624,"line_start":79,"line_end":79,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805625,"byte_end":805628,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805629,"byte_end":805642,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805643,"byte_end":805646,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This is designed to be used mostly for testing. Use with care, and think about the consequences.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805647,"byte_end":805747,"line_start":83,"line_end":83,"column_start":1,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":6177},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806063,"byte_end":806072,"line_start":98,"line_end":98,"column_start":11,"column_end":20},"name":"VoteTally","qualname":"::traits::voting::VoteTally","value":"VoteTally<Votes>","parent":null,"children":[{"krate":0,"index":6179},{"krate":0,"index":6180},{"krate":0,"index":6181}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6179},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806086,"byte_end":806090,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"ayes","qualname":"::traits::voting::VoteTally::ayes","value":"pub fn ayes(&Self) -> Votes","parent":{"krate":0,"index":6177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6180},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806112,"byte_end":806119,"line_start":100,"line_end":100,"column_start":5,"column_end":12},"name":"turnout","qualname":"::traits::voting::VoteTally::turnout","value":"pub fn turnout(&Self) -> Perbill","parent":{"krate":0,"index":6177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6181},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806143,"byte_end":806151,"line_start":101,"line_end":101,"column_start":5,"column_end":13},"name":"approval","qualname":"::traits::voting::VoteTally::approval","value":"pub fn approval(&Self) -> Perbill","parent":{"krate":0,"index":6177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6186},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806392,"byte_end":806396,"line_start":109,"line_end":109,"column_start":2,"column_end":6},"name":"None","qualname":"::traits::voting::PollStatus::None","value":"PollStatus::None","parent":{"krate":0,"index":6182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6188},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806399,"byte_end":806406,"line_start":110,"line_end":110,"column_start":2,"column_end":9},"name":"Ongoing","qualname":"::traits::voting::PollStatus::Ongoing","value":"PollStatus::Ongoing(Tally, Class)","parent":{"krate":0,"index":6182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6192},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806423,"byte_end":806432,"line_start":111,"line_end":111,"column_start":2,"column_end":11},"name":"Completed","qualname":"::traits::voting::PollStatus::Completed","value":"PollStatus::Completed(Moment, bool)","parent":{"krate":0,"index":6182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6182},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806356,"byte_end":806366,"line_start":108,"line_end":108,"column_start":10,"column_end":20},"name":"PollStatus","qualname":"::traits::voting::PollStatus","value":"pub enum PollStatus<Tally, Moment, Class> {\n    None,\n    Ongoing(Tally, Class),\n    Completed(Moment, bool),\n}","parent":null,"children":[{"krate":0,"index":6186},{"krate":0,"index":6188},{"krate":0,"index":6192}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6200},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806521,"byte_end":806535,"line_start":115,"line_end":115,"column_start":9,"column_end":23},"name":"ensure_ongoing","qualname":"<PollStatus<Tally, Moment, Class>>::ensure_ongoing","value":"pub fn ensure_ongoing(Self) -> Option<(Tally, Class)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6201},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806659,"byte_end":806666,"line_start":123,"line_end":123,"column_start":11,"column_end":18},"name":"Polling","qualname":"::traits::voting::Polling","value":"Polling<Tally>","parent":null,"children":[{"krate":0,"index":6203},{"krate":0,"index":6204},{"krate":0,"index":6205},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":6208},{"krate":0,"index":6209},{"krate":0,"index":6212}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6203},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806682,"byte_end":806687,"line_start":124,"line_end":124,"column_start":7,"column_end":12},"name":"Index","qualname":"::traits::voting::Polling::Index","value":"type Index: Parameter + Member + Ord + PartialOrd + Copy + HasCompact;","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6204},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806754,"byte_end":806759,"line_start":125,"line_end":125,"column_start":7,"column_end":12},"name":"Votes","qualname":"::traits::voting::Polling::Votes","value":"type Votes: Parameter + Member + Ord + PartialOrd + Copy + HasCompact;","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6205},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806826,"byte_end":806831,"line_start":126,"line_end":126,"column_start":7,"column_end":12},"name":"Class","qualname":"::traits::voting::Polling::Class","value":"type Class: Parameter + Member + Ord + PartialOrd;","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6206},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806878,"byte_end":806884,"line_start":127,"line_end":127,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::voting::Polling::Moment","value":"type Moment;","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6207},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806940,"byte_end":806947,"line_start":130,"line_end":130,"column_start":5,"column_end":12},"name":"classes","qualname":"::traits::voting::Polling::classes","value":"pub fn classes() -> Vec<Self::Class>","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":" Provides a vec of values that `T` may take.\n","sig":null,"attributes":[{"value":"/ Provides a vec of values that `T` may take.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806888,"byte_end":806935,"line_start":129,"line_end":129,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":6208},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807160,"byte_end":807170,"line_start":136,"line_end":136,"column_start":5,"column_end":15},"name":"as_ongoing","qualname":"::traits::voting::Polling::as_ongoing","value":"pub fn as_ongoing(Self::Index) -> Option<(Tally, Self::Class)>","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":" `Some` if the referendum `index` can be voted on, along with the tally and class of\n referendum.","sig":null,"attributes":[{"value":"/ `Some` if the referendum `index` can be voted on, along with the tally and class of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806973,"byte_end":807060,"line_start":132,"line_end":132,"column_start":2,"column_end":89}},{"value":"/ referendum.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807062,"byte_end":807077,"line_start":133,"line_end":133,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807079,"byte_end":807082,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ Don't use this if you might mutate - use `try_access_poll` instead.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807084,"byte_end":807155,"line_start":135,"line_end":135,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":6209},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807229,"byte_end":807240,"line_start":138,"line_end":138,"column_start":5,"column_end":16},"name":"access_poll","qualname":"::traits::voting::Polling::access_poll","value":"pub fn access_poll<R,\nimpl FnOnce(PollStatus<&mut Tally, Self::Moment, Self::Class>) -> R: FnOnce(PollStatus<&mut Tally,\nSelf::Moment, Self::Class>) ->\nR>(Self::Index,\nimpl FnOnce(PollStatus<&mut Tally, Self::Moment, Self::Class>) -> R) -> R","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6212},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":807355,"byte_end":807370,"line_start":143,"line_end":143,"column_start":5,"column_end":20},"name":"try_access_poll","qualname":"::traits::voting::Polling::try_access_poll","value":"pub fn try_access_poll<R,\nimpl FnOnce(PollStatus<&mut Tally, Self::Moment, Self::Class>)\n-> Result<R, DispatchError>: FnOnce(PollStatus<&mut Tally,\nSelf::Moment, Self::Class>) ->\nResult<R,\nDispatchError>>(Self::Index,\nimpl FnOnce(PollStatus<&mut Tally, Self::Moment, Self::Class>)\n-> Result<R, DispatchError>)\n-> Result<R, DispatchError>","parent":{"krate":0,"index":6201},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6234},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weights","qualname":"::weights","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","parent":null,"children":[{"krate":0,"index":6235},{"krate":0,"index":6236},{"krate":0,"index":6239},{"krate":0,"index":6242},{"krate":0,"index":6245},{"krate":0,"index":6246},{"krate":0,"index":6247},{"krate":0,"index":6249},{"krate":0,"index":6250},{"krate":0,"index":6252},{"krate":0,"index":6253},{"krate":0,"index":6255},{"krate":0,"index":6256},{"krate":0,"index":6257},{"krate":0,"index":6259},{"krate":0,"index":6260},{"krate":0,"index":6262},{"krate":0,"index":6263},{"krate":0,"index":6266},{"krate":0,"index":6269},{"krate":0,"index":6270},{"krate":0,"index":6271},{"krate":0,"index":6274},{"krate":0,"index":6277},{"krate":0,"index":6280},{"krate":0,"index":6283},{"krate":0,"index":6284},{"krate":0,"index":6285},{"krate":0,"index":6288},{"krate":0,"index":6291},{"krate":0,"index":6292},{"krate":0,"index":6295},{"krate":0,"index":6298},{"krate":0,"index":6301},{"krate":0,"index":6304},{"krate":0,"index":6305},{"krate":0,"index":6320},{"krate":0,"index":6323},{"krate":0,"index":6326},{"krate":0,"index":27772},{"krate":0,"index":27777},{"krate":0,"index":27779},{"krate":0,"index":27780},{"krate":0,"index":27781},{"krate":0,"index":27783},{"krate":0,"index":27784},{"krate":0,"index":27786},{"krate":0,"index":27788},{"krate":0,"index":27793},{"krate":0,"index":27798},{"krate":0,"index":6329},{"krate":0,"index":27851},{"krate":0,"index":27858},{"krate":0,"index":27859},{"krate":0,"index":27861},{"krate":0,"index":27862},{"krate":0,"index":27864},{"krate":0,"index":27866},{"krate":0,"index":27867},{"krate":0,"index":27872},{"krate":0,"index":27877},{"krate":0,"index":27879},{"krate":0,"index":27804},{"krate":0,"index":27810},{"krate":0,"index":6331},{"krate":0,"index":6333},{"krate":0,"index":6336},{"krate":0,"index":6340},{"krate":0,"index":6343},{"krate":0,"index":27886},{"krate":0,"index":27890},{"krate":0,"index":27892},{"krate":0,"index":27893},{"krate":0,"index":27894},{"krate":0,"index":27896},{"krate":0,"index":27897},{"krate":0,"index":27900},{"krate":0,"index":27902},{"krate":0,"index":27904},{"krate":0,"index":27909},{"krate":0,"index":27913},{"krate":0,"index":6347},{"krate":0,"index":6349},{"krate":0,"index":27920},{"krate":0,"index":27923},{"krate":0,"index":27925},{"krate":0,"index":27926},{"krate":0,"index":27927},{"krate":0,"index":27929},{"krate":0,"index":27930},{"krate":0,"index":27933},{"krate":0,"index":27935},{"krate":0,"index":27937},{"krate":0,"index":27942},{"krate":0,"index":27946},{"krate":0,"index":6351},{"krate":0,"index":6355},{"krate":0,"index":6356},{"krate":0,"index":6358},{"krate":0,"index":6360},{"krate":0,"index":6362},{"krate":0,"index":6364},{"krate":0,"index":6366},{"krate":0,"index":6368},{"krate":0,"index":6371},{"krate":0,"index":6374},{"krate":0,"index":6377},{"krate":0,"index":6380},{"krate":0,"index":6383},{"krate":0,"index":6386},{"krate":0,"index":6389},{"krate":0,"index":6392},{"krate":0,"index":6395},{"krate":0,"index":6398},{"krate":0,"index":6401},{"krate":0,"index":6404},{"krate":0,"index":6407},{"krate":0,"index":6415},{"krate":0,"index":6420},{"krate":0,"index":6426},{"krate":0,"index":6431},{"krate":0,"index":6437},{"krate":0,"index":6442},{"krate":0,"index":6448},{"krate":0,"index":6454},{"krate":0,"index":6459},{"krate":0,"index":27952},{"krate":0,"index":27955},{"krate":0,"index":27957},{"krate":0,"index":27958},{"krate":0,"index":27959},{"krate":0,"index":27961},{"krate":0,"index":27962},{"krate":0,"index":27965},{"krate":0,"index":27967},{"krate":0,"index":27969},{"krate":0,"index":27974},{"krate":0,"index":27978},{"krate":0,"index":6463},{"krate":0,"index":27984},{"krate":0,"index":27990},{"krate":0,"index":27993},{"krate":0,"index":28000},{"krate":0,"index":28005},{"krate":0,"index":6467},{"krate":0,"index":6470},{"krate":0,"index":6475},{"krate":0,"index":6479},{"krate":0,"index":28014},{"krate":0,"index":28019},{"krate":0,"index":28022},{"krate":0,"index":28024},{"krate":0,"index":28027},{"krate":0,"index":28029},{"krate":0,"index":28033},{"krate":0,"index":28036},{"krate":0,"index":28039},{"krate":0,"index":28046},{"krate":0,"index":28051},{"krate":0,"index":6483},{"krate":0,"index":6489},{"krate":0,"index":6493}],"decl_id":null,"docs":" # Primitives for transaction weighting.","sig":null,"attributes":[{"value":"/ # Primitives for transaction weighting.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809015,"byte_end":809058,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809059,"byte_end":809062,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Every dispatchable function is responsible for providing `#[weight = $x]` attribute. In this","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809063,"byte_end":809159,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ snipped, `$x` can be any user provided struct that implements the following traits:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809160,"byte_end":809247,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809248,"byte_end":809251,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - [`WeighData`]: the weight amount.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809252,"byte_end":809291,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - [`ClassifyDispatch`]: class of the dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809292,"byte_end":809342,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/ - [`PaysFee`]: whether this weight should be translated to fee and deducted upon dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809343,"byte_end":809437,"line_start":25,"line_end":25,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809438,"byte_end":809441,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Substrate then bundles the output information of the three traits into [`DispatchInfo`] struct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809442,"byte_end":809540,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ and provides it by implementing the [`GetDispatchInfo`] for all `Call` both inner and outer call","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809541,"byte_end":809641,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809642,"byte_end":809652,"line_start":29,"line_end":29,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809653,"byte_end":809656,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Substrate provides two pre-defined ways to annotate weight:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809657,"byte_end":809720,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809721,"byte_end":809724,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ### 1. Fixed values","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809725,"byte_end":809748,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809749,"byte_end":809752,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This can only be used when all 3 traits can be resolved statically. You have 3 degrees of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809753,"byte_end":809846,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ configuration:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809847,"byte_end":809865,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809866,"byte_end":809869,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ 1. Define only weight, **in which case `ClassifyDispatch` will be `Normal` and `PaysFee` will be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809870,"byte_end":809970,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"/    `Yes`**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809971,"byte_end":809986,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809987,"byte_end":809990,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809991,"byte_end":809998,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":809999,"byte_end":810030,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810031,"byte_end":810064,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810065,"byte_end":810141,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/         #[weight = 1000]","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810142,"byte_end":810170,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810171,"byte_end":810226,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810227,"byte_end":810236,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810237,"byte_end":810242,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810243,"byte_end":810261,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810262,"byte_end":810269,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810270,"byte_end":810273,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 2.1 Define weight and class, **in which case `PaysFee` would be `Yes`**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810274,"byte_end":810350,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810351,"byte_end":810354,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810355,"byte_end":810362,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810363,"byte_end":810394,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::DispatchClass;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810395,"byte_end":810443,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810444,"byte_end":810477,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810478,"byte_end":810554,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, DispatchClass::Operational)]","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810555,"byte_end":810613,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810614,"byte_end":810669,"line_start":60,"line_end":60,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810670,"byte_end":810679,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810680,"byte_end":810685,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810686,"byte_end":810704,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810705,"byte_end":810712,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810713,"byte_end":810716,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ 2.2 Define weight and `PaysFee`, **in which case `ClassifyDispatch` would be `Normal`**.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810717,"byte_end":810809,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810810,"byte_end":810813,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810814,"byte_end":810821,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810822,"byte_end":810853,"line_start":69,"line_end":69,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::Pays;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810854,"byte_end":810893,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810894,"byte_end":810927,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":810928,"byte_end":811004,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, Pays::No)]","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811005,"byte_end":811045,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811046,"byte_end":811101,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811102,"byte_end":811111,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811112,"byte_end":811117,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811118,"byte_end":811136,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811137,"byte_end":811144,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811145,"byte_end":811148,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ 3. Define all 3 parameters.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811149,"byte_end":811180,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811181,"byte_end":811184,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811185,"byte_end":811192,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811193,"byte_end":811224,"line_start":83,"line_end":83,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::{DispatchClass, Pays};","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811225,"byte_end":811281,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811282,"byte_end":811315,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811316,"byte_end":811392,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/         #[weight = (1000, DispatchClass::Operational, Pays::No)]","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811393,"byte_end":811461,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811462,"byte_end":811517,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811518,"byte_end":811527,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811528,"byte_end":811533,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811534,"byte_end":811552,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811553,"byte_end":811560,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811561,"byte_end":811564,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ### 2. Define weights as a function of input arguments using `FunctionOf` tuple struct.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811565,"byte_end":811656,"line_start":94,"line_end":94,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811657,"byte_end":811660,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ This struct works in a similar manner as above. 3 items must be provided and each can be either","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811661,"byte_end":811760,"line_start":96,"line_end":96,"column_start":1,"column_end":100}},{"value":"/ a fixed value or a function/closure with the same parameters list as the dispatchable function","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811761,"byte_end":811859,"line_start":97,"line_end":97,"column_start":1,"column_end":99}},{"value":"/ itself, wrapper in a tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811860,"byte_end":811891,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811892,"byte_end":811895,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Using this only makes sense if you want to use a function for at least one of the elements. If","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811896,"byte_end":811994,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ all 3 are static values, providing a raw tuple is easier.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":811995,"byte_end":812056,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812057,"byte_end":812060,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812061,"byte_end":812068,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ # use frame_system::Config;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812069,"byte_end":812100,"line_start":104,"line_end":104,"column_start":1,"column_end":32}},{"value":"/ # use frame_support::weights::{DispatchClass, FunctionOf, Pays};","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812101,"byte_end":812169,"line_start":105,"line_end":105,"column_start":1,"column_end":69}},{"value":"/ frame_support::decl_module! {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812170,"byte_end":812203,"line_start":106,"line_end":106,"column_start":1,"column_end":34}},{"value":"/     pub struct Module<T: Config> for enum Call where origin: T::Origin {","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812204,"byte_end":812280,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/         #[weight = FunctionOf(","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812281,"byte_end":812315,"line_start":108,"line_end":108,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// weight, function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812316,"byte_end":812343,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/ \t\t\t|args: (&u32, &u64)| *args.0 as u64 + args.1,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812344,"byte_end":812396,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/ \t\t\t// class, fixed.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812397,"byte_end":812420,"line_start":111,"line_end":111,"column_start":1,"column_end":24}},{"value":"/ \t\t\tDispatchClass::Operational,","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812421,"byte_end":812455,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/ \t\t\t// pays fee, function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812456,"byte_end":812485,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/ \t\t\t|args: (&u32, &u64)| if *args.0 > 1000 { Pays::Yes } else { Pays::No },","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812486,"byte_end":812564,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ \t\t)]","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812565,"byte_end":812573,"line_start":115,"line_end":115,"column_start":1,"column_end":9}},{"value":"/         fn dispatching(origin, a: u32, b: u64) { unimplemented!() }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812574,"byte_end":812645,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/     }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812646,"byte_end":812655,"line_start":117,"line_end":117,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812656,"byte_end":812661,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812662,"byte_end":812680,"line_start":119,"line_end":119,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812681,"byte_end":812688,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ FRAME assumes a weight of `1_000_000_000_000` equals 1 second of compute on a standard machine.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812689,"byte_end":812788,"line_start":121,"line_end":121,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812789,"byte_end":812792,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Latest machine specification used to benchmark are:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812793,"byte_end":812848,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/ - Digital Ocean: ubuntu-s-2vcpu-4gb-ams3-01","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812849,"byte_end":812896,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/ - 2x Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812897,"byte_end":812947,"line_start":125,"line_end":125,"column_start":1,"column_end":51}},{"value":"/ - 4GB RAM","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812948,"byte_end":812961,"line_start":126,"line_end":126,"column_start":1,"column_end":14}},{"value":"/ - Ubuntu 19.10 (GNU/Linux 5.3.0-18-generic x86_64)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":812962,"byte_end":813016,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/ - rustc 1.42.0 (b8cedc004 2020-03-09)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813017,"byte_end":813058,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":6304},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813671,"byte_end":813677,"line_start":150,"line_end":150,"column_start":10,"column_end":16},"name":"Weight","qualname":"::weights::Weight","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Numeric range of a transaction weight.\n","sig":null,"attributes":[{"value":"/ Numeric range of a transaction weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813619,"byte_end":813661,"line_start":149,"line_end":149,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":6305},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813879,"byte_end":813888,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"name":"constants","qualname":"::weights::constants","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","parent":null,"children":[{"krate":0,"index":6306},{"krate":0,"index":6307},{"krate":0,"index":6310},{"krate":0,"index":6313},{"krate":0,"index":6316},{"krate":0,"index":6317},{"krate":0,"index":6318},{"krate":0,"index":6319},{"krate":0,"index":27744},{"krate":0,"index":27746},{"krate":0,"index":27748},{"krate":0,"index":27751},{"krate":0,"index":27753},{"krate":0,"index":27755},{"krate":0,"index":27758},{"krate":0,"index":27760},{"krate":0,"index":27762},{"krate":0,"index":27765},{"krate":0,"index":27767},{"krate":0,"index":27769}],"decl_id":null,"docs":" These constants are specific to FRAME, and the current implementation of its various components.\n For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...\n","sig":null,"attributes":[{"value":"/ These constants are specific to FRAME, and the current implementation of its various components.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813686,"byte_end":813786,"line_start":152,"line_end":152,"column_start":1,"column_end":101}},{"value":"/ For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813787,"byte_end":813870,"line_start":153,"line_end":153,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":6316},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":813971,"byte_end":813988,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"WEIGHT_PER_SECOND","qualname":"::weights::constants::WEIGHT_PER_SECOND","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6317},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814029,"byte_end":814046,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MILLIS","qualname":"::weights::constants::WEIGHT_PER_MILLIS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6318},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814111,"byte_end":814128,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MICROS","qualname":"::weights::constants::WEIGHT_PER_MICROS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6319},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814189,"byte_end":814205,"line_start":161,"line_end":161,"column_start":12,"column_end":28},"name":"WEIGHT_PER_NANOS","qualname":"::weights::constants::WEIGHT_PER_NANOS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27744},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814331,"byte_end":814351,"line_start":165,"line_end":165,"column_start":13,"column_end":33},"name":"BlockExecutionWeight","qualname":"::weights::constants::BlockExecutionWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Importing a block with 0 txs takes ~5 ms\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27751},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814486,"byte_end":814505,"line_start":167,"line_end":167,"column_start":13,"column_end":32},"name":"ExtrinsicBaseWeight","qualname":"::weights::constants::ExtrinsicBaseWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27758},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":814657,"byte_end":814670,"line_start":170,"line_end":170,"column_start":13,"column_end":26},"name":"RocksDbWeight","qualname":"::weights::constants::RocksDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" By default, Substrate uses RocksDB, so this will be the weight used throughout\n the runtime.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27765},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815031,"byte_end":815045,"line_start":176,"line_end":176,"column_start":13,"column_end":27},"name":"ParityDbWeight","qualname":"::weights::constants::ParityDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" ParityDB can be enabled with a feature flag, but is still experimental. These weights\n are available for brave runtime engineers who may want to try this out as default.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6320},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815283,"byte_end":815292,"line_start":184,"line_end":184,"column_start":11,"column_end":20},"name":"WeighData","qualname":"::weights::WeighData","value":"WeighData<T>","parent":null,"children":[{"krate":0,"index":6322}],"decl_id":null,"docs":" Means of weighing some particular kind of data (`T`).\n","sig":null,"attributes":[{"value":"/ Means of weighing some particular kind of data (`T`).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815215,"byte_end":815272,"line_start":183,"line_end":183,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":6322},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815469,"byte_end":815479,"line_start":187,"line_end":187,"column_start":5,"column_end":15},"name":"weigh_data","qualname":"::weights::WeighData::weigh_data","value":"pub fn weigh_data(&Self, T) -> Weight","parent":{"krate":0,"index":6320},"children":[],"decl_id":null,"docs":" Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be\n a tuple of all arguments given to the function (except origin).\n","sig":null,"attributes":[{"value":"/ Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815299,"byte_end":815395,"line_start":185,"line_end":185,"column_start":2,"column_end":98}},{"value":"/ a tuple of all arguments given to the function (except origin).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815397,"byte_end":815464,"line_start":186,"line_end":186,"column_start":2,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":6323},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815572,"byte_end":815588,"line_start":191,"line_end":191,"column_start":11,"column_end":27},"name":"ClassifyDispatch","qualname":"::weights::ClassifyDispatch","value":"ClassifyDispatch<T>","parent":null,"children":[{"krate":0,"index":6325}],"decl_id":null,"docs":" Means of classifying a dispatchable function.\n","sig":null,"attributes":[{"value":"/ Means of classifying a dispatchable function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815512,"byte_end":815561,"line_start":190,"line_end":190,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":6325},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815805,"byte_end":815822,"line_start":195,"line_end":195,"column_start":5,"column_end":22},"name":"classify_dispatch","qualname":"::weights::ClassifyDispatch::classify_dispatch","value":"pub fn classify_dispatch(&Self, T) -> DispatchClass","parent":{"krate":0,"index":6323},"children":[],"decl_id":null,"docs":" Classify the dispatch function based on input data `target` of type `T`. When implementing\n this for a dispatchable, `T` will be a tuple of all arguments given to the function (except\n origin).\n","sig":null,"attributes":[{"value":"/ Classify the dispatch function based on input data `target` of type `T`. When implementing","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815595,"byte_end":815689,"line_start":192,"line_end":192,"column_start":2,"column_end":96}},{"value":"/ this for a dispatchable, `T` will be a tuple of all arguments given to the function (except","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815691,"byte_end":815786,"line_start":193,"line_end":193,"column_start":2,"column_end":97}},{"value":"/ origin).","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815788,"byte_end":815800,"line_start":194,"line_end":194,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":6326},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816020,"byte_end":816027,"line_start":200,"line_end":200,"column_start":11,"column_end":18},"name":"PaysFee","qualname":"::weights::PaysFee","value":"PaysFee<T>","parent":null,"children":[{"krate":0,"index":6328}],"decl_id":null,"docs":" Indicates if dispatch function should pay fees or not.\n If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.\n","sig":null,"attributes":[{"value":"/ Indicates if dispatch function should pay fees or not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815862,"byte_end":815920,"line_start":198,"line_end":198,"column_start":1,"column_end":59}},{"value":"/ If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":815921,"byte_end":816009,"line_start":199,"line_end":199,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":6328},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816037,"byte_end":816045,"line_start":201,"line_end":201,"column_start":5,"column_end":13},"name":"pays_fee","qualname":"::weights::PaysFee::pays_fee","value":"pub fn pays_fee(&Self, T) -> Pays","parent":{"krate":0,"index":6326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27773},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816273,"byte_end":816276,"line_start":208,"line_end":208,"column_start":2,"column_end":5},"name":"Yes","qualname":"::weights::Pays::Yes","value":"Pays::Yes","parent":{"krate":0,"index":27772},"children":[],"decl_id":null,"docs":" Transactor will pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will pay related fees.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816234,"byte_end":816271,"line_start":207,"line_end":207,"column_start":2,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27775},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816322,"byte_end":816324,"line_start":210,"line_end":210,"column_start":2,"column_end":4},"name":"No","qualname":"::weights::Pays::No","value":"Pays::No","parent":{"krate":0,"index":27772},"children":[],"decl_id":null,"docs":" Transactor will NOT pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will NOT pay related fees.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816279,"byte_end":816320,"line_start":209,"line_end":209,"column_start":2,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":27772},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816226,"byte_end":816230,"line_start":206,"line_end":206,"column_start":10,"column_end":14},"name":"Pays","qualname":"::weights::Pays","value":"pub enum Pays { Yes, No, }","parent":null,"children":[{"krate":0,"index":27773},{"krate":0,"index":27775}],"decl_id":null,"docs":" Explicit enum to denote if a transaction pays fee or not.\n","sig":null,"attributes":[{"value":"/ Explicit enum to denote if a transaction pays fee or not.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816077,"byte_end":816138,"line_start":204,"line_end":204,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27852},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816833,"byte_end":816839,"line_start":228,"line_end":228,"column_start":2,"column_end":8},"name":"Normal","qualname":"::weights::DispatchClass::Normal","value":"DispatchClass::Normal","parent":{"krate":0,"index":27851},"children":[],"decl_id":null,"docs":" A normal dispatch.\n","sig":null,"attributes":[{"value":"/ A normal dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816809,"byte_end":816831,"line_start":227,"line_end":227,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27854},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816872,"byte_end":816883,"line_start":230,"line_end":230,"column_start":2,"column_end":13},"name":"Operational","qualname":"::weights::DispatchClass::Operational","value":"DispatchClass::Operational","parent":{"krate":0,"index":27851},"children":[],"decl_id":null,"docs":" An operational dispatch.\n","sig":null,"attributes":[{"value":"/ An operational dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816842,"byte_end":816870,"line_start":229,"line_end":229,"column_start":2,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27856},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817789,"byte_end":817798,"line_start":244,"line_end":244,"column_start":2,"column_end":11},"name":"Mandatory","qualname":"::weights::DispatchClass::Mandatory","value":"DispatchClass::Mandatory","parent":{"krate":0,"index":27851},"children":[],"decl_id":null,"docs":" A mandatory dispatch. These kinds of dispatch are always included regardless of their\n weight, therefore it is critical that they are separately validated to ensure that a\n malicious validator cannot craft a valid but impossibly heavy block. Usually this just\n means ensuring that the extrinsic can only be included once and that it is always very\n light.","sig":null,"attributes":[{"value":"/ A mandatory dispatch. These kinds of dispatch are always included regardless of their","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816886,"byte_end":816975,"line_start":231,"line_end":231,"column_start":2,"column_end":91}},{"value":"/ weight, therefore it is critical that they are separately validated to ensure that a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816977,"byte_end":817065,"line_start":232,"line_end":232,"column_start":2,"column_end":90}},{"value":"/ malicious validator cannot craft a valid but impossibly heavy block. Usually this just","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817067,"byte_end":817157,"line_start":233,"line_end":233,"column_start":2,"column_end":92}},{"value":"/ means ensuring that the extrinsic can only be included once and that it is always very","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817159,"byte_end":817249,"line_start":234,"line_end":234,"column_start":2,"column_end":92}},{"value":"/ light.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817251,"byte_end":817261,"line_start":235,"line_end":235,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817263,"byte_end":817266,"line_start":236,"line_end":236,"column_start":2,"column_end":5}},{"value":"/ Do *NOT* use it for extrinsics that can be heavy.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817268,"byte_end":817321,"line_start":237,"line_end":237,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817323,"byte_end":817326,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ The only real use case for this is inherent extrinsics that are required to execute in a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817328,"byte_end":817420,"line_start":239,"line_end":239,"column_start":2,"column_end":94}},{"value":"/ block for the block to be valid, and it solves the issue in the case that the block","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817422,"byte_end":817509,"line_start":240,"line_end":240,"column_start":2,"column_end":89}},{"value":"/ initialization is sufficiently heavy to mean that those inherents do not fit into the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817511,"byte_end":817600,"line_start":241,"line_end":241,"column_start":2,"column_end":91}},{"value":"/ block. Essentially, we assume that in these exceptional circumstances, it is better to","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817602,"byte_end":817692,"line_start":242,"line_end":242,"column_start":2,"column_end":92}},{"value":"/ allow an overweight block to be created than to not allow any block at all to be created.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817694,"byte_end":817787,"line_start":243,"line_end":243,"column_start":2,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":27851},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816792,"byte_end":816805,"line_start":226,"line_end":226,"column_start":10,"column_end":23},"name":"DispatchClass","qualname":"::weights::DispatchClass","value":"pub enum DispatchClass { Normal, Operational, Mandatory, }","parent":null,"children":[{"krate":0,"index":27852},{"krate":0,"index":27854},{"krate":0,"index":27856}],"decl_id":null,"docs":" A generalized group of dispatch types.","sig":null,"attributes":[{"value":"/ A generalized group of dispatch types.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816395,"byte_end":816437,"line_start":219,"line_end":219,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816438,"byte_end":816441,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ NOTE whenever upgrading the enum make sure to also update","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816442,"byte_end":816503,"line_start":221,"line_end":221,"column_start":1,"column_end":62}},{"value":"/ [DispatchClass::all] and [DispatchClass::non_mandatory] helper functions.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816504,"byte_end":816581,"line_start":222,"line_end":222,"column_start":1,"column_end":78}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816671,"byte_end":816702,"line_start":224,"line_end":224,"column_start":29,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":6334},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817965,"byte_end":817968,"line_start":255,"line_end":255,"column_start":9,"column_end":12},"name":"all","qualname":"<DispatchClass>::all","value":"pub fn all() -> &'static [DispatchClass]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing all dispatch classes.\n","sig":null,"attributes":[{"value":"/ Returns an array containing all dispatch classes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817903,"byte_end":817956,"line_start":254,"line_end":254,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":6335},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818160,"byte_end":818173,"line_start":260,"line_end":260,"column_start":9,"column_end":22},"name":"non_mandatory","qualname":"<DispatchClass>::non_mandatory","value":"pub fn non_mandatory() -> &'static [DispatchClass]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array of all dispatch classes except `Mandatory`.\n","sig":null,"attributes":[{"value":"/ Returns an array of all dispatch classes except `Mandatory`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818087,"byte_end":818151,"line_start":259,"line_end":259,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":6336},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818456,"byte_end":818465,"line_start":269,"line_end":269,"column_start":11,"column_end":20},"name":"OneOrMany","qualname":"::weights::OneOrMany","value":"OneOrMany<T>","parent":null,"children":[{"krate":0,"index":6338},{"krate":0,"index":6339}],"decl_id":null,"docs":" A trait that represents one or many values of given type.","sig":null,"attributes":[{"value":"/ A trait that represents one or many values of given type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818267,"byte_end":818328,"line_start":265,"line_end":265,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818329,"byte_end":818332,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ Useful to accept as parameter type to let the caller pass either a single value directly","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818333,"byte_end":818425,"line_start":267,"line_end":267,"column_start":1,"column_end":93}},{"value":"/ or an iterator.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818426,"byte_end":818445,"line_start":268,"line_end":268,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":6338},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818501,"byte_end":818505,"line_start":271,"line_end":271,"column_start":7,"column_end":11},"name":"Iter","qualname":"::weights::OneOrMany::Iter","value":"type Iter: Iterator<Item = T>;","parent":{"krate":0,"index":6336},"children":[],"decl_id":null,"docs":" The iterator type.\n","sig":null,"attributes":[{"value":"/ The iterator type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818472,"byte_end":818494,"line_start":270,"line_end":270,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":6339},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818572,"byte_end":818581,"line_start":273,"line_end":273,"column_start":5,"column_end":14},"name":"into_iter","qualname":"::weights::OneOrMany::into_iter","value":"pub fn into_iter(Self) -> Self::Iter","parent":{"krate":0,"index":6336},"children":[],"decl_id":null,"docs":" Convert this item into an iterator.\n","sig":null,"attributes":[{"value":"/ Convert this item into an iterator.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818528,"byte_end":818567,"line_start":272,"line_end":272,"column_start":2,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":27886},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819154,"byte_end":819166,"line_start":292,"line_end":292,"column_start":12,"column_end":24},"name":"DispatchInfo","qualname":"::weights::DispatchInfo","value":"DispatchInfo { weight, class, pays_fee }","parent":null,"children":[{"krate":0,"index":27887},{"krate":0,"index":27888},{"krate":0,"index":27889}],"decl_id":null,"docs":" A bundle of static information collected from the `#[weight = $x]` attributes.\n","sig":null,"attributes":[{"value":"/ A bundle of static information collected from the `#[weight = $x]` attributes.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818973,"byte_end":819055,"line_start":290,"line_end":290,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":27887},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819207,"byte_end":819213,"line_start":294,"line_end":294,"column_start":6,"column_end":12},"name":"weight","qualname":"::weights::DispatchInfo::weight","value":"u64","parent":{"krate":0,"index":27886},"children":[],"decl_id":null,"docs":" Weight of this transaction.\n","sig":null,"attributes":[{"value":"/ Weight of this transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819170,"byte_end":819201,"line_start":293,"line_end":293,"column_start":2,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":27888},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819260,"byte_end":819265,"line_start":296,"line_end":296,"column_start":6,"column_end":11},"name":"class","qualname":"::weights::DispatchInfo::class","value":"weights::DispatchClass","parent":{"krate":0,"index":27886},"children":[],"decl_id":null,"docs":" Class of this transaction.\n","sig":null,"attributes":[{"value":"/ Class of this transaction.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819224,"byte_end":819254,"line_start":295,"line_end":295,"column_start":2,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":27889},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819324,"byte_end":819332,"line_start":298,"line_end":298,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::DispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":27886},"children":[],"decl_id":null,"docs":" Does this transaction pay fees.\n","sig":null,"attributes":[{"value":"/ Does this transaction pay fees.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819283,"byte_end":819318,"line_start":297,"line_end":297,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":6347},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819492,"byte_end":819507,"line_start":303,"line_end":303,"column_start":11,"column_end":26},"name":"GetDispatchInfo","qualname":"::weights::GetDispatchInfo","value":"GetDispatchInfo","parent":null,"children":[{"krate":0,"index":6348}],"decl_id":null,"docs":" A `Dispatchable` function (aka transaction) that can carry some static information along with\n it, using the `#[weight]` attribute.\n","sig":null,"attributes":[{"value":"/ A `Dispatchable` function (aka transaction) that can carry some static information along with","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819343,"byte_end":819440,"line_start":301,"line_end":301,"column_start":1,"column_end":98}},{"value":"/ it, using the `#[weight]` attribute.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819441,"byte_end":819481,"line_start":302,"line_end":302,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":6348},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819652,"byte_end":819669,"line_start":307,"line_end":307,"column_start":5,"column_end":22},"name":"get_dispatch_info","qualname":"::weights::GetDispatchInfo::get_dispatch_info","value":"pub fn get_dispatch_info(&Self) -> DispatchInfo","parent":{"krate":0,"index":6347},"children":[],"decl_id":null,"docs":" Return a `DispatchInfo`, containing relevant information of this dispatch.","sig":null,"attributes":[{"value":"/ Return a `DispatchInfo`, containing relevant information of this dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819511,"byte_end":819589,"line_start":304,"line_end":304,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819591,"byte_end":819594,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ This is done independently of its encoded size.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819596,"byte_end":819647,"line_start":306,"line_end":306,"column_start":2,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":27920},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820043,"byte_end":820059,"line_start":319,"line_end":319,"column_start":12,"column_end":28},"name":"PostDispatchInfo","qualname":"::weights::PostDispatchInfo","value":"PostDispatchInfo { actual_weight, pays_fee }","parent":null,"children":[{"krate":0,"index":27921},{"krate":0,"index":27922}],"decl_id":null,"docs":" Weight information that is only available post dispatch.\n NOTE: This can only be used to reduce the weight or fee, not increase it.\n","sig":null,"attributes":[{"value":"/ Weight information that is only available post dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819806,"byte_end":819866,"line_start":316,"line_end":316,"column_start":1,"column_end":61}},{"value":"/ NOTE: This can only be used to reduce the weight or fee, not increase it.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":819867,"byte_end":819944,"line_start":317,"line_end":317,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":27921},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820162,"byte_end":820175,"line_start":321,"line_end":321,"column_start":6,"column_end":19},"name":"actual_weight","qualname":"::weights::PostDispatchInfo::actual_weight","value":"std::option::Option<u64>","parent":{"krate":0,"index":27920},"children":[],"decl_id":null,"docs":" Actual weight consumed by a call or `None` which stands for the worst case static weight.\n","sig":null,"attributes":[{"value":"/ Actual weight consumed by a call or `None` which stands for the worst case static weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820063,"byte_end":820156,"line_start":320,"line_end":320,"column_start":2,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":27922},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820271,"byte_end":820279,"line_start":323,"line_end":323,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::PostDispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":27920},"children":[],"decl_id":null,"docs":" Whether this transaction should pay fees when all is said and done.\n","sig":null,"attributes":[{"value":"/ Whether this transaction should pay fees when all is said and done.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820194,"byte_end":820265,"line_start":322,"line_end":322,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":6352},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820398,"byte_end":820410,"line_start":328,"line_end":328,"column_start":9,"column_end":21},"name":"calc_unspent","qualname":"<PostDispatchInfo>::calc_unspent","value":"pub fn calc_unspent(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much (if any) weight was not used by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much (if any) weight was not used by the `Dispatchable`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820315,"byte_end":820389,"line_start":327,"line_end":327,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":6353},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820582,"byte_end":820600,"line_start":333,"line_end":333,"column_start":9,"column_end":27},"name":"calc_actual_weight","qualname":"<PostDispatchInfo>::calc_actual_weight","value":"pub fn calc_actual_weight(&Self, &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much weight was actually spent by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much weight was actually spent by the `Dispatchable`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820502,"byte_end":820573,"line_start":332,"line_end":332,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":6354},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820845,"byte_end":820853,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"name":"pays_fee","qualname":"<PostDispatchInfo>::pays_fee","value":"pub fn pays_fee(&Self, &DispatchInfo) -> Pays","parent":null,"children":[],"decl_id":null,"docs":" Determine if user should actually pay fees at the end of the dispatch.\n","sig":null,"attributes":[{"value":"/ Determine if user should actually pay fees at the end of the dispatch.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820762,"byte_end":820836,"line_start":341,"line_end":341,"column_start":2,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":6355},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821372,"byte_end":821393,"line_start":357,"line_end":357,"column_start":8,"column_end":29},"name":"extract_actual_weight","qualname":"::weights::extract_actual_weight","value":"pub fn extract_actual_weight(&DispatchResultWithPostInfo, &DispatchInfo)\n-> Weight","parent":null,"children":[],"decl_id":null,"docs":" Extract the actual weight from a dispatch result if any or fall back to the default weight.\n","sig":null,"attributes":[{"value":"/ Extract the actual weight from a dispatch result if any or fall back to the default weight.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821269,"byte_end":821364,"line_start":356,"line_end":356,"column_start":1,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":6366},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822689,"byte_end":822709,"line_start":407,"line_end":407,"column_start":11,"column_end":31},"name":"WithPostDispatchInfo","qualname":"::weights::WithPostDispatchInfo","value":"WithPostDispatchInfo","parent":null,"children":[{"krate":0,"index":6367}],"decl_id":null,"docs":" Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables\n that want to return a custom a posterior weight on error.\n","sig":null,"attributes":[{"value":"/ Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822520,"byte_end":822616,"line_start":405,"line_end":405,"column_start":1,"column_end":97}},{"value":"/ that want to return a custom a posterior weight on error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822617,"byte_end":822678,"line_start":406,"line_end":406,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":6367},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822996,"byte_end":823007,"line_start":416,"line_end":416,"column_start":5,"column_end":16},"name":"with_weight","qualname":"::weights::WithPostDispatchInfo::with_weight","value":"pub fn with_weight(Self, Weight) -> DispatchErrorWithPostInfo","parent":{"krate":0,"index":6366},"children":[],"decl_id":null,"docs":" Call this on your modules custom errors type in order to return a custom weight on error.","sig":null,"attributes":[{"value":"/ Call this on your modules custom errors type in order to return a custom weight on error.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822713,"byte_end":822806,"line_start":408,"line_end":408,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822808,"byte_end":822811,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822813,"byte_end":822826,"line_start":410,"line_end":410,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822828,"byte_end":822831,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822833,"byte_end":822846,"line_start":412,"line_end":412,"column_start":2,"column_end":15}},{"value":"/ let who = ensure_signed(origin).map_err(|e| e.with_weight(100))?;","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822848,"byte_end":822917,"line_start":413,"line_end":413,"column_start":2,"column_end":71}},{"value":"/ ensure!(who == me, Error::<T>::NotMe.with_weight(200_000));","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822919,"byte_end":822982,"line_start":414,"line_end":414,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822984,"byte_end":822991,"line_start":415,"line_end":415,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":6407},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825439,"byte_end":825449,"line_start":516,"line_end":516,"column_start":12,"column_end":22},"name":"FunctionOf","qualname":"::weights::FunctionOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct to represent a weight which is a function of the input arguments. The given items have\n the following types:","sig":null,"attributes":[{"value":"/ A struct to represent a weight which is a function of the input arguments. The given items have","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824725,"byte_end":824824,"line_start":506,"line_end":506,"column_start":1,"column_end":100}},{"value":"/ the following types:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824825,"byte_end":824849,"line_start":507,"line_end":507,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824850,"byte_end":824853,"line_start":508,"line_end":508,"column_start":1,"column_end":4}},{"value":"/ - `WD`: a raw `Weight` value or a closure that returns a `Weight` with the same argument list as","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824854,"byte_end":824954,"line_start":509,"line_end":509,"column_start":1,"column_end":101}},{"value":"/   the dispatched, wrapped in a tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824955,"byte_end":824996,"line_start":510,"line_end":510,"column_start":1,"column_end":42}},{"value":"/ - `CD`: a raw `DispatchClass` value or a closure that returns a `DispatchClass` with the same","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":824997,"byte_end":825094,"line_start":511,"line_end":511,"column_start":1,"column_end":98}},{"value":"/   argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825095,"byte_end":825153,"line_start":512,"line_end":512,"column_start":1,"column_end":59}},{"value":"/ - `PF`: a `Pays` variant for whether this dispatch pays fee or not or a closure that returns a","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825154,"byte_end":825252,"line_start":513,"line_end":513,"column_start":1,"column_end":99}},{"value":"/   `Pays` variant with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825253,"byte_end":825340,"line_start":514,"line_end":514,"column_start":1,"column_end":88}},{"value":"deprecated =\n\"Function arguments are available directly inside the annotation now.\"","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825341,"byte_end":825427,"line_start":515,"line_end":515,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":6412},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825462,"byte_end":825468,"line_start":516,"line_end":516,"column_start":35,"column_end":41},"name":"0","qualname":"::weights::FunctionOf::0","value":"WD","parent":{"krate":0,"index":6407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6413},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825470,"byte_end":825476,"line_start":516,"line_end":516,"column_start":43,"column_end":49},"name":"1","qualname":"::weights::FunctionOf::1","value":"CD","parent":{"krate":0,"index":6407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6414},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825478,"byte_end":825484,"line_start":516,"line_end":516,"column_start":51,"column_end":57},"name":"2","qualname":"::weights::FunctionOf::2","value":"PF","parent":{"krate":0,"index":6407},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27952},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827783,"byte_end":827798,"line_start":608,"line_end":608,"column_start":12,"column_end":27},"name":"RuntimeDbWeight","qualname":"::weights::RuntimeDbWeight","value":"RuntimeDbWeight { read, write }","parent":null,"children":[{"krate":0,"index":27953},{"krate":0,"index":27954}],"decl_id":null,"docs":" The weight of database operations that the runtime can invoke.\n","sig":null,"attributes":[{"value":"/ The weight of database operations that the runtime can invoke.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827618,"byte_end":827684,"line_start":606,"line_end":606,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":27953},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827806,"byte_end":827810,"line_start":609,"line_end":609,"column_start":6,"column_end":10},"name":"read","qualname":"::weights::RuntimeDbWeight::read","value":"u64","parent":{"krate":0,"index":27952},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27954},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827825,"byte_end":827830,"line_start":610,"line_end":610,"column_start":6,"column_end":11},"name":"write","qualname":"::weights::RuntimeDbWeight::write","value":"u64","parent":{"krate":0,"index":27952},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6464},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827874,"byte_end":827879,"line_start":614,"line_end":614,"column_start":9,"column_end":14},"name":"reads","qualname":"<RuntimeDbWeight>::reads","value":"pub fn reads(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6465},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827951,"byte_end":827957,"line_start":618,"line_end":618,"column_start":9,"column_end":15},"name":"writes","qualname":"<RuntimeDbWeight>::writes","value":"pub fn writes(Self, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6466},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828030,"byte_end":828042,"line_start":622,"line_end":622,"column_start":9,"column_end":21},"name":"reads_writes","qualname":"<RuntimeDbWeight>::reads_writes","value":"pub fn reads_writes(Self, Weight, Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":27984},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828605,"byte_end":828627,"line_start":640,"line_end":640,"column_start":12,"column_end":34},"name":"WeightToFeeCoefficient","qualname":"::weights::WeightToFeeCoefficient","value":"WeightToFeeCoefficient { coeff_integer, coeff_frac, negative, degree }","parent":null,"children":[{"krate":0,"index":27986},{"krate":0,"index":27987},{"krate":0,"index":27988},{"krate":0,"index":27989}],"decl_id":null,"docs":" One coefficient and its position in the `WeightToFeePolynomial`.","sig":null,"attributes":[{"value":"/ One coefficient and its position in the `WeightToFeePolynomial`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828232,"byte_end":828300,"line_start":629,"line_end":629,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828301,"byte_end":828304,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ One term of polynomial is calculated as:","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828305,"byte_end":828349,"line_start":631,"line_end":631,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828350,"byte_end":828353,"line_start":632,"line_end":632,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828354,"byte_end":828367,"line_start":633,"line_end":633,"column_start":1,"column_end":14}},{"value":"/ coeff_integer * x^(degree) + coeff_frac * x^(degree)","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828368,"byte_end":828424,"line_start":634,"line_end":634,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828425,"byte_end":828432,"line_start":635,"line_end":635,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828433,"byte_end":828436,"line_start":636,"line_end":636,"column_start":1,"column_end":4}},{"value":"/ The `negative` value encodes whether the term is added or substracted from the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828437,"byte_end":828519,"line_start":637,"line_end":637,"column_start":1,"column_end":83}},{"value":"/ overall polynomial result.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828520,"byte_end":828550,"line_start":638,"line_end":638,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":27986},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828687,"byte_end":828700,"line_start":642,"line_end":642,"column_start":6,"column_end":19},"name":"coeff_integer","qualname":"::weights::WeightToFeeCoefficient::coeff_integer","value":"Balance","parent":{"krate":0,"index":27984},"children":[],"decl_id":null,"docs":" The integral part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The integral part of the coefficient.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828640,"byte_end":828681,"line_start":641,"line_end":641,"column_start":2,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":27987},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828761,"byte_end":828771,"line_start":644,"line_end":644,"column_start":6,"column_end":16},"name":"coeff_frac","qualname":"::weights::WeightToFeeCoefficient::coeff_frac","value":"sp_runtime::Perbill","parent":{"krate":0,"index":27984},"children":[],"decl_id":null,"docs":" The fractional part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The fractional part of the coefficient.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828712,"byte_end":828755,"line_start":643,"line_end":643,"column_start":2,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":27988},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828852,"byte_end":828860,"line_start":646,"line_end":646,"column_start":6,"column_end":14},"name":"negative","qualname":"::weights::WeightToFeeCoefficient::negative","value":"bool","parent":{"krate":0,"index":27984},"children":[],"decl_id":null,"docs":" True iff the coefficient should be interpreted as negative.\n","sig":null,"attributes":[{"value":"/ True iff the coefficient should be interpreted as negative.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828783,"byte_end":828846,"line_start":645,"line_end":645,"column_start":2,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":27989},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828907,"byte_end":828913,"line_start":648,"line_end":648,"column_start":6,"column_end":12},"name":"degree","qualname":"::weights::WeightToFeeCoefficient::degree","value":"u8","parent":{"krate":0,"index":27984},"children":[],"decl_id":null,"docs":" Degree/exponent of the term.\n","sig":null,"attributes":[{"value":"/ Degree/exponent of the term.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828869,"byte_end":828901,"line_start":647,"line_end":647,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":6467},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828989,"byte_end":829012,"line_start":652,"line_end":652,"column_start":10,"column_end":33},"name":"WeightToFeeCoefficients","qualname":"::weights::WeightToFeeCoefficients","value":"SmallVec<[WeightToFeeCoefficient<T>; ]>","parent":null,"children":[],"decl_id":null,"docs":" A list of coefficients that represent one polynomial.\n","sig":null,"attributes":[{"value":"/ A list of coefficients that represent one polynomial.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":828922,"byte_end":828979,"line_start":651,"line_end":651,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":6470},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829215,"byte_end":829236,"line_start":657,"line_end":657,"column_start":11,"column_end":32},"name":"WeightToFeePolynomial","qualname":"::weights::WeightToFeePolynomial","value":"WeightToFeePolynomial","parent":null,"children":[{"krate":0,"index":6471},{"krate":0,"index":6472},{"krate":0,"index":6473}],"decl_id":null,"docs":" A trait that describes the weight to fee calculation as polynomial.","sig":null,"attributes":[{"value":"/ A trait that describes the weight to fee calculation as polynomial.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829061,"byte_end":829132,"line_start":654,"line_end":654,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829133,"byte_end":829136,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ An implementor should only implement the `polynomial` function.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829137,"byte_end":829204,"line_start":656,"line_end":656,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":6471},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829314,"byte_end":829321,"line_start":659,"line_end":659,"column_start":7,"column_end":14},"name":"Balance","qualname":"::weights::WeightToFeePolynomial::Balance","value":"type Balance: BaseArithmetic + From<u32> + Copy + Unsigned;","parent":{"krate":0,"index":6470},"children":[],"decl_id":null,"docs":" The type that is returned as result from polynomial evaluation.\n","sig":null,"attributes":[{"value":"/ The type that is returned as result from polynomial evaluation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829240,"byte_end":829307,"line_start":658,"line_end":658,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6472},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829774,"byte_end":829784,"line_start":667,"line_end":667,"column_start":5,"column_end":15},"name":"polynomial","qualname":"::weights::WeightToFeePolynomial::polynomial","value":"pub fn polynomial() -> WeightToFeeCoefficients<Self::Balance>","parent":{"krate":0,"index":6470},"children":[],"decl_id":null,"docs":" Returns a polynomial that describes the weight to fee conversion.","sig":null,"attributes":[{"value":"/ Returns a polynomial that describes the weight to fee conversion.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829371,"byte_end":829440,"line_start":661,"line_end":661,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829442,"byte_end":829445,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ This is the only function that should be manually implemented. Please note","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829447,"byte_end":829525,"line_start":663,"line_end":663,"column_start":2,"column_end":80}},{"value":"/ that all calculation is done in the probably unsigned `Balance` type. This means","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829527,"byte_end":829611,"line_start":664,"line_end":664,"column_start":2,"column_end":86}},{"value":"/ that the order of coefficients is important as putting the negative coefficients","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829613,"byte_end":829697,"line_start":665,"line_end":665,"column_start":2,"column_end":86}},{"value":"/ first will most likely saturate the result to zero mid evaluation.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829699,"byte_end":829769,"line_start":666,"line_end":666,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":6473},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830075,"byte_end":830079,"line_start":673,"line_end":673,"column_start":5,"column_end":9},"name":"calc","qualname":"::weights::WeightToFeePolynomial::calc","value":"pub fn calc(&Weight) -> Self::Balance","parent":{"krate":0,"index":6470},"children":[],"decl_id":null,"docs":" Calculates the fee from the passed `weight` according to the `polynomial`.","sig":null,"attributes":[{"value":"/ Calculates the fee from the passed `weight` according to the `polynomial`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829832,"byte_end":829910,"line_start":669,"line_end":669,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829912,"byte_end":829915,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ This should not be overriden in most circumstances. Calculation is done in the","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":829917,"byte_end":829999,"line_start":671,"line_end":671,"column_start":2,"column_end":84}},{"value":"/ `Balance` type and never overflows. All evaluation is saturating.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830001,"byte_end":830070,"line_start":672,"line_end":672,"column_start":2,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6475},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830850,"byte_end":830861,"line_start":698,"line_end":698,"column_start":12,"column_end":23},"name":"IdentityFee","qualname":"::weights::IdentityFee","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.\n","sig":null,"attributes":[{"value":"/ Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830747,"byte_end":830838,"line_start":697,"line_end":697,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":28014},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831377,"byte_end":831393,"line_start":718,"line_end":718,"column_start":12,"column_end":28},"name":"PerDispatchClass","qualname":"::weights::PerDispatchClass","value":"PerDispatchClass {  }","parent":null,"children":[{"krate":0,"index":28016},{"krate":0,"index":28017},{"krate":0,"index":28018}],"decl_id":null,"docs":" A struct holding value for each `DispatchClass`.\n","sig":null,"attributes":[{"value":"/ A struct holding value for each `DispatchClass`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831232,"byte_end":831284,"line_start":716,"line_end":716,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":6485},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831672,"byte_end":831675,"line_start":729,"line_end":729,"column_start":9,"column_end":12},"name":"new","qualname":"<PerDispatchClass<T>>::new","value":"pub fn new<impl Fn(DispatchClass) -> T: Fn(DispatchClass) ->\nT>(impl Fn(DispatchClass) -> T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `PerDispatchClass` with the same value for every class.\n","sig":null,"attributes":[{"value":"/ Create new `PerDispatchClass` with the same value for every class.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831593,"byte_end":831663,"line_start":728,"line_end":728,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":6487},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831940,"byte_end":831947,"line_start":738,"line_end":738,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<PerDispatchClass<T>>::get_mut","value":"pub fn get_mut(&mut Self, DispatchClass) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to current value of given class.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to current value of given class.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831871,"byte_end":831931,"line_start":737,"line_end":737,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":6488},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832219,"byte_end":832222,"line_start":747,"line_end":747,"column_start":9,"column_end":12},"name":"get","qualname":"<PerDispatchClass<T>>::get","value":"pub fn get(&Self, DispatchClass) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get current value for given class.\n","sig":null,"attributes":[{"value":"/ Get current value for given class.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832172,"byte_end":832210,"line_start":746,"line_end":746,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":6491},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832508,"byte_end":832511,"line_start":758,"line_end":758,"column_start":9,"column_end":12},"name":"set","qualname":"<PerDispatchClass<T>>::set","value":"pub fn set<impl OneOrMany<DispatchClass>: OneOrMany<DispatchClass>>(&mut Self,\nT, impl OneOrMany<DispatchClass>)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of given class.\n","sig":null,"attributes":[{"value":"/ Set the value of given class.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832466,"byte_end":832499,"line_start":757,"line_end":757,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":6494},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832766,"byte_end":832771,"line_start":767,"line_end":767,"column_start":9,"column_end":14},"name":"total","qualname":"<PerDispatchClass<Weight>>::total","value":"pub fn total(&Self) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Returns the total weight consumed by all extrinsics in the block.\n","sig":null,"attributes":[{"value":"/ Returns the total weight consumed by all extrinsics in the block.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832688,"byte_end":832757,"line_start":766,"line_end":766,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":6495},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833015,"byte_end":833018,"line_start":776,"line_end":776,"column_start":9,"column_end":12},"name":"add","qualname":"<PerDispatchClass<Weight>>::add","value":"pub fn add(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.\n","sig":null,"attributes":[{"value":"/ Add some weight of a specific dispatch class, saturating at the numeric bounds of `Weight`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832911,"byte_end":833006,"line_start":775,"line_end":775,"column_start":2,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":6496},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833264,"byte_end":833275,"line_start":783,"line_end":783,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<PerDispatchClass<Weight>>::checked_add","value":"pub fn checked_add(&mut Self, Weight, DispatchClass) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Try to add some weight of a specific dispatch class, returning Err(()) if overflow would\n occur.\n","sig":null,"attributes":[{"value":"/ Try to add some weight of a specific dispatch class, returning Err(()) if overflow would","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833151,"byte_end":833243,"line_start":781,"line_end":781,"column_start":2,"column_end":94}},{"value":"/ occur.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833245,"byte_end":833255,"line_start":782,"line_end":782,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":6497},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833557,"byte_end":833560,"line_start":791,"line_end":791,"column_start":9,"column_end":12},"name":"sub","qualname":"<PerDispatchClass<Weight>>::sub","value":"pub fn sub(&mut Self, Weight, DispatchClass)","parent":null,"children":[],"decl_id":null,"docs":" Subtract some weight of a specific dispatch class, saturating at the numeric bounds of\n `Weight`.\n","sig":null,"attributes":[{"value":"/ Subtract some weight of a specific dispatch class, saturating at the numeric bounds of","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833443,"byte_end":833533,"line_start":789,"line_end":789,"column_start":2,"column_end":92}},{"value":"/ `Weight`.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":833535,"byte_end":833548,"line_start":790,"line_end":790,"column_start":2,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":6498},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1756,"byte_end":1764,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"unsigned","qualname":"::unsigned","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","parent":null,"children":[{"krate":0,"index":6499},{"krate":0,"index":6502},{"krate":0,"index":6503},{"krate":0,"index":6506},{"krate":0,"index":6509},{"krate":0,"index":6512}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6618},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2673,"byte_end":2683,"line_start":103,"line_end":103,"column_start":11,"column_end":21},"name":"LOG_TARGET","qualname":"::LOG_TARGET","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" A unified log target for support operations.\n","sig":null,"attributes":[{"value":"/ A unified log target for support operations.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2614,"byte_end":2662,"line_start":102,"line_end":102,"column_start":1,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":28059},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2825,"byte_end":2830,"line_start":107,"line_end":107,"column_start":10,"column_end":15},"name":"Never","qualname":"::Never","value":"pub enum Never { }","parent":null,"children":[],"decl_id":null,"docs":" A type that cannot be instantiated.\n","sig":null,"attributes":[{"value":"/ A type that cannot be instantiated.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2727,"byte_end":2766,"line_start":105,"line_end":105,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":28074},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":3002,"byte_end":3010,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"PalletId","qualname":"::PalletId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pallet identifier. These are per pallet and should be stored in a registry somewhere.\n","sig":null,"attributes":[{"value":"/ A pallet identifier. These are per pallet and should be stored in a registry somewhere.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":2835,"byte_end":2926,"line_start":109,"line_end":109,"column_start":1,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":28076},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":3011,"byte_end":3022,"line_start":111,"line_end":111,"column_start":21,"column_end":32},"name":"0","qualname":"::PalletId::0","value":"[u8; 8]","parent":{"krate":0,"index":28074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":6628},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16543,"byte_end":16548,"line_start":595,"line_end":595,"column_start":8,"column_end":13},"name":"debug","qualname":"::debug","value":"pub fn debug<impl sp_std::fmt::Debug: sp_std::fmt::Debug>(&impl sp_std::fmt::Debug)","parent":null,"children":[],"decl_id":null,"docs":" Print out the debuggable type.\n","sig":null,"attributes":[{"value":"/ Print out the debuggable type.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":16501,"byte_end":16535,"line_start":594,"line_end":594,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":6685},"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":36967,"byte_end":36981,"line_start":1332,"line_end":1332,"column_start":9,"column_end":23},"name":"pallet_prelude","qualname":"::pallet_prelude","value":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","parent":null,"children":[{"krate":0,"index":6686},{"krate":0,"index":6689},{"krate":0,"index":6690},{"krate":0,"index":6691},{"krate":0,"index":6694},{"krate":0,"index":6697},{"krate":0,"index":6700},{"krate":0,"index":6703},{"krate":0,"index":6706},{"krate":0,"index":6707},{"krate":0,"index":6710},{"krate":0,"index":6713},{"krate":0,"index":6716},{"krate":0,"index":6719},{"krate":0,"index":6720},{"krate":0,"index":6723},{"krate":0,"index":6724},{"krate":0,"index":6727},{"krate":0,"index":6730},{"krate":0,"index":6731},{"krate":0,"index":6733},{"krate":0,"index":6736},{"krate":0,"index":6739},{"krate":0,"index":6742},{"krate":0,"index":6745},{"krate":0,"index":6746},{"krate":0,"index":6748},{"krate":0,"index":6749},{"krate":0,"index":6750},{"krate":0,"index":6752},{"krate":0,"index":6755},{"krate":0,"index":6758},{"krate":0,"index":6759},{"krate":0,"index":6761},{"krate":0,"index":6764},{"krate":0,"index":6767},{"krate":0,"index":6770},{"krate":0,"index":6773},{"krate":0,"index":6776},{"krate":0,"index":6777},{"krate":0,"index":6780},{"krate":0,"index":6783},{"krate":0,"index":6786},{"krate":0,"index":6787},{"krate":0,"index":6789},{"krate":0,"index":6790},{"krate":0,"index":6792},{"krate":0,"index":6793},{"krate":0,"index":6795},{"krate":0,"index":6798},{"krate":0,"index":6801},{"krate":0,"index":6804},{"krate":0,"index":6805},{"krate":0,"index":6807},{"krate":0,"index":6810},{"krate":0,"index":6813},{"krate":0,"index":6816},{"krate":0,"index":6817},{"krate":0,"index":6819},{"krate":0,"index":6820},{"krate":0,"index":6822},{"krate":0,"index":6823},{"krate":0,"index":6825},{"krate":0,"index":6826},{"krate":0,"index":6827},{"krate":0,"index":6829},{"krate":0,"index":6830},{"krate":0,"index":6832},{"krate":0,"index":6833},{"krate":0,"index":6835},{"krate":0,"index":6836},{"krate":0,"index":6838},{"krate":0,"index":6839},{"krate":0,"index":6840},{"krate":0,"index":6843},{"krate":0,"index":6846},{"krate":0,"index":6849},{"krate":0,"index":6850},{"krate":0,"index":6853},{"krate":0,"index":6856},{"krate":0,"index":6859},{"krate":0,"index":6862},{"krate":0,"index":6865},{"krate":0,"index":6868},{"krate":0,"index":6871},{"krate":0,"index":6874},{"krate":0,"index":6877},{"krate":0,"index":6878}],"decl_id":null,"docs":" Prelude to be used alongside pallet macro, for ease of use.\n","sig":null,"attributes":[{"value":"/ Prelude to be used alongside pallet macro, for ease of use.","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":36895,"byte_end":36958,"line_start":1331,"line_end":1331,"column_start":1,"column_end":64}}]}],"impls":[{"id":5,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83867,"byte_end":83876,"line_start":77,"line_end":77,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84315,"byte_end":84316,"line_start":90,"line_end":90,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174791,"byte_end":174792,"line_start":36,"line_end":36,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176003,"byte_end":176011,"line_start":82,"line_end":82,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176268,"byte_end":176276,"line_start":92,"line_end":92,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176424,"byte_end":176436,"line_start":100,"line_end":100,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176772,"byte_end":176784,"line_start":110,"line_end":110,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177041,"byte_end":177057,"line_start":122,"line_end":122,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177401,"byte_end":177417,"line_start":132,"line_end":132,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177650,"byte_end":177660,"line_start":144,"line_end":144,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177958,"byte_end":177968,"line_start":157,"line_end":157,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178261,"byte_end":178268,"line_start":170,"line_end":170,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178556,"byte_end":178563,"line_start":183,"line_end":183,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242957,"byte_end":242972,"line_start":41,"line_end":41,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243416,"byte_end":243431,"line_start":60,"line_end":60,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243573,"byte_end":243588,"line_start":70,"line_end":70,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246400,"byte_end":246415,"line_start":164,"line_end":164,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246524,"byte_end":246539,"line_start":174,"line_end":174,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246719,"byte_end":246734,"line_start":184,"line_end":184,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247017,"byte_end":247032,"line_start":194,"line_end":194,"column_start":61,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247241,"byte_end":247256,"line_start":205,"line_end":205,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247356,"byte_end":247371,"line_start":212,"line_end":212,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247519,"byte_end":247534,"line_start":221,"line_end":221,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247726,"byte_end":247741,"line_start":231,"line_end":231,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247911,"byte_end":247926,"line_start":241,"line_end":241,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248124,"byte_end":248139,"line_start":250,"line_end":250,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248426,"byte_end":248441,"line_start":263,"line_end":263,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248592,"byte_end":248607,"line_start":274,"line_end":274,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248738,"byte_end":248746,"line_start":283,"line_end":283,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248876,"byte_end":248891,"line_start":292,"line_end":292,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249163,"byte_end":249178,"line_start":306,"line_end":306,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249572,"byte_end":249587,"line_start":315,"line_end":315,"column_start":39,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249653,"byte_end":249668,"line_start":317,"line_end":317,"column_start":53,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249779,"byte_end":249780,"line_start":322,"line_end":322,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257819,"byte_end":257834,"line_start":41,"line_end":41,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258254,"byte_end":258269,"line_start":59,"line_end":59,"column_start":12,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258405,"byte_end":258420,"line_start":69,"line_end":69,"column_start":12,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260782,"byte_end":260797,"line_start":149,"line_end":149,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260900,"byte_end":260915,"line_start":159,"line_end":159,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261086,"byte_end":261101,"line_start":169,"line_end":169,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261372,"byte_end":261387,"line_start":179,"line_end":179,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261584,"byte_end":261599,"line_start":190,"line_end":190,"column_start":19,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261687,"byte_end":261702,"line_start":197,"line_end":197,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261852,"byte_end":261867,"line_start":207,"line_end":207,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262050,"byte_end":262065,"line_start":217,"line_end":217,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262226,"byte_end":262241,"line_start":227,"line_end":227,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262425,"byte_end":262440,"line_start":236,"line_end":236,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262665,"byte_end":262680,"line_start":248,"line_end":248,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262819,"byte_end":262834,"line_start":259,"line_end":259,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262953,"byte_end":262961,"line_start":268,"line_end":268,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263079,"byte_end":263094,"line_start":277,"line_end":277,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263357,"byte_end":263372,"line_start":291,"line_end":291,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263751,"byte_end":263766,"line_start":300,"line_end":300,"column_start":36,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263823,"byte_end":263838,"line_start":302,"line_end":302,"column_start":47,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263935,"byte_end":263936,"line_start":304,"line_end":304,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272070,"byte_end":272082,"line_start":53,"line_end":53,"column_start":76,"column_end":88},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272176,"byte_end":272188,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272268,"byte_end":272280,"line_start":58,"line_end":58,"column_start":66,"column_end":78},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272347,"byte_end":272357,"line_start":60,"line_end":60,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272517,"byte_end":272527,"line_start":66,"line_end":66,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272671,"byte_end":272683,"line_start":72,"line_end":72,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273029,"byte_end":273039,"line_start":89,"line_end":89,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273530,"byte_end":273540,"line_start":104,"line_end":104,"column_start":62,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273562,"byte_end":273572,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275108,"byte_end":275111,"line_start":164,"line_end":164,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275192,"byte_end":275202,"line_start":170,"line_end":170,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281071,"byte_end":281081,"line_start":352,"line_end":352,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281265,"byte_end":281275,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281507,"byte_end":281517,"line_start":369,"line_end":369,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281679,"byte_end":281689,"line_start":379,"line_end":379,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282001,"byte_end":282011,"line_start":392,"line_end":392,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282093,"byte_end":282103,"line_start":398,"line_end":398,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282182,"byte_end":282192,"line_start":404,"line_end":404,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282353,"byte_end":282363,"line_start":411,"line_end":411,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282552,"byte_end":282562,"line_start":420,"line_end":420,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282740,"byte_end":282750,"line_start":432,"line_end":432,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282929,"byte_end":282939,"line_start":442,"line_end":442,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283109,"byte_end":283119,"line_start":450,"line_end":450,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283474,"byte_end":283484,"line_start":458,"line_end":458,"column_start":69,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283737,"byte_end":283747,"line_start":469,"line_end":469,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283849,"byte_end":283859,"line_start":475,"line_end":475,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283917,"byte_end":283927,"line_start":477,"line_end":477,"column_start":36,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283983,"byte_end":283993,"line_start":479,"line_end":479,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":284080,"byte_end":284090,"line_start":485,"line_end":485,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":284554,"byte_end":284555,"line_start":501,"line_end":501,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":310045,"byte_end":310046,"line_start":113,"line_end":113,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1045},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1063},{"krate":0,"index":1069},{"krate":0,"index":1075},{"krate":0,"index":1081},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":315812,"byte_end":315813,"line_start":329,"line_end":329,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":328486,"byte_end":328504,"line_start":91,"line_end":91,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":329320,"byte_end":329321,"line_start":123,"line_end":123,"column_start":93,"column_end":94},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":331739,"byte_end":331740,"line_start":212,"line_end":212,"column_start":86,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1244},{"krate":0,"index":1249},{"krate":0,"index":1254},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":342751,"byte_end":342752,"line_start":117,"line_end":117,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1373},{"krate":0,"index":1378},{"krate":0,"index":1383},{"krate":0,"index":1388},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":347919,"byte_end":347920,"line_start":291,"line_end":291,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":359082,"byte_end":359083,"line_start":52,"line_end":52,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1483},{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366859,"byte_end":366874,"line_start":38,"line_end":38,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367939,"byte_end":367954,"line_start":68,"line_end":68,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368870,"byte_end":368888,"line_start":103,"line_end":103,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":370023,"byte_end":370041,"line_start":134,"line_end":134,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388439,"byte_end":388456,"line_start":71,"line_end":71,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388913,"byte_end":388935,"line_start":83,"line_end":83,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389126,"byte_end":389143,"line_start":91,"line_end":91,"column_start":2,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1823},{"krate":0,"index":1829},{"krate":0,"index":1834},{"krate":0,"index":1842},{"krate":0,"index":1846},{"krate":0,"index":1851},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1863},{"krate":0,"index":1868},{"krate":0,"index":1869}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398481,"byte_end":398498,"line_start":358,"line_end":358,"column_start":2,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1885},{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400747,"byte_end":400764,"line_start":416,"line_end":416,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":401556,"byte_end":401573,"line_start":440,"line_end":440,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":402240,"byte_end":402257,"line_start":458,"line_end":458,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":419618,"byte_end":419634,"line_start":75,"line_end":75,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":420581,"byte_end":420597,"line_start":106,"line_end":106,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":421311,"byte_end":421327,"line_start":127,"line_end":127,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2033},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2050},{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2066},{"krate":0,"index":2072},{"krate":0,"index":2077},{"krate":0,"index":2083},{"krate":0,"index":2088},{"krate":0,"index":2091},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430340,"byte_end":430356,"line_start":395,"line_end":395,"column_start":2,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2124},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435484,"byte_end":435500,"line_start":522,"line_end":522,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":436604,"byte_end":436620,"line_start":555,"line_end":555,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2155}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":437667,"byte_end":437683,"line_start":586,"line_end":586,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":448163,"byte_end":448166,"line_start":71,"line_end":71,"column_start":72,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":448908,"byte_end":448911,"line_start":94,"line_end":94,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":449059,"byte_end":449062,"line_start":101,"line_end":101,"column_start":77,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":453198,"byte_end":453201,"line_start":225,"line_end":225,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456592,"byte_end":456602,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":457429,"byte_end":457439,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458035,"byte_end":458045,"line_start":104,"line_end":104,"column_start":2,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2386},{"krate":0,"index":2391},{"krate":0,"index":2395},{"krate":0,"index":2400},{"krate":0,"index":2402},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2416}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464974,"byte_end":464984,"line_start":288,"line_end":288,"column_start":2,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467434,"byte_end":467444,"line_start":346,"line_end":346,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2444}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":468397,"byte_end":468407,"line_start":376,"line_end":376,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2453}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":469295,"byte_end":469305,"line_start":404,"line_end":404,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2462}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477987,"byte_end":477998,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":478780,"byte_end":478791,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479351,"byte_end":479362,"line_start":108,"line_end":108,"column_start":2,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2607},{"krate":0,"index":2612},{"krate":0,"index":2616},{"krate":0,"index":2621},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486677,"byte_end":486688,"line_start":311,"line_end":311,"column_start":2,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2645},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491697,"byte_end":491708,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":492623,"byte_end":492634,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":493509,"byte_end":493520,"line_start":501,"line_end":501,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515895,"byte_end":515907,"line_start":44,"line_end":44,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516563,"byte_end":516575,"line_start":66,"line_end":66,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2775},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2781},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":521118,"byte_end":521130,"line_start":205,"line_end":205,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2799}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":521843,"byte_end":521855,"line_start":228,"line_end":228,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2805}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":522535,"byte_end":522547,"line_start":248,"line_end":248,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2811}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384733,"byte_end":384744,"line_start":70,"line_end":70,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385251,"byte_end":385261,"line_start":90,"line_end":90,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531530,"byte_end":531544,"line_start":43,"line_end":43,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2967},{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531830,"byte_end":531844,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978},{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533131,"byte_end":533145,"line_start":102,"line_end":102,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2990},{"krate":0,"index":2991}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534963,"byte_end":534977,"line_start":166,"line_end":166,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535182,"byte_end":535196,"line_start":174,"line_end":174,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2999}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535423,"byte_end":535437,"line_start":184,"line_end":184,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3003}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535599,"byte_end":535613,"line_start":194,"line_end":194,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3007},{"krate":0,"index":3008}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535925,"byte_end":535939,"line_start":207,"line_end":207,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3012}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536021,"byte_end":536035,"line_start":213,"line_end":213,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3016}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536114,"byte_end":536128,"line_start":219,"line_end":219,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3020}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536293,"byte_end":536307,"line_start":226,"line_end":226,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3024},{"krate":0,"index":3025}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536496,"byte_end":536510,"line_start":235,"line_end":235,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3030},{"krate":0,"index":3031}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536688,"byte_end":536702,"line_start":247,"line_end":247,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3036}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536881,"byte_end":536895,"line_start":257,"line_end":257,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537065,"byte_end":537079,"line_start":265,"line_end":265,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3046}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537607,"byte_end":537621,"line_start":276,"line_end":276,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3050}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537765,"byte_end":537779,"line_start":285,"line_end":285,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537871,"byte_end":537885,"line_start":291,"line_end":291,"column_start":19,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537943,"byte_end":537957,"line_start":293,"line_end":293,"column_start":36,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":538013,"byte_end":538027,"line_start":295,"line_end":295,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":538114,"byte_end":538128,"line_start":301,"line_end":301,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181636,"byte_end":181657,"line_start":64,"line_end":64,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3078}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210474,"byte_end":210488,"line_start":811,"line_end":811,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3372}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211189,"byte_end":211203,"line_start":835,"line_end":835,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212654,"byte_end":212668,"line_start":880,"line_end":880,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":3389},{"krate":0,"index":3390}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214230,"byte_end":214247,"line_start":938,"line_end":938,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215511,"byte_end":215528,"line_start":976,"line_end":976,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3407},{"krate":0,"index":3408}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216902,"byte_end":216925,"line_start":1024,"line_end":1024,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3420}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217116,"byte_end":217139,"line_start":1032,"line_end":1032,"column_start":25,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3423}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217839,"byte_end":217862,"line_start":1056,"line_end":1056,"column_start":44,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3428}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":218664,"byte_end":218687,"line_start":1085,"line_end":1085,"column_start":22,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3433},{"krate":0,"index":3434}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223940,"byte_end":223943,"line_start":1248,"line_end":1248,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223967,"byte_end":223973,"line_start":1249,"line_end":1249,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224000,"byte_end":224010,"line_start":1250,"line_end":1250,"column_start":24,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224043,"byte_end":224057,"line_start":1251,"line_end":1251,"column_start":24,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224112,"byte_end":224127,"line_start":1252,"line_end":1252,"column_start":46,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224182,"byte_end":224197,"line_start":1253,"line_end":1253,"column_start":43,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225342,"byte_end":225345,"line_start":1283,"line_end":1283,"column_start":38,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225392,"byte_end":225395,"line_start":1284,"line_end":1284,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225689,"byte_end":225695,"line_start":1289,"line_end":1289,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226345,"byte_end":226358,"line_start":1307,"line_end":1307,"column_start":52,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227375,"byte_end":227386,"line_start":1339,"line_end":1339,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228456,"byte_end":228473,"line_start":1378,"line_end":1378,"column_start":76,"column_end":93},"value":"","parent":null,"children":[{"krate":0,"index":3529}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":564311,"byte_end":564312,"line_start":28,"line_end":28,"column_start":87,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":3604}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577986,"byte_end":578001,"line_start":209,"line_end":209,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3775}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615739,"byte_end":615755,"line_start":262,"line_end":262,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3892}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":616175,"byte_end":616191,"line_start":273,"line_end":273,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3901}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":617771,"byte_end":617772,"line_start":312,"line_end":312,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621335,"byte_end":621344,"line_start":50,"line_end":50,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3960}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621569,"byte_end":621578,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3965}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621858,"byte_end":621867,"line_start":69,"line_end":69,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3970}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":622032,"byte_end":622041,"line_start":77,"line_end":77,"column_start":2,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3975}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":622266,"byte_end":622275,"line_start":85,"line_end":85,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3980},{"krate":0,"index":3981},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3985},{"krate":0,"index":3986},{"krate":0,"index":3987}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600275,"byte_end":600276,"line_start":179,"line_end":179,"column_start":93,"column_end":94},"value":"","parent":null,"children":[{"krate":0,"index":4047}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":601018,"byte_end":601024,"line_start":204,"line_end":204,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602076,"byte_end":602082,"line_start":231,"line_end":231,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4069},{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602565,"byte_end":602571,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4075}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602983,"byte_end":602989,"line_start":261,"line_end":261,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4080},{"krate":0,"index":4081}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":603432,"byte_end":603438,"line_start":275,"line_end":275,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4086},{"krate":0,"index":4087},{"krate":0,"index":4088}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":604267,"byte_end":604273,"line_start":309,"line_end":309,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4093},{"krate":0,"index":4094},{"krate":0,"index":4095},{"krate":0,"index":4096},{"krate":0,"index":4097},{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647596,"byte_end":647612,"line_start":292,"line_end":292,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4198}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":648075,"byte_end":648091,"line_start":303,"line_end":303,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4207}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":649838,"byte_end":649839,"line_start":350,"line_end":350,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4223},{"krate":0,"index":4224},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654850,"byte_end":654859,"line_start":59,"line_end":59,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4291}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655128,"byte_end":655137,"line_start":73,"line_end":73,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4297}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655437,"byte_end":655446,"line_start":86,"line_end":86,"column_start":4,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4305},{"krate":0,"index":4306},{"krate":0,"index":4307},{"krate":0,"index":4308},{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633099,"byte_end":633100,"line_start":232,"line_end":232,"column_start":93,"column_end":94},"value":"","parent":null,"children":[{"krate":0,"index":4370}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669363,"byte_end":669378,"line_start":38,"line_end":38,"column_start":4,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4440},{"krate":0,"index":4441},{"krate":0,"index":4442}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/split_two_ways.rs","byte_start":671968,"byte_end":671980,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4480}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674376,"byte_end":674395,"line_start":53,"line_end":53,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4562}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675969,"byte_end":675987,"line_start":92,"line_end":92,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4565}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677762,"byte_end":677777,"line_start":144,"line_end":144,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4568}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678519,"byte_end":678520,"line_start":165,"line_end":165,"column_start":87,"column_end":88},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678824,"byte_end":678825,"line_start":173,"line_end":173,"column_start":6,"column_end":7},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683806,"byte_end":683812,"line_start":129,"line_end":129,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643},{"krate":0,"index":4644},{"krate":0,"index":4647}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":684683,"byte_end":684689,"line_start":150,"line_end":150,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4652},{"krate":0,"index":4653}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":685157,"byte_end":685163,"line_start":164,"line_end":164,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4658},{"krate":0,"index":4659},{"krate":0,"index":4660},{"krate":0,"index":4661}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":686040,"byte_end":686046,"line_start":188,"line_end":188,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4668}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695576,"byte_end":695586,"line_start":30,"line_end":30,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4828}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695734,"byte_end":695741,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4832}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":696082,"byte_end":696083,"line_start":53,"line_end":53,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4841}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697882,"byte_end":697892,"line_start":126,"line_end":126,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4855}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698125,"byte_end":698132,"line_start":134,"line_end":134,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4863}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698266,"byte_end":698273,"line_start":139,"line_end":139,"column_start":71,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":4867}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712923,"byte_end":712939,"line_start":48,"line_end":48,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5112}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713224,"byte_end":713240,"line_start":57,"line_end":57,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5117}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713316,"byte_end":713332,"line_start":63,"line_end":63,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5121}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713570,"byte_end":713586,"line_start":71,"line_end":71,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5125}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724624,"byte_end":724630,"line_start":114,"line_end":114,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5286},{"krate":0,"index":5287},{"krate":0,"index":5289},{"krate":0,"index":5290}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":725878,"byte_end":725884,"line_start":179,"line_end":179,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5294},{"krate":0,"index":5295},{"krate":0,"index":5297},{"krate":0,"index":5298}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":727236,"byte_end":727242,"line_start":248,"line_end":248,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5302},{"krate":0,"index":5306},{"krate":0,"index":5311},{"krate":0,"index":5312}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":728582,"byte_end":728588,"line_start":311,"line_end":311,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5317},{"krate":0,"index":5322},{"krate":0,"index":5326}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730226,"byte_end":730227,"line_start":368,"line_end":368,"column_start":84,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":5335},{"krate":0,"index":5337},{"krate":0,"index":5339}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731201,"byte_end":731202,"line_start":396,"line_end":396,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5349}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731703,"byte_end":731713,"line_start":421,"line_end":421,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5360}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733232,"byte_end":733243,"line_start":480,"line_end":480,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5380}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733384,"byte_end":733395,"line_start":490,"line_end":490,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5388}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735915,"byte_end":735916,"line_start":598,"line_end":598,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5408},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":5411}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738489,"byte_end":738507,"line_start":690,"line_end":690,"column_start":50,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":5425}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740833,"byte_end":740839,"line_start":750,"line_end":750,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5440}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741026,"byte_end":741044,"line_start":760,"line_end":760,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5446}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741766,"byte_end":741774,"line_start":782,"line_end":782,"column_start":81,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":5455}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742327,"byte_end":742340,"line_start":796,"line_end":796,"column_start":32,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742400,"byte_end":742413,"line_start":797,"line_end":797,"column_start":54,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742448,"byte_end":742461,"line_start":799,"line_end":799,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5462},{"krate":0,"index":5463},{"krate":0,"index":5465},{"krate":0,"index":5466}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742878,"byte_end":742891,"line_start":817,"line_end":817,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5471},{"krate":0,"index":5473}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743144,"byte_end":743157,"line_start":827,"line_end":827,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5477}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743245,"byte_end":743258,"line_start":833,"line_end":833,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5480}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743710,"byte_end":743723,"line_start":850,"line_end":850,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5483},{"krate":0,"index":5484}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744624,"byte_end":744641,"line_start":876,"line_end":876,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5489},{"krate":0,"index":5490},{"krate":0,"index":5491},{"krate":0,"index":5492}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745209,"byte_end":745226,"line_start":900,"line_end":900,"column_start":32,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745282,"byte_end":745299,"line_start":901,"line_end":901,"column_start":50,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745334,"byte_end":745351,"line_start":903,"line_end":903,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5499},{"krate":0,"index":5500},{"krate":0,"index":5502},{"krate":0,"index":5503}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745754,"byte_end":745771,"line_start":921,"line_end":921,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5508},{"krate":0,"index":5510}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746071,"byte_end":746088,"line_start":931,"line_end":931,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5514}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746214,"byte_end":746231,"line_start":937,"line_end":937,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5517},{"krate":0,"index":5518}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753725,"byte_end":753739,"line_start":90,"line_end":90,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5711},{"krate":0,"index":5712},{"krate":0,"index":5713},{"krate":0,"index":5714},{"krate":0,"index":5717},{"krate":0,"index":5721}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762646,"byte_end":762658,"line_start":148,"line_end":148,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5790}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762786,"byte_end":762798,"line_start":154,"line_end":154,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5792}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763021,"byte_end":763033,"line_start":162,"line_end":162,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5796}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763776,"byte_end":763790,"line_start":181,"line_end":181,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":5799},{"krate":0,"index":5800},{"krate":0,"index":5803},{"krate":0,"index":5805}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765473,"byte_end":765487,"line_start":232,"line_end":232,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5808}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765577,"byte_end":765591,"line_start":238,"line_end":238,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5810}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784295,"byte_end":784306,"line_start":61,"line_end":61,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5950}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784688,"byte_end":784699,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956},{"krate":0,"index":5958},{"krate":0,"index":5960}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":789062,"byte_end":789063,"line_start":209,"line_end":209,"column_start":73,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":5987},{"krate":0,"index":5988},{"krate":0,"index":5989},{"krate":0,"index":5990},{"krate":0,"index":5991}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":789903,"byte_end":789904,"line_start":242,"line_end":242,"column_start":74,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5997},{"krate":0,"index":5998},{"krate":0,"index":5999},{"krate":0,"index":6000},{"krate":0,"index":6001}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801412,"byte_end":801423,"line_start":107,"line_end":107,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6113},{"krate":0,"index":6114}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805170,"byte_end":805188,"line_start":63,"line_end":63,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6167}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805303,"byte_end":805321,"line_start":69,"line_end":69,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6169},{"krate":0,"index":6170}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805871,"byte_end":805895,"line_start":87,"line_end":87,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6175},{"krate":0,"index":6176}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806478,"byte_end":806488,"line_start":114,"line_end":114,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6200}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816346,"byte_end":816350,"line_start":213,"line_end":213,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":6330}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817820,"byte_end":817833,"line_start":247,"line_end":247,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6332}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817886,"byte_end":817899,"line_start":253,"line_end":253,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6334},{"krate":0,"index":6335}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818640,"byte_end":818653,"line_start":276,"line_end":276,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6341},{"krate":0,"index":6342}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820295,"byte_end":820311,"line_start":326,"line_end":326,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":6352},{"krate":0,"index":6353},{"krate":0,"index":6354}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821612,"byte_end":821628,"line_start":365,"line_end":365,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6357}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821805,"byte_end":821821,"line_start":372,"line_end":372,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6359}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821936,"byte_end":821952,"line_start":378,"line_end":378,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6361}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822084,"byte_end":822100,"line_start":384,"line_end":384,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6363}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822235,"byte_end":822251,"line_start":390,"line_end":390,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6365}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823103,"byte_end":823104,"line_start":419,"line_end":419,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6370}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823415,"byte_end":823421,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6373}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823517,"byte_end":823523,"line_start":440,"line_end":440,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6376}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823633,"byte_end":823639,"line_start":446,"line_end":446,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6379}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825578,"byte_end":825588,"line_start":520,"line_end":520,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":6419}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825757,"byte_end":825767,"line_start":528,"line_end":528,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6425}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825986,"byte_end":825996,"line_start":539,"line_end":539,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6430}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826202,"byte_end":826212,"line_start":547,"line_end":547,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":6436}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826434,"byte_end":826444,"line_start":558,"line_end":558,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6441}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826603,"byte_end":826613,"line_start":566,"line_end":566,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6447}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826825,"byte_end":826843,"line_start":577,"line_end":577,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":6453}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827114,"byte_end":827130,"line_start":588,"line_end":588,"column_start":50,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":6458}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827414,"byte_end":827420,"line_start":599,"line_end":599,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":6462}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827848,"byte_end":827863,"line_start":613,"line_end":613,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":6464},{"krate":0,"index":6465},{"krate":0,"index":6466}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830933,"byte_end":830944,"line_start":700,"line_end":700,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6481},{"krate":0,"index":6482}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831570,"byte_end":831586,"line_start":727,"line_end":727,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6485},{"krate":0,"index":6487},{"krate":0,"index":6488}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832443,"byte_end":832459,"line_start":756,"line_end":756,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6491}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832660,"byte_end":832676,"line_start":765,"line_end":765,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":6494},{"krate":0,"index":6495},{"krate":0,"index":6496},{"krate":0,"index":6497}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":3042,"byte_end":3050,"line_start":113,"line_end":113,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6620}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1549,"byte_end":1557,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1577,"byte_end":1584,"line_start":61,"line_end":61,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":315}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181008,"byte_end":181025,"line_start":35,"line_end":35,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":379}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181035,"byte_end":181052,"line_start":36,"line_end":36,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":543}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181062,"byte_end":181073,"line_start":37,"line_end":37,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":684}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181083,"byte_end":181088,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":893}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181113,"byte_end":181122,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":949}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181132,"byte_end":181138,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1503}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181148,"byte_end":181157,"line_start":42,"line_end":42,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1565}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181167,"byte_end":181172,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1662}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181182,"byte_end":181190,"line_start":44,"line_end":44,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2883}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181200,"byte_end":181216,"line_start":45,"line_end":45,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":2920}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1607,"byte_end":1612,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3536}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1622,"byte_end":1630,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3539}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1653,"byte_end":1658,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3574}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1668,"byte_end":1677,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3583}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1687,"byte_end":1697,"line_start":68,"line_end":68,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":3584}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1707,"byte_end":1713,"line_start":69,"line_end":69,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3610}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":566323,"byte_end":566329,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3611}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569538,"byte_end":569546,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3612}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569556,"byte_end":569564,"line_start":21,"line_end":21,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3799}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569574,"byte_end":569583,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4099}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625129,"byte_end":625138,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4122}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":625162,"byte_end":625170,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":4230}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569593,"byte_end":569602,"line_start":23,"line_end":23,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4379}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569622,"byte_end":569633,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":4581}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens.rs","byte_start":569643,"byte_end":569655,"line_start":26,"line_end":26,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":4669}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits.rs","byte_start":568413,"byte_end":568421,"line_start":83,"line_end":83,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5906}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":1723,"byte_end":1730,"line_start":70,"line_end":70,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":6234}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":83867,"byte_end":83876,"line_start":77,"line_end":77,"column_start":45,"column_end":54},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":6883},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84222,"byte_end":84227,"line_start":89,"line_end":89,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":25,"index":228},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84230,"byte_end":84240,"line_start":89,"line_end":89,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":25,"index":890},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84243,"byte_end":84248,"line_start":89,"line_end":89,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84251,"byte_end":84253,"line_start":89,"line_end":89,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2680},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84261,"byte_end":84266,"line_start":89,"line_end":89,"column_start":61,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":9604},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84281,"byte_end":84289,"line_start":89,"line_end":89,"column_start":81,"column_end":89},"kind":"SuperTrait","from":{"krate":56,"index":932},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/dispatch.rs","byte_start":84315,"byte_end":84316,"line_start":90,"line_end":90,"column_start":23,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":176},"to":{"krate":0,"index":174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174505,"byte_end":174510,"line_start":26,"line_end":26,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":212}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":174791,"byte_end":174792,"line_start":36,"line_end":36,"column_start":29,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":225},"to":{"krate":0,"index":212}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":175762,"byte_end":175775,"line_start":73,"line_end":73,"column_start":36,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":237},"to":{"krate":0,"index":243}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176003,"byte_end":176011,"line_start":82,"line_end":82,"column_start":24,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176268,"byte_end":176276,"line_start":92,"line_end":92,"column_start":34,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":243}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176424,"byte_end":176436,"line_start":100,"line_end":100,"column_start":24,"column_end":36},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":255},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":176772,"byte_end":176784,"line_start":110,"line_end":110,"column_start":34,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":255},"to":{"krate":0,"index":243}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177041,"byte_end":177057,"line_start":122,"line_end":122,"column_start":24,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177401,"byte_end":177417,"line_start":132,"line_end":132,"column_start":34,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":243}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177650,"byte_end":177660,"line_start":144,"line_end":144,"column_start":24,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":275},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":177958,"byte_end":177968,"line_start":157,"line_end":157,"column_start":24,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":285},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178261,"byte_end":178268,"line_start":170,"line_end":170,"column_start":24,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":295},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/hash.rs","byte_start":178556,"byte_end":178563,"line_start":183,"line_end":183,"column_start":24,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":305},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":242957,"byte_end":242972,"line_start":41,"line_end":41,"column_start":26,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":6951},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243416,"byte_end":243431,"line_start":60,"line_end":60,"column_start":15,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":6951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":243573,"byte_end":243588,"line_start":70,"line_end":70,"column_start":15,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":6951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246400,"byte_end":246415,"line_start":164,"line_end":164,"column_start":27,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246524,"byte_end":246539,"line_start":174,"line_end":174,"column_start":25,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":246719,"byte_end":246734,"line_start":184,"line_end":184,"column_start":35,"column_end":50},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247017,"byte_end":247032,"line_start":194,"line_end":194,"column_start":61,"column_end":76},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247241,"byte_end":247256,"line_start":205,"line_end":205,"column_start":22,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247356,"byte_end":247371,"line_start":212,"line_end":212,"column_start":45,"column_end":60},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247519,"byte_end":247534,"line_start":221,"line_end":221,"column_start":30,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247726,"byte_end":247741,"line_start":231,"line_end":231,"column_start":23,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":247911,"byte_end":247926,"line_start":241,"line_end":241,"column_start":32,"column_end":47},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":7722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248124,"byte_end":248139,"line_start":250,"line_end":250,"column_start":33,"column_end":48},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":6951},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248426,"byte_end":248441,"line_start":263,"line_end":263,"column_start":25,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248592,"byte_end":248607,"line_start":274,"line_end":274,"column_start":41,"column_end":56},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248738,"byte_end":248746,"line_start":283,"line_end":283,"column_start":50,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":5,"index":1392},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":248876,"byte_end":248891,"line_start":292,"line_end":292,"column_start":43,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249163,"byte_end":249178,"line_start":306,"line_end":306,"column_start":39,"column_end":54},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":6951},"to":{"krate":25,"index":218}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249572,"byte_end":249587,"line_start":315,"line_end":315,"column_start":39,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":6951},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249653,"byte_end":249668,"line_start":317,"line_end":317,"column_start":53,"column_end":68},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":6951},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_map.rs","byte_start":249779,"byte_end":249780,"line_start":322,"line_end":322,"column_start":67,"column_end":68},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":537},"to":{"krate":0,"index":5341}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":257819,"byte_end":257834,"line_start":41,"line_end":41,"column_start":23,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":6975},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258254,"byte_end":258269,"line_start":59,"line_end":59,"column_start":12,"column_end":27},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":6975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":258405,"byte_end":258420,"line_start":69,"line_end":69,"column_start":12,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":6975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260782,"byte_end":260797,"line_start":149,"line_end":149,"column_start":24,"column_end":39},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":260900,"byte_end":260915,"line_start":159,"line_end":159,"column_start":22,"column_end":37},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261086,"byte_end":261101,"line_start":169,"line_end":169,"column_start":32,"column_end":47},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261372,"byte_end":261387,"line_start":179,"line_end":179,"column_start":55,"column_end":70},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261584,"byte_end":261599,"line_start":190,"line_end":190,"column_start":19,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261687,"byte_end":261702,"line_start":197,"line_end":197,"column_start":39,"column_end":54},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":261852,"byte_end":261867,"line_start":207,"line_end":207,"column_start":27,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262050,"byte_end":262065,"line_start":217,"line_end":217,"column_start":20,"column_end":35},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262226,"byte_end":262241,"line_start":227,"line_end":227,"column_start":29,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":7722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262425,"byte_end":262440,"line_start":236,"line_end":236,"column_start":30,"column_end":45},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":6975},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262665,"byte_end":262680,"line_start":248,"line_end":248,"column_start":22,"column_end":37},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262819,"byte_end":262834,"line_start":259,"line_end":259,"column_start":35,"column_end":50},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":262953,"byte_end":262961,"line_start":268,"line_end":268,"column_start":44,"column_end":52},"kind":{"Impl":{"id":60}},"from":{"krate":5,"index":7463},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263079,"byte_end":263094,"line_start":277,"line_end":277,"column_start":37,"column_end":52},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":6975},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263357,"byte_end":263372,"line_start":291,"line_end":291,"column_start":36,"column_end":51},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":6975},"to":{"krate":25,"index":218}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263751,"byte_end":263766,"line_start":300,"line_end":300,"column_start":36,"column_end":51},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":6975},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263823,"byte_end":263838,"line_start":302,"line_end":302,"column_start":47,"column_end":62},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":6975},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_btree_set.rs","byte_start":263935,"byte_end":263936,"line_start":304,"line_end":304,"column_start":61,"column_end":62},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":679},"to":{"krate":0,"index":5341}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272070,"byte_end":272082,"line_start":53,"line_end":53,"column_start":76,"column_end":88},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":7024},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272176,"byte_end":272188,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":7024},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272268,"byte_end":272280,"line_start":58,"line_end":58,"column_start":66,"column_end":78},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":7024},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272347,"byte_end":272357,"line_start":60,"line_end":60,"column_start":53,"column_end":63},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272517,"byte_end":272527,"line_start":66,"line_end":66,"column_start":39,"column_end":49},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":272671,"byte_end":272683,"line_start":72,"line_end":72,"column_start":47,"column_end":59},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":7024},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273029,"byte_end":273039,"line_start":89,"line_end":89,"column_start":41,"column_end":51},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":6998},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273530,"byte_end":273540,"line_start":104,"line_end":104,"column_start":62,"column_end":72},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6998},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":273562,"byte_end":273572,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275108,"byte_end":275111,"line_start":164,"line_end":164,"column_start":49,"column_end":52},"kind":{"Impl":{"id":81}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":275192,"byte_end":275202,"line_start":170,"line_end":170,"column_start":22,"column_end":32},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":6998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281071,"byte_end":281081,"line_start":352,"line_end":352,"column_start":24,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281265,"byte_end":281275,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281507,"byte_end":281517,"line_start":369,"line_end":369,"column_start":22,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":281679,"byte_end":281689,"line_start":379,"line_end":379,"column_start":42,"column_end":52},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282001,"byte_end":282011,"line_start":392,"line_end":392,"column_start":30,"column_end":40},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282093,"byte_end":282103,"line_start":398,"line_end":398,"column_start":27,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282182,"byte_end":282192,"line_start":404,"line_end":404,"column_start":27,"column_end":37},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2924}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282353,"byte_end":282363,"line_start":411,"line_end":411,"column_start":22,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282552,"byte_end":282562,"line_start":420,"line_end":420,"column_start":28,"column_end":38},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282740,"byte_end":282750,"line_start":432,"line_end":432,"column_start":31,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":3331}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":282929,"byte_end":282939,"line_start":442,"line_end":442,"column_start":43,"column_end":53},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":7722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283109,"byte_end":283119,"line_start":450,"line_end":450,"column_start":36,"column_end":46},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6998},"to":{"krate":25,"index":218}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283474,"byte_end":283484,"line_start":458,"line_end":458,"column_start":69,"column_end":79},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283737,"byte_end":283747,"line_start":469,"line_end":469,"column_start":55,"column_end":65},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283849,"byte_end":283859,"line_start":475,"line_end":475,"column_start":29,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":6998},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283917,"byte_end":283927,"line_start":477,"line_end":477,"column_start":36,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":6998},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":283983,"byte_end":283993,"line_start":479,"line_end":479,"column_start":46,"column_end":56},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":6998},"to":{"krate":0,"index":3485}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":284080,"byte_end":284090,"line_start":485,"line_end":485,"column_start":30,"column_end":40},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":6998},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/bounded_vec.rs","byte_start":284554,"byte_end":284555,"line_start":501,"line_end":501,"column_start":56,"column_end":57},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":888},"to":{"krate":0,"index":5341}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":310045,"byte_end":310046,"line_start":113,"line_end":113,"column_start":61,"column_end":62},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1023},"to":{"krate":0,"index":3237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/double_map.rs","byte_start":315812,"byte_end":315813,"line_start":329,"line_end":329,"column_start":51,"column_end":52},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1096},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":328486,"byte_end":328504,"line_start":91,"line_end":91,"column_start":6,"column_end":24},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":329320,"byte_end":329321,"line_start":123,"line_end":123,"column_start":93,"column_end":94},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1204},"to":{"krate":0,"index":3175}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/map.rs","byte_start":331739,"byte_end":331740,"line_start":212,"line_end":212,"column_start":86,"column_end":87},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1221},"to":{"krate":0,"index":3124}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":342751,"byte_end":342752,"line_start":117,"line_end":117,"column_start":46,"column_end":47},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1342},"to":{"krate":0,"index":3308}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/nmap.rs","byte_start":347919,"byte_end":347920,"line_start":291,"line_end":291,"column_start":41,"column_end":42},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1398},"to":{"krate":0,"index":3214}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/generator/value.rs","byte_start":359082,"byte_end":359083,"line_start":52,"line_end":52,"column_start":69,"column_end":70},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":3097}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":366859,"byte_end":366874,"line_start":38,"line_end":38,"column_start":9,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":367939,"byte_end":367954,"line_start":68,"line_end":68,"column_start":38,"column_end":53},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1594},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":368870,"byte_end":368888,"line_start":103,"line_end":103,"column_start":40,"column_end":58},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/migration.rs","byte_start":370023,"byte_end":370041,"line_start":134,"line_end":134,"column_start":6,"column_end":24},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1610},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388160,"byte_end":388175,"line_start":60,"line_end":60,"column_start":38,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":6033},"to":{"krate":0,"index":1763}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388439,"byte_end":388456,"line_start":71,"line_end":71,"column_start":6,"column_end":23},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":1765}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":388913,"byte_end":388935,"line_start":83,"line_end":83,"column_start":6,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1778},"to":{"krate":0,"index":3374}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":389126,"byte_end":389143,"line_start":91,"line_end":91,"column_start":2,"column_end":19},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":398481,"byte_end":398498,"line_start":358,"line_end":358,"column_start":2,"column_end":19},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":400747,"byte_end":400764,"line_start":416,"line_end":416,"column_start":6,"column_end":23},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":2881}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":401556,"byte_end":401573,"line_start":440,"line_end":440,"column_start":6,"column_end":23},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":6036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/counted_map.rs","byte_start":402240,"byte_end":402257,"line_start":458,"line_end":458,"column_start":6,"column_end":23},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":6038}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":419618,"byte_end":419634,"line_start":75,"line_end":75,"column_start":6,"column_end":22},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":1002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":420581,"byte_end":420597,"line_start":106,"line_end":106,"column_start":6,"column_end":22},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":3436}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":421311,"byte_end":421327,"line_start":127,"line_end":127,"column_start":2,"column_end":18},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":430340,"byte_end":430356,"line_start":395,"line_end":395,"column_start":2,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":435484,"byte_end":435500,"line_start":522,"line_end":522,"column_start":6,"column_end":22},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":2881}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":436604,"byte_end":436620,"line_start":555,"line_end":555,"column_start":6,"column_end":22},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":6036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/double_map.rs","byte_start":437667,"byte_end":437683,"line_start":586,"line_end":586,"column_start":6,"column_end":22},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":6038}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447716,"byte_end":447728,"line_start":58,"line_end":58,"column_start":38,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2200},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":447907,"byte_end":447919,"line_start":64,"line_end":64,"column_start":30,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":2200},"to":{"krate":0,"index":2212}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":448163,"byte_end":448166,"line_start":71,"line_end":71,"column_start":72,"column_end":75},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2195},"to":{"krate":0,"index":2200}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":448908,"byte_end":448911,"line_start":94,"line_end":94,"column_start":6,"column_end":9},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2195},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":449059,"byte_end":449062,"line_start":101,"line_end":101,"column_start":77,"column_end":80},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2195},"to":{"krate":0,"index":2212}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":450962,"byte_end":450968,"line_start":166,"line_end":166,"column_start":56,"column_end":62},"kind":"SuperTrait","from":{"krate":0,"index":3462},"to":{"krate":0,"index":2236}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":452977,"byte_end":452989,"line_start":219,"line_end":219,"column_start":35,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":2200},"to":{"krate":0,"index":2244}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":453198,"byte_end":453201,"line_start":225,"line_end":225,"column_start":6,"column_end":9},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2195},"to":{"krate":0,"index":2244}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454172,"byte_end":454184,"line_start":257,"line_end":257,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":2200},"to":{"krate":0,"index":2252}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454353,"byte_end":454375,"line_start":264,"line_end":264,"column_start":38,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":2244},"to":{"krate":0,"index":2256}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/key.rs","byte_start":454378,"byte_end":454390,"line_start":264,"line_end":264,"column_start":63,"column_end":75},"kind":"SuperTrait","from":{"krate":0,"index":2252},"to":{"krate":0,"index":2256}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":456592,"byte_end":456602,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":1174}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":457429,"byte_end":457439,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":3436}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":458035,"byte_end":458045,"line_start":104,"line_end":104,"column_start":2,"column_end":12},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":464974,"byte_end":464984,"line_start":288,"line_end":288,"column_start":2,"column_end":12},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":467434,"byte_end":467444,"line_start":346,"line_end":346,"column_start":6,"column_end":16},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":2881}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":468397,"byte_end":468407,"line_start":376,"line_end":376,"column_start":6,"column_end":16},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":6036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/map.rs","byte_start":469295,"byte_end":469305,"line_start":404,"line_end":404,"column_start":6,"column_end":16},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":6038}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":477987,"byte_end":477998,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":1325}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":478780,"byte_end":478791,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":3436}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":479351,"byte_end":479362,"line_start":108,"line_end":108,"column_start":2,"column_end":13},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":486677,"byte_end":486688,"line_start":311,"line_end":311,"column_start":2,"column_end":13},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":491697,"byte_end":491708,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":2881}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":492623,"byte_end":492634,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":6036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/nmap.rs","byte_start":493509,"byte_end":493520,"line_start":501,"line_end":501,"column_start":6,"column_end":17},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2543},"to":{"krate":0,"index":6038}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":515895,"byte_end":515907,"line_start":44,"line_end":44,"column_start":6,"column_end":18},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":516563,"byte_end":516575,"line_start":66,"line_end":66,"column_start":41,"column_end":53},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":521118,"byte_end":521130,"line_start":205,"line_end":205,"column_start":6,"column_end":18},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":2881}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":521843,"byte_end":521855,"line_start":228,"line_end":228,"column_start":6,"column_end":18},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":6036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/value.rs","byte_start":522535,"byte_end":522547,"line_start":248,"line_end":248,"column_start":6,"column_end":18},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":6038}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":384733,"byte_end":384744,"line_start":70,"line_end":70,"column_start":66,"column_end":77},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2863},"to":{"krate":0,"index":2856}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/types/mod.rs","byte_start":385251,"byte_end":385261,"line_start":90,"line_end":90,"column_start":57,"column_end":67},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2871},"to":{"krate":0,"index":2856}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531530,"byte_end":531544,"line_start":43,"line_end":43,"column_start":41,"column_end":55},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":19288},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":531830,"byte_end":531844,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":19288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":533131,"byte_end":533145,"line_start":102,"line_end":102,"column_start":22,"column_end":36},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":19288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":534963,"byte_end":534977,"line_start":166,"line_end":166,"column_start":24,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535182,"byte_end":535196,"line_start":174,"line_end":174,"column_start":32,"column_end":46},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535423,"byte_end":535437,"line_start":184,"line_end":184,"column_start":22,"column_end":36},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535599,"byte_end":535613,"line_start":194,"line_end":194,"column_start":42,"column_end":56},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":535925,"byte_end":535939,"line_start":207,"line_end":207,"column_start":30,"column_end":44},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536021,"byte_end":536035,"line_start":213,"line_end":213,"column_start":27,"column_end":41},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536114,"byte_end":536128,"line_start":219,"line_end":219,"column_start":27,"column_end":41},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2924}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536293,"byte_end":536307,"line_start":226,"line_end":226,"column_start":22,"column_end":36},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536496,"byte_end":536510,"line_start":235,"line_end":235,"column_start":28,"column_end":42},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536688,"byte_end":536702,"line_start":247,"line_end":247,"column_start":31,"column_end":45},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":3331}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":536881,"byte_end":536895,"line_start":257,"line_end":257,"column_start":43,"column_end":57},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":7722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537065,"byte_end":537079,"line_start":265,"line_end":265,"column_start":36,"column_end":50},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":19288},"to":{"krate":25,"index":218}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537607,"byte_end":537621,"line_start":276,"line_end":276,"column_start":26,"column_end":40},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537765,"byte_end":537779,"line_start":285,"line_end":285,"column_start":55,"column_end":69},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537871,"byte_end":537885,"line_start":291,"line_end":291,"column_start":19,"column_end":33},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":19288},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":537943,"byte_end":537957,"line_start":293,"line_end":293,"column_start":36,"column_end":50},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":19288},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":538013,"byte_end":538027,"line_start":295,"line_end":295,"column_start":46,"column_end":60},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":19288},"to":{"krate":0,"index":3485}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/weak_bounded_vec.rs","byte_start":538114,"byte_end":538128,"line_start":301,"line_end":301,"column_start":30,"column_end":44},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":19288},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":181636,"byte_end":181657,"line_start":64,"line_end":64,"column_start":16,"column_end":37},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3075},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":190630,"byte_end":190640,"line_start":328,"line_end":328,"column_start":60,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":3124},"to":{"krate":0,"index":3175}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":192520,"byte_end":192536,"line_start":365,"line_end":365,"column_start":2,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":3237},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":196417,"byte_end":196428,"line_start":440,"line_end":440,"column_start":73,"column_end":84},"kind":"SuperTrait","from":{"krate":0,"index":3308},"to":{"krate":0,"index":3214}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":210474,"byte_end":210488,"line_start":811,"line_end":811,"column_start":21,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":211189,"byte_end":211203,"line_start":835,"line_end":835,"column_start":20,"column_end":34},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":212654,"byte_end":212668,"line_start":880,"line_end":880,"column_start":58,"column_end":72},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3361},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":214230,"byte_end":214247,"line_start":938,"line_end":938,"column_start":9,"column_end":26},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":215511,"byte_end":215528,"line_start":976,"line_end":976,"column_start":22,"column_end":39},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3392},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":216902,"byte_end":216925,"line_start":1024,"line_end":1024,"column_start":9,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217116,"byte_end":217139,"line_start":1032,"line_end":1032,"column_start":25,"column_end":48},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":217839,"byte_end":217862,"line_start":1056,"line_end":1056,"column_start":44,"column_end":67},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":218664,"byte_end":218687,"line_start":1085,"line_end":1085,"column_start":22,"column_end":45},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3410},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":222769,"byte_end":222775,"line_start":1216,"line_end":1216,"column_start":49,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":3462},"to":{"krate":0,"index":3449}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223082,"byte_end":223088,"line_start":1223,"line_end":1223,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3462},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223098,"byte_end":223110,"line_start":1223,"line_end":1223,"column_start":57,"column_end":69},"kind":"SuperTrait","from":{"krate":25,"index":218},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223940,"byte_end":223943,"line_start":1248,"line_end":1248,"column_start":29,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":223967,"byte_end":223973,"line_start":1249,"line_end":1249,"column_start":18,"column_end":24},"kind":{"Impl":{"id":188}},"from":{"krate":203,"index":2528},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224000,"byte_end":224010,"line_start":1250,"line_end":1250,"column_start":24,"column_end":34},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6998},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224043,"byte_end":224057,"line_start":1251,"line_end":1251,"column_start":24,"column_end":38},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":19288},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224112,"byte_end":224127,"line_start":1252,"line_end":1252,"column_start":46,"column_end":61},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":6951},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":224182,"byte_end":224197,"line_start":1253,"line_end":1253,"column_start":43,"column_end":58},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":6975},"to":{"krate":0,"index":3462}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225342,"byte_end":225345,"line_start":1283,"line_end":1283,"column_start":38,"column_end":41},"kind":{"Impl":{"id":193}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":3449}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225392,"byte_end":225395,"line_start":1284,"line_end":1284,"column_start":41,"column_end":44},"kind":{"Impl":{"id":194}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":3451}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225689,"byte_end":225695,"line_start":1289,"line_end":1289,"column_start":36,"column_end":42},"kind":{"Impl":{"id":195}},"from":{"krate":203,"index":2528},"to":{"krate":0,"index":3449}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225893,"byte_end":225912,"line_start":1295,"line_end":1295,"column_start":35,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":3451},"to":{"krate":0,"index":3485}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":225924,"byte_end":225930,"line_start":1295,"line_end":1295,"column_start":66,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":3462},"to":{"krate":0,"index":3485}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":226345,"byte_end":226358,"line_start":1307,"line_end":1307,"column_start":52,"column_end":65},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3496},"to":{"krate":0,"index":3488}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":227375,"byte_end":227386,"line_start":1339,"line_end":1339,"column_start":54,"column_end":65},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3510},"to":{"krate":0,"index":3499}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/storage/mod.rs","byte_start":228456,"byte_end":228473,"line_start":1378,"line_end":1378,"column_start":76,"column_end":93},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3528},"to":{"krate":0,"index":3514}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/migrations.rs","byte_start":564311,"byte_end":564312,"line_start":28,"line_end":28,"column_start":87,"column_end":88},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":3603},"to":{"krate":0,"index":3600}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":580932,"byte_end":580940,"line_start":24,"line_end":24,"column_start":42,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":3744},"to":{"krate":0,"index":3666}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/reservable.rs","byte_start":584363,"byte_end":584381,"line_start":111,"line_end":111,"column_start":47,"column_end":65},"kind":"SuperTrait","from":{"krate":0,"index":3666},"to":{"krate":0,"index":3682}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency/lockable.rs","byte_start":590451,"byte_end":590459,"line_start":28,"line_end":28,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":3744},"to":{"krate":0,"index":3719}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/currency.rs","byte_start":577986,"byte_end":578001,"line_start":209,"line_end":209,"column_start":45,"column_end":60},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3767},"to":{"krate":0,"index":5350}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":606695,"byte_end":606702,"line_start":36,"line_end":36,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4014},"to":{"krate":0,"index":3864}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":611519,"byte_end":611526,"line_start":149,"line_end":149,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":4014},"to":{"krate":0,"index":3876}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":615739,"byte_end":615755,"line_start":262,"line_end":262,"column_start":6,"column_end":22},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3884},"to":{"krate":0,"index":3953}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":616175,"byte_end":616191,"line_start":273,"line_end":273,"column_start":6,"column_end":22},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":3893},"to":{"krate":0,"index":3953}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/balanced.rs","byte_start":617771,"byte_end":617772,"line_start":312,"line_end":312,"column_start":67,"column_end":68},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":3916},"to":{"krate":0,"index":3864}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621335,"byte_end":621344,"line_start":50,"line_end":50,"column_start":6,"column_end":15},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":20389},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621569,"byte_end":621578,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":20389},"to":{"krate":0,"index":5362}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":621858,"byte_end":621867,"line_start":69,"line_end":69,"column_start":6,"column_end":15},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":20389},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":622032,"byte_end":622041,"line_start":77,"line_end":77,"column_start":2,"column_end":11},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":20389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible/imbalance.rs","byte_start":622266,"byte_end":622275,"line_start":85,"line_end":85,"column_start":20,"column_end":29},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":20389},"to":{"krate":0,"index":4490}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":595448,"byte_end":595455,"line_start":61,"line_end":61,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4014},"to":{"krate":0,"index":4023}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":597693,"byte_end":597700,"line_start":109,"line_end":109,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4014},"to":{"krate":0,"index":4029}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598012,"byte_end":598019,"line_start":120,"line_end":120,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":4014},"to":{"krate":0,"index":4032}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598373,"byte_end":598384,"line_start":129,"line_end":129,"column_start":34,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":4032},"to":{"krate":0,"index":4036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":598398,"byte_end":598406,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"kind":"SuperTrait","from":{"krate":0,"index":4029},"to":{"krate":0,"index":4036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599720,"byte_end":599728,"line_start":166,"line_end":166,"column_start":36,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":3864},"to":{"krate":0,"index":4041}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":599742,"byte_end":599752,"line_start":166,"line_end":166,"column_start":58,"column_end":68},"kind":"SuperTrait","from":{"krate":0,"index":4036},"to":{"krate":0,"index":4041}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":600275,"byte_end":600276,"line_start":179,"line_end":179,"column_start":93,"column_end":94},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":4046},"to":{"krate":0,"index":4041}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":601018,"byte_end":601024,"line_start":204,"line_end":204,"column_start":27,"column_end":33},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":4014}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602076,"byte_end":602082,"line_start":231,"line_end":231,"column_start":26,"column_end":32},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":4023}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602565,"byte_end":602571,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":4029}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":602983,"byte_end":602989,"line_start":261,"line_end":261,"column_start":31,"column_end":37},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":4032}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":603432,"byte_end":603438,"line_start":275,"line_end":275,"column_start":30,"column_end":36},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":4036}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungible.rs","byte_start":604267,"byte_end":604273,"line_start":309,"line_end":309,"column_start":30,"column_end":36},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":4048},"to":{"krate":0,"index":3876}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635639,"byte_end":635646,"line_start":21,"line_end":21,"column_start":38,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4126}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/approvals.rs","byte_start":635855,"byte_end":635862,"line_start":26,"line_end":26,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4126},"to":{"krate":0,"index":4129}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":637675,"byte_end":637682,"line_start":37,"line_end":37,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4170}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":643074,"byte_end":643081,"line_start":169,"line_end":169,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4182}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":647596,"byte_end":647612,"line_start":292,"line_end":292,"column_start":6,"column_end":22},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":4190},"to":{"krate":0,"index":4282}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":648075,"byte_end":648091,"line_start":303,"line_end":303,"column_start":6,"column_end":22},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":4199},"to":{"krate":0,"index":4282}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/balanced.rs","byte_start":649838,"byte_end":649839,"line_start":350,"line_end":350,"column_start":67,"column_end":68},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":4222},"to":{"krate":0,"index":4170}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652378,"byte_end":652385,"line_start":23,"line_end":23,"column_start":38,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4237}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/metadata.rs","byte_start":652654,"byte_end":652661,"line_start":32,"line_end":32,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4237},"to":{"krate":0,"index":4242}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":654850,"byte_end":654859,"line_start":59,"line_end":59,"column_start":13,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":20419},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655128,"byte_end":655137,"line_start":73,"line_end":73,"column_start":16,"column_end":25},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":20419},"to":{"krate":0,"index":5362}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles/imbalance.rs","byte_start":655437,"byte_end":655446,"line_start":86,"line_end":86,"column_start":4,"column_end":13},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":20419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":626634,"byte_end":626641,"line_start":72,"line_end":72,"column_start":39,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4341}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":627021,"byte_end":627028,"line_start":84,"line_end":84,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4346}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630388,"byte_end":630395,"line_start":160,"line_end":160,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4352}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":630751,"byte_end":630758,"line_start":172,"line_end":172,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4355}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631171,"byte_end":631182,"line_start":181,"line_end":181,"column_start":34,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":4355},"to":{"krate":0,"index":4359}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":631196,"byte_end":631204,"line_start":181,"line_end":181,"column_start":59,"column_end":67},"kind":"SuperTrait","from":{"krate":0,"index":4352},"to":{"krate":0,"index":4359}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632549,"byte_end":632557,"line_start":218,"line_end":218,"column_start":36,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":4170},"to":{"krate":0,"index":4364}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":632571,"byte_end":632581,"line_start":218,"line_end":218,"column_start":58,"column_end":68},"kind":"SuperTrait","from":{"krate":0,"index":4359},"to":{"krate":0,"index":4364}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633099,"byte_end":633100,"line_start":232,"line_end":232,"column_start":93,"column_end":94},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4369},"to":{"krate":0,"index":4364}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633547,"byte_end":633554,"line_start":247,"line_end":247,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4371}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/fungibles.rs","byte_start":633836,"byte_end":633843,"line_start":258,"line_end":258,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":4331},"to":{"krate":0,"index":4374}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/signed_imbalance.rs","byte_start":669363,"byte_end":669378,"line_start":38,"line_end":38,"column_start":4,"column_end":19},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":4427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance/split_two_ways.rs","byte_start":671968,"byte_end":671980,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4464},"to":{"krate":0,"index":4397}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660652,"byte_end":660657,"line_start":61,"line_end":61,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":4490}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660660,"byte_end":660667,"line_start":61,"line_end":61,"column_start":39,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":5362},"to":{"krate":0,"index":4490}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/imbalance.rs","byte_start":660670,"byte_end":660677,"line_start":61,"line_end":61,"column_start":49,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":3002},"to":{"krate":0,"index":4490}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":674376,"byte_end":674395,"line_start":53,"line_end":53,"column_start":21,"column_end":40},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":20456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":675969,"byte_end":675987,"line_start":92,"line_end":92,"column_start":6,"column_end":24},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":20491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":677762,"byte_end":677777,"line_start":144,"line_end":144,"column_start":6,"column_end":21},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":20570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678365,"byte_end":678374,"line_start":164,"line_end":164,"column_start":20,"column_end":29},"kind":"SuperTrait","from":{"krate":25,"index":234},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678377,"byte_end":678381,"line_start":164,"line_end":164,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678384,"byte_end":678386,"line_start":164,"line_end":164,"column_start":39,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2680},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678389,"byte_end":678398,"line_start":164,"line_end":164,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2675},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678401,"byte_end":678406,"line_start":164,"line_end":164,"column_start":56,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":9604},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678421,"byte_end":678429,"line_start":164,"line_end":164,"column_start":76,"column_end":84},"kind":"SuperTrait","from":{"krate":56,"index":932},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678519,"byte_end":678520,"line_start":165,"line_end":165,"column_start":87,"column_end":88},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4571},"to":{"krate":0,"index":4569}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678636,"byte_end":678656,"line_start":169,"line_end":169,"column_start":2,"column_end":22},"kind":"SuperTrait","from":{"krate":205,"index":605},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678659,"byte_end":678668,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":25,"index":234},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678671,"byte_end":678675,"line_start":169,"line_end":169,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678678,"byte_end":678685,"line_start":169,"line_end":169,"column_start":44,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":3002},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678688,"byte_end":678693,"line_start":169,"line_end":169,"column_start":54,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":9604},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678708,"byte_end":678716,"line_start":169,"line_end":169,"column_start":74,"column_end":82},"kind":"SuperTrait","from":{"krate":56,"index":932},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/misc.rs","byte_start":678824,"byte_end":678825,"line_start":173,"line_end":173,"column_start":6,"column_end":7},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4574},"to":{"krate":0,"index":4572}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":681543,"byte_end":681550,"line_start":67,"line_end":67,"column_start":41,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":4603},"to":{"krate":0,"index":4614}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":682014,"byte_end":682021,"line_start":77,"line_end":77,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4603},"to":{"krate":0,"index":4618}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683193,"byte_end":683200,"line_start":112,"line_end":112,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4603},"to":{"krate":0,"index":4628}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":683806,"byte_end":683812,"line_start":129,"line_end":129,"column_start":27,"column_end":33},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":4631},"to":{"krate":0,"index":4603}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":684683,"byte_end":684689,"line_start":150,"line_end":150,"column_start":37,"column_end":43},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":4631},"to":{"krate":0,"index":4614}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":685157,"byte_end":685163,"line_start":164,"line_end":164,"column_start":26,"column_end":32},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":4631},"to":{"krate":0,"index":4618}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungible.rs","byte_start":686040,"byte_end":686046,"line_start":188,"line_end":188,"column_start":28,"column_end":34},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":4631},"to":{"krate":0,"index":4628}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690061,"byte_end":690068,"line_start":103,"line_end":103,"column_start":41,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":4688},"to":{"krate":0,"index":4707}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":690831,"byte_end":690838,"line_start":121,"line_end":121,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4688},"to":{"krate":0,"index":4713}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":691147,"byte_end":691154,"line_start":127,"line_end":127,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":4688},"to":{"krate":0,"index":4716}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":692322,"byte_end":692329,"line_start":153,"line_end":153,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4688},"to":{"krate":0,"index":4721}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/tokens/nonfungibles.rs","byte_start":694279,"byte_end":694286,"line_start":216,"line_end":216,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4688},"to":{"krate":0,"index":4737}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695576,"byte_end":695586,"line_start":30,"line_end":30,"column_start":25,"column_end":35},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":4825},"to":{"krate":0,"index":4822}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":695734,"byte_end":695741,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":4829},"to":{"krate":0,"index":4822}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":696082,"byte_end":696083,"line_start":53,"line_end":53,"column_start":39,"column_end":40},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":4840},"to":{"krate":0,"index":4835}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":697882,"byte_end":697892,"line_start":126,"line_end":126,"column_start":57,"column_end":67},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":4848},"to":{"krate":0,"index":4822}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698125,"byte_end":698132,"line_start":134,"line_end":134,"column_start":52,"column_end":59},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":4856},"to":{"krate":0,"index":4822}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/members.rs","byte_start":698266,"byte_end":698273,"line_start":139,"line_end":139,"column_start":71,"column_end":78},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":4856},"to":{"krate":0,"index":4843}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":703316,"byte_end":703328,"line_start":46,"line_end":46,"column_start":54,"column_end":66},"kind":"SuperTrait","from":{"krate":0,"index":4971},"to":{"krate":0,"index":4977}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/validation.rs","byte_start":704385,"byte_end":704408,"line_start":78,"line_end":78,"column_start":43,"column_end":66},"kind":"SuperTrait","from":{"krate":204,"index":254},"to":{"krate":0,"index":4995}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712071,"byte_end":712079,"line_start":24,"line_end":24,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":4822},"to":{"krate":0,"index":5090}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":712923,"byte_end":712939,"line_start":48,"line_end":48,"column_start":28,"column_end":44},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713224,"byte_end":713240,"line_start":57,"line_end":57,"column_start":37,"column_end":53},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5098},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713316,"byte_end":713332,"line_start":63,"line_end":63,"column_start":28,"column_end":44},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713570,"byte_end":713586,"line_start":71,"line_end":71,"column_start":37,"column_end":53},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5103},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713817,"byte_end":713822,"line_start":80,"line_end":80,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":5126}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713825,"byte_end":713829,"line_start":80,"line_end":80,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":5126}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/filter.rs","byte_start":713832,"byte_end":713836,"line_start":80,"line_end":80,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":5126}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":724624,"byte_end":724630,"line_start":114,"line_end":114,"column_start":26,"column_end":32},"kind":{"Impl":{"id":270}},"from":{"krate":2,"index":39355},"to":{"krate":0,"index":5251}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":725878,"byte_end":725884,"line_start":179,"line_end":179,"column_start":49,"column_end":55},"kind":{"Impl":{"id":271}},"from":{"krate":2,"index":39482},"to":{"krate":0,"index":5251}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":727236,"byte_end":727242,"line_start":248,"line_end":248,"column_start":58,"column_end":64},"kind":{"Impl":{"id":272}},"from":{"krate":2,"index":39482},"to":{"krate":0,"index":5258}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":728582,"byte_end":728588,"line_start":311,"line_end":311,"column_start":32,"column_end":38},"kind":{"Impl":{"id":273}},"from":{"krate":2,"index":39355},"to":{"krate":0,"index":5272}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":730226,"byte_end":730227,"line_start":368,"line_end":368,"column_start":84,"column_end":85},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5334},"to":{"krate":0,"index":5329}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731201,"byte_end":731202,"line_start":396,"line_end":396,"column_start":39,"column_end":40},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":5348},"to":{"krate":0,"index":5345}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":731703,"byte_end":731713,"line_start":421,"line_end":421,"column_start":29,"column_end":39},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":5356},"to":{"krate":0,"index":5350}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":732531,"byte_end":732536,"line_start":457,"line_end":457,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":5362}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733232,"byte_end":733243,"line_start":480,"line_end":480,"column_start":24,"column_end":35},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5366},"to":{"krate":0,"index":5362}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":733384,"byte_end":733395,"line_start":490,"line_end":490,"column_start":12,"column_end":23},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":5366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735637,"byte_end":735641,"line_start":584,"line_end":584,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2927},"to":{"krate":0,"index":5400}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735647,"byte_end":735651,"line_start":584,"line_end":584,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2930},"to":{"krate":0,"index":5400}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":735915,"byte_end":735916,"line_start":598,"line_end":598,"column_start":23,"column_end":24},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":5407},"to":{"krate":0,"index":5400}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":738489,"byte_end":738507,"line_start":690,"line_end":690,"column_start":50,"column_end":68},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5421},"to":{"krate":0,"index":5418}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740669,"byte_end":740678,"line_start":744,"line_end":744,"column_start":46,"column_end":55},"kind":"SuperTrait","from":{"krate":203,"index":1682},"to":{"krate":0,"index":5435}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":740833,"byte_end":740839,"line_start":750,"line_end":750,"column_start":58,"column_end":64},"kind":{"Impl":{"id":281}},"from":{"krate":203,"index":4015},"to":{"krate":0,"index":5435}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741026,"byte_end":741044,"line_start":760,"line_end":760,"column_start":27,"column_end":45},"kind":{"Impl":{"id":282}},"from":{"krate":203,"index":3448},"to":{"krate":0,"index":5435}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":741766,"byte_end":741774,"line_start":782,"line_end":782,"column_start":81,"column_end":89},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":21803},"to":{"krate":0,"index":5447}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742327,"byte_end":742340,"line_start":796,"line_end":796,"column_start":32,"column_end":45},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":23596},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742400,"byte_end":742413,"line_start":797,"line_end":797,"column_start":54,"column_end":67},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":23596},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742448,"byte_end":742461,"line_start":799,"line_end":799,"column_start":28,"column_end":41},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":23596},"to":{"krate":25,"index":202}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":742878,"byte_end":742891,"line_start":817,"line_end":817,"column_start":28,"column_end":41},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":23596},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743144,"byte_end":743157,"line_start":827,"line_end":827,"column_start":21,"column_end":34},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":23596},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743245,"byte_end":743258,"line_start":833,"line_end":833,"column_start":42,"column_end":55},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":23596},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":743710,"byte_end":743723,"line_start":850,"line_end":850,"column_start":42,"column_end":55},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":23596},"to":{"krate":56,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":744624,"byte_end":744641,"line_start":876,"line_end":876,"column_start":17,"column_end":34},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":23629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745209,"byte_end":745226,"line_start":900,"line_end":900,"column_start":32,"column_end":49},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":23629},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745282,"byte_end":745299,"line_start":901,"line_end":901,"column_start":50,"column_end":67},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":23629},"to":{"krate":25,"index":890}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745334,"byte_end":745351,"line_start":903,"line_end":903,"column_start":28,"column_end":45},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":23629},"to":{"krate":25,"index":202}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":745754,"byte_end":745771,"line_start":921,"line_end":921,"column_start":28,"column_end":45},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":23629},"to":{"krate":25,"index":220}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746071,"byte_end":746088,"line_start":931,"line_end":931,"column_start":42,"column_end":59},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":23629},"to":{"krate":25,"index":958}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":746214,"byte_end":746231,"line_start":937,"line_end":937,"column_start":42,"column_end":59},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":23629},"to":{"krate":56,"index":932}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/misc.rs","byte_start":747866,"byte_end":747882,"line_start":991,"line_end":991,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":5521},"to":{"krate":0,"index":5535}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/stored_map.rs","byte_start":753725,"byte_end":753739,"line_start":90,"line_end":90,"column_start":24,"column_end":38},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5699},"to":{"krate":0,"index":5679}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762646,"byte_end":762658,"line_start":148,"line_end":148,"column_start":6,"column_end":18},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":23690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":762786,"byte_end":762798,"line_start":154,"line_end":154,"column_start":27,"column_end":39},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":23690},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763021,"byte_end":763033,"line_start":162,"line_end":162,"column_start":34,"column_end":46},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":23690},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":763776,"byte_end":763790,"line_start":181,"line_end":181,"column_start":6,"column_end":20},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":23717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765473,"byte_end":765487,"line_start":232,"line_end":232,"column_start":25,"column_end":39},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":23717},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/metadata.rs","byte_start":765577,"byte_end":765591,"line_start":238,"line_end":238,"column_start":26,"column_end":40},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":23717},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778895,"byte_end":778902,"line_start":302,"line_end":302,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3002},"to":{"krate":0,"index":5874}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/hooks.rs","byte_start":778925,"byte_end":778950,"line_start":302,"line_end":302,"column_start":66,"column_end":91},"kind":"SuperTrait","from":{"krate":203,"index":4262},"to":{"krate":0,"index":5874}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784295,"byte_end":784306,"line_start":61,"line_end":61,"column_start":24,"column_end":35},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":27094},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":784688,"byte_end":784699,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":27094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":789062,"byte_end":789063,"line_start":209,"line_end":209,"column_start":73,"column_end":74},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":5964}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/schedule.rs","byte_start":789903,"byte_end":789904,"line_start":242,"line_end":242,"column_start":74,"column_end":75},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":5993},"to":{"krate":0,"index":5973}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":799606,"byte_end":799611,"line_start":57,"line_end":57,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":6087}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/dispatch.rs","byte_start":801412,"byte_end":801423,"line_start":107,"line_end":107,"column_start":32,"column_end":43},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":6104},"to":{"krate":0,"index":6078}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805170,"byte_end":805188,"line_start":63,"line_end":63,"column_start":6,"column_end":24},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":6164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805303,"byte_end":805321,"line_start":69,"line_end":69,"column_start":31,"column_end":49},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":6164},"to":{"krate":0,"index":6160}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":805871,"byte_end":805895,"line_start":87,"line_end":87,"column_start":6,"column_end":30},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":6171},"to":{"krate":0,"index":6160}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/traits/voting.rs","byte_start":806478,"byte_end":806488,"line_start":114,"line_end":114,"column_start":28,"column_end":38},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":816346,"byte_end":816350,"line_start":213,"line_end":213,"column_start":18,"column_end":22},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":27772},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817820,"byte_end":817833,"line_start":247,"line_end":247,"column_start":18,"column_end":31},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":27851},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":817886,"byte_end":817899,"line_start":253,"line_end":253,"column_start":6,"column_end":19},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":27851},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":818640,"byte_end":818653,"line_start":276,"line_end":276,"column_start":35,"column_end":48},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":27851},"to":{"krate":0,"index":6336}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":820295,"byte_end":820311,"line_start":326,"line_end":326,"column_start":6,"column_end":22},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":27920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821612,"byte_end":821628,"line_start":365,"line_end":365,"column_start":39,"column_end":55},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":27920},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821805,"byte_end":821821,"line_start":372,"line_end":372,"column_start":21,"column_end":37},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":27920},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":821936,"byte_end":821952,"line_start":378,"line_end":378,"column_start":31,"column_end":47},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":27920},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822084,"byte_end":822100,"line_start":384,"line_end":384,"column_start":19,"column_end":35},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":27920},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":822235,"byte_end":822251,"line_start":390,"line_end":390,"column_start":40,"column_end":56},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":27920},"to":{"krate":203,"index":1819}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823103,"byte_end":823104,"line_start":419,"line_end":419,"column_start":34,"column_end":35},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":6369},"to":{"krate":0,"index":6366}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823415,"byte_end":823421,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":6304},"to":{"krate":0,"index":6320}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823517,"byte_end":823523,"line_start":440,"line_end":440,"column_start":33,"column_end":39},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":6304},"to":{"krate":0,"index":6323}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":823633,"byte_end":823639,"line_start":446,"line_end":446,"column_start":24,"column_end":30},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":6304},"to":{"krate":0,"index":6326}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825578,"byte_end":825588,"line_start":520,"line_end":520,"column_start":40,"column_end":50},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6320}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825757,"byte_end":825767,"line_start":528,"line_end":528,"column_start":44,"column_end":54},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6320}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":825986,"byte_end":825996,"line_start":539,"line_end":539,"column_start":47,"column_end":57},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6323}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826202,"byte_end":826212,"line_start":547,"line_end":547,"column_start":51,"column_end":61},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6323}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826434,"byte_end":826444,"line_start":558,"line_end":558,"column_start":38,"column_end":48},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6326}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826603,"byte_end":826613,"line_start":566,"line_end":566,"column_start":42,"column_end":52},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":6407},"to":{"krate":0,"index":6326}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":826825,"byte_end":826843,"line_start":577,"line_end":577,"column_start":6,"column_end":24},"kind":{"Impl":{"id":387}},"from":{"krate":203,"index":3448},"to":{"krate":0,"index":6347}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827114,"byte_end":827130,"line_start":588,"line_end":588,"column_start":50,"column_end":66},"kind":{"Impl":{"id":388}},"from":{"krate":203,"index":2462},"to":{"krate":0,"index":6347}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827414,"byte_end":827420,"line_start":599,"line_end":599,"column_start":76,"column_end":82},"kind":{"Impl":{"id":389}},"from":{"krate":203,"index":4015},"to":{"krate":0,"index":6347}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":827848,"byte_end":827863,"line_start":613,"line_end":613,"column_start":6,"column_end":21},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":27952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":830933,"byte_end":830944,"line_start":700,"line_end":700,"column_start":35,"column_end":46},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":6475},"to":{"krate":0,"index":6470}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":831570,"byte_end":831586,"line_start":727,"line_end":727,"column_start":9,"column_end":25},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":28014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832443,"byte_end":832459,"line_start":756,"line_end":756,"column_start":16,"column_end":32},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":28014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/weights.rs","byte_start":832660,"byte_end":832676,"line_start":765,"line_end":765,"column_start":6,"column_end":22},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":28014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/git/checkouts/substrate-7e08433d4c370a21/22d40c7/frame/support/src/lib.rs","byte_start":3042,"byte_end":3050,"line_start":113,"line_end":113,"column_start":17,"column_end":25},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":28074},"to":{"krate":60,"index":2214}}]}