{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1","program":"/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","trie_db","--edition=2018","/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"rustc-hex\"","--cfg","feature=\"std\"","-C","metadata=917e0e4be134138e","-C","extra-filename=-917e0e4be134138e","--out-dir","/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","-L","dependency=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps","--extern","hash_db=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libhash_db-8503ebc18b1889d6.rmeta","--extern","hashbrown=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libhashbrown-7f6e8bea12a88600.rmeta","--extern","log=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/liblog-5e5b893e5fa367e7.rmeta","--extern","rustc_hex=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/librustc_hex-817669da8c38b8e0.rmeta","--extern","smallvec=/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libsmallvec-7d2a09af1b98a0c7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/myunghacho/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/myunghacho/Desktop/substrate-kitties-workshop/kitties-tutorial/pallets/kitties/target/rls/debug/deps/libtrie_db-917e0e4be134138e.rmeta"},"prelude":{"crate_id":{"name":"trie_db","disambiguator":[3335082550653388918,0]},"crate_root":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src","external_crates":[{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","num":18,"id":{"name":"hash_db","disambiguator":[3035980359055305477,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":19,"id":{"name":"hashbrown","disambiguator":[10474930597283054639,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":20,"id":{"name":"ahash","disambiguator":[14048706732936511347,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":21,"id":{"name":"once_cell","disambiguator":[906241516110484464,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":22,"id":{"name":"getrandom","disambiguator":[3195479937133090562,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":23,"id":{"name":"cfg_if","disambiguator":[13037983282529128945,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":24,"id":{"name":"libc","disambiguator":[9005103142181622755,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":25,"id":{"name":"log","disambiguator":[6370244751661190342,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","num":26,"id":{"name":"rustc_hex","disambiguator":[4904094113549843862,0]}},{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","num":27,"id":{"name":"smallvec","disambiguator":[13996271574193408785,0]}}],"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":602,"byte_end":14707,"line_start":14,"line_end":513,"column_start":1,"column_end":69}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26408,"byte_end":26422,"line_start":34,"line_end":34,"column_start":12,"column_end":26},"alias_span":null,"name":"generate_proof","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":397},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26434,"byte_end":26446,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"alias_span":null,"name":"verify_proof","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":2388},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26448,"byte_end":26453,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"alias_span":null,"name":"VerifyError","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":1081},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1524,"byte_end":1529,"line_start":61,"line_end":61,"column_start":10,"column_end":15},"alias_span":null,"name":"FatDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1105},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1531,"byte_end":1544,"line_start":61,"line_end":61,"column_start":17,"column_end":30},"alias_span":null,"name":"FatDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1181},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1558,"byte_end":1566,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"alias_span":null,"name":"FatDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1515},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1577,"byte_end":1583,"line_start":63,"line_end":63,"column_start":10,"column_end":16},"alias_span":null,"name":"Lookup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1709},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1595,"byte_end":1605,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"alias_span":null,"name":"nibble_ops","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2578},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1607,"byte_end":1618,"line_start":64,"line_end":64,"column_start":23,"column_end":34},"alias_span":null,"name":"NibbleSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2566},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1620,"byte_end":1629,"line_start":64,"line_end":64,"column_start":36,"column_end":45},"alias_span":null,"name":"NibbleVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1644,"byte_end":1650,"line_start":65,"line_end":65,"column_start":13,"column_end":19},"alias_span":null,"name":"Record","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2442},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1652,"byte_end":1660,"line_start":65,"line_end":65,"column_start":21,"column_end":29},"alias_span":null,"name":"Recorder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1675,"byte_end":1684,"line_start":66,"line_end":66,"column_start":13,"column_end":22},"alias_span":null,"name":"SecTrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":521},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1701,"byte_end":1713,"line_start":67,"line_end":67,"column_start":16,"column_end":28},"alias_span":null,"name":"SecTrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":627},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1725,"byte_end":1731,"line_start":68,"line_end":68,"column_start":11,"column_end":17},"alias_span":null,"name":"TrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":680},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1733,"byte_end":1747,"line_start":68,"line_end":68,"column_start":19,"column_end":33},"alias_span":null,"name":"TrieDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1749,"byte_end":1766,"line_start":68,"line_end":68,"column_start":35,"column_end":52},"alias_span":null,"name":"TrieDBKeyIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2491},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1782,"byte_end":1796,"line_start":69,"line_end":69,"column_start":14,"column_end":28},"alias_span":null,"name":"ChildReference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":972},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1798,"byte_end":1807,"line_start":69,"line_end":69,"column_start":30,"column_end":39},"alias_span":null,"name":"TrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2465},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1809,"byte_end":1814,"line_start":69,"line_end":69,"column_start":41,"column_end":46},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1286},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1851,"byte_end":1861,"line_start":72,"line_end":72,"column_start":15,"column_end":25},"alias_span":null,"name":"trie_visit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1863,"byte_end":1881,"line_start":72,"line_end":72,"column_start":27,"column_end":45},"alias_span":null,"name":"ProcessEncodedNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1296},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1883,"byte_end":1894,"line_start":72,"line_end":72,"column_start":47,"column_end":58},"alias_span":null,"name":"TrieBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1313},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1896,"byte_end":1904,"line_start":72,"line_end":72,"column_start":60,"column_end":68},"alias_span":null,"name":"TrieRoot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1323},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1906,"byte_end":1922,"line_start":72,"line_end":72,"column_start":70,"column_end":86},"alias_span":null,"name":"TrieRootUnhashed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1936,"byte_end":1954,"line_start":73,"line_end":73,"column_start":12,"column_end":30},"alias_span":null,"name":"TrieDBNodeIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1768},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1970,"byte_end":1979,"line_start":74,"line_end":74,"column_start":15,"column_end":24},"alias_span":null,"name":"NodeCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1766},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1981,"byte_end":1988,"line_start":74,"line_end":74,"column_start":26,"column_end":33},"alias_span":null,"name":"Partial","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2005,"byte_end":2019,"line_start":75,"line_end":75,"column_start":15,"column_end":29},"alias_span":null,"name":"decode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1919},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2021,"byte_end":2045,"line_start":75,"line_end":75,"column_start":31,"column_end":55},"alias_span":null,"name":"decode_compact_from_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1896},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2047,"byte_end":2061,"line_start":75,"line_end":75,"column_start":57,"column_end":71},"alias_span":null,"name":"encode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":44},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2085,"byte_end":2091,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"alias_span":null,"name":"HashDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":52},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2093,"byte_end":2102,"line_start":77,"line_end":77,"column_start":27,"column_end":36},"alias_span":null,"name":"HashDBRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":15},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2104,"byte_end":2110,"line_start":77,"line_end":77,"column_start":38,"column_end":44},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2165,"byte_end":2178,"line_start":80,"line_end":80,"column_start":28,"column_end":41},"alias_span":null,"name":"TrieRootPrint","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":602,"byte_end":14707,"line_start":14,"line_end":513,"column_start":1,"column_end":69},"name":"","qualname":"::","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":135},{"krate":0,"index":406},{"krate":0,"index":419},{"krate":0,"index":488},{"krate":0,"index":543},{"krate":0,"index":726},{"krate":0,"index":1030},{"krate":0,"index":1145},{"krate":0,"index":1203},{"krate":0,"index":1345},{"krate":0,"index":1462},{"krate":0,"index":1529},{"krate":0,"index":1735},{"krate":0,"index":1788},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1971},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1989},{"krate":0,"index":1992},{"krate":0,"index":1995},{"krate":0,"index":1998},{"krate":0,"index":2001},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2015},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2025},{"krate":0,"index":2028},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2587},{"krate":0,"index":2608},{"krate":0,"index":2611},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2623},{"krate":0,"index":2627},{"krate":0,"index":2035},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2046},{"krate":0,"index":2050},{"krate":0,"index":2054},{"krate":0,"index":2059},{"krate":0,"index":2065},{"krate":0,"index":2072},{"krate":0,"index":2080},{"krate":0,"index":2098},{"krate":0,"index":2109},{"krate":0,"index":2636},{"krate":0,"index":2643},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2112},{"krate":0,"index":2645},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":2114},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2141},{"krate":0,"index":2149},{"krate":0,"index":2155},{"krate":0,"index":2174},{"krate":0,"index":2176}],"decl_id":null,"docs":" Trie interface and implementation.\n","sig":null,"attributes":[{"value":"/ Trie interface and implementation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":646,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::node","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":2178},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":96},{"krate":0,"index":2219},{"krate":0,"index":2228},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2216},{"krate":0,"index":98},{"krate":0,"index":2247},{"krate":0,"index":2270},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2244},{"krate":0,"index":2273},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":101},{"krate":0,"index":2300},{"krate":0,"index":2303},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2298},{"krate":0,"index":105},{"krate":0,"index":2314},{"krate":0,"index":2321},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2312},{"krate":0,"index":111},{"krate":0,"index":2334},{"krate":0,"index":2352},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2332},{"krate":0,"index":115},{"krate":0,"index":2357},{"krate":0,"index":2361},{"krate":0,"index":2363},{"krate":0,"index":2367},{"krate":0,"index":2369},{"krate":0,"index":2354},{"krate":0,"index":127}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15623,"byte_end":15630,"line_start":26,"line_end":26,"column_start":10,"column_end":17},"name":"NodeKey","qualname":"::node::NodeKey","value":"(usize, nibble::BackingByteVec)","parent":null,"children":[],"decl_id":null,"docs":" Partial node key type: offset and owned value of a nibbleslice.\n Offset is applied on first byte of array (bytes are right aligned).\n","sig":null,"attributes":[{"value":"/ Partial node key type: offset and owned value of a nibbleslice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15474,"byte_end":15541,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ Offset is applied on first byte of array (bytes are right aligned).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15542,"byte_end":15613,"line_start":25,"line_end":25,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2180},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15816,"byte_end":15820,"line_start":31,"line_end":31,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandle::Hash","value":"NodeHandle::Hash(&'a [u8])","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2183},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15833,"byte_end":15839,"line_start":32,"line_end":32,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandle::Inline","value":"NodeHandle::Inline(&'a [u8])","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2178},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15798,"byte_end":15808,"line_start":30,"line_end":30,"column_start":10,"column_end":20},"name":"NodeHandle","qualname":"::node::NodeHandle","value":"pub enum NodeHandle<'a> { Hash(&'a [u8]), Inline(&'a [u8]), }","parent":null,"children":[{"krate":0,"index":2180},{"krate":0,"index":2183}],"decl_id":null,"docs":" A reference to a trie node which may be stored within another trie node.\n","sig":null,"attributes":[{"value":"/ A reference to a trie node which may be stored within another trie node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15667,"byte_end":15743,"line_start":28,"line_end":28,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15959,"byte_end":15970,"line_start":36,"line_end":36,"column_start":8,"column_end":19},"name":"decode_hash","qualname":"::node::decode_hash","value":"pub fn decode_hash<H: Hasher>(&[u8]) -> Option<H::Out>","parent":null,"children":[],"decl_id":null,"docs":" Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.\n","sig":null,"attributes":[{"value":"/ Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":15854,"byte_end":15951,"line_start":35,"line_end":35,"column_start":1,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2221},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16332,"byte_end":16338,"line_start":50,"line_end":50,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::Value::Inline","value":"Value::Inline(&'a [u8])","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" Value byte slice as stored in a trie node.\n","sig":null,"attributes":[{"value":"/ Value byte slice as stored in a trie node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16284,"byte_end":16330,"line_start":49,"line_end":49,"column_start":2,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16439,"byte_end":16443,"line_start":53,"line_end":53,"column_start":2,"column_end":6},"name":"Node","qualname":"::node::Value::Node","value":"Value::Node(&'a [u8], Option<DBValue>)","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" Hash byte slice as stored in a trie node,\n and the actual value when accessed.\n","sig":null,"attributes":[{"value":"/ Hash byte slice as stored in a trie node,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16351,"byte_end":16396,"line_start":51,"line_end":51,"column_start":2,"column_end":47}},{"value":"/ and the actual value when accessed.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16398,"byte_end":16437,"line_start":52,"line_end":52,"column_start":2,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16271,"byte_end":16276,"line_start":48,"line_end":48,"column_start":10,"column_end":15},"name":"Value","qualname":"::node::Value","value":"pub enum Value<'a> { Inline(&'a [u8]), Node(&'a [u8], Option<DBValue>), }","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2224}],"decl_id":null,"docs":" Value representation in `Node`.\n","sig":null,"attributes":[{"value":"/ Value representation in `Node`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16150,"byte_end":16185,"line_start":45,"line_end":45,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2249},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17008,"byte_end":17013,"line_start":75,"line_end":75,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::Node::Empty","value":"Node::Empty","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16938,"byte_end":17006,"line_start":74,"line_end":74,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17081,"byte_end":17085,"line_start":77,"line_end":77,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::Node::Leaf","value":"Node::Leaf(NibbleSlice, Value)","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":" Leaf node; has key slice and value. Value may not be empty.\n","sig":null,"attributes":[{"value":"/ Leaf node; has key slice and value. Value may not be empty.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17016,"byte_end":17079,"line_start":76,"line_end":76,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2255},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17188,"byte_end":17197,"line_start":79,"line_end":79,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::Node::Extension","value":"Node::Extension(NibbleSlice, NodeHandle)","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":" Extension node; has key slice and node data. Data may not be null.\n","sig":null,"attributes":[{"value":"/ Extension node; has key slice and node data. Data may not be null.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17116,"byte_end":17186,"line_start":78,"line_end":78,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17339,"byte_end":17345,"line_start":82,"line_end":82,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::Node::Branch","value":"Node::Branch([Option<NodeHandle>; ], Option<Value>)","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17233,"byte_end":17295,"line_start":80,"line_end":80,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17297,"byte_end":17337,"line_start":81,"line_end":81,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17500,"byte_end":17513,"line_start":84,"line_end":84,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::Node::NibbledBranch","value":"Node::NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<Value>)","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17420,"byte_end":17498,"line_start":83,"line_end":83,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":2247},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16926,"byte_end":16930,"line_start":73,"line_end":73,"column_start":10,"column_end":14},"name":"Node","qualname":"::node::Node","value":"pub enum Node<'a> {\n    Empty,\n    Leaf(NibbleSlice, Value),\n    Extension(NibbleSlice, NodeHandle),\n    Branch([Option<NodeHandle>; ], Option<Value>),\n    NibbledBranch(NibbleSlice, [Option<NodeHandle>; ], Option<Value>),\n}","parent":null,"children":[{"krate":0,"index":2249},{"krate":0,"index":2251},{"krate":0,"index":2255},{"krate":0,"index":2259},{"krate":0,"index":2264}],"decl_id":null,"docs":" Type of node in the trie and essential information thereof.\n","sig":null,"attributes":[{"value":"/ Type of node in the trie and essential information thereof.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16777,"byte_end":16840,"line_start":70,"line_end":70,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17862,"byte_end":17866,"line_start":95,"line_end":95,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandlePlan::Hash","value":"NodeHandlePlan::Hash(Range<usize>)","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2277},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17883,"byte_end":17889,"line_start":96,"line_end":96,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandlePlan::Inline","value":"NodeHandlePlan::Inline(Range<usize>)","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17844,"byte_end":17858,"line_start":94,"line_end":94,"column_start":10,"column_end":24},"name":"NodeHandlePlan","qualname":"::node::NodeHandlePlan","value":"pub enum NodeHandlePlan { Hash(Range<usize>), Inline(Range<usize>), }","parent":null,"children":[{"krate":0,"index":2274},{"krate":0,"index":2277}],"decl_id":null,"docs":" A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie\n node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.\n","sig":null,"attributes":[{"value":"/ A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17617,"byte_end":17711,"line_start":91,"line_end":91,"column_start":1,"column_end":95}},{"value":"/ node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17712,"byte_end":17795,"line_start":92,"line_end":92,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18188,"byte_end":18193,"line_start":103,"line_end":103,"column_start":9,"column_end":14},"name":"build","qualname":"<NodeHandlePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NodeHandle","parent":null,"children":[],"decl_id":null,"docs":" Build a node handle by decoding a byte slice according to the node handle plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node handle by decoding a byte slice according to the node handle plan. It is the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17931,"byte_end":18024,"line_start":100,"line_end":100,"column_start":2,"column_end":95}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18026,"byte_end":18116,"line_start":101,"line_end":101,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18118,"byte_end":18179,"line_start":102,"line_end":102,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2300},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18693,"byte_end":18708,"line_start":115,"line_end":115,"column_start":12,"column_end":27},"name":"NibbleSlicePlan","qualname":"::node::NibbleSlicePlan","value":"NibbleSlicePlan {  }","parent":null,"children":[{"krate":0,"index":2301},{"krate":0,"index":2302}],"decl_id":null,"docs":" A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The\n `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.\n","sig":null,"attributes":[{"value":"/ A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18425,"byte_end":18514,"line_start":111,"line_end":111,"column_start":1,"column_end":90}},{"value":"/ `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18515,"byte_end":18605,"line_start":112,"line_end":112,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18826,"byte_end":18829,"line_start":122,"line_end":122,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlicePlan>::new","value":"pub fn new(Range<usize>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a nibble slice decode plan.\n","sig":null,"attributes":[{"value":"/ Construct a nibble slice decode plan.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18776,"byte_end":18817,"line_start":121,"line_end":121,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18969,"byte_end":18972,"line_start":127,"line_end":127,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlicePlan>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nibble length of the slice.\n","sig":null,"attributes":[{"value":"/ Returns the nibble length of the slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18917,"byte_end":18960,"line_start":126,"line_end":126,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19324,"byte_end":19329,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"name":"build","qualname":"<NibbleSlicePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Build a nibble slice by decoding a byte slice according to the plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a nibble slice by decoding a byte slice according to the plan. It is the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19078,"byte_end":19160,"line_start":131,"line_end":131,"column_start":2,"column_end":84}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19162,"byte_end":19252,"line_start":132,"line_end":132,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19254,"byte_end":19315,"line_start":133,"line_end":133,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19656,"byte_end":19662,"line_start":144,"line_end":144,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::ValuePlan::Inline","value":"ValuePlan::Inline(Range<usize>)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Range for byte representation in encoded node.\n","sig":null,"attributes":[{"value":"/ Range for byte representation in encoded node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19604,"byte_end":19654,"line_start":143,"line_end":143,"column_start":2,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2318},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19745,"byte_end":19749,"line_start":147,"line_end":147,"column_start":2,"column_end":6},"name":"Node","qualname":"::node::ValuePlan::Node","value":"ValuePlan::Node(Range<usize>)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Range for hash in encoded node and original\n value size.\n","sig":null,"attributes":[{"value":"/ Range for hash in encoded node and original","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19679,"byte_end":19726,"line_start":145,"line_end":145,"column_start":2,"column_end":49}},{"value":"/ value size.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19728,"byte_end":19743,"line_start":146,"line_end":146,"column_start":2,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2314},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19591,"byte_end":19600,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"name":"ValuePlan","qualname":"::node::ValuePlan","value":"pub enum ValuePlan { Inline(Range<usize>), Node(Range<usize>), }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2318}],"decl_id":null,"docs":" Plan for value representation in `NodePlan`.\n","sig":null,"attributes":[{"value":"/ Plan for value representation in `NodePlan`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19457,"byte_end":19505,"line_start":139,"line_end":139,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19866,"byte_end":19871,"line_start":152,"line_end":152,"column_start":9,"column_end":14},"name":"build","qualname":"<ValuePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Build a value slice by decoding a byte slice according to the plan.\n","sig":null,"attributes":[{"value":"/ Build a value slice by decoding a byte slice according to the plan.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19786,"byte_end":19857,"line_start":151,"line_end":151,"column_start":2,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20660,"byte_end":20665,"line_start":170,"line_end":170,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::NodePlan::Empty","value":"NodePlan::Empty","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20590,"byte_end":20658,"line_start":169,"line_end":169,"column_start":2,"column_end":70}}]},{"kind":"StructVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20718,"byte_end":20722,"line_start":172,"line_end":172,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::NodePlan::Leaf","value":"NodePlan::Leaf { partial, value }","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" Leaf node; has a partial key plan and value.\n","sig":null,"attributes":[{"value":"/ Leaf node; has a partial key plan and value.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20668,"byte_end":20716,"line_start":171,"line_end":171,"column_start":2,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":2340},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20832,"byte_end":20841,"line_start":174,"line_end":174,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::NodePlan::Extension","value":"NodePlan::Extension { partial, child }","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" Extension node; has a partial key plan and child data.\n","sig":null,"attributes":[{"value":"/ Extension node; has a partial key plan and child data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20772,"byte_end":20830,"line_start":173,"line_end":173,"column_start":2,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":2343},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21002,"byte_end":21008,"line_start":177,"line_end":177,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::NodePlan::Branch","value":"NodePlan::Branch { value, children }","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20896,"byte_end":20958,"line_start":175,"line_end":175,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20960,"byte_end":21000,"line_start":176,"line_end":176,"column_start":2,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":2347},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21189,"byte_end":21202,"line_start":182,"line_end":182,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::NodePlan::NibbledBranch","value":"NodePlan::NibbledBranch { partial, value, children }","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21109,"byte_end":21187,"line_start":181,"line_end":181,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":2334},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20578,"byte_end":20586,"line_start":168,"line_end":168,"column_start":10,"column_end":18},"name":"NodePlan","qualname":"::node::NodePlan","value":"pub enum NodePlan {\n    Empty,\n    Leaf {\n            partial: NibbleSlicePlan,\n            value: ValuePlan,\n        },\n    Extension {\n            partial: NibbleSlicePlan,\n            child: NodeHandlePlan,\n        },\n    Branch {\n            value: Option<ValuePlan>,\n            children: [Option<NodeHandlePlan>; ],\n        },\n    NibbledBranch {\n            partial: NibbleSlicePlan,\n            value: Option<ValuePlan>,\n            children: [Option<NodeHandlePlan>; ],\n        },\n}","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2337},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":2347}],"decl_id":null,"docs":" A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created\n by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows\n from a byte slice and this struct does not.","sig":null,"attributes":[{"value":"/ A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20084,"byte_end":20180,"line_start":160,"line_end":160,"column_start":1,"column_end":97}},{"value":"/ by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20181,"byte_end":20280,"line_start":161,"line_end":161,"column_start":1,"column_end":100}},{"value":"/ from a byte slice and this struct does not.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20281,"byte_end":20328,"line_start":162,"line_end":162,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20329,"byte_end":20332,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ The enum values mirror those of `Node` except that instead of byte slices, this struct stores","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20333,"byte_end":20430,"line_start":164,"line_end":164,"column_start":1,"column_end":98}},{"value":"/ ranges that can be used to index into a large byte slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":20431,"byte_end":20492,"line_start":165,"line_end":165,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21593,"byte_end":21598,"line_start":193,"line_end":193,"column_start":9,"column_end":14},"name":"build","qualname":"<NodePlan>::build","value":"pub fn build<'a, 'b>(&'a Self, &'b [u8]) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Build a node by decoding a byte slice according to the node plan. It is the responsibility\n of the caller to ensure that the node plan was created for the argument data, otherwise the\n call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node by decoding a byte slice according to the node plan. It is the responsibility","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21350,"byte_end":21444,"line_start":190,"line_end":190,"column_start":2,"column_end":96}},{"value":"/ of the caller to ensure that the node plan was created for the argument data, otherwise the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21446,"byte_end":21541,"line_start":191,"line_end":191,"column_start":2,"column_end":97}},{"value":"/ call may decode incorrectly or panic.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21543,"byte_end":21584,"line_start":192,"line_end":192,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":22697,"byte_end":22707,"line_start":222,"line_end":222,"column_start":9,"column_end":19},"name":"value_plan","qualname":"<NodePlan>::value_plan","value":"pub fn value_plan(&Self) -> Option<&ValuePlan>","parent":null,"children":[],"decl_id":null,"docs":" Access value plan from node plan, return `None` for\n node that cannot contain a `ValuePlan`.\n","sig":null,"attributes":[{"value":"/ Access value plan from node plan, return `None` for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":22588,"byte_end":22643,"line_start":220,"line_end":220,"column_start":2,"column_end":57}},{"value":"/ node that cannot contain a `ValuePlan`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":22645,"byte_end":22688,"line_start":221,"line_end":221,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23081,"byte_end":23095,"line_start":233,"line_end":233,"column_start":9,"column_end":23},"name":"value_plan_mut","qualname":"<NodePlan>::value_plan_mut","value":"pub fn value_plan_mut(&mut Self) -> Option<&mut ValuePlan>","parent":null,"children":[],"decl_id":null,"docs":" Mutable ccess value plan from node plan, return `None` for\n node that cannot contain a `ValuePlan`.\n","sig":null,"attributes":[{"value":"/ Mutable ccess value plan from node plan, return `None` for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":22965,"byte_end":23027,"line_start":231,"line_end":231,"column_start":2,"column_end":64}},{"value":"/ node that cannot contain a `ValuePlan`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23029,"byte_end":23072,"line_start":232,"line_end":232,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2357},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23597,"byte_end":23606,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"OwnedNode","qualname":"::node::OwnedNode","value":"OwnedNode {  }","parent":null,"children":[{"krate":0,"index":2359},{"krate":0,"index":2360}],"decl_id":null,"docs":" An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from\n the `OwnedNode`. This is useful for trie iterators.\n","sig":null,"attributes":[{"value":"/ An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23362,"byte_end":23460,"line_start":243,"line_end":243,"column_start":1,"column_end":99}},{"value":"/ the `OwnedNode`. This is useful for trie iterators.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23461,"byte_end":23516,"line_start":244,"line_end":244,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23789,"byte_end":23792,"line_start":254,"line_end":254,"column_start":9,"column_end":12},"name":"new","qualname":"<OwnedNode<D>>::new","value":"pub fn new<C: NodeCodec>(D) -> Result<Self, C::Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `OwnedNode` by decoding an owned data source according to some codec.\n","sig":null,"attributes":[{"value":"/ Construct an `OwnedNode` by decoding an owned data source according to some codec.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23694,"byte_end":23780,"line_start":253,"line_end":253,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23978,"byte_end":23982,"line_start":260,"line_end":260,"column_start":9,"column_end":13},"name":"data","qualname":"<OwnedNode<D>>::data","value":"pub fn data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the backing data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the backing data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23925,"byte_end":23969,"line_start":259,"line_end":259,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24084,"byte_end":24093,"line_start":265,"line_end":265,"column_start":9,"column_end":18},"name":"node_plan","qualname":"<OwnedNode<D>>::node_plan","value":"pub fn node_plan(&Self) -> &NodePlan","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the node decode plan.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the node decode plan.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24027,"byte_end":24075,"line_start":264,"line_end":264,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24199,"byte_end":24212,"line_start":270,"line_end":270,"column_start":9,"column_end":22},"name":"node_plan_mut","qualname":"<OwnedNode<D>>::node_plan_mut","value":"pub fn node_plan_mut(&mut Self) -> &mut NodePlan","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the node decode plan.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the node decode plan.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24134,"byte_end":24190,"line_start":269,"line_end":269,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24332,"byte_end":24336,"line_start":275,"line_end":275,"column_start":9,"column_end":13},"name":"node","qualname":"<OwnedNode<D>>::node","value":"pub fn node(&Self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Node` by borrowing data from this struct.\n","sig":null,"attributes":[{"value":"/ Construct a `Node` by borrowing data from this struct.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":24265,"byte_end":24323,"line_start":274,"line_end":274,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":283}],"decl_id":null,"docs":" Generation and verification of compact proofs for Merkle-Patricia tries.","sig":null,"attributes":[{"value":"/ Generation and verification of compact proofs for Merkle-Patricia tries.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25001,"byte_end":25077,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25078,"byte_end":25081,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Using this module, it is possible to generate a logarithmic-space proof of inclusion or","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25082,"byte_end":25173,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ non-inclusion of certain key-value pairs in a trie with a known root. The proof contains","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25174,"byte_end":25266,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ information so that the verifier can reconstruct the subset of nodes in the trie required to","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25267,"byte_end":25363,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ lookup the keys. The trie nodes are not included in their entirety as data which the verifier","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25364,"byte_end":25461,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ can compute for themself is omitted. In particular, the values of included keys and and hashes","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25462,"byte_end":25560,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ of other trie nodes in the proof are omitted.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25561,"byte_end":25610,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25611,"byte_end":25614,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The proof is a sequence of the subset of nodes in the trie traversed while performing lookups","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25615,"byte_end":25712,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ on all keys. The trie nodes are listed in pre-order traversal order with some values and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25713,"byte_end":25805,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ internal hashes omitted. In particular, values on leaf nodes, child references on extension","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25806,"byte_end":25901,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ nodes, values on branch nodes corresponding to a key in the statement, and child references on","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":25902,"byte_end":26000,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ branch nodes corresponding to another node in the proof are all omitted. The proof is verified","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26001,"byte_end":26099,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"/ by iteratively reconstructing the trie nodes using the values proving as part of the statement","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26100,"byte_end":26198,"line_start":29,"line_end":29,"column_start":1,"column_end":99}},{"value":"/ and the hashes of other reconstructed nodes. Since the nodes in the proof are arranged in","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26199,"byte_end":26292,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ pre-order traversal order, the construction can be done efficiently using a stack.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/mod.rs","byte_start":26293,"byte_end":26379,"line_start":31,"line_end":31,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":34277,"byte_end":34291,"line_start":220,"line_end":220,"column_start":8,"column_end":22},"name":"generate_proof","qualname":"::proof::generate::generate_proof","value":"pub fn generate_proof<'a, T, L, I, K>(&T, I)\n-> TrieResult<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where T: Trie<L>,\nL: TrieLayout, I: IntoIterator<Item = &'a K>, K: 'a + AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Generate a compact proof for key-value pairs in a trie given a set of keys.","sig":null,"attributes":[{"value":"/ Generate a compact proof for key-value pairs in a trie given a set of keys.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":34134,"byte_end":34213,"line_start":217,"line_end":217,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":34214,"byte_end":34217,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ Assumes inline nodes have only inline children.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":34218,"byte_end":34269,"line_start":219,"line_end":219,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45768,"byte_end":45780,"line_start":34,"line_end":34,"column_start":2,"column_end":14},"name":"DuplicateKey","qualname":"::proof::verify::Error::DuplicateKey","value":"Error::DuplicateKey(Vec<u8>)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The statement being verified contains multiple key-value pairs with the same key. The\n parameter is the duplicated key.\n","sig":null,"attributes":[{"value":"/ The statement being verified contains multiple key-value pairs with the same key. The","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45639,"byte_end":45728,"line_start":32,"line_end":32,"column_start":2,"column_end":91}},{"value":"/ parameter is the duplicated key.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45730,"byte_end":45766,"line_start":33,"line_end":33,"column_start":2,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45846,"byte_end":45860,"line_start":36,"line_end":36,"column_start":2,"column_end":16},"name":"ExtraneousNode","qualname":"::proof::verify::Error::ExtraneousNode","value":"Error::ExtraneousNode","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous node.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45792,"byte_end":45844,"line_start":35,"line_end":35,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2396},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45969,"byte_end":45984,"line_start":39,"line_end":39,"column_start":2,"column_end":17},"name":"ExtraneousValue","qualname":"::proof::verify::Error::ExtraneousValue","value":"Error::ExtraneousValue(Vec<u8>)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous value which should have been omitted from the\n proof.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous value which should have been omitted from the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45863,"byte_end":45955,"line_start":37,"line_end":37,"column_start":2,"column_end":94}},{"value":"/ proof.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45957,"byte_end":45967,"line_start":38,"line_end":38,"column_start":2,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46089,"byte_end":46112,"line_start":41,"line_end":41,"column_start":2,"column_end":25},"name":"ExtraneousHashReference","qualname":"::proof::verify::Error::ExtraneousHashReference","value":"Error::ExtraneousHashReference(HO)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous hash reference the should have been omitted.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous hash reference the should have been omitted.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45996,"byte_end":46087,"line_start":40,"line_end":40,"column_start":2,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2402},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46200,"byte_end":46221,"line_start":43,"line_end":43,"column_start":2,"column_end":23},"name":"InvalidChildReference","qualname":"::proof::verify::Error::InvalidChildReference","value":"Error::InvalidChildReference(Vec<u8>)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof contains an invalid child reference that exceeds the hash length.\n","sig":null,"attributes":[{"value":"/ The proof contains an invalid child reference that exceeds the hash length.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46119,"byte_end":46198,"line_start":42,"line_end":42,"column_start":2,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46308,"byte_end":46321,"line_start":45,"line_end":45,"column_start":2,"column_end":15},"name":"ValueMismatch","qualname":"::proof::verify::Error::ValueMismatch","value":"Error::ValueMismatch(Vec<u8>)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof indicates that an expected value was not found in the trie.\n","sig":null,"attributes":[{"value":"/ The proof indicates that an expected value was not found in the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46233,"byte_end":46306,"line_start":44,"line_end":44,"column_start":2,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46390,"byte_end":46405,"line_start":47,"line_end":47,"column_start":2,"column_end":17},"name":"IncompleteProof","qualname":"::proof::verify::Error::IncompleteProof","value":"Error::IncompleteProof","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The proof is missing trie nodes required to verify.\n","sig":null,"attributes":[{"value":"/ The proof is missing trie nodes required to verify.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46333,"byte_end":46388,"line_start":46,"line_end":46,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46465,"byte_end":46477,"line_start":49,"line_end":49,"column_start":2,"column_end":14},"name":"RootMismatch","qualname":"::proof::verify::Error::RootMismatch","value":"Error::RootMismatch(HO)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" The root hash computed from the proof is incorrect.\n","sig":null,"attributes":[{"value":"/ The root hash computed from the proof is incorrect.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46408,"byte_end":46463,"line_start":48,"line_end":48,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2413},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46534,"byte_end":46545,"line_start":51,"line_end":51,"column_start":2,"column_end":13},"name":"DecodeError","qualname":"::proof::verify::Error::DecodeError","value":"Error::DecodeError(CE)","parent":{"krate":0,"index":2388},"children":[],"decl_id":null,"docs":" One of the proof nodes could not be decoded.\n","sig":null,"attributes":[{"value":"/ One of the proof nodes could not be decoded.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46484,"byte_end":46532,"line_start":50,"line_end":50,"column_start":2,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":2388},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45622,"byte_end":45627,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"name":"Error","qualname":"::proof::verify::Error","value":"pub enum Error<HO, CE> {\n    DuplicateKey(Vec<u8>),\n    ExtraneousNode,\n    ExtraneousValue(Vec<u8>),\n    ExtraneousHashReference(HO),\n    InvalidChildReference(Vec<u8>),\n    ValueMismatch(Vec<u8>),\n    IncompleteProof,\n    RootMismatch(HO),\n    DecodeError(CE),\n}","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2413}],"decl_id":null,"docs":" Errors that may occur during proof verification. Most of the errors types simply indicate that\n the proof is invalid with respect to the statement being verified, and the exact error type can\n be used for debugging.\n","sig":null,"attributes":[{"value":"/ Errors that may occur during proof verification. Most of the errors types simply indicate that","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45318,"byte_end":45416,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ the proof is invalid with respect to the statement being verified, and the exact error type can","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45417,"byte_end":45516,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ be used for debugging.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":45517,"byte_end":45543,"line_start":28,"line_end":28,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":397},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":57570,"byte_end":57582,"line_start":394,"line_end":394,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::proof::verify::verify_proof","value":"pub fn verify_proof<'a, L, I, K, V>(&<L::Hash as Hasher>::Out, &[Vec<u8>], I)\n-> Result<(), Error<TrieHash<L>, CError<L>>> where L: TrieLayout,\nI: IntoIterator<Item = &'a (K, Option<V>)>, K: 'a + AsRef<[u8]>, V: 'a +\nAsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Verify a compact proof for key-value pairs in a trie given a root hash.\n","sig":null,"attributes":[{"value":"/ Verify a compact proof for key-value pairs in a trie given a root hash.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":57487,"byte_end":57562,"line_start":393,"line_end":393,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":406},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recorder","qualname":"::recorder","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":2423},{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2439},{"krate":0,"index":2420},{"krate":0,"index":2442},{"krate":0,"index":2446},{"krate":0,"index":410},{"krate":0,"index":413}],"decl_id":null,"docs":" Trie query recorder.\n","sig":null,"attributes":[{"value":"/ Trie query recorder.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":60803,"byte_end":60827,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":60976,"byte_end":60982,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Record","qualname":"::recorder::Record","value":"Record { depth, data, hash }","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427}],"decl_id":null,"docs":" A record of a visited node.\n","sig":null,"attributes":[{"value":"/ A record of a visited node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":60857,"byte_end":60888,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61023,"byte_end":61028,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"name":"depth","qualname":"::recorder::Record::depth","value":"u32","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" The depth of this node.\n","sig":null,"attributes":[{"value":"/ The depth of this node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":60990,"byte_end":61017,"line_start":23,"line_end":23,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61072,"byte_end":61076,"line_start":27,"line_end":27,"column_start":6,"column_end":10},"name":"data","qualname":"::recorder::Record::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" The raw data of the node.\n","sig":null,"attributes":[{"value":"/ The raw data of the node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61037,"byte_end":61066,"line_start":26,"line_end":26,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61120,"byte_end":61124,"line_start":30,"line_end":30,"column_start":6,"column_end":10},"name":"hash","qualname":"::recorder::Record::hash","value":"HO","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" The hash of the data.\n","sig":null,"attributes":[{"value":"/ The hash of the data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61089,"byte_end":61114,"line_start":29,"line_end":29,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2442},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61228,"byte_end":61236,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Recorder","qualname":"::recorder::Recorder","value":"Recorder {  }","parent":null,"children":[{"krate":0,"index":2444},{"krate":0,"index":2445}],"decl_id":null,"docs":" Records trie nodes as they pass it.\n","sig":null,"attributes":[{"value":"/ Records trie nodes as they pass it.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61133,"byte_end":61172,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61487,"byte_end":61490,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<Recorder<HO>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Recorder` which records all given nodes.\n","sig":null,"attributes":[{"value":"/ Create a new `Recorder` which records all given nodes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61409,"byte_end":61467,"line_start":47,"line_end":47,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61469,"byte_end":61478,"line_start":48,"line_end":48,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61613,"byte_end":61623,"line_start":54,"line_end":54,"column_start":9,"column_end":19},"name":"with_depth","qualname":"<Recorder<HO>>::with_depth","value":"pub fn with_depth(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Recorder` which only records nodes beyond a given depth.\n","sig":null,"attributes":[{"value":"/ Create a `Recorder` which only records nodes beyond a given depth.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61534,"byte_end":61604,"line_start":53,"line_end":53,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61770,"byte_end":61776,"line_start":59,"line_end":59,"column_start":9,"column_end":15},"name":"record","qualname":"<Recorder<HO>>::record","value":"pub fn record(&mut Self, &HO, &[u8], u32)","parent":null,"children":[],"decl_id":null,"docs":" Record a visited node, given its hash, data, and depth.\n","sig":null,"attributes":[{"value":"/ Record a visited node, given its hash, data, and depth.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61702,"byte_end":61761,"line_start":58,"line_end":58,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61974,"byte_end":61979,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"drain","qualname":"<Recorder<HO>>::drain","value":"pub fn drain(&mut Self) -> Vec<Record<HO>>","parent":null,"children":[],"decl_id":null,"docs":" Drain all visited records.\n","sig":null,"attributes":[{"value":"/ Drain all visited records.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61935,"byte_end":61965,"line_start":65,"line_end":65,"column_start":2,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":419},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedb","qualname":"::sectriedb","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":469},{"krate":0,"index":475}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":465},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63075,"byte_end":63084,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"SecTrieDB","qualname":"::sectriedb::SecTrieDB","value":"SecTrieDB {  }","parent":null,"children":[{"krate":0,"index":468}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":62875,"byte_end":62966,"line_start":22,"line_end":22,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":62967,"byte_end":62970,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `raw()` to get the backing `TrieDB` object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":62971,"byte_end":63063,"line_start":24,"line_end":24,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63437,"byte_end":63440,"line_start":41,"line_end":41,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDB>::new","value":"pub fn new(&'db dyn HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63198,"byte_end":63267,"line_start":36,"line_end":36,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63269,"byte_end":63272,"line_start":37,"line_end":37,"column_start":2,"column_end":5}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63274,"byte_end":63332,"line_start":38,"line_end":38,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63334,"byte_end":63382,"line_start":39,"line_end":39,"column_start":2,"column_end":50}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63384,"byte_end":63428,"line_start":40,"line_end":40,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63677,"byte_end":63680,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"raw","qualname":"<SecTrieDB>::raw","value":"pub fn raw(&Self) -> &TrieDB<, L>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63610,"byte_end":63668,"line_start":48,"line_end":48,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63796,"byte_end":63803,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"name":"raw_mut","qualname":"<SecTrieDB>::raw_mut","value":"pub fn raw_mut(&mut Self) -> &mut TrieDB","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63721,"byte_end":63787,"line_start":53,"line_end":53,"column_start":2,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":488},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedbmut","qualname":"::sectriedbmut","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":532}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65651,"byte_end":65663,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"SecTrieDBMut","qualname":"::sectriedbmut::SecTrieDBMut","value":"SecTrieDBMut {  }","parent":null,"children":[{"krate":0,"index":524}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65423,"byte_end":65522,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65523,"byte_end":65526,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object. You can use `raw()` to get the backing `TrieDBMut`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65527,"byte_end":65627,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65628,"byte_end":65639,"line_start":21,"line_end":21,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65971,"byte_end":65974,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDBMut>::new","value":"pub fn new(&'db mut dyn HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65783,"byte_end":65852,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65854,"byte_end":65912,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65914,"byte_end":65962,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66234,"byte_end":66247,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<SecTrieDBMut>::from_existing","value":"pub fn from_existing(&'db mut dyn HashDB<L::Hash, DBValue>,\n&'db mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66110,"byte_end":66174,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66176,"byte_end":66179,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66181,"byte_end":66225,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66476,"byte_end":66478,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<SecTrieDBMut>::db","value":"pub fn db(&Self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66438,"byte_end":66467,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66580,"byte_end":66586,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<SecTrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66542,"byte_end":66571,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":543},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedb","qualname":"::triedb","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":633},{"krate":0,"index":643},{"krate":0,"index":657},{"krate":0,"index":665},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":684},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":695},{"krate":0,"index":701},{"krate":0,"index":705},{"krate":0,"index":712},{"krate":0,"index":716},{"krate":0,"index":721}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":627},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69446,"byte_end":69452,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"TrieDB","qualname":"::triedb::TrieDB","value":"TrieDB {  }","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`\n implementation to generate keys and a `NodeCodec` implementation to encode/decode\n the nodes.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68508,"byte_end":68589,"line_start":29,"line_end":29,"column_start":1,"column_end":82}},{"value":"/ implementation to generate keys and a `NodeCodec` implementation to encode/decode","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68590,"byte_end":68675,"line_start":30,"line_end":30,"column_start":1,"column_end":86}},{"value":"/ the nodes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68676,"byte_end":68690,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68691,"byte_end":68694,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68695,"byte_end":68786,"line_start":33,"line_end":33,"column_start":1,"column_end":92}},{"value":"/ Use `get` and `contains` to query values associated with keys in the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68787,"byte_end":68865,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68866,"byte_end":68869,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68870,"byte_end":68883,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68884,"byte_end":68897,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68898,"byte_end":68922,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, RefTrieDB, Trie, TrieMut};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68923,"byte_end":68988,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":68989,"byte_end":69014,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69015,"byte_end":69051,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69052,"byte_end":69073,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69074,"byte_end":69077,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, _>::default();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69078,"byte_end":69149,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69150,"byte_end":69188,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ RefTrieDBMut::new(&mut memdb, &mut root).insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69189,"byte_end":69266,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ let t = RefTrieDB::new(&memdb, &root).unwrap();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69267,"byte_end":69318,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69319,"byte_end":69360,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69361,"byte_end":69426,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69427,"byte_end":69434,"line_start":50,"line_end":50,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69819,"byte_end":69822,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDB>::new","value":"pub fn new(&'db dyn HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`\n Returns an error if `root` does not exist\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69700,"byte_end":69763,"line_start":65,"line_end":65,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69765,"byte_end":69810,"line_start":66,"line_end":66,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":70210,"byte_end":70223,"line_start":80,"line_end":80,"column_start":9,"column_end":22},"name":"new_unchecked","qualname":"<TrieDB>::new_unchecked","value":"pub fn new_unchecked(&'db dyn HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" `new_with_layout`, but do not check root presence, if missing\n this will fail at first node access.\n","sig":null,"attributes":[{"value":"/ `new_with_layout`, but do not check root presence, if missing","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":70094,"byte_end":70159,"line_start":78,"line_end":78,"column_start":2,"column_end":67}},{"value":"/ this will fail at first node access.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":70161,"byte_end":70201,"line_start":79,"line_end":79,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":70380,"byte_end":70382,"line_start":85,"line_end":85,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDB>::db","value":"pub fn db(&'db Self) -> &'db dyn HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":70342,"byte_end":70371,"line_start":84,"line_end":84,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":680},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76098,"byte_end":76112,"line_start":295,"line_end":295,"column_start":12,"column_end":26},"name":"TrieDBIterator","qualname":"::triedb::TrieDBIterator","value":"TrieDBIterator {  }","parent":null,"children":[{"krate":0,"index":683}],"decl_id":null,"docs":" Iterator for going through all values in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all values in the trie in pre-order traversal order.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76003,"byte_end":76086,"line_start":294,"line_end":294,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76279,"byte_end":76296,"line_start":300,"line_end":300,"column_start":12,"column_end":29},"name":"TrieDBKeyIterator","qualname":"::triedb::TrieDBKeyIterator","value":"TrieDBKeyIterator {  }","parent":null,"children":[{"krate":0,"index":687}],"decl_id":null,"docs":" Iterator for going through all of key with values in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all of key with values in the trie in pre-order traversal order.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76172,"byte_end":76267,"line_start":299,"line_end":299,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76488,"byte_end":76514,"line_start":306,"line_end":306,"column_start":12,"column_end":38},"name":"SuspendedTrieDBKeyIterator","qualname":"::triedb::SuspendedTrieDBKeyIterator","value":"SuspendedTrieDBKeyIterator {  }","parent":null,"children":[{"krate":0,"index":690}],"decl_id":null,"docs":" When there is guaranties the storage backend do not change,\n this can be use to suspend and restore the iterator.\n","sig":null,"attributes":[{"value":"/ When there is guaranties the storage backend do not change,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76356,"byte_end":76419,"line_start":304,"line_end":304,"column_start":1,"column_end":64}},{"value":"/ this can be use to suspend and restore the iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76420,"byte_end":76476,"line_start":305,"line_end":305,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76675,"byte_end":76689,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"name":"unsafe_restore","qualname":"<SuspendedTrieDBKeyIterator<L>>::unsafe_restore","value":"pub fn unsafe_restore<'a>(Self, &'a TrieDB) -> TrieDBKeyIterator","parent":null,"children":[],"decl_id":null,"docs":" Restore iterator.\n","sig":null,"attributes":[{"value":"/ Restore iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76645,"byte_end":76666,"line_start":311,"line_end":311,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76904,"byte_end":76907,"line_start":319,"line_end":319,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBIterator>::new","value":"pub fn new(&'a TrieDB<, L>) -> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76869,"byte_end":76895,"line_start":318,"line_end":318,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77132,"byte_end":77144,"line_start":325,"line_end":325,"column_start":9,"column_end":21},"name":"new_prefixed","qualname":"<TrieDBIterator>::new_prefixed","value":"pub fn new_prefixed(&'a TrieDB<, L>, &[u8])\n-> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77066,"byte_end":77123,"line_start":324,"line_end":324,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77529,"byte_end":77551,"line_start":338,"line_end":338,"column_start":9,"column_end":31},"name":"new_prefixed_then_seek","qualname":"<TrieDBIterator>::new_prefixed_then_seek","value":"pub fn new_prefixed_then_seek(&'a TrieDB<, L>, &[u8], &[u8])\n-> Result<TrieDBIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n It then do a seek operation from prefixed context (using `seek` lose\n prefix context by default).\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77356,"byte_end":77413,"line_start":335,"line_end":335,"column_start":2,"column_end":59}},{"value":"/ It then do a seek operation from prefixed context (using `seek` lose","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77415,"byte_end":77487,"line_start":336,"line_end":336,"column_start":2,"column_end":74}},{"value":"/ prefix context by default).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77489,"byte_end":77520,"line_start":337,"line_end":337,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78145,"byte_end":78148,"line_start":359,"line_end":359,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBKeyIterator>::new","value":"pub fn new(&'a TrieDB<, L>)\n-> Result<TrieDBKeyIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78110,"byte_end":78136,"line_start":358,"line_end":358,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78463,"byte_end":78470,"line_start":366,"line_end":366,"column_start":9,"column_end":16},"name":"suspend","qualname":"<TrieDBKeyIterator>::suspend","value":"pub fn suspend(Self) -> SuspendedTrieDBKeyIterator<L>","parent":null,"children":[],"decl_id":null,"docs":" Suspend iterator. Warning this does not hold guaranties it can be restore later.\n Restoring require that trie backend did not change.\n","sig":null,"attributes":[{"value":"/ Suspend iterator. Warning this does not hold guaranties it can be restore later.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78313,"byte_end":78397,"line_start":364,"line_end":364,"column_start":2,"column_end":86}},{"value":"/ Restoring require that trie backend did not change.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78399,"byte_end":78454,"line_start":365,"line_end":365,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78644,"byte_end":78656,"line_start":371,"line_end":371,"column_start":9,"column_end":21},"name":"new_prefixed","qualname":"<TrieDBKeyIterator>::new_prefixed","value":"pub fn new_prefixed(&'a TrieDB<, L>, &[u8])\n-> Result<TrieDBKeyIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78578,"byte_end":78635,"line_start":370,"line_end":370,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79047,"byte_end":79069,"line_start":384,"line_end":384,"column_start":9,"column_end":31},"name":"new_prefixed_then_seek","qualname":"<TrieDBKeyIterator>::new_prefixed_then_seek","value":"pub fn new_prefixed_then_seek(&'a TrieDB<, L>, &[u8], &[u8])\n-> Result<TrieDBKeyIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n It then do a seek operation from prefixed context (using `seek` lose\n prefix context by default).\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78874,"byte_end":78931,"line_start":381,"line_end":381,"column_start":2,"column_end":59}},{"value":"/ It then do a seek operation from prefixed context (using `seek` lose","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78933,"byte_end":79005,"line_start":382,"line_end":382,"column_start":2,"column_end":74}},{"value":"/ prefix context by default).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79007,"byte_end":79038,"line_start":383,"line_end":383,"column_start":2,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":726},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedbmut","qualname":"::triedbmut","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2462},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":2465},{"krate":0,"index":2478},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":848},{"krate":0,"index":852},{"krate":0,"index":861},{"krate":0,"index":868},{"krate":0,"index":891},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":922},{"krate":0,"index":932},{"krate":0,"index":940},{"krate":0,"index":944},{"krate":0,"index":2491},{"krate":0,"index":2500},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":953},{"krate":0,"index":958},{"krate":0,"index":962},{"krate":0,"index":967},{"krate":0,"index":972},{"krate":0,"index":981},{"krate":0,"index":1014},{"krate":0,"index":1024},{"krate":0,"index":1028}],"decl_id":null,"docs":" In-memory trie representation.\n","sig":null,"attributes":[{"value":"/ In-memory trie representation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":82734,"byte_end":82768,"line_start":15,"line_end":15,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2467},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84322,"byte_end":84328,"line_start":76,"line_end":76,"column_start":2,"column_end":8},"name":"Inline","qualname":"::triedbmut::Value::Inline","value":"Value::Inline(DBValue)","parent":{"krate":0,"index":2465},"children":[],"decl_id":null,"docs":" Value bytes inlined in a trie node.\n","sig":null,"attributes":[{"value":"/ Value bytes inlined in a trie node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84281,"byte_end":84320,"line_start":75,"line_end":75,"column_start":2,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2470},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84396,"byte_end":84400,"line_start":78,"line_end":78,"column_start":2,"column_end":6},"name":"Node","qualname":"::triedbmut::Value::Node","value":"Value::Node(TrieHash<L>, Option<DBValue>)","parent":{"krate":0,"index":2465},"children":[],"decl_id":null,"docs":" Hash of value bytes and value bytes when accessed.\n","sig":null,"attributes":[{"value":"/ Hash of value bytes and value bytes when accessed.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84340,"byte_end":84394,"line_start":77,"line_end":77,"column_start":2,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2474},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84559,"byte_end":84566,"line_start":82,"line_end":82,"column_start":2,"column_end":9},"name":"NewNode","qualname":"::triedbmut::Value::NewNode","value":"Value::NewNode(Option<TrieHash<L>>, DBValue)","parent":{"krate":0,"index":2465},"children":[],"decl_id":null,"docs":" Hash of value bytes if calculated and value bytes.\n The hash may be undefined until it node is added\n to the db.\n","sig":null,"attributes":[{"value":"/ Hash of value bytes if calculated and value bytes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84433,"byte_end":84487,"line_start":79,"line_end":79,"column_start":2,"column_end":56}},{"value":"/ The hash may be undefined until it node is added","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84489,"byte_end":84541,"line_start":80,"line_end":80,"column_start":2,"column_end":54}},{"value":"/ to the db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84543,"byte_end":84557,"line_start":81,"line_end":81,"column_start":2,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2465},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84257,"byte_end":84262,"line_start":74,"line_end":74,"column_start":10,"column_end":15},"name":"Value","qualname":"::triedbmut::Value","value":"pub enum Value<L: TrieLayout> {\n    Inline(DBValue),\n    Node(TrieHash<L>, Option<DBValue>),\n    NewNode(Option<TrieHash<L>>, DBValue),\n}","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2470},{"krate":0,"index":2474}],"decl_id":null,"docs":" Value representation for Node.\n","sig":null,"attributes":[{"value":"/ Value representation for Node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84192,"byte_end":84226,"line_start":72,"line_end":72,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95570,"byte_end":95574,"line_start":456,"line_end":456,"column_start":2,"column_end":6},"name":"Hash","qualname":"::triedbmut::ChildReference::Hash","value":"ChildReference::Hash(HO)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95581,"byte_end":95587,"line_start":457,"line_end":457,"column_start":2,"column_end":8},"name":"Inline","qualname":"::triedbmut::ChildReference::Inline","value":"ChildReference::Inline(HO, usize)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2491},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95493,"byte_end":95507,"line_start":454,"line_end":454,"column_start":10,"column_end":24},"name":"ChildReference","qualname":"::triedbmut::ChildReference","value":"pub enum ChildReference<HO> { Hash(HO), Inline(HO, usize), }","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2496}],"decl_id":null,"docs":" Used to build a collection of child nodes from a collection of `NodeHandle`s\n","sig":null,"attributes":[{"value":"/ Used to build a collection of child nodes from a collection of `NodeHandle`s","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95336,"byte_end":95416,"line_start":451,"line_end":451,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":972},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98589,"byte_end":98598,"line_start":558,"line_end":558,"column_start":12,"column_end":21},"name":"TrieDBMut","qualname":"::triedbmut::TrieDBMut","value":"TrieDBMut {  }","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97563,"byte_end":97633,"line_start":531,"line_end":531,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97634,"byte_end":97637,"line_start":532,"line_end":532,"column_start":1,"column_end":4}},{"value":"/ Use it as a `TrieMut` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97638,"byte_end":97732,"line_start":533,"line_end":533,"column_start":1,"column_end":95}},{"value":"/ Note that changes are not committed to the database until `commit` is called.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97733,"byte_end":97814,"line_start":534,"line_end":534,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97815,"byte_end":97818,"line_start":535,"line_end":535,"column_start":1,"column_end":4}},{"value":"/ Querying the root or dropping the trie will commit automatically.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97819,"byte_end":97888,"line_start":536,"line_end":536,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97889,"byte_end":97892,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97893,"byte_end":97896,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97897,"byte_end":97910,"line_start":539,"line_end":539,"column_start":1,"column_end":14}},{"value":"/ ```ignore","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97911,"byte_end":97924,"line_start":540,"line_end":540,"column_start":1,"column_end":14}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97925,"byte_end":97949,"line_start":541,"line_end":541,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, TrieMut};","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97950,"byte_end":97998,"line_start":542,"line_end":542,"column_start":1,"column_end":49}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97999,"byte_end":98024,"line_start":543,"line_end":543,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98025,"byte_end":98061,"line_start":544,"line_end":544,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98062,"byte_end":98083,"line_start":545,"line_end":545,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98084,"byte_end":98087,"line_start":546,"line_end":546,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, DBValue>::default();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98088,"byte_end":98165,"line_start":547,"line_end":547,"column_start":1,"column_end":78}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98166,"byte_end":98204,"line_start":548,"line_end":548,"column_start":1,"column_end":39}},{"value":"/ let mut t = RefTrieDBMut::new(&mut memdb, &mut root);","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98205,"byte_end":98262,"line_start":549,"line_end":549,"column_start":1,"column_end":58}},{"value":"/ assert!(t.is_empty());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98263,"byte_end":98289,"line_start":550,"line_end":550,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(*t.root(), KeccakHasher::hash(&[0u8][..]));","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98290,"byte_end":98348,"line_start":551,"line_end":551,"column_start":1,"column_end":59}},{"value":"/ t.insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98349,"byte_end":98387,"line_start":552,"line_end":552,"column_start":1,"column_end":39}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98388,"byte_end":98429,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98430,"byte_end":98495,"line_start":554,"line_end":554,"column_start":1,"column_end":66}},{"value":"/ t.remove(b\"foo\").unwrap();","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98496,"byte_end":98526,"line_start":555,"line_end":555,"column_start":1,"column_end":31}},{"value":"/ assert!(!t.contains(b\"foo\").unwrap());","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98527,"byte_end":98569,"line_start":556,"line_end":556,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98570,"byte_end":98577,"line_start":557,"line_end":557,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99107,"byte_end":99110,"line_start":577,"line_end":577,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBMut>::new","value":"pub fn new(&'a mut dyn HashDB<L::Hash, DBValue>, &'a mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with backing database `db` and empty `root`.\n","sig":null,"attributes":[{"value":"/ Create a new trie with backing database `db` and empty `root`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99032,"byte_end":99098,"line_start":576,"line_end":576,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99556,"byte_end":99569,"line_start":593,"line_end":593,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieDBMut>::from_existing","value":"pub fn from_existing(&'a mut dyn HashDB<L::Hash, DBValue>,\n&'a mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root.\n Returns an error if `root` does not exist.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99436,"byte_end":99499,"line_start":591,"line_end":591,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99501,"byte_end":99547,"line_start":592,"line_end":592,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":100017,"byte_end":100019,"line_start":612,"line_end":612,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDBMut>::db","value":"pub fn db(&Self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":99979,"byte_end":100008,"line_start":611,"line_end":611,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":100123,"byte_end":100129,"line_start":617,"line_end":617,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<TrieDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database mutably.\n","sig":null,"attributes":[{"value":"/ Get the backing database mutably.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":100077,"byte_end":100114,"line_start":616,"line_end":616,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":132507,"byte_end":132513,"line_start":1602,"line_end":1602,"column_start":9,"column_end":15},"name":"commit","qualname":"<TrieDBMut>::commit","value":"pub fn commit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Commit the in-memory changes to disk, freeing their storage and\n updating the state root.\n","sig":null,"attributes":[{"value":"/ Commit the in-memory changes to disk, freeing their storage and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":132401,"byte_end":132468,"line_start":1600,"line_end":1600,"column_start":2,"column_end":69}},{"value":"/ updating the state root.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":132470,"byte_end":132498,"line_start":1601,"line_end":1601,"column_start":2,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140560,"byte_end":140565,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"FatDB","qualname":"::fatdb::FatDB","value":"FatDB {  }","parent":null,"children":[{"krate":0,"index":1084}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140329,"byte_end":140420,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140421,"byte_end":140494,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140495,"byte_end":140498,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140499,"byte_end":140548,"line_start":26,"line_end":26,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140863,"byte_end":140866,"line_start":41,"line_end":41,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDB>::new","value":"pub fn new(&'db dyn HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140675,"byte_end":140744,"line_start":38,"line_end":38,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140746,"byte_end":140804,"line_start":39,"line_end":39,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140806,"byte_end":140854,"line_start":40,"line_end":40,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":141070,"byte_end":141072,"line_start":49,"line_end":49,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDB>::db","value":"pub fn db(&Self) -> &dyn HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":141032,"byte_end":141061,"line_start":48,"line_end":48,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142129,"byte_end":142142,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"FatDBIterator","qualname":"::fatdb::FatDBIterator","value":"FatDBIterator {  }","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"decl_id":null,"docs":" Iterator over inserted pairs of key values.\n","sig":null,"attributes":[{"value":"/ Iterator over inserted pairs of key values.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142070,"byte_end":142117,"line_start":98,"line_end":98,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142340,"byte_end":142343,"line_start":112,"line_end":112,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBIterator>::new","value":"pub fn new(&'db TrieDB<, L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Creates new iterator.\n","sig":null,"attributes":[{"value":"/ Creates new iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142306,"byte_end":142331,"line_start":111,"line_end":111,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145147,"byte_end":145155,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FatDBMut","qualname":"::fatdbmut::FatDBMut","value":"FatDBMut {  }","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":144908,"byte_end":145007,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145008,"byte_end":145081,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145082,"byte_end":145085,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145086,"byte_end":145135,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145459,"byte_end":145462,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBMut>::new","value":"pub fn new(&'db mut dyn HashDB<L::Hash, DBValue>, &'db mut TrieHash<L>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145271,"byte_end":145340,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145342,"byte_end":145400,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145402,"byte_end":145450,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145718,"byte_end":145731,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<FatDBMut>::from_existing","value":"pub fn from_existing(&'db mut dyn HashDB<L::Hash, DBValue>,\n&'db mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145594,"byte_end":145658,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145660,"byte_end":145663,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145665,"byte_end":145709,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145956,"byte_end":145958,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDBMut>::db","value":"pub fn db(&Self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145918,"byte_end":145947,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":146060,"byte_end":146066,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<FatDBMut>::db_mut","value":"pub fn db_mut(&mut Self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":146022,"byte_end":146051,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":155306,"byte_end":155316,"line_start":267,"line_end":267,"column_start":8,"column_end":18},"name":"trie_visit","qualname":"::iter_build::trie_visit","value":"pub fn trie_visit<T, I, A, B, F>(I, &mut F) where T: TrieLayout,\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>,\nF: ProcessEncodedNode<TrieHash<T>>","parent":null,"children":[],"decl_id":null,"docs":" Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.\n This is the main entry point of this module.\n Calls to each node occurs ordered by byte key value but with longest keys first (from node to\n branch to root), this differs from standard byte array ordering a bit.\n","sig":null,"attributes":[{"value":"/ Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":154989,"byte_end":155076,"line_start":263,"line_end":263,"column_start":1,"column_end":88}},{"value":"/ This is the main entry point of this module.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":155077,"byte_end":155125,"line_start":264,"line_end":264,"column_start":1,"column_end":49}},{"value":"/ Calls to each node occurs ordered by byte key value but with longest keys first (from node to","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":155126,"byte_end":155223,"line_start":265,"line_end":265,"column_start":1,"column_end":98}},{"value":"/ branch to root), this differs from standard byte array ordering a bit.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":155224,"byte_end":155298,"line_start":266,"line_end":266,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1292},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157815,"byte_end":157833,"line_start":338,"line_end":338,"column_start":11,"column_end":29},"name":"ProcessEncodedNode","qualname":"::iter_build::ProcessEncodedNode","value":"ProcessEncodedNode<HO>","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295}],"decl_id":null,"docs":" Visitor trait to implement when using `trie_visit`.\n","sig":null,"attributes":[{"value":"/ Visitor trait to implement when using `trie_visit`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157749,"byte_end":157804,"line_start":337,"line_end":337,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158245,"byte_end":158252,"line_start":346,"line_end":346,"column_start":5,"column_end":12},"name":"process","qualname":"::iter_build::ProcessEncodedNode::process","value":"pub fn process(&mut Self, Prefix, Vec<u8>, bool) -> ChildReference<HO>","parent":{"krate":0,"index":1292},"children":[],"decl_id":null,"docs":" Function call with prefix, encoded value and a boolean indicating if the\n node is the root for each node of the trie.","sig":null,"attributes":[{"value":"/ Function call with prefix, encoded value and a boolean indicating if the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157841,"byte_end":157917,"line_start":339,"line_end":339,"column_start":2,"column_end":78}},{"value":"/ node is the root for each node of the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157919,"byte_end":157966,"line_start":340,"line_end":340,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157968,"byte_end":157971,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ Note that the returned value can change depending on implementation,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":157973,"byte_end":158045,"line_start":342,"line_end":342,"column_start":2,"column_end":74}},{"value":"/ but usually it should be the Hash of encoded node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158047,"byte_end":158101,"line_start":343,"line_end":343,"column_start":2,"column_end":56}},{"value":"/ This is not something direcly related to encoding but is here for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158103,"byte_end":158172,"line_start":344,"line_end":344,"column_start":2,"column_end":71}},{"value":"/ optimisation purpose (builder hash_db does return this value).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158174,"byte_end":158240,"line_start":345,"line_end":345,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158406,"byte_end":158432,"line_start":354,"line_end":354,"column_start":5,"column_end":31},"name":"process_inner_hashed_value","qualname":"::iter_build::ProcessEncodedNode::process_inner_hashed_value","value":"pub fn process_inner_hashed_value(&mut Self, Prefix, &[u8]) -> HO","parent":{"krate":0,"index":1292},"children":[],"decl_id":null,"docs":" Callback for hashed value in encoded node.\n","sig":null,"attributes":[{"value":"/ Callback for hashed value in encoded node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158355,"byte_end":158401,"line_start":353,"line_end":353,"column_start":2,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158661,"byte_end":158672,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"name":"TrieBuilder","qualname":"::iter_build::TrieBuilder","value":"TrieBuilder { root }","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1301}],"decl_id":null,"docs":" Get trie root and insert visited node in a hash_db.\n As for all `ProcessEncodedNode` implementation, it\n is only for full trie parsing (not existing trie).\n","sig":null,"attributes":[{"value":"/ Get trie root and insert visited node in a hash_db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158484,"byte_end":158539,"line_start":357,"line_end":357,"column_start":1,"column_end":56}},{"value":"/ As for all `ProcessEncodedNode` implementation, it","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158540,"byte_end":158594,"line_start":358,"line_end":358,"column_start":1,"column_end":55}},{"value":"/ is only for full trie parsing (not existing trie).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158595,"byte_end":158649,"line_start":359,"line_end":359,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1301},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158720,"byte_end":158724,"line_start":362,"line_end":362,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieBuilder::root","value":"std::option::Option<<<T as TrieLayout>::Hash as hash_db::Hasher>::Out>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158811,"byte_end":158814,"line_start":366,"line_end":366,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBuilder>::new","value":"pub fn new(&'a mut DB) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159703,"byte_end":159711,"line_start":402,"line_end":402,"column_start":12,"column_end":20},"name":"TrieRoot","qualname":"::iter_build::TrieRoot","value":"TrieRoot { root }","parent":null,"children":[{"krate":0,"index":1315}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n","sig":null,"attributes":[{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159651,"byte_end":159691,"line_start":401,"line_end":401,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1315},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159759,"byte_end":159763,"line_start":404,"line_end":404,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRoot::root","value":"std::option::Option<<<T as TrieLayout>::Hash as hash_db::Hasher>::Out>","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159730,"byte_end":159753,"line_start":403,"line_end":403,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160658,"byte_end":160674,"line_start":440,"line_end":440,"column_start":12,"column_end":28},"name":"TrieRootUnhashed","qualname":"::iter_build::TrieRootUnhashed","value":"TrieRootUnhashed { root }","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326}],"decl_id":null,"docs":" Get the trie root node encoding.\n","sig":null,"attributes":[{"value":"/ Get the trie root node encoding.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160610,"byte_end":160646,"line_start":439,"line_end":439,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160730,"byte_end":160734,"line_start":442,"line_end":442,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootUnhashed::root","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":1323},"children":[],"decl_id":null,"docs":" The resulting encoded root.\n","sig":null,"attributes":[{"value":"/ The resulting encoded root.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160693,"byte_end":160724,"line_start":441,"line_end":441,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161015,"byte_end":161028,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"TrieRootPrint","qualname":"::iter_build::TrieRootPrint","value":"TrieRootPrint { root }","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1333}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n Print a debug trace.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160914,"byte_end":160937,"line_start":452,"line_end":452,"column_start":1,"column_end":24}},{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160938,"byte_end":160978,"line_start":453,"line_end":453,"column_start":1,"column_end":41}},{"value":"/ Print a debug trace.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160979,"byte_end":161003,"line_start":454,"line_end":454,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161076,"byte_end":161080,"line_start":457,"line_end":457,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootPrint::root","value":"std::option::Option<<<T as TrieLayout>::Hash as hash_db::Hasher>::Out>","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161047,"byte_end":161070,"line_start":456,"line_end":456,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":164967,"byte_end":164985,"line_start":61,"line_end":61,"column_start":12,"column_end":30},"name":"TrieDBNodeIterator","qualname":"::iterator::TrieDBNodeIterator","value":"TrieDBNodeIterator {  }","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"decl_id":null,"docs":" Iterator for going through all nodes in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all nodes in the trie in pre-order traversal order.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":164873,"byte_end":164955,"line_start":60,"line_end":60,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1418},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165220,"byte_end":165247,"line_start":69,"line_end":69,"column_start":12,"column_end":39},"name":"SuspendedTrieDBNodeIterator","qualname":"::iterator::SuspendedTrieDBNodeIterator","value":"SuspendedTrieDBNodeIterator {  }","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421}],"decl_id":null,"docs":" When there is guaranties the storage backend do not change,\n this can be use to suspend and restore the iterator.\n","sig":null,"attributes":[{"value":"/ When there is guaranties the storage backend do not change,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165088,"byte_end":165151,"line_start":67,"line_end":67,"column_start":1,"column_end":64}},{"value":"/ this can be use to suspend and restore the iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165152,"byte_end":165208,"line_start":68,"line_end":68,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165406,"byte_end":165420,"line_start":76,"line_end":76,"column_start":9,"column_end":23},"name":"unsafe_restore","qualname":"<SuspendedTrieDBNodeIterator<L>>::unsafe_restore","value":"pub fn unsafe_restore<'a>(Self, &'a TrieDB) -> TrieDBNodeIterator","parent":null,"children":[],"decl_id":null,"docs":" Restore iterator.\n","sig":null,"attributes":[{"value":"/ Restore iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165376,"byte_end":165397,"line_start":75,"line_end":75,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165657,"byte_end":165660,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBNodeIterator>::new","value":"pub fn new(&'a TrieDB<, L>)\n-> Result<TrieDBNodeIterator, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165622,"byte_end":165648,"line_start":82,"line_end":82,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166383,"byte_end":166390,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"name":"suspend","qualname":"<TrieDBNodeIterator>::suspend","value":"pub fn suspend(Self) -> SuspendedTrieDBNodeIterator<L>","parent":null,"children":[],"decl_id":null,"docs":" Suspend iterator. Warning this does not hold guaranties it can be restored later.\n Restoring requires that trie backend does not change.\n","sig":null,"attributes":[{"value":"/ Suspend iterator. Warning this does not hold guaranties it can be restored later.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166230,"byte_end":166315,"line_start":98,"line_end":98,"column_start":2,"column_end":87}},{"value":"/ Restoring requires that trie backend does not change.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166317,"byte_end":166374,"line_start":99,"line_end":99,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166578,"byte_end":166589,"line_start":105,"line_end":105,"column_start":9,"column_end":20},"name":"fetch_value","qualname":"<TrieDBNodeIterator>::fetch_value","value":"pub fn fetch_value(&Self, &[u8], Prefix) -> Option<DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Fetch value by hash at a current node height\n","sig":null,"attributes":[{"value":"/ Fetch value by hash at a current node height","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166521,"byte_end":166569,"line_start":104,"line_end":104,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":170895,"byte_end":170901,"line_start":250,"line_end":250,"column_start":9,"column_end":15},"name":"prefix","qualname":"<TrieDBNodeIterator>::prefix","value":"pub fn prefix(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator into a prefix, no value out of the prefix will be accessed\n or returned after this operation.\n","sig":null,"attributes":[{"value":"/ Advance the iterator into a prefix, no value out of the prefix will be accessed","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":170764,"byte_end":170847,"line_start":248,"line_end":248,"column_start":2,"column_end":85}},{"value":"/ or returned after this operation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":170849,"byte_end":170886,"line_start":249,"line_end":249,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":171277,"byte_end":171293,"line_start":265,"line_end":265,"column_start":9,"column_end":25},"name":"prefix_then_seek","qualname":"<TrieDBNodeIterator>::prefix_then_seek","value":"pub fn prefix_then_seek(&mut Self, &[u8], &[u8])\n-> Result<(), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator into a prefix, no value out of the prefix will be accessed\n or returned after this operation.\n","sig":null,"attributes":[{"value":"/ Advance the iterator into a prefix, no value out of the prefix will be accessed","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":171146,"byte_end":171229,"line_start":263,"line_end":263,"column_start":2,"column_end":85}},{"value":"/ or returned after this operation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":171231,"byte_end":171268,"line_start":264,"line_end":264,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172205,"byte_end":172207,"line_start":304,"line_end":304,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDBNodeIterator>::db","value":"pub fn db(&Self) -> &dyn hash_db::HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Access inner hash db.\n","sig":null,"attributes":[{"value":"/ Access inner hash db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172171,"byte_end":172196,"line_start":303,"line_end":303,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177352,"byte_end":177358,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Lookup","qualname":"::lookup::Lookup","value":"Lookup { db, query, hash }","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521}],"decl_id":null,"docs":" Trie lookup helper object.\n","sig":null,"attributes":[{"value":"/ Trie lookup helper object.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177310,"byte_end":177340,"line_start":26,"line_end":26,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177433,"byte_end":177435,"line_start":29,"line_end":29,"column_start":6,"column_end":8},"name":"db","qualname":"::lookup::Lookup::db","value":"&'a (dyn hash_db::HashDBRef<<L as TrieLayout>::Hash, std::vec::Vec<u8>> + 'a)","parent":{"krate":0,"index":1515},"children":[],"decl_id":null,"docs":" database to query from.\n","sig":null,"attributes":[{"value":"/ database to query from.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177400,"byte_end":177427,"line_start":28,"line_end":28,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177533,"byte_end":177538,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"name":"query","qualname":"::lookup::Lookup::query","value":"Q","parent":{"krate":0,"index":1515},"children":[],"decl_id":null,"docs":" Query object to record nodes and transform data.\n","sig":null,"attributes":[{"value":"/ Query object to record nodes and transform data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177475,"byte_end":177527,"line_start":30,"line_end":30,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177570,"byte_end":177574,"line_start":33,"line_end":33,"column_start":6,"column_end":10},"name":"hash","qualname":"::lookup::Lookup::hash","value":"<<L as TrieLayout>::Hash as hash_db::Hasher>::Out","parent":{"krate":0,"index":1515},"children":[],"decl_id":null,"docs":" Hash to start at\n","sig":null,"attributes":[{"value":"/ Hash to start at","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177544,"byte_end":177564,"line_start":32,"line_end":32,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":178398,"byte_end":178405,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"look_up","qualname":"<Lookup>::look_up","value":"pub fn look_up(Self, NibbleSlice)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Look up the given key. If the value is found, it will be passed to the given\n function to decode or copy.\n","sig":null,"attributes":[{"value":"/ Look up the given key. If the value is found, it will be passed to the given","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":178276,"byte_end":178356,"line_start":63,"line_end":63,"column_start":2,"column_end":82}},{"value":"/ function to decode or copy.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":178358,"byte_end":178389,"line_start":64,"line_end":64,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194256,"byte_end":194259,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlice>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194191,"byte_end":194247,"line_start":35,"line_end":35,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194411,"byte_end":194421,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"new_offset","qualname":"<NibbleSlice>::new_offset","value":"pub fn new_offset(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice with a nibble offset.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice with a nibble offset.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194325,"byte_end":194402,"line_start":40,"line_end":40,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194645,"byte_end":194649,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"name":"iter","qualname":"<NibbleSlice>::iter","value":"pub fn iter(&'a Self) -> NibbleSliceIterator","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator for the series of nibbles.\n","sig":null,"attributes":[{"value":"/ Get an iterator for the series of nibbles.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194590,"byte_end":194636,"line_start":49,"line_end":49,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1625},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194781,"byte_end":194792,"line_start":55,"line_end":55,"column_start":9,"column_end":20},"name":"from_stored","qualname":"<NibbleSlice>::from_stored","value":"pub fn from_stored(&NodeKey) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Get nibble slice from a `NodeKey`.\n","sig":null,"attributes":[{"value":"/ Get nibble slice from a `NodeKey`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194734,"byte_end":194772,"line_start":54,"line_end":54,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1626},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194950,"byte_end":194959,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"name":"to_stored","qualname":"<NibbleSlice>::to_stored","value":"pub fn to_stored(&Self) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194869,"byte_end":194941,"line_start":59,"line_end":59,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":195356,"byte_end":195371,"line_start":70,"line_end":70,"column_start":9,"column_end":24},"name":"to_stored_range","qualname":"<NibbleSlice>::to_stored_range","value":"pub fn to_stored_range(&Self, usize) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`,\n and for a given number of nibble.\n Warning this method can be slow (number of nibble does not align the\n original padding).\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":195138,"byte_end":195210,"line_start":66,"line_end":66,"column_start":2,"column_end":74}},{"value":"/ and for a given number of nibble.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":195212,"byte_end":195249,"line_start":67,"line_end":67,"column_start":2,"column_end":39}},{"value":"/ Warning this method can be slow (number of nibble does not align the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":195251,"byte_end":195323,"line_start":68,"line_end":68,"column_start":2,"column_end":74}},{"value":"/ original padding).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":195325,"byte_end":195347,"line_start":69,"line_end":69,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196274,"byte_end":196282,"line_start":97,"line_end":97,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleSlice>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the slice contains no nibbles.\n","sig":null,"attributes":[{"value":"/ Return true if the slice contains no nibbles.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196216,"byte_end":196265,"line_start":96,"line_end":96,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196400,"byte_end":196403,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlice>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length (in nibbles, naturally) of this slice.\n","sig":null,"attributes":[{"value":"/ Get the length (in nibbles, naturally) of this slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196323,"byte_end":196380,"line_start":101,"line_end":101,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196382,"byte_end":196391,"line_start":102,"line_end":102,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196552,"byte_end":196554,"line_start":109,"line_end":109,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleSlice>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the nibble at position `i`.\n","sig":null,"attributes":[{"value":"/ Get the nibble at position `i`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196489,"byte_end":196524,"line_start":107,"line_end":107,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196526,"byte_end":196543,"line_start":108,"line_end":108,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196712,"byte_end":196715,"line_start":114,"line_end":114,"column_start":9,"column_end":12},"name":"mid","qualname":"<NibbleSlice>::mid","value":"pub fn mid(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Return object which represents a view on to this slice (further) offset by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Return object which represents a view on to this slice (further) offset by `i` nibbles.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196612,"byte_end":196703,"line_start":113,"line_end":113,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196876,"byte_end":196883,"line_start":119,"line_end":119,"column_start":9,"column_end":16},"name":"advance","qualname":"<NibbleSlice>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Advance the view on the slice by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Advance the view on the slice by `i` nibbles.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196818,"byte_end":196867,"line_start":118,"line_end":118,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197031,"byte_end":197035,"line_start":125,"line_end":125,"column_start":9,"column_end":13},"name":"back","qualname":"<NibbleSlice>::back","value":"pub fn back(&Self, usize) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Move back to a previously valid fix offset position.\n","sig":null,"attributes":[{"value":"/ Move back to a previously valid fix offset position.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":196966,"byte_end":197022,"line_start":124,"line_end":124,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197194,"byte_end":197205,"line_start":130,"line_end":130,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleSlice>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197124,"byte_end":197185,"line_start":129,"line_end":129,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197365,"byte_end":197378,"line_start":135,"line_end":135,"column_start":9,"column_end":22},"name":"common_prefix","qualname":"<NibbleSlice>::common_prefix","value":"pub fn common_prefix(&Self, &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many of the same nibbles at the beginning do we match with `them`?\n","sig":null,"attributes":[{"value":"/ How many of the same nibbles at the beginning do we match with `them`?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197282,"byte_end":197356,"line_start":134,"line_end":134,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197663,"byte_end":197668,"line_start":149,"line_end":149,"column_start":9,"column_end":14},"name":"right","qualname":"<NibbleSlice>::right","value":"pub fn right(&'a Self) -> Partial","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` representation of this slice:\n first encoded byte and following slice.\n","sig":null,"attributes":[{"value":"/ Return `Partial` representation of this slice:","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197559,"byte_end":197609,"line_start":147,"line_end":147,"column_start":2,"column_end":52}},{"value":"/ first encoded byte and following slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197611,"byte_end":197654,"line_start":148,"line_end":148,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":198021,"byte_end":198031,"line_start":160,"line_end":160,"column_start":9,"column_end":19},"name":"right_iter","qualname":"<NibbleSlice>::right_iter","value":"pub fn right_iter(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over `Partial` bytes representation.\n","sig":null,"attributes":[{"value":"/ Return an iterator over `Partial` bytes representation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":197953,"byte_end":198012,"line_start":159,"line_end":159,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":198488,"byte_end":198504,"line_start":178,"line_end":178,"column_start":9,"column_end":25},"name":"right_range_iter","qualname":"<NibbleSlice>::right_range_iter","value":"pub fn right_range_iter(&'a Self, usize) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` bytes iterator over a range of byte..\n Warning can be slow when unaligned (similar to `to_stored_range`).\n","sig":null,"attributes":[{"value":"/ Return `Partial` bytes iterator over a range of byte..","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":198349,"byte_end":198407,"line_start":176,"line_end":176,"column_start":2,"column_end":60}},{"value":"/ Warning can be slow when unaligned (similar to `to_stored_range`).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":198409,"byte_end":198479,"line_start":177,"line_end":177,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199625,"byte_end":199629,"line_start":220,"line_end":220,"column_start":9,"column_end":13},"name":"left","qualname":"<NibbleSlice>::left","value":"pub fn left(&'a Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Return left portion of `NibbleSlice`, if the slice\n originates from a full key it will be the `Prefix of\n the node`.\n","sig":null,"attributes":[{"value":"/ Return left portion of `NibbleSlice`, if the slice","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199488,"byte_end":199542,"line_start":217,"line_end":217,"column_start":2,"column_end":56}},{"value":"/ originates from a full key it will be the `Prefix of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199544,"byte_end":199600,"line_start":218,"line_end":218,"column_start":2,"column_end":58}},{"value":"/ the node`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199602,"byte_end":199616,"line_start":219,"line_end":219,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199975,"byte_end":199985,"line_start":231,"line_end":231,"column_start":9,"column_end":19},"name":"left_owned","qualname":"<NibbleSlice>::left_owned","value":"pub fn left_owned(&'a Self) -> (BackingByteVec, Option<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Owned version of a `Prefix` from a `left` method call.\n","sig":null,"attributes":[{"value":"/ Owned version of a `Prefix` from a `left` method call.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":199908,"byte_end":199966,"line_start":230,"line_end":230,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205280,"byte_end":205283,"line_start":32,"line_end":32,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleVec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Make a new `NibbleVec`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205244,"byte_end":205271,"line_start":31,"line_end":31,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205412,"byte_end":205415,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Length of the `NibbleVec`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205354,"byte_end":205384,"line_start":36,"line_end":36,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205386,"byte_end":205403,"line_start":37,"line_end":37,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205508,"byte_end":205516,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrurns true if `NibbleVec` has zero length.\n","sig":null,"attributes":[{"value":"/ Retrurns true if `NibbleVec` has zero length.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205450,"byte_end":205499,"line_start":42,"line_end":42,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205621,"byte_end":205623,"line_start":49,"line_end":49,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleVec>::at","value":"pub fn at(&Self, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Try to get the nibble at the given offset.\n","sig":null,"attributes":[{"value":"/ Try to get the nibble at the given offset.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205555,"byte_end":205601,"line_start":47,"line_end":47,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205603,"byte_end":205612,"line_start":48,"line_end":48,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205871,"byte_end":205875,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"push","qualname":"<NibbleVec>::push","value":"pub fn push(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.\n","sig":null,"attributes":[{"value":"/ Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205798,"byte_end":205862,"line_start":55,"line_end":55,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":206323,"byte_end":206326,"line_start":72,"line_end":72,"column_start":9,"column_end":12},"name":"pop","qualname":"<NibbleVec>::pop","value":"pub fn pop(&mut Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to pop a nibble off the `NibbleVec`. Fails if len == 0.\n","sig":null,"attributes":[{"value":"/ Try to pop a nibble off the `NibbleVec`. Fails if len == 0.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":206251,"byte_end":206314,"line_start":71,"line_end":71,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":206742,"byte_end":206752,"line_start":86,"line_end":86,"column_start":9,"column_end":19},"name":"drop_lasts","qualname":"<NibbleVec>::drop_lasts","value":"pub fn drop_lasts(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Remove then n last nibbles in a faster way than popping n times.\n","sig":null,"attributes":[{"value":"/ Remove then n last nibbles in a faster way than popping n times.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":206665,"byte_end":206733,"line_start":85,"line_end":85,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":207321,"byte_end":207330,"line_start":109,"line_end":109,"column_start":9,"column_end":18},"name":"as_prefix","qualname":"<NibbleVec>::as_prefix","value":"pub fn as_prefix(&Self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Get `Prefix` representation of this `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Get `Prefix` representation of this `NibbleVec`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":207260,"byte_end":207312,"line_start":108,"line_end":108,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":207685,"byte_end":207691,"line_start":120,"line_end":120,"column_start":9,"column_end":15},"name":"append","qualname":"<NibbleVec>::append","value":"pub fn append(&mut Self, &NibbleVec)","parent":null,"children":[],"decl_id":null,"docs":" Append another `NibbleVec`. Can be slow (alignement of second vec).\n","sig":null,"attributes":[{"value":"/ Append another `NibbleVec`. Can be slow (alignement of second vec).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":207605,"byte_end":207676,"line_start":119,"line_end":119,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":208488,"byte_end":208502,"line_start":144,"line_end":144,"column_start":9,"column_end":23},"name":"append_partial","qualname":"<NibbleVec>::append_partial","value":"pub fn append_partial(&mut Self, Partial)","parent":null,"children":[],"decl_id":null,"docs":" Append a `Partial`. Can be slow (alignement of partial).\n","sig":null,"attributes":[{"value":"/ Append a `Partial`. Can be slow (alignement of partial).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":208419,"byte_end":208479,"line_start":143,"line_end":143,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":209963,"byte_end":209968,"line_start":197,"line_end":197,"column_start":9,"column_end":14},"name":"inner","qualname":"<NibbleVec>::inner","value":"pub fn inner(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying byte slice.\n","sig":null,"attributes":[{"value":"/ Get the underlying byte slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":209920,"byte_end":209954,"line_start":196,"line_end":196,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210028,"byte_end":210033,"line_start":202,"line_end":202,"column_start":9,"column_end":14},"name":"clear","qualname":"<NibbleVec>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" clear\n","sig":null,"attributes":[{"value":"/ clear","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210010,"byte_end":210019,"line_start":201,"line_end":201,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210187,"byte_end":210201,"line_start":208,"line_end":208,"column_start":9,"column_end":23},"name":"as_nibbleslice","qualname":"<NibbleVec>::as_nibbleslice","value":"pub fn as_nibbleslice(&Self) -> Option<NibbleSlice>","parent":null,"children":[],"decl_id":null,"docs":" Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.\n","sig":null,"attributes":[{"value":"/ Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210090,"byte_end":210178,"line_start":207,"line_end":207,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210423,"byte_end":210434,"line_start":217,"line_end":217,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleVec>::starts_with","value":"pub fn starts_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210353,"byte_end":210414,"line_start":216,"line_end":216,"column_start":2,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182021,"byte_end":182031,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"name":"nibble_ops","qualname":"::nibble::nibble_ops","value":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","parent":null,"children":[{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726}],"decl_id":null,"docs":" Utility methods to work on radix 16 nibble.\n","sig":null,"attributes":[{"value":"/ Utility methods to work on radix 16 nibble.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":181965,"byte_end":182012,"line_start":25,"line_end":25,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1711},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182095,"byte_end":182109,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"BIT_PER_NIBBLE","qualname":"::nibble::nibble_ops::BIT_PER_NIBBLE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Single nibble length in bit.\n","sig":null,"attributes":[{"value":"/ Single nibble length in bit.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182051,"byte_end":182083,"line_start":29,"line_end":29,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":1712},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182165,"byte_end":182180,"line_start":32,"line_end":32,"column_start":12,"column_end":27},"name":"NIBBLE_PER_BYTE","qualname":"::nibble::nibble_ops::NIBBLE_PER_BYTE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of nibble per byte.\n","sig":null,"attributes":[{"value":"/ Number of nibble per byte.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182123,"byte_end":182153,"line_start":31,"line_end":31,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182252,"byte_end":182265,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"NIBBLE_LENGTH","qualname":"::nibble::nibble_ops::NIBBLE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of child for a branch (trie radix).\n","sig":null,"attributes":[{"value":"/ Number of child for a branch (trie radix).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182194,"byte_end":182240,"line_start":33,"line_end":33,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182317,"byte_end":182332,"line_start":36,"line_end":36,"column_start":12,"column_end":27},"name":"PADDING_BITMASK","qualname":"::nibble::nibble_ops::PADDING_BITMASK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Nibble (half a byte).\n","sig":null,"attributes":[{"value":"/ Nibble (half a byte).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182280,"byte_end":182305,"line_start":35,"line_end":35,"column_start":2,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":1715},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182377,"byte_end":182396,"line_start":38,"line_end":38,"column_start":12,"column_end":31},"name":"CONTENT_HEADER_SIZE","qualname":"::nibble::nibble_ops::CONTENT_HEADER_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Size of header.\n","sig":null,"attributes":[{"value":"/ Size of header.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182346,"byte_end":182365,"line_start":37,"line_end":37,"column_start":2,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182473,"byte_end":182481,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"name":"pad_left","qualname":"::nibble::nibble_ops::pad_left","value":"pub fn pad_left(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping left nibble.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping left nibble.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182408,"byte_end":182445,"line_start":40,"line_end":40,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182447,"byte_end":182464,"line_start":41,"line_end":41,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1717},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182589,"byte_end":182598,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"name":"pad_right","qualname":"::nibble::nibble_ops::pad_right","value":"pub fn pad_right(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping right byte.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping right byte.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182525,"byte_end":182561,"line_start":46,"line_end":46,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182563,"byte_end":182580,"line_start":47,"line_end":47,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1718},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182720,"byte_end":182727,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"name":"at_left","qualname":"::nibble::nibble_ops::at_left","value":"pub fn at_left(u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index of a byte.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index of a byte.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182641,"byte_end":182692,"line_start":52,"line_end":52,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182694,"byte_end":182711,"line_start":53,"line_end":53,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1719},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182925,"byte_end":182939,"line_start":64,"line_end":64,"column_start":9,"column_end":23},"name":"left_nibble_at","qualname":"::nibble::nibble_ops::left_nibble_at","value":"pub fn left_nibble_at(&[u8], usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a left aligned array.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a left aligned array.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182832,"byte_end":182897,"line_start":62,"line_end":62,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":182899,"byte_end":182916,"line_start":63,"line_end":63,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183129,"byte_end":183131,"line_start":70,"line_end":70,"column_start":9,"column_end":11},"name":"at","qualname":"::nibble::nibble_ops::at","value":"pub fn at(&NibbleSlice, usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a `NibbleSlice`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183041,"byte_end":183101,"line_start":68,"line_end":68,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183103,"byte_end":183120,"line_start":69,"line_end":69,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183388,"byte_end":183400,"line_start":78,"line_end":78,"column_start":9,"column_end":21},"name":"push_at_left","qualname":"::nibble::nibble_ops::push_at_left","value":"pub fn push_at_left(u8, u8, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Push u8 nibble value at a given index into an existing byte.\n","sig":null,"attributes":[{"value":"/ Push u8 nibble value at a given index into an existing byte.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183296,"byte_end":183360,"line_start":76,"line_end":76,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183362,"byte_end":183379,"line_start":77,"line_end":77,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1722},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183586,"byte_end":183600,"line_start":84,"line_end":84,"column_start":9,"column_end":23},"name":"number_padding","qualname":"::nibble::nibble_ops::number_padding","value":"pub fn number_padding(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of needed padding a array of nibble length `i`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183494,"byte_end":183503,"line_start":82,"line_end":82,"column_start":2,"column_end":11}},{"value":"/ Calculate the number of needed padding a array of nibble length `i`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183505,"byte_end":183577,"line_start":83,"line_end":83,"column_start":2,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":1723},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183779,"byte_end":183791,"line_start":91,"line_end":91,"column_start":12,"column_end":24},"name":"SPLIT_SHIFTS","qualname":"::nibble::nibble_ops::SPLIT_SHIFTS","value":"(usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The nibble shifts needed to align.\n We use two value, one is a left shift and\n the other is a right shift.\n","sig":null,"attributes":[{"value":"/ The nibble shifts needed to align.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183649,"byte_end":183687,"line_start":88,"line_end":88,"column_start":2,"column_end":40}},{"value":"/ We use two value, one is a left shift and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183689,"byte_end":183734,"line_start":89,"line_end":89,"column_start":2,"column_end":47}},{"value":"/ the other is a right shift.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183736,"byte_end":183767,"line_start":90,"line_end":90,"column_start":2,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183909,"byte_end":183922,"line_start":94,"line_end":94,"column_start":9,"column_end":22},"name":"biggest_depth","qualname":"::nibble::nibble_ops::biggest_depth","value":"pub fn biggest_depth(&[u8], &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the biggest common depth between two left aligned packed nibble slice.\n","sig":null,"attributes":[{"value":"/ Count the biggest common depth between two left aligned packed nibble slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":183820,"byte_end":183900,"line_start":93,"line_end":93,"column_start":2,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184263,"byte_end":184274,"line_start":106,"line_end":106,"column_start":9,"column_end":20},"name":"left_common","qualname":"::nibble::nibble_ops::left_common","value":"pub fn left_common(u8, u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of common nibble between two left aligned bytes.\n","sig":null,"attributes":[{"value":"/ Calculate the number of common nibble between two left aligned bytes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184162,"byte_end":184235,"line_start":104,"line_end":104,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184237,"byte_end":184254,"line_start":105,"line_end":105,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184559,"byte_end":184568,"line_start":119,"line_end":119,"column_start":9,"column_end":18},"name":"shift_key","qualname":"::nibble::nibble_ops::shift_key","value":"pub fn shift_key(&mut NodeKey, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shifts right aligned key to add a given left offset.\n Resulting in possibly padding at both left and right\n (example usage when combining two keys).\n","sig":null,"attributes":[{"value":"/ Shifts right aligned key to add a given left offset.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184390,"byte_end":184446,"line_start":116,"line_end":116,"column_start":2,"column_end":58}},{"value":"/ Resulting in possibly padding at both left and right","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184448,"byte_end":184504,"line_start":117,"line_end":117,"column_start":2,"column_end":58}},{"value":"/ (example usage when combining two keys).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":184506,"byte_end":184550,"line_start":118,"line_end":118,"column_start":2,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2566},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185536,"byte_end":185545,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"NibbleVec","qualname":"::nibble::NibbleVec","value":"NibbleVec {  }","parent":null,"children":[{"krate":0,"index":2567},{"krate":0,"index":2568}],"decl_id":null,"docs":" Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.\n Nibbles are always left aligned, so making a `NibbleVec` from\n a `NibbleSlice` can get costy.\n","sig":null,"attributes":[{"value":"/ Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185277,"byte_end":185347,"line_start":147,"line_end":147,"column_start":1,"column_end":71}},{"value":"/ Nibbles are always left aligned, so making a `NibbleVec` from","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185348,"byte_end":185413,"line_start":148,"line_end":148,"column_start":1,"column_end":66}},{"value":"/ a `NibbleSlice` can get costy.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185414,"byte_end":185448,"line_start":149,"line_end":149,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":2578},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186439,"byte_end":186450,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"NibbleSlice","qualname":"::nibble::NibbleSlice","value":"NibbleSlice {  }","parent":null,"children":[{"krate":0,"index":2580},{"krate":0,"index":2581}],"decl_id":null,"docs":" Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","sig":null,"attributes":[{"value":"/ Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185588,"byte_end":185666,"line_start":157,"line_end":157,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185667,"byte_end":185670,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This is an immutable struct. No operations actually change it.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185671,"byte_end":185737,"line_start":159,"line_end":159,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185738,"byte_end":185741,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185742,"byte_end":185755,"line_start":161,"line_end":161,"column_start":1,"column_end":14}},{"value":"/ ```snippet","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185756,"byte_end":185770,"line_start":162,"line_end":162,"column_start":1,"column_end":15}},{"value":"/ use patricia_trie::nibbleslice::NibbleSlice;","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185771,"byte_end":185819,"line_start":163,"line_end":163,"column_start":1,"column_end":49}},{"value":"/ fn main() {","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185820,"byte_end":185835,"line_start":164,"line_end":164,"column_start":1,"column_end":16}},{"value":"/   let d1 = &[0x01u8, 0x23, 0x45];","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185836,"byte_end":185873,"line_start":165,"line_end":165,"column_start":1,"column_end":38}},{"value":"/   let d2 = &[0x34u8, 0x50, 0x12];","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185874,"byte_end":185911,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/   let d3 = &[0x00u8, 0x12];","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185912,"byte_end":185943,"line_start":167,"line_end":167,"column_start":1,"column_end":32}},{"value":"/   let n1 = NibbleSlice::new(d1);\t\t\t// 0,1,2,3,4,5","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185944,"byte_end":185997,"line_start":168,"line_end":168,"column_start":1,"column_end":54}},{"value":"/   let n2 = NibbleSlice::new(d2);\t\t\t// 3,4,5,0,1,2","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":185998,"byte_end":186051,"line_start":169,"line_end":169,"column_start":1,"column_end":54}},{"value":"/   let n3 = NibbleSlice::new_offset(d3, 1);\t// 0,1,2","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186052,"byte_end":186107,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/   assert!(n1 > n3);\t\t\t\t\t\t\t// 0,1,2,... > 0,1,2","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186108,"byte_end":186158,"line_start":171,"line_end":171,"column_start":1,"column_end":51}},{"value":"/   assert!(n1 < n2);\t\t\t\t\t\t\t// 0,... < 3,...","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186159,"byte_end":186205,"line_start":172,"line_end":172,"column_start":1,"column_end":47}},{"value":"/   assert!(n2.mid(3) == n3);\t\t\t\t\t// 0,1,2 == 0,1,2","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186206,"byte_end":186259,"line_start":173,"line_end":173,"column_start":1,"column_end":54}},{"value":"/   assert!(n1.starts_with(&n3));","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186260,"byte_end":186295,"line_start":174,"line_end":174,"column_start":1,"column_end":36}},{"value":"/   assert_eq!(n1.common_prefix(&n3), 3);","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186296,"byte_end":186339,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"/   assert_eq!(n2.mid(3).common_prefix(&n1), 3);","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186340,"byte_end":186390,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186391,"byte_end":186396,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186397,"byte_end":186404,"line_start":178,"line_end":178,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186542,"byte_end":186561,"line_start":186,"line_end":186,"column_start":12,"column_end":31},"name":"NibbleSliceIterator","qualname":"::nibble::NibbleSliceIterator","value":"NibbleSliceIterator {  }","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734}],"decl_id":null,"docs":" Iterator type for a nibble slice.\n","sig":null,"attributes":[{"value":"/ Iterator type for a nibble slice.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/mod.rs","byte_start":186493,"byte_end":186530,"line_start":185,"line_end":185,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214022,"byte_end":214029,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Partial","qualname":"::node_codec::Partial","value":"((u8, u8), &'a [u8])","parent":null,"children":[],"decl_id":null,"docs":" Representation of a nible slice (right aligned).\n It contains a right aligned padded first byte (first pair element is the number of nibbles\n (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over\n the remaining bytes.\n","sig":null,"attributes":[{"value":"/ Representation of a nible slice (right aligned).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":213750,"byte_end":213802,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ It contains a right aligned padded first byte (first pair element is the number of nibbles","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":213803,"byte_end":213897,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":213898,"byte_end":213987,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ the remaining bytes.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":213988,"byte_end":214012,"line_start":28,"line_end":28,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":1768},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214202,"byte_end":214211,"line_start":34,"line_end":34,"column_start":11,"column_end":20},"name":"NodeCodec","qualname":"::node_codec::NodeCodec","value":"NodeCodec: Sized","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1784}],"decl_id":null,"docs":" Trait for trie node encoding/decoding.\n Uses a type parameter to allow registering\n positions without colling decode plan.\n","sig":null,"attributes":[{"value":"/ Trait for trie node encoding/decoding.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214059,"byte_end":214101,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ Uses a type parameter to allow registering","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214102,"byte_end":214148,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/ positions without colling decode plan.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214149,"byte_end":214191,"line_start":33,"line_end":33,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214356,"byte_end":214369,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"ESCAPE_HEADER","qualname":"::node_codec::NodeCodec::ESCAPE_HEADER","value":"Option<u8>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Escape header byte sequence to indicate next node is a\n branch or leaf with hash of value, followed by the value node.\n","sig":null,"attributes":[{"value":"/ Escape header byte sequence to indicate next node is a","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214222,"byte_end":214280,"line_start":35,"line_end":35,"column_start":2,"column_end":60}},{"value":"/ branch or leaf with hash of value, followed by the value node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214282,"byte_end":214348,"line_start":36,"line_end":36,"column_start":2,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":1770},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214420,"byte_end":214425,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Error","qualname":"::node_codec::NodeCodec::Error","value":"type Error: Error;","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Codec error type.\n","sig":null,"attributes":[{"value":"/ Codec error type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214392,"byte_end":214413,"line_start":39,"line_end":39,"column_start":2,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1771},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214482,"byte_end":214489,"line_start":43,"line_end":43,"column_start":7,"column_end":14},"name":"HashOut","qualname":"::node_codec::NodeCodec::HashOut","value":"type HashOut: AsRef<[u8]>\n\t\t+ AsMut<[u8]>\n\t\t+ Default\n\t\t+ MaybeDebug\n\t\t+ PartialEq\n\t\t+ Eq\n\t\t+ hash::Hash\n\t\t+ Send\n\t\t+ Sync\n\t\t+ Clone\n\t\t+ Copy;","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Output type of encoded node hasher.\n","sig":null,"attributes":[{"value":"/ Output type of encoded node hasher.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214436,"byte_end":214475,"line_start":42,"line_end":42,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214656,"byte_end":214672,"line_start":56,"line_end":56,"column_start":5,"column_end":21},"name":"hashed_null_node","qualname":"::node_codec::NodeCodec::hashed_null_node","value":"pub fn hashed_null_node() -> Self::HashOut","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Get the hashed null node.\n","sig":null,"attributes":[{"value":"/ Get the hashed null node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214622,"byte_end":214651,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214763,"byte_end":214774,"line_start":59,"line_end":59,"column_start":5,"column_end":16},"name":"decode_plan","qualname":"::node_codec::NodeCodec::decode_plan","value":"pub fn decode_plan(&[u8]) -> Result<NodePlan, Self::Error>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Decode bytes to a `NodePlan`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `NodePlan`. Returns `Self::E` on failure.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214695,"byte_end":214758,"line_start":58,"line_end":58,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214888,"byte_end":214894,"line_start":62,"line_end":62,"column_start":5,"column_end":11},"name":"decode","qualname":"::node_codec::NodeCodec::decode","value":"pub fn decode<'a>(&'a [u8]) -> Result<Node, Self::Error>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Decode bytes to a `Node`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `Node`. Returns `Self::E` on failure.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214824,"byte_end":214883,"line_start":61,"line_end":61,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215073,"byte_end":215086,"line_start":67,"line_end":67,"column_start":5,"column_end":18},"name":"is_empty_node","qualname":"::node_codec::NodeCodec::is_empty_node","value":"pub fn is_empty_node(&[u8]) -> bool","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Check if the provided bytes correspond to the codecs \"empty\" node.\n","sig":null,"attributes":[{"value":"/ Check if the provided bytes correspond to the codecs \"empty\" node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214998,"byte_end":215068,"line_start":66,"line_end":66,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215150,"byte_end":215160,"line_start":70,"line_end":70,"column_start":5,"column_end":15},"name":"empty_node","qualname":"::node_codec::NodeCodec::empty_node","value":"pub fn empty_node() -> &'static [u8]","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns an encoded empty node.\n","sig":null,"attributes":[{"value":"/ Returns an encoded empty node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215111,"byte_end":215145,"line_start":69,"line_end":69,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215220,"byte_end":215229,"line_start":73,"line_end":73,"column_start":5,"column_end":14},"name":"leaf_node","qualname":"::node_codec::NodeCodec::leaf_node","value":"pub fn leaf_node(Partial, Value) -> Vec<u8>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns an encoded leaf node\n","sig":null,"attributes":[{"value":"/ Returns an encoded leaf node","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215183,"byte_end":215215,"line_start":72,"line_end":72,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215506,"byte_end":215520,"line_start":79,"line_end":79,"column_start":5,"column_end":19},"name":"extension_node","qualname":"::node_codec::NodeCodec::extension_node","value":"pub fn extension_node<impl Iterator<Item = u8>: Iterator<Item =\nu8>>(impl Iterator<Item = u8>, usize, ChildReference<Self::HashOut>)\n-> Vec<u8>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns an encoded extension node\n Note that number_nibble is the number of element of the iterator\n it can possibly be obtain by `Iterator` `size_hint`, but\n for simplicity it is used directly as a parameter.\n","sig":null,"attributes":[{"value":"/ Returns an encoded extension node","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215276,"byte_end":215313,"line_start":75,"line_end":75,"column_start":2,"column_end":39}},{"value":"/ Note that number_nibble is the number of element of the iterator","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215315,"byte_end":215383,"line_start":76,"line_end":76,"column_start":2,"column_end":70}},{"value":"/ it can possibly be obtain by `Iterator` `size_hint`, but","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215385,"byte_end":215445,"line_start":77,"line_end":77,"column_start":2,"column_end":62}},{"value":"/ for simplicity it is used directly as a parameter.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215447,"byte_end":215501,"line_start":78,"line_end":78,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215771,"byte_end":215782,"line_start":87,"line_end":87,"column_start":5,"column_end":16},"name":"branch_node","qualname":"::node_codec::NodeCodec::branch_node","value":"pub fn branch_node<impl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\nimpl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n=\nimpl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\nOption<Value>) -> Vec<u8>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns an encoded branch node.\n Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215644,"byte_end":215679,"line_start":85,"line_end":85,"column_start":2,"column_end":37}},{"value":"/ Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215681,"byte_end":215766,"line_start":86,"line_end":86,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":216052,"byte_end":216071,"line_start":94,"line_end":94,"column_start":5,"column_end":24},"name":"branch_node_nibbled","qualname":"::node_codec::NodeCodec::branch_node_nibbled","value":"pub fn branch_node_nibbled<impl Iterator<Item = u8>: Iterator<Item = u8>,\nimpl Borrow<Option<ChildReference<Self::HashOut>>>: Borrow<Option<ChildReference<Self::HashOut>>>,\nimpl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>: Iterator<Item\n=\nimpl Borrow<Option<ChildReference<Self::HashOut>>>>>(impl Iterator<Item = u8>,\nusize,\nimpl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>,\nOption<Value>) -> Vec<u8>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns an encoded branch node with a possible partial path.\n `number_nibble` is the partial path length as in `extension_node`.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node with a possible partial path.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215911,"byte_end":215975,"line_start":92,"line_end":92,"column_start":2,"column_end":66}},{"value":"/ `number_nibble` is the partial path length as in `extension_node`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":215977,"byte_end":216047,"line_start":93,"line_end":93,"column_start":2,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1896},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":224213,"byte_end":224227,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"encode_compact","qualname":"::trie_codec::encode_compact","value":"pub fn encode_compact<L>(&TrieDB<, L>)\n-> Result<Vec<Vec<u8>>, TrieHash<L>, CError<L>> where L: TrieLayout","parent":null,"children":[],"decl_id":null,"docs":" Generates a compact representation of the partial trie stored in the given DB. The encoding\n is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes\n are listed in pre-order traversal order so that the full nodes can be efficiently\n reconstructed recursively.","sig":null,"attributes":[{"value":"/ Generates a compact representation of the partial trie stored in the given DB. The encoding","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":223776,"byte_end":223871,"line_start":200,"line_end":200,"column_start":1,"column_end":96}},{"value":"/ is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":223872,"byte_end":223969,"line_start":201,"line_end":201,"column_start":1,"column_end":98}},{"value":"/ are listed in pre-order traversal order so that the full nodes can be efficiently","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":223970,"byte_end":224055,"line_start":202,"line_end":202,"column_start":1,"column_end":86}},{"value":"/ reconstructed recursively.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":224056,"byte_end":224086,"line_start":203,"line_end":203,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":224087,"byte_end":224090,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":224091,"byte_end":224189,"line_start":205,"line_end":205,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":224190,"byte_end":224205,"line_start":206,"line_end":206,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1916},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232793,"byte_end":232807,"line_start":436,"line_end":436,"column_start":8,"column_end":22},"name":"decode_compact","qualname":"::trie_codec::decode_compact","value":"pub fn decode_compact<L, DB>(&mut DB, &[Vec<u8>])\n-> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>> where L: TrieLayout,\nDB: HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Reconstructs a partial trie DB from a compact representation. The encoding is a vector of\n mutated trie nodes with those child references omitted. The decode function reads them in order\n from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.\n It stops after fully constructing one partial trie and returns the root hash and the number of\n nodes read. If an error occurs during decoding, there are no guarantees about which entries\n were or were not added to the DB.","sig":null,"attributes":[{"value":"/ Reconstructs a partial trie DB from a compact representation. The encoding is a vector of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":231947,"byte_end":232040,"line_start":424,"line_end":424,"column_start":1,"column_end":94}},{"value":"/ mutated trie nodes with those child references omitted. The decode function reads them in order","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232041,"byte_end":232140,"line_start":425,"line_end":425,"column_start":1,"column_end":100}},{"value":"/ from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232141,"byte_end":232240,"line_start":426,"line_end":426,"column_start":1,"column_end":100}},{"value":"/ It stops after fully constructing one partial trie and returns the root hash and the number of","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232241,"byte_end":232339,"line_start":427,"line_end":427,"column_start":1,"column_end":99}},{"value":"/ nodes read. If an error occurs during decoding, there are no guarantees about which entries","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232340,"byte_end":232435,"line_start":428,"line_end":428,"column_start":1,"column_end":96}},{"value":"/ were or were not added to the DB.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232436,"byte_end":232473,"line_start":429,"line_end":429,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232474,"byte_end":232477,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ The number of nodes read may be fewer than the total number of items in `encoded`. This allows","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232478,"byte_end":232576,"line_start":431,"line_end":431,"column_start":1,"column_end":99}},{"value":"/ one to concatenate multiple compact encodings together and still reconstruct them all.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232577,"byte_end":232667,"line_start":432,"line_end":432,"column_start":1,"column_end":91}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232671,"byte_end":232769,"line_start":434,"line_end":434,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":232770,"byte_end":232785,"line_start":435,"line_end":435,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1919},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":233135,"byte_end":233159,"line_start":448,"line_end":448,"column_start":8,"column_end":32},"name":"decode_compact_from_iter","qualname":"::trie_codec::decode_compact_from_iter","value":"pub fn decode_compact_from_iter<'a, L, DB, I>(&mut DB, I)\n-> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>> where L: TrieLayout,\nDB: HashDB<L::Hash, DBValue>, I: IntoIterator<Item = &'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Variant of 'decode_compact' that accept an iterator of encoded nodes as input.\n","sig":null,"attributes":[{"value":"/ Variant of 'decode_compact' that accept an iterator of encoded nodes as input.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":233045,"byte_end":233127,"line_start":447,"line_end":447,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":2034},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2209,"byte_end":2216,"line_start":83,"line_end":83,"column_start":10,"column_end":17},"name":"DBValue","qualname":"::DBValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Database value\n","sig":null,"attributes":[{"value":"/ Database value","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2181,"byte_end":2199,"line_start":82,"line_end":82,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2590},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2476,"byte_end":2492,"line_start":92,"line_end":92,"column_start":2,"column_end":18},"name":"InvalidStateRoot","qualname":"::TrieError::InvalidStateRoot","value":"TrieError::InvalidStateRoot(T)","parent":{"krate":0,"index":2587},"children":[],"decl_id":null,"docs":" Attempted to create a trie with a state root not in the DB.\n","sig":null,"attributes":[{"value":"/ Attempted to create a trie with a state root not in the DB.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2411,"byte_end":2474,"line_start":91,"line_end":91,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2593},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2540,"byte_end":2558,"line_start":94,"line_end":94,"column_start":2,"column_end":20},"name":"IncompleteDatabase","qualname":"::TrieError::IncompleteDatabase","value":"TrieError::IncompleteDatabase(T)","parent":{"krate":0,"index":2587},"children":[],"decl_id":null,"docs":" Trie item not found in the database,\n","sig":null,"attributes":[{"value":"/ Trie item not found in the database,","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2498,"byte_end":2538,"line_start":93,"line_end":93,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2763,"byte_end":2783,"line_start":98,"line_end":98,"column_start":2,"column_end":22},"name":"ValueAtIncompleteKey","qualname":"::TrieError::ValueAtIncompleteKey","value":"TrieError::ValueAtIncompleteKey(Vec<u8>, u8)","parent":{"krate":0,"index":2587},"children":[],"decl_id":null,"docs":" A value was found in the trie with a nibble key that was not byte-aligned.\n The first parameter is the byte-aligned part of the prefix and the second parameter is the\n remaining nibble.\n","sig":null,"attributes":[{"value":"/ A value was found in the trie with a nibble key that was not byte-aligned.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2564,"byte_end":2642,"line_start":95,"line_end":95,"column_start":2,"column_end":80}},{"value":"/ The first parameter is the byte-aligned part of the prefix and the second parameter is the","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2644,"byte_end":2738,"line_start":96,"line_end":96,"column_start":2,"column_end":96}},{"value":"/ remaining nibble.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2740,"byte_end":2761,"line_start":97,"line_end":97,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2600},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2823,"byte_end":2835,"line_start":100,"line_end":100,"column_start":2,"column_end":14},"name":"DecoderError","qualname":"::TrieError::DecoderError","value":"TrieError::DecoderError(T, E)","parent":{"krate":0,"index":2587},"children":[],"decl_id":null,"docs":" Corrupt Trie item.\n","sig":null,"attributes":[{"value":"/ Corrupt Trie item.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2799,"byte_end":2821,"line_start":99,"line_end":99,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2604},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2868,"byte_end":2879,"line_start":102,"line_end":102,"column_start":2,"column_end":13},"name":"InvalidHash","qualname":"::TrieError::InvalidHash","value":"TrieError::InvalidHash(T, Vec<u8>)","parent":{"krate":0,"index":2587},"children":[],"decl_id":null,"docs":" Hash is not value.\n","sig":null,"attributes":[{"value":"/ Hash is not value.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2844,"byte_end":2866,"line_start":101,"line_end":101,"column_start":2,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":2587},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2392,"byte_end":2401,"line_start":90,"line_end":90,"column_start":10,"column_end":19},"name":"TrieError","qualname":"::TrieError","value":"pub enum TrieError<T, E> {\n    InvalidStateRoot(T),\n    IncompleteDatabase(T),\n    ValueAtIncompleteKey(Vec<u8>, u8),\n    DecoderError(T, E),\n    InvalidHash(T, Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2600},{"krate":0,"index":2604}],"decl_id":null,"docs":" Trie Errors.","sig":null,"attributes":[{"value":"/ Trie Errors.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2229,"byte_end":2245,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2246,"byte_end":2249,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ These borrow the data within them to avoid excessive copying on every","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2250,"byte_end":2323,"line_start":87,"line_end":87,"column_start":1,"column_end":74}},{"value":"/ trie operation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2324,"byte_end":2343,"line_start":88,"line_end":88,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":2042},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":3962,"byte_end":3968,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"crate::rstd::result::Result<T, Box<TrieError<H, E>>>","parent":null,"children":[],"decl_id":null,"docs":" Trie result type.\n Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.\n","sig":null,"attributes":[{"value":"/ Trie result type.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":3838,"byte_end":3859,"line_start":139,"line_end":139,"column_start":1,"column_end":22}},{"value":"/ Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":3860,"byte_end":3952,"line_start":140,"line_end":140,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":2046},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4098,"byte_end":4106,"line_start":144,"line_end":144,"column_start":10,"column_end":18},"name":"TrieItem","qualname":"::TrieItem","value":"Result<(Vec<u8>, DBValue), U, E>","parent":null,"children":[],"decl_id":null,"docs":" Trie-Item type used for iterators over trie data.\n","sig":null,"attributes":[{"value":"/ Trie-Item type used for iterators over trie data.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4035,"byte_end":4088,"line_start":143,"line_end":143,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":2050},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4221,"byte_end":4232,"line_start":147,"line_end":147,"column_start":10,"column_end":21},"name":"TrieKeyItem","qualname":"::TrieKeyItem","value":"Result<Vec<u8>, U, E>","parent":null,"children":[],"decl_id":null,"docs":" Trie-Item type used for iterators over trie key only.\n","sig":null,"attributes":[{"value":"/ Trie-Item type used for iterators over trie key only.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4154,"byte_end":4211,"line_start":146,"line_end":146,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4554,"byte_end":4559,"line_start":154,"line_end":154,"column_start":11,"column_end":16},"name":"Query","qualname":"::Query","value":"Query<H: Hasher>","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058}],"decl_id":null,"docs":" Description of what kind of query will be made to the trie.","sig":null,"attributes":[{"value":"/ Description of what kind of query will be made to the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4269,"byte_end":4332,"line_start":149,"line_end":149,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4333,"byte_end":4336,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ This is implemented for any &mut recorder (where the query will return","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4337,"byte_end":4411,"line_start":151,"line_end":151,"column_start":1,"column_end":75}},{"value":"/ a DBValue), any function taking raw bytes (where no recording will be made),","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4412,"byte_end":4492,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ or any tuple of (&mut Recorder, FnOnce(&[u8]))","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4493,"byte_end":4543,"line_start":153,"line_end":153,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2056},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4597,"byte_end":4601,"line_start":156,"line_end":156,"column_start":7,"column_end":11},"name":"Item","qualname":"::Query::Item","value":"type Item;","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Output item.\n","sig":null,"attributes":[{"value":"/ Output item.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4574,"byte_end":4590,"line_start":155,"line_end":155,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4656,"byte_end":4662,"line_start":159,"line_end":159,"column_start":5,"column_end":11},"name":"decode","qualname":"::Query::decode","value":"pub fn decode(Self, &[u8]) -> Self::Item","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Decode a byte-slice into the desired item.\n","sig":null,"attributes":[{"value":"/ Decode a byte-slice into the desired item.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4605,"byte_end":4651,"line_start":158,"line_end":158,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4751,"byte_end":4757,"line_start":162,"line_end":162,"column_start":5,"column_end":11},"name":"record","qualname":"::Query::record","value":"pub fn record(&mut Self, &H::Out, &[u8], u32)","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Record that a node has been passed through.\n","sig":null,"attributes":[{"value":"/ Record that a node has been passed through.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":4699,"byte_end":4746,"line_start":161,"line_end":161,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":2080},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5605,"byte_end":5609,"line_start":199,"line_end":199,"column_start":11,"column_end":15},"name":"Trie","qualname":"::Trie","value":"Trie<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2090},{"krate":0,"index":2094},{"krate":0,"index":2096}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5514,"byte_end":5594,"line_start":198,"line_end":198,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5665,"byte_end":5669,"line_start":201,"line_end":201,"column_start":5,"column_end":9},"name":"root","qualname":"::Trie::root","value":"pub fn root(&Self) -> &TrieHash<L>","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5628,"byte_end":5660,"line_start":200,"line_end":200,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5723,"byte_end":5731,"line_start":204,"line_end":204,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::Trie::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5696,"byte_end":5718,"line_start":203,"line_end":203,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5844,"byte_end":5852,"line_start":209,"line_end":209,"column_start":5,"column_end":13},"name":"contains","qualname":"::Trie::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5801,"byte_end":5839,"line_start":208,"line_end":208,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6013,"byte_end":6016,"line_start":214,"line_end":214,"column_start":5,"column_end":8},"name":"get","qualname":"::Trie::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5956,"byte_end":6008,"line_start":213,"line_end":213,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6292,"byte_end":6300,"line_start":223,"line_end":223,"column_start":5,"column_end":13},"name":"get_with","qualname":"::Trie::get_with","value":"pub fn get_with<'a, 'key, Q: Query<L::Hash>>(&'a Self, &'key [u8], Q)\n-> Result<Option<Q::Item>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Search for the key with the given query parameter. See the docs of the `Query`\n trait for more details.\n","sig":null,"attributes":[{"value":"/ Search for the key with the given query parameter. See the docs of the `Query`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6176,"byte_end":6258,"line_start":221,"line_end":221,"column_start":2,"column_end":84}},{"value":"/ trait for more details.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6260,"byte_end":6287,"line_start":222,"line_end":222,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6515,"byte_end":6519,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"iter","qualname":"::Trie::iter","value":"pub fn iter<'a>(&'a Self)\n->\n    Result<Box<dyn TrieIterator<L, Item =\n    TrieItem<, TrieHash<L>, CError<L>>> + 'a>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Returns a depth-first iterator over the elements of trie.\n","sig":null,"attributes":[{"value":"/ Returns a depth-first iterator over the elements of trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6449,"byte_end":6510,"line_start":231,"line_end":231,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6732,"byte_end":6740,"line_start":241,"line_end":241,"column_start":5,"column_end":13},"name":"key_iter","qualname":"::Trie::key_iter","value":"pub fn key_iter<'a>(&'a Self)\n->\n    Result<Box<dyn TrieIterator<L, Item =\n    TrieKeyItem<, TrieHash<L>, CError<L>>> + 'a>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2080},"children":[],"decl_id":null,"docs":" Returns a depth-first iterator over the keys of elemets of trie.\n","sig":null,"attributes":[{"value":"/ Returns a depth-first iterator over the keys of elemets of trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6659,"byte_end":6727,"line_start":240,"line_end":240,"column_start":2,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6975,"byte_end":6982,"line_start":251,"line_end":251,"column_start":11,"column_end":18},"name":"TrieMut","qualname":"::TrieMut","value":"TrieMut<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2108}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":6884,"byte_end":6964,"line_start":250,"line_end":250,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2100},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7038,"byte_end":7042,"line_start":253,"line_end":253,"column_start":5,"column_end":9},"name":"root","qualname":"::TrieMut::root","value":"pub fn root(&mut Self) -> &TrieHash<L>","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7001,"byte_end":7033,"line_start":252,"line_end":252,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7100,"byte_end":7108,"line_start":256,"line_end":256,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::TrieMut::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7073,"byte_end":7095,"line_start":255,"line_end":255,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7170,"byte_end":7178,"line_start":259,"line_end":259,"column_start":5,"column_end":13},"name":"contains","qualname":"::TrieMut::contains","value":"pub fn contains(&Self, &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7127,"byte_end":7165,"line_start":258,"line_end":258,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7339,"byte_end":7342,"line_start":264,"line_end":264,"column_start":5,"column_end":8},"name":"get","qualname":"::TrieMut::get","value":"pub fn get<'a, 'key>(&'a Self, &'key [u8])\n-> Result<Option<DBValue>, TrieHash<L>, CError<L>> where 'a:'key","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7282,"byte_end":7334,"line_start":263,"line_end":263,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7633,"byte_end":7639,"line_start":270,"line_end":270,"column_start":5,"column_end":11},"name":"insert","qualname":"::TrieMut::insert","value":"pub fn insert(&mut Self, &[u8], &[u8])\n-> Result<Option<Value<L>>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing\n `key` from the trie. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7452,"byte_end":7539,"line_start":268,"line_end":268,"column_start":2,"column_end":89}},{"value":"/ `key` from the trie. Returns the old value associated with this key, if it existed.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7541,"byte_end":7628,"line_start":269,"line_end":269,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7898,"byte_end":7904,"line_start":278,"line_end":278,"column_start":5,"column_end":11},"name":"remove","qualname":"::TrieMut::remove","value":"pub fn remove(&mut Self, &[u8])\n-> Result<Option<Value<L>>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2098},"children":[],"decl_id":null,"docs":" Remove a `key` from the trie. Equivalent to making it equal to the empty\n value. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Remove a `key` from the trie. Equivalent to making it equal to the empty","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7742,"byte_end":7818,"line_start":276,"line_end":276,"column_start":2,"column_end":78}},{"value":"/ value. Returns the old value associated with this key, if it existed.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7820,"byte_end":7893,"line_start":277,"line_end":277,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":2109},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8059,"byte_end":8071,"line_start":282,"line_end":282,"column_start":11,"column_end":23},"name":"TrieIterator","qualname":"::TrieIterator","value":"TrieIterator<L: TrieLayout>: Iterator","parent":null,"children":[{"krate":0,"index":2111}],"decl_id":null,"docs":" A trie iterator that also supports random access (`seek()`).\n","sig":null,"attributes":[{"value":"/ A trie iterator that also supports random access (`seek()`).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":7984,"byte_end":8048,"line_start":281,"line_end":281,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8169,"byte_end":8173,"line_start":284,"line_end":284,"column_start":5,"column_end":9},"name":"seek","qualname":"::TrieIterator::seek","value":"pub fn seek(&mut Self, &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":{"krate":0,"index":2109},"children":[],"decl_id":null,"docs":" Position the iterator on the first element with key >= `key`\n","sig":null,"attributes":[{"value":"/ Position the iterator on the first element with key >= `key`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8100,"byte_end":8164,"line_start":283,"line_end":283,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8366,"byte_end":8373,"line_start":292,"line_end":292,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieSpec::Generic","value":"TrieSpec::Generic","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":" Generic trie.\n","sig":null,"attributes":[{"value":"/ Generic trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8347,"byte_end":8364,"line_start":291,"line_end":291,"column_start":2,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2639},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8394,"byte_end":8400,"line_start":294,"line_end":294,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieSpec::Secure","value":"TrieSpec::Secure","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":" Secure trie.\n","sig":null,"attributes":[{"value":"/ Secure trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8376,"byte_end":8392,"line_start":293,"line_end":293,"column_start":2,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2641},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8439,"byte_end":8442,"line_start":296,"line_end":296,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieSpec::Fat","value":"TrieSpec::Fat","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"\tSecure trie with fat database.\n","sig":null,"attributes":[{"value":"/\tSecure trie with fat database.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8403,"byte_end":8437,"line_start":295,"line_end":295,"column_start":2,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2636},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8335,"byte_end":8343,"line_start":290,"line_end":290,"column_start":10,"column_end":18},"name":"TrieSpec","qualname":"::TrieSpec","value":"pub enum TrieSpec { Generic, Secure, Fat, }","parent":null,"children":[{"krate":0,"index":2637},{"krate":0,"index":2639},{"krate":0,"index":2641}],"decl_id":null,"docs":" Trie types\n","sig":null,"attributes":[{"value":"/ Trie types","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8239,"byte_end":8253,"line_start":287,"line_end":287,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":2645},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8583,"byte_end":8594,"line_start":307,"line_end":307,"column_start":12,"column_end":23},"name":"TrieFactory","qualname":"::TrieFactory","value":"TrieFactory {  }","parent":null,"children":[{"krate":0,"index":2647},{"krate":0,"index":2648}],"decl_id":null,"docs":" Trie factory.\n","sig":null,"attributes":[{"value":"/ Trie factory.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8528,"byte_end":8545,"line_start":305,"line_end":305,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8814,"byte_end":8821,"line_start":316,"line_end":316,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieKinds::Generic","value":"TrieKinds::Generic(TrieDB)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" A generic trie db.\n","sig":null,"attributes":[{"value":"/ A generic trie db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8790,"byte_end":8812,"line_start":315,"line_end":315,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8863,"byte_end":8869,"line_start":318,"line_end":318,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieKinds::Secure","value":"TrieKinds::Secure(SecTrieDB)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" A secure trie db.\n","sig":null,"attributes":[{"value":"/ A secure trie db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8840,"byte_end":8861,"line_start":317,"line_end":317,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8911,"byte_end":8914,"line_start":320,"line_end":320,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieKinds::Fat","value":"TrieKinds::Fat(FatDB)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" A fat trie db.\n","sig":null,"attributes":[{"value":"/ A fat trie db.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8891,"byte_end":8909,"line_start":319,"line_end":319,"column_start":2,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8757,"byte_end":8766,"line_start":314,"line_end":314,"column_start":10,"column_end":19},"name":"TrieKinds","qualname":"::TrieKinds","value":"pub enum TrieKinds<'db, L: TrieLayout> {\n    Generic(TrieDB),\n    Secure(SecTrieDB),\n    Fat(FatDB),\n}","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2123}],"decl_id":null,"docs":" All different kinds of tries.\n This is used to prevent a heap allocation for every created trie.\n","sig":null,"attributes":[{"value":"/ All different kinds of tries.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8644,"byte_end":8677,"line_start":312,"line_end":312,"column_start":1,"column_end":34}},{"value":"/ This is used to prevent a heap allocation for every created trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8678,"byte_end":8747,"line_start":313,"line_end":313,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10210,"byte_end":10213,"line_start":384,"line_end":384,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieFactory<L>>::new","value":"pub fn new(TrieSpec, L) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new factory.\n","sig":null,"attributes":[{"value":"/ Creates new factory.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10177,"byte_end":10201,"line_start":383,"line_end":383,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10338,"byte_end":10346,"line_start":389,"line_end":389,"column_start":9,"column_end":17},"name":"readonly","qualname":"<TrieFactory<L>>::readonly","value":"pub fn readonly(&Self, &'db dyn HashDBRef<L::Hash, DBValue>, &'db TrieHash<L>)\n-> Result<TrieKinds, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new immutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new immutable instance of Trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10287,"byte_end":10329,"line_start":388,"line_end":388,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10771,"byte_end":10777,"line_start":402,"line_end":402,"column_start":9,"column_end":15},"name":"create","qualname":"<TrieFactory<L>>::create","value":"pub fn create(&Self, &'db mut dyn HashDB<L::Hash, DBValue>,\n&'db mut TrieHash<L>) -> Box<dyn TrieMut<L> + 'db>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of Trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10722,"byte_end":10762,"line_start":401,"line_end":401,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11188,"byte_end":11201,"line_start":415,"line_end":415,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieFactory<L>>::from_existing","value":"pub fn from_existing(&Self, &'db mut dyn HashDB<L::Hash, DBValue>,\n&'db mut TrieHash<L>)\n-> Result<Box<dyn TrieMut<L> + 'db>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of trie and check for errors.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of trie and check for errors.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11118,"byte_end":11179,"line_start":414,"line_end":414,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11702,"byte_end":11708,"line_start":428,"line_end":428,"column_start":9,"column_end":15},"name":"is_fat","qualname":"<TrieFactory<L>>::is_fat","value":"pub fn is_fat(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the trie DB is a fat DB (allows enumeration of keys).\n","sig":null,"attributes":[{"value":"/ Returns true iff the trie DB is a fat DB (allows enumeration of keys).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11619,"byte_end":11693,"line_start":427,"line_end":427,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11899,"byte_end":11909,"line_start":436,"line_end":436,"column_start":11,"column_end":21},"name":"TrieLayout","qualname":"::TrieLayout","value":"TrieLayout","parent":null,"children":[{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154}],"decl_id":null,"docs":" Trait with definition of trie layout.\n Contains all associated trait needed for\n a trie definition or implementation.\n","sig":null,"attributes":[{"value":"/ Trait with definition of trie layout.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11761,"byte_end":11802,"line_start":433,"line_end":433,"column_start":1,"column_end":42}},{"value":"/ Contains all associated trait needed for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11803,"byte_end":11847,"line_start":434,"line_end":434,"column_start":1,"column_end":45}},{"value":"/ a trie definition or implementation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11848,"byte_end":11888,"line_start":435,"line_end":435,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12074,"byte_end":12087,"line_start":440,"line_end":440,"column_start":8,"column_end":21},"name":"USE_EXTENSION","qualname":"::TrieLayout::USE_EXTENSION","value":"bool","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" If true, the trie will use extension nodes and\n no partial in branch, if false the trie will only\n use branch and node with partials in both.\n","sig":null,"attributes":[{"value":"/ If true, the trie will use extension nodes and","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11913,"byte_end":11963,"line_start":437,"line_end":437,"column_start":2,"column_end":52}},{"value":"/ no partial in branch, if false the trie will only","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":11965,"byte_end":12018,"line_start":438,"line_end":438,"column_start":2,"column_end":55}},{"value":"/ use branch and node with partials in both.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12020,"byte_end":12066,"line_start":439,"line_end":439,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12166,"byte_end":12177,"line_start":442,"line_end":442,"column_start":8,"column_end":19},"name":"ALLOW_EMPTY","qualname":"::TrieLayout::ALLOW_EMPTY","value":"bool","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" If true, the trie will allow empty values into `TrieDBMut`\n","sig":null,"attributes":[{"value":"/ If true, the trie will allow empty values into `TrieDBMut`","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12096,"byte_end":12158,"line_start":441,"line_end":441,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12286,"byte_end":12302,"line_start":445,"line_end":445,"column_start":8,"column_end":24},"name":"MAX_INLINE_VALUE","qualname":"::TrieLayout::MAX_INLINE_VALUE","value":"Option<u32>","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Threshold above which an external node should be\n use to store a node value.\n","sig":null,"attributes":[{"value":"/ Threshold above which an external node should be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12194,"byte_end":12246,"line_start":443,"line_end":443,"column_start":2,"column_end":54}},{"value":"/ use to store a node value.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12248,"byte_end":12278,"line_start":444,"line_end":444,"column_start":2,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12358,"byte_end":12362,"line_start":448,"line_end":448,"column_start":7,"column_end":11},"name":"Hash","qualname":"::TrieLayout::Hash","value":"type Hash: Hasher;","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Hasher to use for this trie.\n","sig":null,"attributes":[{"value":"/ Hasher to use for this trie.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12319,"byte_end":12351,"line_start":447,"line_end":447,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":2154},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12436,"byte_end":12441,"line_start":450,"line_end":450,"column_start":7,"column_end":12},"name":"Codec","qualname":"::TrieLayout::Codec","value":"type Codec: NodeCodec<HashOut = <Self::Hash as Hasher>::Out>;","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Codec to use (needs to match hasher and nibble ops).\n","sig":null,"attributes":[{"value":"/ Codec to use (needs to match hasher and nibble ops).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12373,"byte_end":12429,"line_start":449,"line_end":449,"column_start":2,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12678,"byte_end":12695,"line_start":456,"line_end":456,"column_start":11,"column_end":28},"name":"TrieConfiguration","qualname":"::TrieConfiguration","value":"TrieConfiguration: Sized + TrieLayout","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2161},{"krate":0,"index":2165},{"krate":0,"index":2169},{"krate":0,"index":2170}],"decl_id":null,"docs":" This trait associates a trie definition with preferred methods.\n It also contains own default implementations and can be\n used to allow switching implementation.\n","sig":null,"attributes":[{"value":"/ This trait associates a trie definition with preferred methods.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12496,"byte_end":12563,"line_start":453,"line_end":453,"column_start":1,"column_end":68}},{"value":"/ It also contains own default implementations and can be","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12564,"byte_end":12623,"line_start":454,"line_end":454,"column_start":1,"column_end":60}},{"value":"/ used to allow switching implementation.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12624,"byte_end":12667,"line_start":455,"line_end":455,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12803,"byte_end":12813,"line_start":458,"line_end":458,"column_start":5,"column_end":15},"name":"trie_build","qualname":"::TrieConfiguration::trie_build","value":"pub fn trie_build<DB, I, A, B>(&mut DB, I) -> <Self::Hash as Hasher>::Out\nwhere DB: HashDB<Self::Hash, DBValue>, I: IntoIterator<Item = (A, B)>,\nA: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" Operation to build a trie db from its ordered iterator over its key/values.\n","sig":null,"attributes":[{"value":"/ Operation to build a trie db from its ordered iterator over its key/values.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12719,"byte_end":12798,"line_start":457,"line_end":457,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13219,"byte_end":13228,"line_start":470,"line_end":470,"column_start":5,"column_end":14},"name":"trie_root","qualname":"::TrieConfiguration::trie_root","value":"pub fn trie_root<I, A, B>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = (A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" Determines a trie root given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root given its ordered contents, closed form.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13147,"byte_end":13214,"line_start":469,"line_end":469,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13589,"byte_end":13607,"line_start":481,"line_end":481,"column_start":5,"column_end":23},"name":"trie_root_unhashed","qualname":"::TrieConfiguration::trie_root_unhashed","value":"pub fn trie_root_unhashed<I, A, B>(I) -> Vec<u8> where I: IntoIterator<Item =\n(A, B)>, A: AsRef<[u8]> + Ord, B: AsRef<[u8]>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" Determines a trie root node's data given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root node's data given its ordered contents, closed form.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13505,"byte_end":13584,"line_start":480,"line_end":480,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13958,"byte_end":13970,"line_start":493,"line_end":493,"column_start":5,"column_end":17},"name":"encode_index","qualname":"::TrieConfiguration::encode_index","value":"pub fn encode_index(u32) -> Vec<u8>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" Encoding of index as a key (when reusing general trie for\n indexed trie).\n","sig":null,"attributes":[{"value":"/ Encoding of index as a key (when reusing general trie for","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13872,"byte_end":13933,"line_start":491,"line_end":491,"column_start":2,"column_end":63}},{"value":"/ indexed trie).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":13935,"byte_end":13953,"line_start":492,"line_end":492,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14195,"byte_end":14212,"line_start":499,"line_end":499,"column_start":5,"column_end":22},"name":"ordered_trie_root","qualname":"::TrieConfiguration::ordered_trie_root","value":"pub fn ordered_trie_root<I, A>(I) -> <Self::Hash as Hasher>::Out where\nI: IntoIterator<Item = A>, A: AsRef<[u8]>","parent":{"krate":0,"index":2155},"children":[],"decl_id":null,"docs":" A trie root formed from the items, with keys attached according to their\n compact-encoded index (using `parity-codec` crate).\n","sig":null,"attributes":[{"value":"/ A trie root formed from the items, with keys attached according to their","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14057,"byte_end":14133,"line_start":497,"line_end":497,"column_start":2,"column_end":78}},{"value":"/ compact-encoded index (using `parity-codec` crate).","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14135,"byte_end":14190,"line_start":498,"line_end":498,"column_start":2,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":2174},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14504,"byte_end":14512,"line_start":511,"line_end":511,"column_start":10,"column_end":18},"name":"TrieHash","qualname":"::TrieHash","value":"<<L as TrieLayout>::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to hasher hash output type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to hasher hash output type from a `TrieLayout`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14428,"byte_end":14494,"line_start":510,"line_end":510,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":2176},"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14648,"byte_end":14654,"line_start":513,"line_end":513,"column_start":10,"column_end":16},"name":"CError","qualname":"::CError","value":"<<L as TrieLayout>::Codec as NodeCodec>::Error","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":14560,"byte_end":14638,"line_start":512,"line_end":512,"column_start":1,"column_end":79}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16484,"byte_end":16489,"line_start":56,"line_end":56,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17913,"byte_end":17927,"line_start":99,"line_end":99,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18757,"byte_end":18772,"line_start":120,"line_end":120,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19773,"byte_end":19782,"line_start":150,"line_end":150,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21338,"byte_end":21346,"line_start":189,"line_end":189,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23678,"byte_end":23687,"line_start":252,"line_end":252,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":28402,"byte_end":28412,"line_start":48,"line_end":48,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46649,"byte_end":46654,"line_start":55,"line_end":55,"column_start":72,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":47807,"byte_end":47812,"line_start":80,"line_end":80,"column_start":82,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":48673,"byte_end":48683,"line_start":106,"line_end":106,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61315,"byte_end":61323,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61393,"byte_end":61401,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63155,"byte_end":63164,"line_start":32,"line_end":32,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63887,"byte_end":63896,"line_start":59,"line_end":59,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65737,"byte_end":65749,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66691,"byte_end":66703,"line_start":61,"line_end":61,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69660,"byte_end":69666,"line_start":61,"line_end":61,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":71861,"byte_end":71867,"line_start":125,"line_end":125,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":72934,"byte_end":72952,"line_start":178,"line_end":178,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":75633,"byte_end":75639,"line_start":274,"line_end":274,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76612,"byte_end":76638,"line_start":310,"line_end":310,"column_start":21,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76844,"byte_end":76858,"line_start":317,"line_end":317,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77847,"byte_end":77861,"line_start":350,"line_end":350,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78082,"byte_end":78099,"line_start":357,"line_end":357,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79371,"byte_end":79388,"line_start":396,"line_end":396,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79622,"byte_end":79636,"line_start":403,"line_end":403,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":81132,"byte_end":81149,"line_start":455,"line_end":455,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":83745,"byte_end":83755,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84641,"byte_end":84646,"line_start":85,"line_end":85,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85173,"byte_end":85178,"line_start":99,"line_end":99,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85516,"byte_end":85521,"line_start":112,"line_end":112,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85897,"byte_end":85902,"line_start":130,"line_end":130,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":88478,"byte_end":88483,"line_start":216,"line_end":216,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":88718,"byte_end":88723,"line_start":227,"line_end":227,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":89167,"byte_end":89171,"line_start":239,"line_end":239,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":89752,"byte_end":89756,"line_start":257,"line_end":257,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":94805,"byte_end":94817,"line_start":427,"line_end":427,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95716,"byte_end":95730,"line_start":460,"line_end":460,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":96597,"byte_end":96608,"line_start":494,"line_end":494,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97348,"byte_end":97359,"line_start":520,"line_end":520,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98990,"byte_end":98999,"line_start":572,"line_end":572,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":136321,"byte_end":136330,"line_start":1717,"line_end":1717,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":138295,"byte_end":138304,"line_start":1794,"line_end":1794,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140636,"byte_end":140641,"line_start":34,"line_end":34,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":141165,"byte_end":141170,"line_start":54,"line_end":54,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1099},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142259,"byte_end":142272,"line_start":107,"line_end":107,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142519,"byte_end":142532,"line_start":117,"line_end":117,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142755,"byte_end":142768,"line_start":127,"line_end":127,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143314,"byte_end":143330,"line_start":155,"line_end":155,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143583,"byte_end":143599,"line_start":165,"line_end":165,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143822,"byte_end":143838,"line_start":175,"line_end":175,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145229,"byte_end":145237,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":146171,"byte_end":146179,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":149349,"byte_end":149359,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158778,"byte_end":158789,"line_start":365,"line_end":365,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158932,"byte_end":158943,"line_start":371,"line_end":371,"column_start":53,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159821,"byte_end":159829,"line_start":407,"line_end":407,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159947,"byte_end":159955,"line_start":413,"line_end":413,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160810,"byte_end":160826,"line_start":446,"line_end":446,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161184,"byte_end":161197,"line_start":462,"line_end":462,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161362,"byte_end":161375,"line_start":469,"line_end":469,"column_start":57,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":162300,"byte_end":162316,"line_start":500,"line_end":500,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":164209,"byte_end":164214,"line_start":42,"line_end":42,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165342,"byte_end":165369,"line_start":74,"line_end":74,"column_start":21,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165593,"byte_end":165611,"line_start":81,"line_end":81,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166788,"byte_end":166806,"line_start":112,"line_end":112,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172327,"byte_end":172345,"line_start":309,"line_end":309,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172506,"byte_end":172524,"line_start":315,"line_end":315,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177607,"byte_end":177613,"line_start":36,"line_end":36,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":187649,"byte_end":187664,"line_start":31,"line_end":31,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":189783,"byte_end":189798,"line_start":94,"line_end":94,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190428,"byte_end":190443,"line_start":120,"line_end":120,"column_start":17,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190476,"byte_end":190491,"line_start":122,"line_end":122,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190604,"byte_end":190619,"line_start":128,"line_end":128,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190746,"byte_end":190761,"line_start":135,"line_end":135,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":193968,"byte_end":193987,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194172,"byte_end":194183,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1640},{"krate":0,"index":1643},{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200107,"byte_end":200118,"line_start":237,"line_end":237,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200216,"byte_end":200227,"line_start":243,"line_end":243,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200346,"byte_end":200357,"line_start":249,"line_end":249,"column_start":17,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200390,"byte_end":200401,"line_start":251,"line_end":251,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200512,"byte_end":200523,"line_start":257,"line_end":257,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200911,"byte_end":200922,"line_start":273,"line_end":273,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205165,"byte_end":205174,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205231,"byte_end":205240,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210992,"byte_end":211001,"line_start":236,"line_end":236,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":218910,"byte_end":218927,"line_start":55,"line_end":55,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1889}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":228297,"byte_end":228314,"line_start":316,"line_end":316,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1909},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2948,"byte_end":2957,"line_start":106,"line_end":106,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":3784,"byte_end":3793,"line_start":132,"line_end":132,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5112,"byte_end":5113,"line_start":175,"line_end":175,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8464,"byte_end":8472,"line_start":299,"line_end":299,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":9296,"byte_end":9305,"line_start":334,"line_end":334,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2137},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10131,"byte_end":10142,"line_start":379,"line_end":379,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1271,"byte_end":1275,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1285,"byte_end":1290,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1300,"byte_end":1308,"line_start":45,"line_end":45,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":406}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1318,"byte_end":1327,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":419}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1337,"byte_end":1349,"line_start":47,"line_end":47,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":488}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1359,"byte_end":1365,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":543}},{"kind":"Mod","span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":1375,"byte_end":1384,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":726}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":16484,"byte_end":16489,"line_start":56,"line_end":56,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":17913,"byte_end":17927,"line_start":99,"line_end":99,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2273},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":18757,"byte_end":18772,"line_start":120,"line_end":120,"column_start":6,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":19773,"byte_end":19782,"line_start":150,"line_end":150,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":21338,"byte_end":21346,"line_start":189,"line_end":189,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node.rs","byte_start":23678,"byte_end":23687,"line_start":252,"line_end":252,"column_start":23,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/generate.rs","byte_start":28402,"byte_end":28412,"line_start":48,"line_end":48,"column_start":24,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":46649,"byte_end":46654,"line_start":55,"line_end":55,"column_start":72,"column_end":77},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2388},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":47807,"byte_end":47812,"line_start":80,"line_end":80,"column_start":82,"column_end":87},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2388},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/proof/verify.rs","byte_start":48673,"byte_end":48683,"line_start":106,"line_end":106,"column_start":25,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61315,"byte_end":61323,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2442},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/recorder.rs","byte_start":61393,"byte_end":61401,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63155,"byte_end":63164,"line_start":32,"line_end":32,"column_start":14,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedb.rs","byte_start":63887,"byte_end":63896,"line_start":59,"line_end":59,"column_start":26,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":465},"to":{"krate":0,"index":2080}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":65737,"byte_end":65749,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/sectriedbmut.rs","byte_start":66691,"byte_end":66703,"line_start":61,"line_end":61,"column_start":29,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":521},"to":{"krate":0,"index":2098}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":69660,"byte_end":69666,"line_start":61,"line_end":61,"column_start":14,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":71861,"byte_end":71867,"line_start":125,"line_end":125,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":627},"to":{"krate":0,"index":2080}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":72934,"byte_end":72952,"line_start":178,"line_end":178,"column_start":33,"column_end":51},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":657},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":75633,"byte_end":75639,"line_start":274,"line_end":274,"column_start":29,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":627},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76612,"byte_end":76638,"line_start":310,"line_end":310,"column_start":21,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":76844,"byte_end":76858,"line_start":317,"line_end":317,"column_start":25,"column_end":39},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":77847,"byte_end":77861,"line_start":350,"line_end":350,"column_start":45,"column_end":59},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":680},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":78082,"byte_end":78099,"line_start":357,"line_end":357,"column_start":25,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79371,"byte_end":79388,"line_start":396,"line_end":396,"column_start":45,"column_end":62},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":684},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":79622,"byte_end":79636,"line_start":403,"line_end":403,"column_start":38,"column_end":52},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":680},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedb.rs","byte_start":81132,"byte_end":81149,"line_start":455,"line_end":455,"column_start":38,"column_end":55},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":83745,"byte_end":83755,"line_start":55,"line_end":55,"column_start":33,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2454},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":84641,"byte_end":84646,"line_start":85,"line_end":85,"column_start":41,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2465},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85173,"byte_end":85178,"line_start":99,"line_end":99,"column_start":52,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2465},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85516,"byte_end":85521,"line_start":112,"line_end":112,"column_start":54,"column_end":59},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2465},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":85897,"byte_end":85902,"line_start":130,"line_end":130,"column_start":21,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":88478,"byte_end":88483,"line_start":216,"line_end":216,"column_start":20,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":891},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":88718,"byte_end":88723,"line_start":227,"line_end":227,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2465},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":89167,"byte_end":89171,"line_start":239,"line_end":239,"column_start":31,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":868},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":89752,"byte_end":89756,"line_start":257,"line_end":257,"column_start":21,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":94805,"byte_end":94817,"line_start":427,"line_end":427,"column_start":21,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":95716,"byte_end":95730,"line_start":460,"line_end":460,"column_start":49,"column_end":63},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2491},"to":{"krate":2,"index":2937}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":96597,"byte_end":96608,"line_start":494,"line_end":494,"column_start":21,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":97348,"byte_end":97359,"line_start":520,"line_end":520,"column_start":54,"column_end":65},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":958},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":98990,"byte_end":98999,"line_start":572,"line_end":572,"column_start":13,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":136321,"byte_end":136330,"line_start":1717,"line_end":1717,"column_start":28,"column_end":37},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":972},"to":{"krate":0,"index":2098}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/triedbmut.rs","byte_start":138295,"byte_end":138304,"line_start":1794,"line_end":1794,"column_start":22,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":972},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":140636,"byte_end":140641,"line_start":34,"line_end":34,"column_start":14,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1081},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":141165,"byte_end":141170,"line_start":54,"line_end":54,"column_start":26,"column_end":31},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1081},"to":{"krate":0,"index":2080}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142259,"byte_end":142272,"line_start":107,"line_end":107,"column_start":14,"column_end":27},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142519,"byte_end":142532,"line_start":117,"line_end":117,"column_start":34,"column_end":47},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1105},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":142755,"byte_end":142768,"line_start":127,"line_end":127,"column_start":27,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1105},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143314,"byte_end":143330,"line_start":155,"line_end":155,"column_start":14,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143583,"byte_end":143599,"line_start":165,"line_end":165,"column_start":34,"column_end":50},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1125},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdb.rs","byte_start":143822,"byte_end":143838,"line_start":175,"line_end":175,"column_start":27,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":145229,"byte_end":145237,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/fatdbmut.rs","byte_start":146171,"byte_end":146179,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1181},"to":{"krate":0,"index":2098}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":149349,"byte_end":149359,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158778,"byte_end":158789,"line_start":365,"line_end":365,"column_start":29,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":158932,"byte_end":158943,"line_start":371,"line_end":371,"column_start":53,"column_end":64},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1296},"to":{"krate":0,"index":1292}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159821,"byte_end":159829,"line_start":407,"line_end":407,"column_start":33,"column_end":41},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1313},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":159947,"byte_end":159955,"line_start":413,"line_end":413,"column_start":57,"column_end":65},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1313},"to":{"krate":0,"index":1292}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":160810,"byte_end":160826,"line_start":446,"line_end":446,"column_start":33,"column_end":49},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1323},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161184,"byte_end":161197,"line_start":462,"line_end":462,"column_start":33,"column_end":46},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":161362,"byte_end":161375,"line_start":469,"line_end":469,"column_start":57,"column_end":70},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1330},"to":{"krate":0,"index":1292}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iter_build.rs","byte_start":162300,"byte_end":162316,"line_start":500,"line_end":500,"column_start":57,"column_end":73},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1323},"to":{"krate":0,"index":1292}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":164209,"byte_end":164214,"line_start":42,"line_end":42,"column_start":17,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165342,"byte_end":165369,"line_start":74,"line_end":74,"column_start":21,"column_end":48},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":165593,"byte_end":165611,"line_start":81,"line_end":81,"column_start":25,"column_end":43},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":166788,"byte_end":166806,"line_start":112,"line_end":112,"column_start":25,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172327,"byte_end":172345,"line_start":309,"line_end":309,"column_start":45,"column_end":63},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1412},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/iterator.rs","byte_start":172506,"byte_end":172524,"line_start":315,"line_end":315,"column_start":38,"column_end":56},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lookup.rs","byte_start":177607,"byte_end":177613,"line_start":36,"line_end":36,"column_start":16,"column_end":22},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":187649,"byte_end":187664,"line_start":31,"line_end":31,"column_start":10,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":189783,"byte_end":189798,"line_start":94,"line_end":94,"column_start":24,"column_end":39},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190428,"byte_end":190443,"line_start":120,"line_end":120,"column_start":17,"column_end":32},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190476,"byte_end":190491,"line_start":122,"line_end":122,"column_start":25,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190604,"byte_end":190619,"line_start":128,"line_end":128,"column_start":18,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/leftnibbleslice.rs","byte_start":190746,"byte_end":190761,"line_start":135,"line_end":135,"column_start":30,"column_end":45},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":193968,"byte_end":193987,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1731},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":194172,"byte_end":194183,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200107,"byte_end":200118,"line_start":237,"line_end":237,"column_start":28,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":2927}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200216,"byte_end":200227,"line_start":243,"line_end":243,"column_start":24,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200346,"byte_end":200357,"line_start":249,"line_end":249,"column_start":17,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200390,"byte_end":200401,"line_start":251,"line_end":251,"column_start":25,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200512,"byte_end":200523,"line_start":257,"line_end":257,"column_start":18,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":2711}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibbleslice.rs","byte_start":200911,"byte_end":200922,"line_start":273,"line_end":273,"column_start":25,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2578},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205165,"byte_end":205174,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2566},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":205231,"byte_end":205240,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/nibble/nibblevec.rs","byte_start":210992,"byte_end":211001,"line_start":236,"line_end":236,"column_start":36,"column_end":45},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2566},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/node_codec.rs","byte_start":214213,"byte_end":214218,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":218910,"byte_end":218927,"line_start":55,"line_end":55,"column_start":20,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/trie_codec.rs","byte_start":228297,"byte_end":228314,"line_start":316,"line_end":316,"column_start":24,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1898},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":2948,"byte_end":2957,"line_start":106,"line_end":106,"column_start":29,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2587},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":3784,"byte_end":3793,"line_start":132,"line_end":132,"column_start":22,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2587},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":5112,"byte_end":5113,"line_start":175,"line_end":175,"column_start":36,"column_end":37},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2066},"to":{"krate":0,"index":2054}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8088,"byte_end":8096,"line_start":282,"line_end":282,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":7914},"to":{"krate":0,"index":2109}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":8464,"byte_end":8472,"line_start":299,"line_end":299,"column_start":18,"column_end":26},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2636},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":9296,"byte_end":9305,"line_start":334,"line_end":334,"column_start":38,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2114},"to":{"krate":0,"index":2080}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":10131,"byte_end":10142,"line_start":379,"line_end":379,"column_start":14,"column_end":25},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12697,"byte_end":12702,"line_start":456,"line_end":456,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":2155}},{"span":{"file_name":"/Users/myunghacho/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-db-0.23.1/src/lib.rs","byte_start":12705,"byte_end":12715,"line_start":456,"line_end":456,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":2149},"to":{"krate":0,"index":2155}}]}